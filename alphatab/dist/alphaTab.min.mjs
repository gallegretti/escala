import*as e from"./alphaTab.core.min.mjs";export*from"./alphaTab.core.min.mjs";e.Environment.isRunningInWorker?e.Environment.initializeWorker():e.Environment.isRunningInAudioWorklet?e.Environment.initializeAudioWorklet():e.Environment.initializeMain((r=>{if(e.Environment.webPlatform==e.WebPlatform.NodeJs)throw new e.AlphaTabError(e.AlphaTabErrorType.General,"Workers not yet supported in Node.js");if(e.Environment.webPlatform==e.WebPlatform.BrowserModule||e.Environment.isWebPackBundled||e.Environment.isViteBundled)return e.Logger.debug("AlphaTab","Creating webworker"),new e.Environment.alphaTabWorker(new URL("./alphaTab.worker.min.mjs",import.meta.url),{type:"module"});if(!r.core.scriptFile)throw new e.AlphaTabError(e.AlphaTabErrorType.General,"Could not detect alphaTab script file, cannot initialize renderer");try{e.Logger.debug("AlphaTab","Creating Blob worker");const n=`importScripts('${r.core.scriptFile}')`,o=new Blob([n]);return new Worker(URL.createObjectURL(o))}catch(n){return e.Logger.warning("Rendering","Could not create inline worker, fallback to normal worker"),new Worker(r.core.scriptFile)}}),((r,n)=>{if(e.Environment.webPlatform==e.WebPlatform.NodeJs)throw new e.AlphaTabError(e.AlphaTabErrorType.General,"Audio Worklets not yet supported in Node.js");if(e.Environment.webPlatform==e.WebPlatform.BrowserModule||e.Environment.isWebPackBundled||e.Environment.isViteBundled){e.Logger.debug("AlphaTab","Creating Module worklet");return r.audioWorklet.addModule(new URL("./alphaTab.worklet.min.mjs",import.meta.url))}return e.Logger.debug("AlphaTab","Creating Script worklet"),r.audioWorklet.addModule(n.core.scriptFile)}));
//# sourceMappingURL=alphaTab.min.mjs.map
