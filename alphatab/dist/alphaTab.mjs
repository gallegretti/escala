/**
 * alphaTab v1.2.3 (, build 7)
 * 
 * Copyright Â© 2022, Daniel Kuschny and Contributors, All rights reserved.
 * 
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * SoundFont loading and Audio Synthesis based on TinySoundFont (licensed under MIT)
 * Copyright (C) 2017, 2018 Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
 * 
 * TinySoundFont is based on SFZero (licensed under MIT)
 * Copyright (C) 2012 Steve Folta (https://github.com/stevefolta/SFZero)
 */

/**
 * Lists all layout modes that are supported.
 */
var LayoutMode;
(function (LayoutMode) {
    /**
     * Bars are aligned in rows using a fixed width.
     */
    LayoutMode[LayoutMode["Page"] = 0] = "Page";
    /**
     * Bars are aligned horizontally in one row
     */
    LayoutMode[LayoutMode["Horizontal"] = 1] = "Horizontal";
})(LayoutMode || (LayoutMode = {}));

/**
 * Lists all stave profiles controlling which staves are shown.
 */
var StaveProfile;
(function (StaveProfile) {
    /**
     * The profile is auto detected by the track configurations.
     */
    StaveProfile[StaveProfile["Default"] = 0] = "Default";
    /**
     * Standard music notation and guitar tablature are rendered.
     */
    StaveProfile[StaveProfile["ScoreTab"] = 1] = "ScoreTab";
    /**
     * Only standard music notation is rendered.
     */
    StaveProfile[StaveProfile["Score"] = 2] = "Score";
    /**
     * Only guitar tablature is rendered.
     */
    StaveProfile[StaveProfile["Tab"] = 3] = "Tab";
    /**
     * Only guitar tablature is rendered, but also rests and time signatures are not shown.
     * This profile is typically used in multi-track scenarios.
     */
    StaveProfile[StaveProfile["TabMixed"] = 4] = "TabMixed";
})(StaveProfile || (StaveProfile = {}));

/**
 * This public class provides names for all general midi instruments.
 */
class GeneralMidi {
    static getValue(name) {
        if (!GeneralMidi._values) {
            GeneralMidi._values = new Map();
        }
        name = name.toLowerCase().split(' ').join('');
        return GeneralMidi._values.has(name) ? GeneralMidi._values.get(name) : 0;
    }
    static isPiano(program) {
        return program <= 7 || program >= 16 && program <= 23;
    }
    static isGuitar(program) {
        return program >= 24 && program <= 39 || program === 105 || program === 43;
    }
}
GeneralMidi._values = new Map([
    ['acousticgrandpiano', 0], ['brightacousticpiano', 1], ['electricgrandpiano', 2],
    ['honkytonkpiano', 3], ['electricpiano1', 4], ['electricpiano2', 5], ['harpsichord', 6],
    ['clavinet', 7], ['celesta', 8], ['glockenspiel', 9], ['musicbox', 10], ['vibraphone', 11],
    ['marimba', 12], ['xylophone', 13], ['tubularbells', 14], ['dulcimer', 15],
    ['drawbarorgan', 16], ['percussiveorgan', 17], ['rockorgan', 18], ['churchorgan', 19],
    ['reedorgan', 20], ['accordion', 21], ['harmonica', 22], ['tangoaccordion', 23],
    ['acousticguitarnylon', 24], ['acousticguitarsteel', 25], ['electricguitarjazz', 26],
    ['electricguitarclean', 27], ['electricguitarmuted', 28], ['overdrivenguitar', 29],
    ['distortionguitar', 30], ['guitarharmonics', 31], ['acousticbass', 32],
    ['electricbassfinger', 33], ['electricbasspick', 34], ['fretlessbass', 35],
    ['slapbass1', 36], ['slapbass2', 37], ['synthbass1', 38], ['synthbass2', 39],
    ['violin', 40], ['viola', 41], ['cello', 42], ['contrabass', 43], ['tremolostrings', 44],
    ['pizzicatostrings', 45], ['orchestralharp', 46], ['timpani', 47], ['stringensemble1', 48],
    ['stringensemble2', 49], ['synthstrings1', 50], ['synthstrings2', 51], ['choiraahs', 52],
    ['voiceoohs', 53], ['synthvoice', 54], ['orchestrahit', 55], ['trumpet', 56],
    ['trombone', 57], ['tuba', 58], ['mutedtrumpet', 59], ['frenchhorn', 60],
    ['brasssection', 61], ['synthbrass1', 62], ['synthbrass2', 63], ['sopranosax', 64],
    ['altosax', 65], ['tenorsax', 66], ['baritonesax', 67], ['oboe', 68], ['englishhorn', 69],
    ['bassoon', 70], ['clarinet', 71], ['piccolo', 72], ['flute', 73], ['recorder', 74],
    ['panflute', 75], ['blownbottle', 76], ['shakuhachi', 77], ['whistle', 78], ['ocarina', 79],
    ['lead1square', 80], ['lead2sawtooth', 81], ['lead3calliope', 82], ['lead4chiff', 83],
    ['lead5charang', 84], ['lead6voice', 85], ['lead7fifths', 86], ['lead8bassandlead', 87],
    ['pad1newage', 88], ['pad2warm', 89], ['pad3polysynth', 90], ['pad4choir', 91],
    ['pad5bowed', 92], ['pad6metallic', 93], ['pad7halo', 94], ['pad8sweep', 95],
    ['fx1rain', 96], ['fx2soundtrack', 97], ['fx3crystal', 98], ['fx4atmosphere', 99],
    ['fx5brightness', 100], ['fx6goblins', 101], ['fx7echoes', 102], ['fx8scifi', 103],
    ['sitar', 104], ['banjo', 105], ['shamisen', 106], ['koto', 107], ['kalimba', 108],
    ['bagpipe', 109], ['fiddle', 110], ['shanai', 111], ['tinklebell', 112], ['agogo', 113],
    ['steeldrums', 114], ['woodblock', 115], ['taikodrum', 116], ['melodictom', 117],
    ['synthdrum', 118], ['reversecymbal', 119], ['guitarfretnoise', 120], ['breathnoise', 121],
    ['seashore', 122], ['birdtweet', 123], ['telephonering', 124], ['helicopter', 125],
    ['applause', 126], ['gunshot', 127]
]);

/**
 * This is the base public class for creating new song importers which
 * enable reading scores from any binary datasource
 */
class ScoreImporter {
    /**
     * Initializes the importer with the given data and settings.
     */
    init(data, settings) {
        this.data = data;
        this.settings = settings;
    }
}

var AlphaTabErrorType;
(function (AlphaTabErrorType) {
    AlphaTabErrorType[AlphaTabErrorType["General"] = 0] = "General";
    AlphaTabErrorType[AlphaTabErrorType["Format"] = 1] = "Format";
    AlphaTabErrorType[AlphaTabErrorType["AlphaTex"] = 2] = "AlphaTex";
})(AlphaTabErrorType || (AlphaTabErrorType = {}));
class AlphaTabError extends Error {
    constructor(type, message = "", inner) {
        super(message !== null && message !== void 0 ? message : "");
        this.type = type;
        this.inner = inner !== null && inner !== void 0 ? inner : null;
        Object.setPrototypeOf(this, AlphaTabError.prototype);
    }
}

/**
 * The exception thrown by a {@link ScoreImporter} in case the
 * binary data does not contain a reader compatible structure.
 */
class UnsupportedFormatError extends AlphaTabError {
    constructor(message = null, inner = null) {
        super(AlphaTabErrorType.Format, message !== null && message !== void 0 ? message : 'Unsupported format');
        this.inner = inner;
        Object.setPrototypeOf(this, UnsupportedFormatError.prototype);
    }
}

/**
 * Lists all types of note acceuntations
 */
var AccentuationType;
(function (AccentuationType) {
    /**
     * No accentuation
     */
    AccentuationType[AccentuationType["None"] = 0] = "None";
    /**
     * Normal accentuation
     */
    AccentuationType[AccentuationType["Normal"] = 1] = "Normal";
    /**
     * Heavy accentuation
     */
    AccentuationType[AccentuationType["Heavy"] = 2] = "Heavy";
})(AccentuationType || (AccentuationType = {}));

/**
 * This public enumeration lists all types of automations.
 */
var AutomationType;
(function (AutomationType) {
    /**
     * Tempo change.
     */
    AutomationType[AutomationType["Tempo"] = 0] = "Tempo";
    /**
     * Colume change.
     */
    AutomationType[AutomationType["Volume"] = 1] = "Volume";
    /**
     * Instrument change.
     */
    AutomationType[AutomationType["Instrument"] = 2] = "Instrument";
    /**
     * Balance change.
     */
    AutomationType[AutomationType["Balance"] = 3] = "Balance";
})(AutomationType || (AutomationType = {}));
/**
 * Automations are used to change the behaviour of a song.
 * @cloneable
 * @json
 * @json_strict
 */
class Automation {
    constructor() {
        /**
         * Gets or sets whether the automation is applied linear.
         */
        this.isLinear = false;
        /**
         * Gets or sets the type of the automation.
         */
        this.type = AutomationType.Tempo;
        /**
         * Gets or sets the target value of the automation.
         */
        this.value = 0;
        /**
         * Gets or sets the relative position of of the automation.
         */
        this.ratioPosition = 0;
        /**
         * Gets or sets the additional text of the automation.
         */
        this.text = '';
    }
    static buildTempoAutomation(isLinear, ratioPosition, value, reference) {
        if (reference < 1 || reference > 5) {
            reference = 2;
        }
        let references = new Float32Array([1, 0.5, 1.0, 1.5, 2.0, 3.0]);
        let automation = new Automation();
        automation.type = AutomationType.Tempo;
        automation.isLinear = isLinear;
        automation.ratioPosition = ratioPosition;
        automation.value = value * references[reference];
        return automation;
    }
    static buildInstrumentAutomation(isLinear, ratioPosition, value) {
        let automation = new Automation();
        automation.type = AutomationType.Instrument;
        automation.isLinear = isLinear;
        automation.ratioPosition = ratioPosition;
        automation.value = value;
        return automation;
    }
}

/**
 * This public enumeration lists all supported Clefs.
 */
var Clef;
(function (Clef) {
    /**
     * Neutral clef.
     */
    Clef[Clef["Neutral"] = 0] = "Neutral";
    /**
     * C3 clef
     */
    Clef[Clef["C3"] = 1] = "C3";
    /**
     * C4 clef
     */
    Clef[Clef["C4"] = 2] = "C4";
    /**
     * F4 clef
     */
    Clef[Clef["F4"] = 3] = "F4";
    /**
     * G2 clef
     */
    Clef[Clef["G2"] = 4] = "G2";
})(Clef || (Clef = {}));

/**
 * Lists all ottavia.
 */
var Ottavia;
(function (Ottavia) {
    /**
     * 2 octaves higher
     */
    Ottavia[Ottavia["_15ma"] = 0] = "_15ma";
    /**
     * 1 octave higher
     */
    Ottavia[Ottavia["_8va"] = 1] = "_8va";
    /**
     * Normal
     */
    Ottavia[Ottavia["Regular"] = 2] = "Regular";
    /**
     * 1 octave lower
     */
    Ottavia[Ottavia["_8vb"] = 3] = "_8vb";
    /**
     * 2 octaves lower.
     */
    Ottavia[Ottavia["_15mb"] = 4] = "_15mb";
})(Ottavia || (Ottavia = {}));

/**
 * Lists all simile mark types as they are assigned to bars.
 */
var SimileMark;
(function (SimileMark) {
    /**
     * No simile mark is applied
     */
    SimileMark[SimileMark["None"] = 0] = "None";
    /**
     * A simple simile mark. The previous bar is repeated.
     */
    SimileMark[SimileMark["Simple"] = 1] = "Simple";
    /**
     * A double simile mark. This value is assigned to the first
     * bar of the 2 repeat bars.
     */
    SimileMark[SimileMark["FirstOfDouble"] = 2] = "FirstOfDouble";
    /**
     * A double simile mark. This value is assigned to the second
     * bar of the 2 repeat bars.
     */
    SimileMark[SimileMark["SecondOfDouble"] = 3] = "SecondOfDouble";
})(SimileMark || (SimileMark = {}));

/**
 * A bar is a single block within a track, also known as Measure.
 * @json
 * @json_strict
 */
class Bar {
    constructor() {
        /**
         * Gets or sets the unique id of this bar.
         */
        this.id = Bar._globalBarId++;
        /**
         * Gets or sets the zero-based index of this bar within the staff.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the next bar that comes after this bar.
         * @json_ignore
         */
        this.nextBar = null;
        /**
         * Gets or sets the previous bar that comes before this bar.
         * @json_ignore
         */
        this.previousBar = null;
        /**
         * Gets or sets the clef on this bar.
         */
        this.clef = Clef.G2;
        /**
         * Gets or sets the ottava applied to the clef.
         */
        this.clefOttava = Ottavia.Regular;
        /**
         * Gets or sets the list of voices contained in this bar.
         * @json_add addVoice
         */
        this.voices = [];
        /**
         * Gets or sets the simile mark on this bar.
         */
        this.simileMark = SimileMark.None;
        /**
         * Gets a value indicating whether this bar contains multiple voices with notes.
         * @json_ignore
         */
        this.isMultiVoice = false;
    }
    get masterBar() {
        return this.staff.track.score.masterBars[this.index];
    }
    get isEmpty() {
        for (let i = 0, j = this.voices.length; i < j; i++) {
            if (!this.voices[i].isEmpty) {
                return false;
            }
        }
        return true;
    }
    addVoice(voice) {
        voice.bar = this;
        voice.index = this.voices.length;
        this.voices.push(voice);
    }
    finish(settings, sharedDataBag = null) {
        this.isMultiVoice = false;
        for (let i = 0, j = this.voices.length; i < j; i++) {
            let voice = this.voices[i];
            voice.finish(settings, sharedDataBag);
            if (i > 0 && !voice.isEmpty) {
                this.isMultiVoice = true;
            }
        }
    }
    calculateDuration() {
        let duration = 0;
        for (let voice of this.voices) {
            let voiceDuration = voice.calculateDuration();
            if (voiceDuration > duration) {
                duration = voiceDuration;
            }
        }
        return duration;
    }
}
Bar._globalBarId = 0;

class MidiUtils {
    /**
     * Converts the given midi tick duration into milliseconds.
     * @param ticks The duration in midi ticks
     * @param tempo The current tempo in BPM.
     * @returns The converted duration in milliseconds.
     */
    static ticksToMillis(ticks, tempo) {
        return (ticks * (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
    }
    /**
     * Converts the given midi tick duration into milliseconds.
     * @param millis The duration in milliseconds
     * @param tempo The current tempo in BPM.
     * @returns The converted duration in midi ticks.
     */
    static millisToTicks(millis, tempo) {
        return (millis / (60000.0 / (tempo * MidiUtils.QuarterTime))) | 0;
    }
    /**
     * Converts a duration value to its ticks equivalent.
     */
    static toTicks(duration) {
        return MidiUtils.valueToTicks(duration);
    }
    /**
     * Converts a numerical value to its ticks equivalent.
     * @param duration the numerical proportion to convert. (i.E. timesignature denominator, note duration,...)
     */
    static valueToTicks(duration) {
        let denomninator = duration;
        if (denomninator < 0) {
            denomninator = 1 / -denomninator;
        }
        return (MidiUtils.QuarterTime * (4.0 / denomninator)) | 0;
    }
    static applyDot(ticks, doubleDotted) {
        if (doubleDotted) {
            return ticks + ((ticks / 4) | 0) * 3;
        }
        return ticks + ((ticks / 2) | 0);
    }
    static applyTuplet(ticks, numerator, denominator) {
        return ((ticks * denominator) / numerator) | 0;
    }
    static removeTuplet(ticks, numerator, denominator) {
        return ((ticks * numerator) / denominator) | 0;
    }
    static dynamicToVelocity(dyn) {
        return MidiUtils.MinVelocity + dyn * MidiUtils.VelocityIncrement;
    }
}
MidiUtils.QuarterTime = 960;
MidiUtils.MinVelocity = 15;
MidiUtils.VelocityIncrement = 16;

/**
 * A single point of a bending graph. Used to
 * describe WhammyBar and String Bending effects.
 * @cloneable
 * @json
 * @json_strict
 */
class BendPoint {
    /**
     * Initializes a new instance of the {@link BendPoint} class.
     * @param offset The offset.
     * @param value The value.
     */
    constructor(offset = 0, value = 0) {
        this.offset = offset;
        this.value = value;
    }
}
BendPoint.MaxPosition = 60;
BendPoint.MaxValue = 12;

/**
 * Lists the different bend styles
 */
var BendStyle;
(function (BendStyle) {
    /**
     * The bends are as described by the bend points
     */
    BendStyle[BendStyle["Default"] = 0] = "Default";
    /**
     * The bends are gradual over the beat duration.
     */
    BendStyle[BendStyle["Gradual"] = 1] = "Gradual";
    /**
     * The bends are done fast before the next note.
     */
    BendStyle[BendStyle["Fast"] = 2] = "Fast";
})(BendStyle || (BendStyle = {}));

/**
 * Lists all types of bends
 */
var BendType;
(function (BendType) {
    /**
     * No bend at all
     */
    BendType[BendType["None"] = 0] = "None";
    /**
     * Individual points define the bends in a flexible manner.
     * This system was mainly used in Guitar Pro 3-5
     */
    BendType[BendType["Custom"] = 1] = "Custom";
    /**
     * Simple Bend from an unbended string to a higher note.
     */
    BendType[BendType["Bend"] = 2] = "Bend";
    /**
     * Release of a bend that was started on an earlier note.
     */
    BendType[BendType["Release"] = 3] = "Release";
    /**
     * A bend that starts from an unbended string,
     * and also releases the bend after some time.
     */
    BendType[BendType["BendRelease"] = 4] = "BendRelease";
    /**
     * Holds a bend that was started on an earlier note
     */
    BendType[BendType["Hold"] = 5] = "Hold";
    /**
     * A bend that is already started before the note is played then it is held until the end.
     */
    BendType[BendType["Prebend"] = 6] = "Prebend";
    /**
     * A bend that is already started before the note is played and
     * bends even further, then it is held until the end.
     */
    BendType[BendType["PrebendBend"] = 7] = "PrebendBend";
    /**
     * A bend that is already started before the note is played and
     * then releases the bend to a lower note where it is held until the end.
     */
    BendType[BendType["PrebendRelease"] = 8] = "PrebendRelease";
})(BendType || (BendType = {}));

/**
 * Lists all types of how to brush multiple notes on a beat.
 */
var BrushType;
(function (BrushType) {
    /**
     * No brush.
     */
    BrushType[BrushType["None"] = 0] = "None";
    /**
     * Normal brush up.
     */
    BrushType[BrushType["BrushUp"] = 1] = "BrushUp";
    /**
     * Normal brush down.
     */
    BrushType[BrushType["BrushDown"] = 2] = "BrushDown";
    /**
     * Arpeggio up.
     */
    BrushType[BrushType["ArpeggioUp"] = 3] = "ArpeggioUp";
    /**
     * Arpeggio down.
     */
    BrushType[BrushType["ArpeggioDown"] = 4] = "ArpeggioDown";
})(BrushType || (BrushType = {}));

/**
 * Lists all Crescendo and Decrescendo types.
 */
var CrescendoType;
(function (CrescendoType) {
    /**
     * No crescendo applied.
     */
    CrescendoType[CrescendoType["None"] = 0] = "None";
    /**
     * Normal crescendo applied.
     */
    CrescendoType[CrescendoType["Crescendo"] = 1] = "Crescendo";
    /**
     * Normal decrescendo applied.
     */
    CrescendoType[CrescendoType["Decrescendo"] = 2] = "Decrescendo";
})(CrescendoType || (CrescendoType = {}));

/**
 * Lists all durations of a beat.
 */
var Duration;
(function (Duration) {
    /**
     * A quadruple whole note duration
     */
    Duration[Duration["QuadrupleWhole"] = -4] = "QuadrupleWhole";
    /**
     * A double whole note duration
     */
    Duration[Duration["DoubleWhole"] = -2] = "DoubleWhole";
    /**
     * A whole note duration
     */
    Duration[Duration["Whole"] = 1] = "Whole";
    /**
     * A 1/2 note duration
     */
    Duration[Duration["Half"] = 2] = "Half";
    /**
     * A 1/4 note duration
     */
    Duration[Duration["Quarter"] = 4] = "Quarter";
    /**
     * A 1/8 note duration
     */
    Duration[Duration["Eighth"] = 8] = "Eighth";
    /**
     * A 1/16 note duration
     */
    Duration[Duration["Sixteenth"] = 16] = "Sixteenth";
    /**
     * A 1/32 note duration
     */
    Duration[Duration["ThirtySecond"] = 32] = "ThirtySecond";
    /**
     * A 1/64 note duration
     */
    Duration[Duration["SixtyFourth"] = 64] = "SixtyFourth";
    /**
     * A 1/128 note duration
     */
    Duration[Duration["OneHundredTwentyEighth"] = 128] = "OneHundredTwentyEighth";
    /**
     * A 1/256 note duration
     */
    Duration[Duration["TwoHundredFiftySixth"] = 256] = "TwoHundredFiftySixth";
})(Duration || (Duration = {}));

/**
 * Lists all dynamics.
 */
var DynamicValue;
(function (DynamicValue) {
    /**
     * pianississimo (very very soft)
     */
    DynamicValue[DynamicValue["PPP"] = 0] = "PPP";
    /**
     * pianissimo (very soft)
     */
    DynamicValue[DynamicValue["PP"] = 1] = "PP";
    /**
     * piano (soft)
     */
    DynamicValue[DynamicValue["P"] = 2] = "P";
    /**
     * mezzo-piano (half soft)
     */
    DynamicValue[DynamicValue["MP"] = 3] = "MP";
    /**
     * mezzo-forte (half loud)
     */
    DynamicValue[DynamicValue["MF"] = 4] = "MF";
    /**
     * forte (loud)
     */
    DynamicValue[DynamicValue["F"] = 5] = "F";
    /**
     * fortissimo (very loud)
     */
    DynamicValue[DynamicValue["FF"] = 6] = "FF";
    /**
     * fortississimo (very very loud)
     */
    DynamicValue[DynamicValue["FFF"] = 7] = "FFF";
})(DynamicValue || (DynamicValue = {}));

/**
 * Lists all types of grace notes
 */
var GraceType;
(function (GraceType) {
    /**
     * No grace, normal beat.
     */
    GraceType[GraceType["None"] = 0] = "None";
    /**
     * The beat contains on-beat grace notes.
     */
    GraceType[GraceType["OnBeat"] = 1] = "OnBeat";
    /**
     * The beat contains before-beat grace notes.
     */
    GraceType[GraceType["BeforeBeat"] = 2] = "BeforeBeat";
    /**
     * The beat contains very special bend-grace notes used in SongBook style displays.
     */
    GraceType[GraceType["BendGrace"] = 3] = "BendGrace";
})(GraceType || (GraceType = {}));

/**
 * Lists all fingers.
 */
var Fingers;
(function (Fingers) {
    /**
     * Unknown type (not documented)
     */
    Fingers[Fingers["Unknown"] = -2] = "Unknown";
    /**
     * No finger, dead note
     */
    Fingers[Fingers["NoOrDead"] = -1] = "NoOrDead";
    /**
     * The thumb
     */
    Fingers[Fingers["Thumb"] = 0] = "Thumb";
    /**
     * The index finger
     */
    Fingers[Fingers["IndexFinger"] = 1] = "IndexFinger";
    /**
     * The middle finger
     */
    Fingers[Fingers["MiddleFinger"] = 2] = "MiddleFinger";
    /**
     * The annular finger
     */
    Fingers[Fingers["AnnularFinger"] = 3] = "AnnularFinger";
    /**
     * The little finger
     */
    Fingers[Fingers["LittleFinger"] = 4] = "LittleFinger";
})(Fingers || (Fingers = {}));

/**
 * Lists all harmonic types.
 */
var HarmonicType;
(function (HarmonicType) {
    /**
     * No harmonics.
     */
    HarmonicType[HarmonicType["None"] = 0] = "None";
    /**
     * Natural harmonic
     */
    HarmonicType[HarmonicType["Natural"] = 1] = "Natural";
    /**
     * Artificial harmonic
     */
    HarmonicType[HarmonicType["Artificial"] = 2] = "Artificial";
    /**
     * Pinch harmonics
     */
    HarmonicType[HarmonicType["Pinch"] = 3] = "Pinch";
    /**
     * Tap harmonics
     */
    HarmonicType[HarmonicType["Tap"] = 4] = "Tap";
    /**
     * Semi harmonics
     */
    HarmonicType[HarmonicType["Semi"] = 5] = "Semi";
    /**
     * Feedback harmonics
     */
    HarmonicType[HarmonicType["Feedback"] = 6] = "Feedback";
})(HarmonicType || (HarmonicType = {}));

/**
 * Lists the modes how accidentals are handled for notes
 */
var NoteAccidentalMode;
(function (NoteAccidentalMode) {
    /**
     * Accidentals are calculated automatically.
     */
    NoteAccidentalMode[NoteAccidentalMode["Default"] = 0] = "Default";
    /**
     * This will try to ensure that no accidental is shown.
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceNone"] = 1] = "ForceNone";
    /**
     * This will move the note one line down and applies a Naturalize.
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceNatural"] = 2] = "ForceNatural";
    /**
     * This will move the note one line down and applies a Sharp.
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceSharp"] = 3] = "ForceSharp";
    /**
     * This will move the note to be shown 2 half-notes deeper with a double sharp symbol
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceDoubleSharp"] = 4] = "ForceDoubleSharp";
    /**
     * This will move the note one line up and applies a Flat.
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceFlat"] = 5] = "ForceFlat";
    /**
     * This will move the note two half notes up with a double flag symbol.
     */
    NoteAccidentalMode[NoteAccidentalMode["ForceDoubleFlat"] = 6] = "ForceDoubleFlat";
})(NoteAccidentalMode || (NoteAccidentalMode = {}));

/**
 * This public enum lists all different types of finger slide-ins on a string.
 */
var SlideInType;
(function (SlideInType) {
    /**
     * No slide.
     */
    SlideInType[SlideInType["None"] = 0] = "None";
    /**
     * Slide into the note from below on the same string.
     */
    SlideInType[SlideInType["IntoFromBelow"] = 1] = "IntoFromBelow";
    /**
     * Slide into the note from above on the same string.
     */
    SlideInType[SlideInType["IntoFromAbove"] = 2] = "IntoFromAbove";
})(SlideInType || (SlideInType = {}));

/**
 * This public enum lists all different types of finger slide-outs on a string.
 */
var SlideOutType;
(function (SlideOutType) {
    /**
     * No slide.
     */
    SlideOutType[SlideOutType["None"] = 0] = "None";
    /**
     * Shift slide to next note on same string
     */
    SlideOutType[SlideOutType["Shift"] = 1] = "Shift";
    /**
     * Legato slide to next note on same string.
     */
    SlideOutType[SlideOutType["Legato"] = 2] = "Legato";
    /**
     * Slide out from the note from upwards on the same string.
     */
    SlideOutType[SlideOutType["OutUp"] = 3] = "OutUp";
    /**
     * Slide out from the note from downwards on the same string.
     */
    SlideOutType[SlideOutType["OutDown"] = 4] = "OutDown";
    /**
     * Pickslide down on this note
     */
    SlideOutType[SlideOutType["PickSlideDown"] = 5] = "PickSlideDown";
    /**
     * Pickslide up on this note
     */
    SlideOutType[SlideOutType["PickSlideUp"] = 6] = "PickSlideUp";
})(SlideOutType || (SlideOutType = {}));

/**
 * This public enum lists all vibrato types that can be performed.
 */
var VibratoType;
(function (VibratoType) {
    /**
     * No vibrato.
     */
    VibratoType[VibratoType["None"] = 0] = "None";
    /**
     * A slight vibrato.
     */
    VibratoType[VibratoType["Slight"] = 1] = "Slight";
    /**
     * A wide vibrato.
     */
    VibratoType[VibratoType["Wide"] = 2] = "Wide";
})(VibratoType || (VibratoType = {}));

/**
 * Lists the different modes on how rhythm notation is shown on the tab staff.
 */
var TabRhythmMode;
(function (TabRhythmMode) {
    /**
     * Rhythm notation is hidden.
     */
    TabRhythmMode[TabRhythmMode["Hidden"] = 0] = "Hidden";
    /**
     * Rhythm notation is shown with individual beams per beat.
     */
    TabRhythmMode[TabRhythmMode["ShowWithBeams"] = 1] = "ShowWithBeams";
    /**
     * Rhythm notation is shown and behaves like normal score notation with connected bars.
     */
    TabRhythmMode[TabRhythmMode["ShowWithBars"] = 2] = "ShowWithBars";
})(TabRhythmMode || (TabRhythmMode = {}));
/**
 * Lists all modes on how fingerings should be displayed.
 */
var FingeringMode;
(function (FingeringMode) {
    /**
     * Fingerings will be shown in the standard notation staff.
     */
    FingeringMode[FingeringMode["ScoreDefault"] = 0] = "ScoreDefault";
    /**
     * Fingerings will be shown in the standard notation staff. Piano finger style is enforced, where
     * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
     */
    FingeringMode[FingeringMode["ScoreForcePiano"] = 1] = "ScoreForcePiano";
    /**
     * Fingerings will be shown in a effect band above the tabs in case
     * they have only a single note on the beat.
     */
    FingeringMode[FingeringMode["SingleNoteEffectBand"] = 2] = "SingleNoteEffectBand";
    /**
     * Fingerings will be shown in a effect band above the tabs in case
     * they have only a single note on the beat. Piano finger style is enforced, where
     * fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
     */
    FingeringMode[FingeringMode["SingleNoteEffectBandForcePiano"] = 3] = "SingleNoteEffectBandForcePiano";
})(FingeringMode || (FingeringMode = {}));
/**
 * Lists all modes on how alphaTab can handle the display and playback of music notation.
 */
var NotationMode;
(function (NotationMode) {
    /**
     * Music elements will be displayed and played as in Guitar Pro.
     */
    NotationMode[NotationMode["GuitarPro"] = 0] = "GuitarPro";
    /**
     * Music elements will be displayed and played as in traditional songbooks.
     * Changes:
     * 1. Bends
     *   For bends additional grace beats are introduced.
     *   Bends are categorized into gradual and fast bends.
     *   - Gradual bends are indicated by beat text "grad" or "grad.". Bend will sound along the beat duration.
     *   - Fast bends are done right before the next note. If the next note is tied even on-beat of the next note.
     * 2. Whammy Bars
     *   Dips are shown as simple annotation over the beats
     *   Whammy Bars are categorized into gradual and fast.
     *   - Gradual whammys are indicated by beat text "grad" or "grad.". Whammys will sound along the beat duration.
     *   - Fast whammys are done right the beat.
     * 3. Let Ring
     *   Tied notes with let ring are not shown in standard notation
     *   Let ring does not cause a longer playback, duration is defined via tied notes.
     */
    NotationMode[NotationMode["SongBook"] = 1] = "SongBook";
})(NotationMode || (NotationMode = {}));
/**
 * Lists all major music notation elements that are part
 * of the music sheet and can be dynamically controlled to be shown
 * or hidden.
 */
var NotationElement;
(function (NotationElement) {
    /**
     * The score title shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreTitle"] = 0] = "ScoreTitle";
    /**
     * The score subtitle shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreSubTitle"] = 1] = "ScoreSubTitle";
    /**
     * The score artist shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreArtist"] = 2] = "ScoreArtist";
    /**
     * The score album shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreAlbum"] = 3] = "ScoreAlbum";
    /**
     * The score words author shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreWords"] = 4] = "ScoreWords";
    /**
     * The score music author shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreMusic"] = 5] = "ScoreMusic";
    /**
     * The score words&music author shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreWordsAndMusic"] = 6] = "ScoreWordsAndMusic";
    /**
     * The score copyright owner shown at the start of the music sheet.
     */
    NotationElement[NotationElement["ScoreCopyright"] = 7] = "ScoreCopyright";
    /**
     * The tuning information of the guitar shown
     * above the staves.
     */
    NotationElement[NotationElement["GuitarTuning"] = 8] = "GuitarTuning";
    /**
     * The track names which are shown in the accolade.
     */
    NotationElement[NotationElement["TrackNames"] = 9] = "TrackNames";
    /**
     * The chord diagrams for guitars. Usually shown
     * below the score info.
     */
    NotationElement[NotationElement["ChordDiagrams"] = 10] = "ChordDiagrams";
    /**
     * Parenthesis that are shown for tied bends
     * if they are preceeded by bends.
     */
    NotationElement[NotationElement["ParenthesisOnTiedBends"] = 11] = "ParenthesisOnTiedBends";
    /**
     * The tab number for tied notes if the
     * bend of a note is increased at that point.
     */
    NotationElement[NotationElement["TabNotesOnTiedBends"] = 12] = "TabNotesOnTiedBends";
    /**
     * Zero tab numbers on "dive whammys".
     */
    NotationElement[NotationElement["ZerosOnDiveWhammys"] = 13] = "ZerosOnDiveWhammys";
    /**
     * The alternate endings information on repeats shown above the staff.
     */
    NotationElement[NotationElement["EffectAlternateEndings"] = 14] = "EffectAlternateEndings";
    /**
     * The information about the fret on which the capo is placed shown above the staff.
     */
    NotationElement[NotationElement["EffectCapo"] = 15] = "EffectCapo";
    /**
     * The chord names shown above beats shown above the staff.
     */
    NotationElement[NotationElement["EffectChordNames"] = 16] = "EffectChordNames";
    /**
     * The crescendo/decrescendo angle  shown above the staff.
     */
    NotationElement[NotationElement["EffectCrescendo"] = 17] = "EffectCrescendo";
    /**
     * The beat dynamics  shown above the staff.
     */
    NotationElement[NotationElement["EffectDynamics"] = 18] = "EffectDynamics";
    /**
     * The curved angle for fade in/out effects  shown above the staff.
     */
    NotationElement[NotationElement["EffectFadeIn"] = 19] = "EffectFadeIn";
    /**
     * The fermata symbol shown above the staff.
     */
    NotationElement[NotationElement["EffectFermata"] = 20] = "EffectFermata";
    /**
     * The fingering information.
     */
    NotationElement[NotationElement["EffectFingering"] = 21] = "EffectFingering";
    /**
     * The harmonics names shown above the staff.
     * (does not represent the harmonic note heads)
     */
    NotationElement[NotationElement["EffectHarmonics"] = 22] = "EffectHarmonics";
    /**
     * The let ring name and line above the staff.
     */
    NotationElement[NotationElement["EffectLetRing"] = 23] = "EffectLetRing";
    /**
     * The lyrics of the track shown above the staff.
     */
    NotationElement[NotationElement["EffectLyrics"] = 24] = "EffectLyrics";
    /**
     * The section markers shown above the staff.
     */
    NotationElement[NotationElement["EffectMarker"] = 25] = "EffectMarker";
    /**
     * The ottava symbol and lines shown above the staff.
     */
    NotationElement[NotationElement["EffectOttavia"] = 26] = "EffectOttavia";
    /**
     * The palm mute name and line shown above the staff.
     */
    NotationElement[NotationElement["EffectPalmMute"] = 27] = "EffectPalmMute";
    /**
     * The pick slide information shown above the staff.
     * (does not control the pick slide lines)
     */
    NotationElement[NotationElement["EffectPickSlide"] = 28] = "EffectPickSlide";
    /**
     * The pick stroke symbols shown above the staff.
     */
    NotationElement[NotationElement["EffectPickStroke"] = 29] = "EffectPickStroke";
    /**
     * The slight beat vibrato waves shown above the staff.
     */
    NotationElement[NotationElement["EffectSlightBeatVibrato"] = 30] = "EffectSlightBeatVibrato";
    /**
     * The slight note vibrato waves shown above the staff.
     */
    NotationElement[NotationElement["EffectSlightNoteVibrato"] = 31] = "EffectSlightNoteVibrato";
    /**
     * The tap/slap/pop effect names shown above the staff.
     */
    NotationElement[NotationElement["EffectTap"] = 32] = "EffectTap";
    /**
     * The tempo information shown above the staff.
     */
    NotationElement[NotationElement["EffectTempo"] = 33] = "EffectTempo";
    /**
     * The additional beat text shown above the staff.
     */
    NotationElement[NotationElement["EffectText"] = 34] = "EffectText";
    /**
     * The trill name and waves shown above the staff.
     */
    NotationElement[NotationElement["EffectTrill"] = 35] = "EffectTrill";
    /**
     * The triplet feel symbol shown above the staff.
     */
    NotationElement[NotationElement["EffectTripletFeel"] = 36] = "EffectTripletFeel";
    /**
     * The whammy bar information shown above the staff.
     * (does not control the whammy lines shown within the staff)
     */
    NotationElement[NotationElement["EffectWhammyBar"] = 37] = "EffectWhammyBar";
    /**
     * The wide beat vibrato waves shown above the staff.
     */
    NotationElement[NotationElement["EffectWideBeatVibrato"] = 38] = "EffectWideBeatVibrato";
    /**
     * The wide note vibrato waves shown above the staff.
     */
    NotationElement[NotationElement["EffectWideNoteVibrato"] = 39] = "EffectWideNoteVibrato";
    /**
     * The left hand tap symbol shown above the staff.
     */
    NotationElement[NotationElement["EffectLeftHandTap"] = 40] = "EffectLeftHandTap";
})(NotationElement || (NotationElement = {}));
/**
 * The notation settings control how various music notation elements are shown and behaving
 * @json
 */
class NotationSettings {
    constructor() {
        /**
         * Gets or sets the mode to use for display and play music notation elements.
         */
        this.notationMode = NotationMode.GuitarPro;
        /**
         * Gets or sets the fingering mode to use.
         */
        this.fingeringMode = FingeringMode.ScoreDefault;
        /**
         * Gets or sets the configuration on whether music notation elements are visible or not.
         * If notation elements are not specified, the default configuration will be applied.
         */
        this.elements = new Map();
        /**
         * Whether to show rhythm notation in the guitar tablature.
         */
        this.rhythmMode = TabRhythmMode.Hidden;
        /**
         * The height of the rythm bars.
         */
        this.rhythmHeight = 15;
        /**
         * The transposition pitch offsets for the individual tracks.
         * They apply to rendering and playback.
         */
        this.transpositionPitches = [];
        /**
         * The transposition pitch offsets for the individual tracks.
         * They apply to rendering only.
         */
        this.displayTranspositionPitches = [];
        /**
         * If set to true the guitar tabs on grace beats are rendered smaller.
         */
        this.smallGraceTabNotes = true;
        /**
         * If set to true bend arrows expand to the end of the last tied note
         * of the string. Otherwise they end on the next beat.
         */
        this.extendBendArrowsOnTiedNotes = true;
        /**
         * If set to true, line effects (like w/bar, let-ring etc)
         * are drawn until the end of the beat instead of the start.
         */
        this.extendLineEffectsToBeatEnd = false;
        /**
         * Gets or sets the height for slurs. The factor is multiplied with the a logarithmic distance
         * between slur start and end.
         */
        this.slurHeight = 5.0;
    }
    /**
     * Gets whether the given music notation element should be shown
     * @param element the element to check
     * @returns true if the element should be shown, otherwise false.
     */
    isNotationElementVisible(element) {
        if (this.elements.has(element)) {
            return this.elements.get(element);
        }
        if (NotationSettings.defaultElements.has(element)) {
            return NotationSettings.defaultElements.get(element);
        }
        return true;
    }
}
/**
 * Gets the default configuration of the {@see notationElements} setting. Do not modify
 * this map as it might not result in the expected side effects.
 * If items are not listed explicitly in this list, they are considered visible.
 */
NotationSettings.defaultElements = new Map([
    [NotationElement.ZerosOnDiveWhammys, false]
]);

/**
 * @target web
 */
class Lazy {
    constructor(factory) {
        this._value = undefined;
        this._factory = factory;
    }
    get value() {
        if (this._value === undefined) {
            this._value = this._factory();
        }
        return this._value;
    }
}

/**
 * Defines all loglevels.
 * @json
 */
var LogLevel;
(function (LogLevel) {
    /**
     * No logging
     */
    LogLevel[LogLevel["None"] = 0] = "None";
    /**
     * Debug level (internal details are displayed).
     */
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    /**
     * Info level (only important details are shown)
     */
    LogLevel[LogLevel["Info"] = 2] = "Info";
    /**
     * Warning level
     */
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    /**
     * Error level.
     */
    LogLevel[LogLevel["Error"] = 4] = "Error";
})(LogLevel || (LogLevel = {}));

class ConsoleLogger {
    static format(category, msg) {
        return `[AlphaTab][${category}] ${msg}`;
    }
    debug(category, msg, ...details) {
        console.debug(ConsoleLogger.format(category, msg), ...details);
    }
    warning(category, msg, ...details) {
        console.warn(ConsoleLogger.format(category, msg), ...details);
    }
    info(category, msg, ...details) {
        console.info(ConsoleLogger.format(category, msg), ...details);
    }
    error(category, msg, ...details) {
        console.error(ConsoleLogger.format(category, msg), ...details);
    }
}
ConsoleLogger.logLevel = LogLevel.Info;
class Logger {
    static shouldLog(level) {
        return Logger.logLevel !== LogLevel.None && level >= Logger.logLevel;
    }
    static debug(category, msg, ...details) {
        if (Logger.shouldLog(LogLevel.Debug)) {
            Logger.log.debug(category, msg, ...details);
        }
    }
    static warning(category, msg, ...details) {
        if (Logger.shouldLog(LogLevel.Warning)) {
            Logger.log.warning(category, msg, ...details);
        }
    }
    static info(category, msg, ...details) {
        if (Logger.shouldLog(LogLevel.Info)) {
            Logger.log.info(category, msg, ...details);
        }
    }
    static error(category, msg, ...details) {
        if (Logger.shouldLog(LogLevel.Error)) {
            Logger.log.error(category, msg, ...details);
        }
    }
}
Logger.logLevel = LogLevel.Info;
Logger.log = new ConsoleLogger();

class TuningParseResult {
    constructor() {
        this.note = null;
        this.noteValue = 0;
        this.octave = 0;
    }
    get realValue() {
        return this.octave * 12 + this.noteValue;
    }
}
/**
 * This public class contains some utilities for working with model public classes
 */
class ModelUtils {
    static getIndex(duration) {
        let index = 0;
        let value = duration;
        if (value < 0) {
            return index;
        }
        return Math.log2(duration) | 0;
    }
    static keySignatureIsFlat(ks) {
        return ks < 0;
    }
    static keySignatureIsNatural(ks) {
        return ks === 0;
    }
    static keySignatureIsSharp(ks) {
        return ks > 0;
    }
    static applyPitchOffsets(settings, score) {
        for (let i = 0; i < score.tracks.length; i++) {
            if (i < settings.notation.displayTranspositionPitches.length) {
                for (let staff of score.tracks[i].staves) {
                    staff.displayTranspositionPitch = -settings.notation.displayTranspositionPitches[i];
                }
            }
            if (i < settings.notation.transpositionPitches.length) {
                for (let staff of score.tracks[i].staves) {
                    staff.transpositionPitch = -settings.notation.transpositionPitches[i];
                }
            }
        }
    }
    static fingerToString(settings, beat, finger, leftHand) {
        if (settings.notation.fingeringMode === FingeringMode.ScoreForcePiano ||
            settings.notation.fingeringMode === FingeringMode.SingleNoteEffectBandForcePiano ||
            GeneralMidi.isPiano(beat.voice.bar.staff.track.playbackInfo.program)) {
            switch (finger) {
                case Fingers.Unknown:
                case Fingers.NoOrDead:
                    return null;
                case Fingers.Thumb:
                    return '1';
                case Fingers.IndexFinger:
                    return '2';
                case Fingers.MiddleFinger:
                    return '3';
                case Fingers.AnnularFinger:
                    return '4';
                case Fingers.LittleFinger:
                    return '5';
                default:
                    return null;
            }
        }
        if (leftHand) {
            switch (finger) {
                case Fingers.Unknown:
                case Fingers.NoOrDead:
                    return '0';
                case Fingers.Thumb:
                    return 'T';
                case Fingers.IndexFinger:
                    return '1';
                case Fingers.MiddleFinger:
                    return '2';
                case Fingers.AnnularFinger:
                    return '3';
                case Fingers.LittleFinger:
                    return '4';
                default:
                    return null;
            }
        }
        switch (finger) {
            case Fingers.Unknown:
            case Fingers.NoOrDead:
                return null;
            case Fingers.Thumb:
                return 'p';
            case Fingers.IndexFinger:
                return 'i';
            case Fingers.MiddleFinger:
                return 'm';
            case Fingers.AnnularFinger:
                return 'a';
            case Fingers.LittleFinger:
                return 'c';
            default:
                return null;
        }
    }
    /**
     * Checks if the given string is a tuning inticator.
     * @param name
     * @returns
     */
    static isTuning(name) {
        return !!ModelUtils.parseTuning(name);
    }
    static parseTuning(name) {
        let note = '';
        let octave = '';
        for (let i = 0; i < name.length; i++) {
            let c = name.charCodeAt(i);
            if (c >= 0x30 && c <= 0x39) {
                // number without note?
                if (!note) {
                    return null;
                }
                octave += String.fromCharCode(c);
            }
            else if ((c >= 0x41 && c <= 0x5a) || (c >= 0x61 && c <= 0x7a) || c === 0x23) {
                note += String.fromCharCode(c);
            }
            else {
                return null;
            }
        }
        if (!octave || !note) {
            return null;
        }
        let result = new TuningParseResult();
        result.octave = parseInt(octave) + 1;
        result.note = note.toLowerCase();
        result.noteValue = ModelUtils.getToneForText(result.note);
        return result;
    }
    static getTuningForText(str) {
        let result = ModelUtils.parseTuning(str);
        if (!result) {
            return -1;
        }
        return result.realValue;
    }
    static getToneForText(note) {
        let b = 0;
        switch (note.toLowerCase()) {
            case 'c':
                b = 0;
                break;
            case 'c#':
            case 'db':
                b = 1;
                break;
            case 'd':
                b = 2;
                break;
            case 'd#':
            case 'eb':
                b = 3;
                break;
            case 'e':
                b = 4;
                break;
            case 'f':
                b = 5;
                break;
            case 'f#':
            case 'gb':
                b = 6;
                break;
            case 'g':
                b = 7;
                break;
            case 'g#':
            case 'ab':
                b = 8;
                break;
            case 'a':
                b = 9;
                break;
            case 'a#':
            case 'bb':
                b = 10;
                break;
            case 'b':
                b = 11;
                break;
            default:
                return 0;
        }
        return b;
    }
    static newGuid() {
        return (Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1) +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            '-' +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            '-' +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            '-' +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            '-' +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1) +
            Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1));
    }
    static isAlmostEqualTo(a, b) {
        return Math.abs(a - b) < 0.00001;
    }
    static toHexString(n, digits = 0) {
        let s = '';
        let hexChars = '0123456789ABCDEF';
        do {
            s = String.fromCharCode(hexChars.charCodeAt(n & 15)) + s;
            n = n >> 4;
        } while (n > 0);
        while (s.length < digits) {
            s = '0' + s;
        }
        return s;
    }
}

/**
 * Lists all types of pick strokes.
 */
var PickStroke;
(function (PickStroke) {
    /**
     * No pickstroke used.
     */
    PickStroke[PickStroke["None"] = 0] = "None";
    /**
     * Pickstroke up.
     */
    PickStroke[PickStroke["Up"] = 1] = "Up";
    /**
     * Pickstroke down
     */
    PickStroke[PickStroke["Down"] = 2] = "Down";
})(PickStroke || (PickStroke = {}));

/**
 * Lists all music font symbols used within alphaTab. The names
 * and values are aligned with the SMuFL standard.
 */
var MusicFontSymbol;
(function (MusicFontSymbol) {
    MusicFontSymbol[MusicFontSymbol["None"] = -1] = "None";
    MusicFontSymbol[MusicFontSymbol["GClef"] = 57424] = "GClef";
    MusicFontSymbol[MusicFontSymbol["CClef"] = 57436] = "CClef";
    MusicFontSymbol[MusicFontSymbol["FClef"] = 57442] = "FClef";
    MusicFontSymbol[MusicFontSymbol["UnpitchedPercussionClef1"] = 57449] = "UnpitchedPercussionClef1";
    MusicFontSymbol[MusicFontSymbol["SixStringTabClef"] = 57453] = "SixStringTabClef";
    MusicFontSymbol[MusicFontSymbol["FourStringTabClef"] = 57454] = "FourStringTabClef";
    MusicFontSymbol[MusicFontSymbol["TimeSig0"] = 57472] = "TimeSig0";
    MusicFontSymbol[MusicFontSymbol["TimeSig1"] = 57473] = "TimeSig1";
    MusicFontSymbol[MusicFontSymbol["TimeSig2"] = 57474] = "TimeSig2";
    MusicFontSymbol[MusicFontSymbol["TimeSig3"] = 57475] = "TimeSig3";
    MusicFontSymbol[MusicFontSymbol["TimeSig4"] = 57476] = "TimeSig4";
    MusicFontSymbol[MusicFontSymbol["TimeSig5"] = 57477] = "TimeSig5";
    MusicFontSymbol[MusicFontSymbol["TimeSig6"] = 57478] = "TimeSig6";
    MusicFontSymbol[MusicFontSymbol["TimeSig7"] = 57479] = "TimeSig7";
    MusicFontSymbol[MusicFontSymbol["TimeSig8"] = 57480] = "TimeSig8";
    MusicFontSymbol[MusicFontSymbol["TimeSig9"] = 57481] = "TimeSig9";
    MusicFontSymbol[MusicFontSymbol["TimeSigCommon"] = 57482] = "TimeSigCommon";
    MusicFontSymbol[MusicFontSymbol["TimeSigCutCommon"] = 57483] = "TimeSigCutCommon";
    MusicFontSymbol[MusicFontSymbol["NoteheadDoubleWholeSquare"] = 57505] = "NoteheadDoubleWholeSquare";
    MusicFontSymbol[MusicFontSymbol["NoteheadDoubleWhole"] = 57504] = "NoteheadDoubleWhole";
    MusicFontSymbol[MusicFontSymbol["NoteheadWhole"] = 57506] = "NoteheadWhole";
    MusicFontSymbol[MusicFontSymbol["NoteheadHalf"] = 57507] = "NoteheadHalf";
    MusicFontSymbol[MusicFontSymbol["NoteheadBlack"] = 57508] = "NoteheadBlack";
    MusicFontSymbol[MusicFontSymbol["NoteheadNull"] = 57509] = "NoteheadNull";
    MusicFontSymbol[MusicFontSymbol["NoteheadXOrnate"] = 57514] = "NoteheadXOrnate";
    MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpWhole"] = 57531] = "NoteheadTriangleUpWhole";
    MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpHalf"] = 57532] = "NoteheadTriangleUpHalf";
    MusicFontSymbol[MusicFontSymbol["NoteheadTriangleUpBlack"] = 57534] = "NoteheadTriangleUpBlack";
    MusicFontSymbol[MusicFontSymbol["NoteheadDiamondBlackWide"] = 57564] = "NoteheadDiamondBlackWide";
    MusicFontSymbol[MusicFontSymbol["NoteheadDiamondWhite"] = 57565] = "NoteheadDiamondWhite";
    MusicFontSymbol[MusicFontSymbol["NoteheadDiamondWhiteWide"] = 57566] = "NoteheadDiamondWhiteWide";
    MusicFontSymbol[MusicFontSymbol["NoteheadCircleX"] = 57523] = "NoteheadCircleX";
    MusicFontSymbol[MusicFontSymbol["NoteheadXWhole"] = 57511] = "NoteheadXWhole";
    MusicFontSymbol[MusicFontSymbol["NoteheadXHalf"] = 57512] = "NoteheadXHalf";
    MusicFontSymbol[MusicFontSymbol["NoteheadXBlack"] = 57513] = "NoteheadXBlack";
    MusicFontSymbol[MusicFontSymbol["NoteheadParenthesis"] = 57550] = "NoteheadParenthesis";
    MusicFontSymbol[MusicFontSymbol["NoteheadSlashedBlack2"] = 57552] = "NoteheadSlashedBlack2";
    MusicFontSymbol[MusicFontSymbol["NoteheadCircleSlash"] = 57591] = "NoteheadCircleSlash";
    MusicFontSymbol[MusicFontSymbol["NoteheadHeavyX"] = 57592] = "NoteheadHeavyX";
    MusicFontSymbol[MusicFontSymbol["NoteheadHeavyXHat"] = 57593] = "NoteheadHeavyXHat";
    MusicFontSymbol[MusicFontSymbol["NoteQuarterUp"] = 57813] = "NoteQuarterUp";
    MusicFontSymbol[MusicFontSymbol["NoteEighthUp"] = 57815] = "NoteEighthUp";
    MusicFontSymbol[MusicFontSymbol["Tremolo3"] = 57890] = "Tremolo3";
    MusicFontSymbol[MusicFontSymbol["Tremolo2"] = 57889] = "Tremolo2";
    MusicFontSymbol[MusicFontSymbol["Tremolo1"] = 57888] = "Tremolo1";
    MusicFontSymbol[MusicFontSymbol["FlagEighthUp"] = 57920] = "FlagEighthUp";
    MusicFontSymbol[MusicFontSymbol["FlagEighthDown"] = 57921] = "FlagEighthDown";
    MusicFontSymbol[MusicFontSymbol["FlagSixteenthUp"] = 57922] = "FlagSixteenthUp";
    MusicFontSymbol[MusicFontSymbol["FlagSixteenthDown"] = 57923] = "FlagSixteenthDown";
    MusicFontSymbol[MusicFontSymbol["FlagThirtySecondUp"] = 57924] = "FlagThirtySecondUp";
    MusicFontSymbol[MusicFontSymbol["FlagThirtySecondDown"] = 57925] = "FlagThirtySecondDown";
    MusicFontSymbol[MusicFontSymbol["FlagSixtyFourthUp"] = 57926] = "FlagSixtyFourthUp";
    MusicFontSymbol[MusicFontSymbol["FlagSixtyFourthDown"] = 57927] = "FlagSixtyFourthDown";
    MusicFontSymbol[MusicFontSymbol["FlagOneHundredTwentyEighthUp"] = 57928] = "FlagOneHundredTwentyEighthUp";
    MusicFontSymbol[MusicFontSymbol["FlagOneHundredTwentyEighthDown"] = 57929] = "FlagOneHundredTwentyEighthDown";
    MusicFontSymbol[MusicFontSymbol["FlagTwoHundredFiftySixthUp"] = 57930] = "FlagTwoHundredFiftySixthUp";
    MusicFontSymbol[MusicFontSymbol["FlagTwoHundredFiftySixthDown"] = 57931] = "FlagTwoHundredFiftySixthDown";
    MusicFontSymbol[MusicFontSymbol["AccidentalFlat"] = 57952] = "AccidentalFlat";
    MusicFontSymbol[MusicFontSymbol["AccidentalNatural"] = 57953] = "AccidentalNatural";
    MusicFontSymbol[MusicFontSymbol["AccidentalSharp"] = 57954] = "AccidentalSharp";
    MusicFontSymbol[MusicFontSymbol["AccidentalDoubleSharp"] = 57955] = "AccidentalDoubleSharp";
    MusicFontSymbol[MusicFontSymbol["AccidentalDoubleFlat"] = 57956] = "AccidentalDoubleFlat";
    MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneFlatArrowUp"] = 57968] = "AccidentalQuarterToneFlatArrowUp";
    MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneSharpArrowUp"] = 57972] = "AccidentalQuarterToneSharpArrowUp";
    MusicFontSymbol[MusicFontSymbol["AccidentalQuarterToneNaturalArrowUp"] = 57970] = "AccidentalQuarterToneNaturalArrowUp";
    MusicFontSymbol[MusicFontSymbol["ArticAccentAbove"] = 58528] = "ArticAccentAbove";
    MusicFontSymbol[MusicFontSymbol["ArticStaccatoAbove"] = 58530] = "ArticStaccatoAbove";
    MusicFontSymbol[MusicFontSymbol["ArticMarcatoAbove"] = 58540] = "ArticMarcatoAbove";
    MusicFontSymbol[MusicFontSymbol["FermataAbove"] = 58560] = "FermataAbove";
    MusicFontSymbol[MusicFontSymbol["FermataShortAbove"] = 58564] = "FermataShortAbove";
    MusicFontSymbol[MusicFontSymbol["FermataLongAbove"] = 58566] = "FermataLongAbove";
    MusicFontSymbol[MusicFontSymbol["RestLonga"] = 58593] = "RestLonga";
    MusicFontSymbol[MusicFontSymbol["RestDoubleWhole"] = 58594] = "RestDoubleWhole";
    MusicFontSymbol[MusicFontSymbol["RestWhole"] = 58595] = "RestWhole";
    MusicFontSymbol[MusicFontSymbol["RestHalf"] = 58596] = "RestHalf";
    MusicFontSymbol[MusicFontSymbol["RestQuarter"] = 58597] = "RestQuarter";
    MusicFontSymbol[MusicFontSymbol["RestEighth"] = 58598] = "RestEighth";
    MusicFontSymbol[MusicFontSymbol["RestSixteenth"] = 58599] = "RestSixteenth";
    MusicFontSymbol[MusicFontSymbol["RestThirtySecond"] = 58600] = "RestThirtySecond";
    MusicFontSymbol[MusicFontSymbol["RestSixtyFourth"] = 58601] = "RestSixtyFourth";
    MusicFontSymbol[MusicFontSymbol["RestOneHundredTwentyEighth"] = 58602] = "RestOneHundredTwentyEighth";
    MusicFontSymbol[MusicFontSymbol["RestTwoHundredFiftySixth"] = 58603] = "RestTwoHundredFiftySixth";
    MusicFontSymbol[MusicFontSymbol["Repeat1Bar"] = 58624] = "Repeat1Bar";
    MusicFontSymbol[MusicFontSymbol["Repeat2Bars"] = 58625] = "Repeat2Bars";
    MusicFontSymbol[MusicFontSymbol["Ottava"] = 58640] = "Ottava";
    MusicFontSymbol[MusicFontSymbol["OttavaAlta"] = 58641] = "OttavaAlta";
    MusicFontSymbol[MusicFontSymbol["OttavaBassaVb"] = 58652] = "OttavaBassaVb";
    MusicFontSymbol[MusicFontSymbol["Quindicesima"] = 58644] = "Quindicesima";
    MusicFontSymbol[MusicFontSymbol["QuindicesimaAlta"] = 58645] = "QuindicesimaAlta";
    MusicFontSymbol[MusicFontSymbol["DynamicPPP"] = 58666] = "DynamicPPP";
    MusicFontSymbol[MusicFontSymbol["DynamicPP"] = 58667] = "DynamicPP";
    MusicFontSymbol[MusicFontSymbol["DynamicPiano"] = 58656] = "DynamicPiano";
    MusicFontSymbol[MusicFontSymbol["DynamicMP"] = 58668] = "DynamicMP";
    MusicFontSymbol[MusicFontSymbol["DynamicMF"] = 58669] = "DynamicMF";
    MusicFontSymbol[MusicFontSymbol["DynamicForte"] = 58658] = "DynamicForte";
    MusicFontSymbol[MusicFontSymbol["DynamicFF"] = 58671] = "DynamicFF";
    MusicFontSymbol[MusicFontSymbol["DynamicFFF"] = 58672] = "DynamicFFF";
    MusicFontSymbol[MusicFontSymbol["OrnamentTrill"] = 58726] = "OrnamentTrill";
    MusicFontSymbol[MusicFontSymbol["StringsDownBow"] = 58896] = "StringsDownBow";
    MusicFontSymbol[MusicFontSymbol["StringsUpBow"] = 58898] = "StringsUpBow";
    MusicFontSymbol[MusicFontSymbol["PictEdgeOfCymbal"] = 59177] = "PictEdgeOfCymbal";
    MusicFontSymbol[MusicFontSymbol["GuitarString0"] = 59443] = "GuitarString0";
    MusicFontSymbol[MusicFontSymbol["GuitarString1"] = 59444] = "GuitarString1";
    MusicFontSymbol[MusicFontSymbol["GuitarString2"] = 59445] = "GuitarString2";
    MusicFontSymbol[MusicFontSymbol["GuitarString3"] = 59446] = "GuitarString3";
    MusicFontSymbol[MusicFontSymbol["GuitarString4"] = 59447] = "GuitarString4";
    MusicFontSymbol[MusicFontSymbol["GuitarString5"] = 59448] = "GuitarString5";
    MusicFontSymbol[MusicFontSymbol["GuitarString6"] = 59449] = "GuitarString6";
    MusicFontSymbol[MusicFontSymbol["GuitarString7"] = 59450] = "GuitarString7";
    MusicFontSymbol[MusicFontSymbol["GuitarString8"] = 59451] = "GuitarString8";
    MusicFontSymbol[MusicFontSymbol["GuitarString9"] = 59452] = "GuitarString9";
    MusicFontSymbol[MusicFontSymbol["GuitarGolpe"] = 59458] = "GuitarGolpe";
    MusicFontSymbol[MusicFontSymbol["FretboardX"] = 59481] = "FretboardX";
    MusicFontSymbol[MusicFontSymbol["FretboardO"] = 59482] = "FretboardO";
    MusicFontSymbol[MusicFontSymbol["WiggleTrill"] = 60068] = "WiggleTrill";
    MusicFontSymbol[MusicFontSymbol["WiggleVibratoMediumFast"] = 60126] = "WiggleVibratoMediumFast";
    MusicFontSymbol[MusicFontSymbol["OctaveBaselineM"] = 60565] = "OctaveBaselineM";
    MusicFontSymbol[MusicFontSymbol["OctaveBaselineB"] = 60563] = "OctaveBaselineB";
})(MusicFontSymbol || (MusicFontSymbol = {}));

/**
 * This public enum lists all different text alignments
 */
var TextAlign;
(function (TextAlign) {
    /**
     * Text is left aligned.
     */
    TextAlign[TextAlign["Left"] = 0] = "Left";
    /**
     * Text is centered.
     */ TextAlign[TextAlign["Center"] = 1] = "Center";
    /**
     * Text is right aligned.
     */ TextAlign[TextAlign["Right"] = 2] = "Right";
})(TextAlign || (TextAlign = {}));
/**
 * This public enum lists all base line modes
 */
var TextBaseline;
(function (TextBaseline) {
    /**
     * Text is aligned on top.
     */
    TextBaseline[TextBaseline["Top"] = 0] = "Top";
    /**
     * Text is aligned middle
     */
    TextBaseline[TextBaseline["Middle"] = 1] = "Middle";
    /**
     * Text is aligend on the bottom.
     */
    TextBaseline[TextBaseline["Bottom"] = 2] = "Bottom";
})(TextBaseline || (TextBaseline = {}));

/**
 * Describes an instrument articulation which is used for percussions.
 * @json
 * @json_strict
 */
class InstrumentArticulation {
    constructor(elementType = "", staffLine = 0, outputMidiNumber = 0, noteHeadDefault = MusicFontSymbol.None, noteHeadHalf = MusicFontSymbol.None, noteHeadWhole = MusicFontSymbol.None, techniqueSymbol = MusicFontSymbol.None, techniqueSymbolPlacement = TextBaseline.Middle) {
        this.elementType = elementType;
        this.outputMidiNumber = outputMidiNumber;
        this.staffLine = staffLine;
        this.noteHeadDefault = noteHeadDefault;
        this.noteHeadHalf = noteHeadHalf !== MusicFontSymbol.None ? noteHeadHalf : noteHeadDefault;
        this.noteHeadWhole = noteHeadWhole !== MusicFontSymbol.None ? noteHeadWhole : noteHeadDefault;
        this.techniqueSymbol = techniqueSymbol;
        this.techniqueSymbolPlacement = techniqueSymbolPlacement;
    }
    getSymbol(duration) {
        switch (duration) {
            case Duration.Whole:
                return this.noteHeadWhole;
            case Duration.Half:
                return this.noteHeadHalf;
            default:
                return this.noteHeadDefault;
        }
    }
}

class PercussionMapper {
    static articulationFromElementVariation(element, variation) {
        if (element < PercussionMapper.gp6ElementAndVariationToArticulation.length) {
            if (variation >= PercussionMapper.gp6ElementAndVariationToArticulation.length) {
                variation = 0;
            }
            return PercussionMapper.gp6ElementAndVariationToArticulation[element][variation];
        }
        // unknown combination, should not happen, fallback to some default value (Snare hit)
        return 38;
    }
    static getArticulation(n) {
        const articulationIndex = n.percussionArticulation;
        const trackArticulations = n.beat.voice.bar.staff.track.percussionArticulations;
        if (articulationIndex < trackArticulations.length) {
            return trackArticulations[articulationIndex];
        }
        return PercussionMapper.getArticulationByValue(articulationIndex);
    }
    static getElementAndVariation(n) {
        const articulation = PercussionMapper.getArticulation(n);
        if (!articulation) {
            return [-1, -1];
        }
        // search for the first element/variation combination with the same midi output 
        for (let element = 0; element < PercussionMapper.gp6ElementAndVariationToArticulation.length; element++) {
            const variations = PercussionMapper.gp6ElementAndVariationToArticulation[element];
            for (let variation = 0; variation < variations.length; variation++) {
                const gp6Articulation = PercussionMapper.getArticulationByValue(variations[variation]);
                if ((gp6Articulation === null || gp6Articulation === void 0 ? void 0 : gp6Articulation.outputMidiNumber) === articulation.outputMidiNumber) {
                    return [element, variation];
                }
            }
        }
        return [-1, -1];
    }
    static getArticulationByValue(midiNumber) {
        if (PercussionMapper.instrumentArticulations.has(midiNumber)) {
            return PercussionMapper.instrumentArticulations.get(midiNumber);
        }
        return null;
    }
}
PercussionMapper.gp6ElementAndVariationToArticulation = [
    // known GP6 elements and variations, analyzed from a GPX test file
    // with all instruments inside manually aligned with the same names of articulations in GP7
    // [{articulation index}]   // [{element number}] => {element name} ({variation[0]}, {variation[1]}, {variation[2]})
    [35, 35, 35],
    [38, 91, 37],
    [99, 100, 99],
    [56, 100, 56],
    [102, 103, 102],
    [43, 43, 43],
    [45, 45, 45],
    [47, 47, 47],
    [48, 48, 48],
    [50, 50, 50],
    [42, 92, 46],
    [44, 44, 44],
    [57, 98, 57],
    [49, 97, 49],
    [55, 95, 55],
    [51, 93, 127],
    [52, 96, 52], // [16] => China (hit, choke, unused)
];
/*
 * This map was generated using the following steps:
 * 1. Make a new GP7 file with a drumkit track
 * 2. Add one note for each midi value using the instrument panel
 * 3. Load the file in alphaTab and set a breakpoint in the GP7 importer.
 * 4. Use the following snipped in the console to generate the map initializer (fix enums manually):
 * parser = new DOMParser();
 * xmlDoc = parser.parseFromString(xml, 'text/xml');
 * articulations = xmlDoc.getElementsByTagName('Articulation');
 * existingArticulations = new Map();
 * s = '';
 * for(let i = 0; i < articulations.length; i++) {
 *     const articulation = articulations[i];
 *     let midi = articulation.getElementsByTagName('InputMidiNumbers');
 * 	if(midi.length === 1) {
 * 		midi = midi[0].textContent;
 *      const elementType = articulation.parentElement.parentElement.getElementsByTagName('Type')[0].textContent;
 *      const outputMidiNumber = articulation.getElementsByTagName('OutputMidiNumber')[0].textContent;
 * 		const staffLine = articulation.getElementsByTagName('StaffLine')[0].textContent;
 * 		const techniqueSymbol = articulation.getElementsByTagName('TechniqueSymbol')[0].textContent;
 * 		const techniquePlacement = articulation.getElementsByTagName('TechniquePlacement')[0].textContent;
 * 		const noteHeads = articulation.getElementsByTagName('Noteheads')[0].textContent.split(' ').map(n=>n = 'MusicFontSymbol.' + n);
 * 		if(!existingArticulations.has(midi)) {
 *        if(techniqueSymbol) {
 * 		    s += `['${elementType}', ${midi}, new InstrumentArticulation(${staffLine}, ${outputMidiNumber}, ${noteHeads[0]}, ${noteHeads[1]}, ${noteHeads[2]}, ${techniqueSymbol}, ${techniquePlacement})],\r\n`;
 *        }
 *        else {
 * 		    s += `['${elementType}', ${midi}, new InstrumentArticulation(${staffLine}, ${outputMidiNumber}, ${noteHeads[0]}, ${noteHeads[1]}, ${noteHeads[2]})],\r\n`;
 *        }
 * 		  existingArticulations.set(midi, true);
 * 		}
 * 	}
 * }
 * copy(s)
 */
PercussionMapper.instrumentArticulations = new Map([
    [38, new InstrumentArticulation("snare", 3, 38, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [37, new InstrumentArticulation("snare", 3, 37, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [91, new InstrumentArticulation("snare", 3, 38, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)],
    [42, new InstrumentArticulation("hiHat", -1, 42, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [92, new InstrumentArticulation("hiHat", -1, 46, MusicFontSymbol.NoteheadCircleSlash, MusicFontSymbol.NoteheadCircleSlash, MusicFontSymbol.NoteheadCircleSlash)],
    [46, new InstrumentArticulation("hiHat", -1, 46, MusicFontSymbol.NoteheadCircleX, MusicFontSymbol.NoteheadCircleX, MusicFontSymbol.NoteheadCircleX)],
    [44, new InstrumentArticulation("hiHat", 9, 44, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [35, new InstrumentArticulation("kickDrum", 8, 35, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [36, new InstrumentArticulation("kickDrum", 7, 36, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [50, new InstrumentArticulation("tom", 1, 50, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [48, new InstrumentArticulation("tom", 2, 48, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [47, new InstrumentArticulation("tom", 4, 47, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [45, new InstrumentArticulation("tom", 5, 45, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [43, new InstrumentArticulation("tom", 6, 43, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [93, new InstrumentArticulation("ride", 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.PictEdgeOfCymbal, TextBaseline.Bottom)],
    [51, new InstrumentArticulation("ride", 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [53, new InstrumentArticulation("ride", 0, 53, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)],
    [94, new InstrumentArticulation("ride", 0, 51, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Top)],
    [55, new InstrumentArticulation("splash", -2, 55, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [95, new InstrumentArticulation("splash", -2, 55, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)],
    [52, new InstrumentArticulation("china", -3, 52, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat)],
    [96, new InstrumentArticulation("china", -3, 52, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat, MusicFontSymbol.NoteheadHeavyXHat)],
    [49, new InstrumentArticulation("crash", -2, 49, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX)],
    [97, new InstrumentArticulation("crash", -2, 49, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)],
    [57, new InstrumentArticulation("crash", -1, 57, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX)],
    [98, new InstrumentArticulation("crash", -1, 57, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.NoteheadHeavyX, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Bottom)],
    [99, new InstrumentArticulation("cowbell", 1, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)],
    [100, new InstrumentArticulation("cowbell", 1, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)],
    [56, new InstrumentArticulation("cowbell", 0, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)],
    [101, new InstrumentArticulation("cowbell", 0, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)],
    [102, new InstrumentArticulation("cowbell", -1, 56, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpHalf, MusicFontSymbol.NoteheadTriangleUpWhole)],
    [103, new InstrumentArticulation("cowbell", -1, 56, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXHalf, MusicFontSymbol.NoteheadXWhole)],
    [77, new InstrumentArticulation("woodblock", -9, 77, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)],
    [76, new InstrumentArticulation("woodblock", -10, 76, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)],
    [60, new InstrumentArticulation("bongo", -4, 60, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [104, new InstrumentArticulation("bongo", -5, 60, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [105, new InstrumentArticulation("bongo", -6, 60, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [61, new InstrumentArticulation("bongo", -7, 61, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [106, new InstrumentArticulation("bongo", -8, 61, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [107, new InstrumentArticulation("bongo", -16, 61, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [66, new InstrumentArticulation("timbale", 10, 66, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [65, new InstrumentArticulation("timbale", 9, 65, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [68, new InstrumentArticulation("agogo", 12, 68, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [67, new InstrumentArticulation("agogo", 11, 67, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [64, new InstrumentArticulation("conga", 17, 64, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [108, new InstrumentArticulation("conga", 16, 64, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [109, new InstrumentArticulation("conga", 15, 64, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [63, new InstrumentArticulation("conga", 14, 63, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [110, new InstrumentArticulation("conga", 13, 63, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [62, new InstrumentArticulation("conga", 19, 62, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [72, new InstrumentArticulation("whistle", -11, 72, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [71, new InstrumentArticulation("whistle", -17, 71, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [73, new InstrumentArticulation("guiro", 38, 73, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [74, new InstrumentArticulation("guiro", 37, 74, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [86, new InstrumentArticulation("surdo", 36, 86, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [87, new InstrumentArticulation("surdo", 35, 87, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [54, new InstrumentArticulation("tambourine", 3, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack)],
    [111, new InstrumentArticulation("tambourine", 2, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [112, new InstrumentArticulation("tambourine", 1, 54, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.NoteheadTriangleUpBlack, MusicFontSymbol.StringsDownBow, TextBaseline.Bottom)],
    [113, new InstrumentArticulation("tambourine", -7, 54, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [79, new InstrumentArticulation("cuica", 30, 79, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [78, new InstrumentArticulation("cuica", 29, 78, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [58, new InstrumentArticulation("vibraslap", 28, 58, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [81, new InstrumentArticulation("triangle", 27, 81, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [80, new InstrumentArticulation("triangle", 26, 80, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadParenthesis, TextBaseline.Middle)],
    [114, new InstrumentArticulation("grancassa", 25, 43, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [115, new InstrumentArticulation("piatti", 18, 49, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [116, new InstrumentArticulation("piatti", 24, 49, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [69, new InstrumentArticulation("cabasa", 23, 69, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [117, new InstrumentArticulation("cabasa", 22, 69, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [85, new InstrumentArticulation("castanets", 21, 85, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [75, new InstrumentArticulation("claves", 20, 75, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [70, new InstrumentArticulation("maraca", -12, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [118, new InstrumentArticulation("maraca", -13, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [119, new InstrumentArticulation("maraca", -14, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [120, new InstrumentArticulation("maraca", -15, 70, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [82, new InstrumentArticulation("shaker", -23, 54, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [122, new InstrumentArticulation("shaker", -24, 54, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [84, new InstrumentArticulation("bellTree", -18, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [123, new InstrumentArticulation("bellTree", -19, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole, MusicFontSymbol.StringsUpBow, TextBaseline.Bottom)],
    [83, new InstrumentArticulation("jingleBell", -20, 53, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [124, new InstrumentArticulation("unpitched", -21, 62, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.GuitarGolpe, TextBaseline.Top)],
    [125, new InstrumentArticulation("unpitched", -22, 62, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.NoteheadNull, MusicFontSymbol.GuitarGolpe, TextBaseline.Bottom)],
    [39, new InstrumentArticulation("handClap", 3, 39, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [40, new InstrumentArticulation("snare", 3, 40, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [31, new InstrumentArticulation("snare", 3, 40, MusicFontSymbol.NoteheadSlashedBlack2, MusicFontSymbol.NoteheadSlashedBlack2, MusicFontSymbol.NoteheadSlashedBlack2)],
    [41, new InstrumentArticulation("tom", 5, 41, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadHalf, MusicFontSymbol.NoteheadWhole)],
    [59, new InstrumentArticulation("ride", 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.PictEdgeOfCymbal, TextBaseline.Bottom)],
    [126, new InstrumentArticulation("ride", 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [127, new InstrumentArticulation("ride", 2, 59, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite, MusicFontSymbol.NoteheadDiamondWhite)],
    [29, new InstrumentArticulation("ride", 2, 59, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.ArticStaccatoAbove, TextBaseline.Top)],
    [30, new InstrumentArticulation("crash", -3, 49, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [33, new InstrumentArticulation("snare", 3, 37, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack, MusicFontSymbol.NoteheadXBlack)],
    [34, new InstrumentArticulation("snare", 3, 38, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadBlack, MusicFontSymbol.NoteheadBlack)]
]);

class NoteIdBag {
    constructor() {
        this.tieDestinationNoteId = -1;
        this.tieOriginNoteId = -1;
        this.slurDestinationNoteId = -1;
        this.slurOriginNoteId = -1;
        this.hammerPullDestinationNoteId = -1;
        this.hammerPullOriginNoteId = -1;
    }
}
/**
 * A note is a single played sound on a fretted instrument.
 * It consists of a fret offset and a string on which the note is played on.
 * It also can be modified by a lot of different effects.
 * @cloneable
 * @json
 * @json_strict
 */
class Note {
    constructor() {
        /**
         * Gets or sets the unique id of this note.
         * @clone_ignore
         */
        this.id = Note.GlobalNoteId++;
        /**
         * Gets or sets the zero-based index of this note within the beat.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the accentuation of this note.
         */
        this.accentuated = AccentuationType.None;
        /**
         * Gets or sets the bend type for this note.
         */
        this.bendType = BendType.None;
        /**
         * Gets or sets the bend style for this note.
         */
        this.bendStyle = BendStyle.Default;
        /**
         * Gets or sets the note from which this note continues the bend.
         * @clone_ignore
         * @json_ignore
         */
        this.bendOrigin = null;
        /**
         * Gets or sets whether this note continues a bend from a previous note.
         */
        this.isContinuedBend = false;
        /**
         * Gets or sets a list of the points defining the bend behavior.
         * @clone_add addBendPoint
         * @json_add addBendPoint
         */
        this.bendPoints = [];
        /**
         * Gets or sets the bend point with the highest bend value.
         * @clone_ignore
         * @json_ignore
         */
        this.maxBendPoint = null;
        /**
         * Gets or sets the fret on which this note is played on the instrument.
         */
        this.fret = -1;
        /**
         * Gets or sets the string number where the note is placed.
         * 1 is the lowest string on the guitar and the bottom line on the tablature.
         * It then increases the the number of strings on available on the track.
         */
        this.string = -1;
        /**
         * Gets or sets the octave on which this note is played.
         */
        this.octave = -1;
        /**
         * Gets or sets the tone of this note within the octave.
         */
        this.tone = -1;
        /**
         * Gets or sets the index of percussion articulation in the related `track.percussionArticulations`.
         * If the articulation is not listed in `track.percussionArticulations` the following list based on GP7 applies:
         * - 029 Ride (choke)
         * - 030 Cymbal (hit)
         * - 031 Snare (side stick)
         * - 033 Snare (side stick)
         * - 034 Snare (hit)
         * - 035 Kick (hit)
         * - 036 Kick (hit)
         * - 037 Snare (side stick)
         * - 038 Snare (hit)
         * - 039 Hand Clap (hit)
         * - 040 Snare (hit)
         * - 041 Low Floor Tom (hit)
         * - 042 Hi-Hat (closed)
         * - 043 Very Low Tom (hit)
         * - 044 Pedal Hi-Hat (hit)
         * - 045 Low Tom (hit)
         * - 046 Hi-Hat (open)
         * - 047 Mid Tom (hit)
         * - 048 High Tom (hit)
         * - 049 Crash high (hit)
         * - 050 High Floor Tom (hit)
         * - 051 Ride (middle)
         * - 052 China (hit)
         * - 053 Ride (bell)
         * - 054 Tambourine (hit)
         * - 055 Splash (hit)
         * - 056 Cowbell medium (hit)
         * - 057 Crash medium (hit)
         * - 058 Vibraslap (hit)
         * - 059 Ride (edge)
         * - 060 Hand (hit)
         * - 061 Hand (hit)
         * - 062 Conga high (mute)
         * - 063 Conga high (hit)
         * - 064 Conga low (hit)
         * - 065 Timbale high (hit)
         * - 066 Timbale low (hit)
         * - 067 Agogo high (hit)
         * - 068 Agogo tow (hit)
         * - 069 Cabasa (hit)
         * - 070 Left Maraca (hit)
         * - 071 Whistle high (hit)
         * - 072 Whistle low (hit)
         * - 073 Guiro (hit)
         * - 074 Guiro (scrap-return)
         * - 075 Claves (hit)
         * - 076 Woodblock high (hit)
         * - 077 Woodblock low (hit)
         * - 078 Cuica (mute)
         * - 079 Cuica (open)
         * - 080 Triangle (rnute)
         * - 081 Triangle (hit)
         * - 082 Shaker (hit)
         * - 083 Tinkle Bell (hat)
         * - 083 Jingle Bell (hit)
         * - 084 Bell Tree (hit)
         * - 085 Castanets (hit)
         * - 086 Surdo (hit)
         * - 087 Surdo (mute)
         * - 091 Snare (rim shot)
         * - 092 Hi-Hat (half)
         * - 093 Ride (edge)
         * - 094 Ride (choke)
         * - 095 Splash (choke)
         * - 096 China (choke)
         * - 097 Crash high (choke)
         * - 098 Crash medium (choke)
         * - 099 Cowbell low (hit)
         * - 100 Cowbell low (tip)
         * - 101 Cowbell medium (tip)
         * - 102 Cowbell high (hit)
         * - 103 Cowbell high (tip)
         * - 104 Hand (mute)
         * - 105 Hand (slap)
         * - 106 Hand (mute)
         * - 107 Hand (slap)
         * - 108 Conga low (slap)
         * - 109 Conga low (mute)
         * - 110 Conga high (slap)
         * - 111 Tambourine (return)
         * - 112 Tambourine (roll)
         * - 113 Tambourine (hand)
         * - 114 Grancassa (hit)
         * - 115 Piatti (hat)
         * - 116 Piatti (hand)
         * - 117 Cabasa (return)
         * - 118 Left Maraca (return)
         * - 119 Right Maraca (hit)
         * - 120 Right Maraca (return)
         * - 122 Shaker (return)
         * - 123 Bell Tee (return)
         * - 124 Golpe (thumb)
         * - 125 Golpe (finger)
         * - 126 Ride (middle)
         * - 127 Ride (bell)
         */
        this.percussionArticulation = -1;
        /**
         * Gets or sets whether this note is visible on the music sheet.
         */
        this.isVisible = true;
        /**
         * Gets a value indicating whether the note is left hand tapped.
         */
        this.isLeftHandTapped = false;
        /**
         * Gets or sets whether this note starts a hammeron or pulloff.
         */
        this.isHammerPullOrigin = false;
        /**
         * Gets the origin of the hammeron/pulloff of this note.
         * @clone_ignore
         * @json_ignore
         */
        this.hammerPullOrigin = null;
        /**
         * Gets the destination for the hammeron/pullof started by this note.
         * @clone_ignore
         * @json_ignore
         */
        this.hammerPullDestination = null;
        /**
         * Gets or sets whether this note finishes a slur.
         */
        this.isSlurDestination = false;
        /**
         * Gets or sets the note where the slur of this note starts.
         * @clone_ignore
         * @json_ignore
         */
        this.slurOrigin = null;
        /**
         * Gets or sets the note where the slur of this note ends.
         * @clone_ignore
         * @json_ignore
         */
        this.slurDestination = null;
        /**
         * Gets or sets the harmonic type applied to this note.
         */
        this.harmonicType = HarmonicType.None;
        /**
         * Gets or sets the value defining the harmonic pitch.
         */
        this.harmonicValue = 0;
        /**
         * Gets or sets whether the note is a ghost note and shown in parenthesis. Also this will make the note a bit more silent.
         */
        this.isGhost = false;
        /**
         * Gets or sets whether this note has a let-ring effect.
         */
        this.isLetRing = false;
        /**
         * Gets or sets the destination note for the let-ring effect.
         * @clone_ignore
         * @json_ignore
         */
        this.letRingDestination = null;
        /**
         * Gets or sets whether this note has a palm-mute effect.
         */
        this.isPalmMute = false;
        /**
         * Gets or sets the destination note for the palm-mute effect.
         * @clone_ignore
         * @json_ignore
         */
        this.palmMuteDestination = null;
        /**
         * Gets or sets whether the note is shown and played as dead note.
         */
        this.isDead = false;
        /**
         * Gets or sets whether the note is played as staccato.
         */
        this.isStaccato = false;
        /**
         * Gets or sets the slide-in type this note is played with.
         */
        this.slideInType = SlideInType.None;
        /**
         * Gets or sets the slide-out type this note is played with.
         */
        this.slideOutType = SlideOutType.None;
        /**
         * Gets or sets the target note for several slide types.
         * @clone_ignore
         * @json_ignore
         */
        this.slideTarget = null;
        /**
         * Gets or sets the source note for several slide types.
         * @clone_ignore
         * @json_ignore
         */
        this.slideOrigin = null;
        /**
         * Gets or sets whether a vibrato is played on the note.
         */
        this.vibrato = VibratoType.None;
        /**
         * Gets the origin of the tied if this note is tied.
         * @clone_ignore
         * @json_ignore
         */
        this.tieOrigin = null;
        /**
         * Gets the desination of the tie.
         * @clone_ignore
         * @json_ignore
         */
        this.tieDestination = null;
        /**
         * Gets or sets whether this note is ends a tied note.
         */
        this.isTieDestination = false;
        /**
         * Gets or sets the fingers used for this note on the left hand.
         */
        this.leftHandFinger = Fingers.Unknown;
        /**
         * Gets or sets the fingers used for this note on the right hand.
         */
        this.rightHandFinger = Fingers.Unknown;
        /**
         * Gets or sets whether this note has fingering defined.
         */
        this.isFingering = false;
        /**
         * Gets or sets the target note value for the trill effect.
         */
        this.trillValue = -1;
        /**
         * Gets or sets the speed of the trill effect.
         */
        this.trillSpeed = Duration.ThirtySecond;
        /**
         * Gets or sets the percentual duration of the note relative to the overall beat duration .
         */
        this.durationPercent = 1;
        /**
         * Gets or sets how accidetnals for this note should  be handled.
         */
        this.accidentalMode = NoteAccidentalMode.Default;
        /**
         * Gets or sets the dynamics for this note.
         */
        this.dynamics = DynamicValue.F;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.isEffectSlurOrigin = false;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.hasEffectSlur = false;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.effectSlurOrigin = null;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.effectSlurDestination = null;
        this._noteIdBag = null;
    }
    get hasBend() {
        return this.bendType !== BendType.None;
    }
    get isStringed() {
        return this.string >= 0;
    }
    get isPiano() {
        return !this.isStringed && this.octave >= 0 && this.tone >= 0;
    }
    get isPercussion() {
        return !this.isStringed && this.percussionArticulation >= 0;
    }
    /**
     * Gets or sets the percusson element.
     * @deprecated
     */
    get element() {
        return this.isPercussion ? PercussionMapper.getElementAndVariation(this)[0] : -1;
    }
    /**
     * Gets or sets the variation of this note.
     * @deprecated
     */
    get variation() {
        return this.isPercussion ? PercussionMapper.getElementAndVariation(this)[1] : -1;
    }
    get isHammerPullDestination() {
        return !!this.hammerPullOrigin;
    }
    get isSlurOrigin() {
        return !!this.slurDestination;
    }
    get isHarmonic() {
        return this.harmonicType !== HarmonicType.None;
    }
    get isTieOrigin() {
        return this.tieDestination !== null;
    }
    get trillFret() {
        return this.trillValue - this.stringTuning;
    }
    get isTrill() {
        return this.trillValue >= 0;
    }
    get isEffectSlurDestination() {
        return !!this.effectSlurOrigin;
    }
    get stringTuning() {
        return this.beat.voice.bar.staff.capo + Note.getStringTuning(this.beat.voice.bar.staff, this.string);
    }
    static getStringTuning(staff, noteString) {
        if (staff.tuning.length > 0) {
            return staff.tuning[staff.tuning.length - (noteString - 1) - 1];
        }
        return 0;
    }
    get realValue() {
        let realValue = this.realValueWithoutHarmonic;
        if (this.isStringed) {
            if (this.harmonicType === HarmonicType.Natural) {
                realValue = this.harmonicPitch + this.stringTuning - this.beat.voice.bar.staff.transpositionPitch;
            }
            else {
                realValue += this.harmonicPitch;
            }
        }
        return realValue;
    }
    get realValueWithoutHarmonic() {
        if (this.isPercussion) {
            return this.percussionArticulation;
        }
        if (this.isStringed) {
            return this.fret + this.stringTuning - this.beat.voice.bar.staff.transpositionPitch;
        }
        if (this.isPiano) {
            return this.octave * 12 + this.tone - this.beat.voice.bar.staff.transpositionPitch;
        }
        return 0;
    }
    get harmonicPitch() {
        if (this.harmonicType === HarmonicType.None || !this.isStringed) {
            return 0;
        }
        let value = this.harmonicValue;
        // add semitones to reach corresponding harmonic frets
        if (ModelUtils.isAlmostEqualTo(value, 2.4)) {
            return 36;
        }
        if (ModelUtils.isAlmostEqualTo(value, 2.7)) {
            // Fret 3 2nd octave + minor seventh
            return 34;
        }
        if (value < 3) {
            // no natural harmonics below fret 3
            return 0;
        }
        if (value <= 3.5) {
            // Fret 3 2nd octave + fifth
            return 31;
        }
        if (value <= 4) {
            return 28;
        }
        if (value <= 5) {
            return 24;
        }
        if (value <= 6) {
            return 34;
        }
        if (value <= 7) {
            return 19;
        }
        if (value <= 8.5) {
            return 36;
        }
        if (value <= 9) {
            return 28;
        }
        if (value <= 10) {
            return 34;
        }
        if (value <= 11) {
            return 0;
        }
        if (value <= 12) {
            return 12;
        }
        if (value < 14) {
            // fret 13,14 stay
            return 0;
        }
        if (value <= 15) {
            return 34;
        }
        if (value <= 16) {
            return 28;
        }
        if (value <= 17) {
            return 36;
        }
        if (value <= 18) {
            return 0;
        }
        if (value <= 19) {
            return 19;
        }
        if (value <= 21) {
            //  20,21 stay
            return 0;
        }
        if (value <= 22) {
            return 36;
        }
        if (value <= 24) {
            return 24;
        }
        return 0;
    }
    get initialBendValue() {
        if (this.hasBend) {
            return Math.floor(this.bendPoints[0].value / 2);
        }
        else if (this.bendOrigin) {
            return Math.floor(this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value / 2);
        }
        else if (this.isTieDestination && this.tieOrigin.bendOrigin) {
            return Math.floor(this.tieOrigin.bendOrigin.bendPoints[this.tieOrigin.bendOrigin.bendPoints.length - 1].value / 2);
        }
        else if (this.beat.hasWhammyBar) {
            return Math.floor(this.beat.whammyBarPoints[0].value / 2);
        }
        else if (this.beat.isContinuedWhammy) {
            return Math.floor(this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value / 2);
        }
        return 0;
    }
    get displayValue() {
        return this.displayValueWithoutBend + this.initialBendValue;
    }
    get displayValueWithoutBend() {
        let noteValue = this.realValue;
        if (this.harmonicType !== HarmonicType.Natural && this.harmonicType !== HarmonicType.None) {
            noteValue -= this.harmonicPitch;
        }
        switch (this.beat.ottava) {
            case Ottavia._15ma:
                noteValue -= 24;
                break;
            case Ottavia._8va:
                noteValue -= 12;
                break;
            case Ottavia.Regular:
                break;
            case Ottavia._8vb:
                noteValue += 12;
                break;
            case Ottavia._15mb:
                noteValue += 24;
                break;
        }
        switch (this.beat.voice.bar.clefOttava) {
            case Ottavia._15ma:
                noteValue -= 24;
                break;
            case Ottavia._8va:
                noteValue -= 12;
                break;
            case Ottavia.Regular:
                break;
            case Ottavia._8vb:
                noteValue += 12;
                break;
            case Ottavia._15mb:
                noteValue += 24;
                break;
        }
        return noteValue - this.beat.voice.bar.staff.displayTranspositionPitch;
    }
    get hasQuarterToneOffset() {
        if (this.hasBend) {
            return this.bendPoints[0].value % 2 !== 0;
        }
        if (this.bendOrigin) {
            return this.bendOrigin.bendPoints[this.bendOrigin.bendPoints.length - 1].value % 2 !== 0;
        }
        if (this.beat.hasWhammyBar) {
            return this.beat.whammyBarPoints[0].value % 2 !== 0;
        }
        if (this.beat.isContinuedWhammy) {
            return (this.beat.previousBeat.whammyBarPoints[this.beat.previousBeat.whammyBarPoints.length - 1].value %
                2 !==
                0);
        }
        return false;
    }
    addBendPoint(point) {
        this.bendPoints.push(point);
        if (!this.maxBendPoint || point.value > this.maxBendPoint.value) {
            this.maxBendPoint = point;
        }
        if (this.bendType === BendType.None) {
            this.bendType = BendType.Custom;
        }
    }
    finish(settings, sharedDataBag = null) {
        let nextNoteOnLine = new Lazy(() => Note.nextNoteOnSameLine(this));
        let isSongBook = settings && settings.notation.notationMode === NotationMode.SongBook;
        // connect ties
        if (this.isTieDestination) {
            this.chain(sharedDataBag);
            // implicit let ring
            if (isSongBook && this.tieOrigin && this.tieOrigin.isLetRing) {
                this.isLetRing = true;
            }
        }
        // connect letring
        if (this.isLetRing) {
            if (!nextNoteOnLine.value || !nextNoteOnLine.value.isLetRing) {
                this.letRingDestination = this;
            }
            else {
                this.letRingDestination = nextNoteOnLine.value;
            }
            if (isSongBook && this.isTieDestination && !this.tieOrigin.hasBend) {
                this.isVisible = false;
            }
        }
        // connect palmmute
        if (this.isPalmMute) {
            if (!nextNoteOnLine.value || !nextNoteOnLine.value.isPalmMute) {
                this.palmMuteDestination = this;
            }
            else {
                this.palmMuteDestination = nextNoteOnLine.value;
            }
        }
        // set hammeron/pulloffs
        if (this.isHammerPullOrigin) {
            let hammerPullDestination = Note.findHammerPullDestination(this);
            if (!hammerPullDestination) {
                this.isHammerPullOrigin = false;
            }
            else {
                this.hammerPullDestination = hammerPullDestination;
                hammerPullDestination.hammerPullOrigin = this;
            }
        }
        // set slides
        switch (this.slideOutType) {
            case SlideOutType.Shift:
            case SlideOutType.Legato:
                this.slideTarget = nextNoteOnLine.value;
                if (!this.slideTarget) {
                    this.slideOutType = SlideOutType.None;
                }
                else {
                    this.slideTarget.slideOrigin = this;
                }
                break;
        }
        let effectSlurDestination = null;
        if (this.isHammerPullOrigin && this.hammerPullDestination) {
            effectSlurDestination = this.hammerPullDestination;
        }
        else if (this.slideOutType === SlideOutType.Legato && this.slideTarget) {
            effectSlurDestination = this.slideTarget;
        }
        if (effectSlurDestination) {
            this.hasEffectSlur = true;
            if (this.effectSlurOrigin && this.beat.pickStroke === PickStroke.None) {
                this.effectSlurOrigin.effectSlurDestination = effectSlurDestination;
                this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                this.effectSlurOrigin = null;
            }
            else {
                this.isEffectSlurOrigin = true;
                this.effectSlurDestination = effectSlurDestination;
                this.effectSlurDestination.effectSlurOrigin = this;
            }
        }
        // try to detect what kind of bend was used and cleans unneeded points if required
        // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all bends
        const points = this.bendPoints;
        if (points.length > 0 && this.bendType === BendType.Custom) {
            let isContinuedBend = this.isTieDestination && this.tieOrigin.hasBend;
            this.isContinuedBend = isContinuedBend;
            if (points.length === 4) {
                let origin = points[0];
                let middle1 = points[1];
                let middle2 = points[2];
                let destination = points[3];
                // the middle points are used for holds, anything else is a new feature we do not support yet
                if (middle1.value === middle2.value) {
                    // bend higher?
                    if (destination.value > origin.value) {
                        if (middle1.value > destination.value) {
                            this.bendType = BendType.BendRelease;
                        }
                        else if (!isContinuedBend && origin.value > 0) {
                            this.bendType = BendType.PrebendBend;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                        else {
                            this.bendType = BendType.Bend;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                    }
                    else if (destination.value < origin.value) {
                        // origin must be > 0 otherwise it's no release, we cannot bend negative
                        if (isContinuedBend) {
                            this.bendType = BendType.Release;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                        else {
                            this.bendType = BendType.PrebendRelease;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                    }
                    else {
                        if (middle1.value > origin.value) {
                            this.bendType = BendType.BendRelease;
                        }
                        else if (origin.value > 0 && !isContinuedBend) {
                            this.bendType = BendType.Prebend;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                        else {
                            this.bendType = BendType.Hold;
                            points.splice(2, 1);
                            points.splice(1, 1);
                        }
                    }
                }
                else {
                    Logger.warning('Model', 'Unsupported bend type detected, fallback to custom', null);
                }
            }
            else if (points.length === 2) {
                let origin = points[0];
                let destination = points[1];
                // bend higher?
                if (destination.value > origin.value) {
                    if (!isContinuedBend && origin.value > 0) {
                        this.bendType = BendType.PrebendBend;
                    }
                    else {
                        this.bendType = BendType.Bend;
                    }
                }
                else if (destination.value < origin.value) {
                    // origin must be > 0 otherwise it's no release, we cannot bend negative
                    if (isContinuedBend) {
                        this.bendType = BendType.Release;
                    }
                    else {
                        this.bendType = BendType.PrebendRelease;
                    }
                }
                else {
                    this.bendType = BendType.Hold;
                }
            }
        }
        else if (points.length === 0) {
            this.bendType = BendType.None;
        }
        // initial bend pitch offsets and forced accidentals don't play well together
        // we reset it
        if (this.initialBendValue > 0) {
            this.accidentalMode = NoteAccidentalMode.Default;
        }
    }
    static nextNoteOnSameLine(note) {
        let nextBeat = note.beat.nextBeat;
        // keep searching in same bar
        while (nextBeat && nextBeat.voice.bar.index <= note.beat.voice.bar.index + Note.MaxOffsetForSameLineSearch) {
            let noteOnString = nextBeat.getNoteOnString(note.string);
            if (noteOnString) {
                return noteOnString;
            }
            nextBeat = nextBeat.nextBeat;
        }
        return null;
    }
    static findHammerPullDestination(note) {
        // For Hammer-Pull destinations we have 2 potential candidates
        // 1. A note on the same string
        // 2. A note on a different string, but with a left-hand-tapping applied
        // for the second case we have a special logic to search for notes:
        // 1. We first search on lower strings, then on higher strings
        // 2. If we find a note with a left-hand-tap applied it becomes the target
        // 3. If we find a note without a left-hand-tap we stop searching in this direction
        let nextBeat = note.beat.nextBeat;
        // keep searching in same bar
        while (nextBeat && nextBeat.voice.bar.index <= note.beat.voice.bar.index + Note.MaxOffsetForSameLineSearch) {
            // 1. same string first
            let noteOnString = nextBeat.getNoteOnString(note.string);
            if (noteOnString) {
                return noteOnString;
            }
            // 2. search toward lower strings
            for (let str = note.string; str > 0; str--) {
                noteOnString = nextBeat.getNoteOnString(str);
                if (noteOnString) {
                    if (noteOnString.isLeftHandTapped) {
                        return noteOnString;
                    }
                    else {
                        break;
                    }
                }
            }
            // 3. search toward higher strings
            for (let str = note.string; str <= note.beat.voice.bar.staff.tuning.length; str++) {
                noteOnString = nextBeat.getNoteOnString(str);
                if (noteOnString) {
                    if (noteOnString.isLeftHandTapped) {
                        return noteOnString;
                    }
                    else {
                        break;
                    }
                }
            }
            // nothing found, search on next beat
            nextBeat = nextBeat.nextBeat;
        }
        return null;
    }
    static findTieOrigin(note) {
        let previousBeat = note.beat.previousBeat;
        // keep searching in same bar
        while (previousBeat &&
            previousBeat.voice.bar.index >= note.beat.voice.bar.index - Note.MaxOffsetForSameLineSearch) {
            if (note.isStringed) {
                let noteOnString = previousBeat.getNoteOnString(note.string);
                if (noteOnString) {
                    return noteOnString;
                }
            }
            else {
                if (note.octave === -1 && note.tone === -1) {
                    // if the note has no value (e.g. alphaTex dash tie), we try to find a matching
                    // note on the previous beat by index.
                    if (note.index < previousBeat.notes.length) {
                        return previousBeat.notes[note.index];
                    }
                }
                else {
                    let noteWithValue = previousBeat.getNoteWithRealValue(note.realValue);
                    if (noteWithValue) {
                        return noteWithValue;
                    }
                }
            }
            previousBeat = previousBeat.previousBeat;
        }
        return null;
    }
    chain(sharedDataBag = null) {
        // mainly for backwards compat in case we reach this code from somewhere outside.
        if (sharedDataBag === null) {
            return;
        }
        // if we have some IDs from a serialization flow,
        // we need to lookup/register the notes correctly
        if (this._noteIdBag !== null) {
            // get or create lookup
            let noteIdLookup;
            if (sharedDataBag.has(Note.NoteIdLookupKey)) {
                noteIdLookup = sharedDataBag.get(Note.NoteIdLookupKey);
            }
            else {
                noteIdLookup = new Map();
                sharedDataBag.set(Note.NoteIdLookupKey, noteIdLookup);
            }
            // if this note is a source note for any effect, remember it for later
            // the destination note will look it up for linking
            if (this._noteIdBag.hammerPullDestinationNoteId !== -1 ||
                this._noteIdBag.tieDestinationNoteId !== -1 ||
                this._noteIdBag.slurDestinationNoteId !== -1) {
                noteIdLookup.set(this.id, this);
            }
            // on any effect destiniation, lookup the origin which should already be
            // registered
            if (this._noteIdBag.hammerPullOriginNoteId !== -1) {
                this.hammerPullOrigin = noteIdLookup.get(this._noteIdBag.hammerPullOriginNoteId);
                this.hammerPullOrigin.hammerPullDestination = this;
            }
            if (this._noteIdBag.tieOriginNoteId !== -1) {
                this.tieOrigin = noteIdLookup.get(this._noteIdBag.tieOriginNoteId);
                this.tieOrigin.tieDestination = this;
            }
            if (this._noteIdBag.slurOriginNoteId !== -1) {
                this.slurOrigin = noteIdLookup.get(this._noteIdBag.slurOriginNoteId);
                this.slurOrigin.slurDestination = this;
            }
            this._noteIdBag = null; // not needed anymore
        }
        else {
            if (!this.isTieDestination && this.tieOrigin === null) {
                return;
            }
            let tieOrigin = Note.findTieOrigin(this);
            if (!tieOrigin) {
                this.isTieDestination = false;
            }
            else {
                tieOrigin.tieDestination = this;
                this.tieOrigin = tieOrigin;
                this.fret = tieOrigin.fret;
                this.octave = tieOrigin.octave;
                this.tone = tieOrigin.tone;
                if (tieOrigin.hasBend) {
                    this.bendOrigin = this.tieOrigin;
                }
            }
        }
    }
    /**
     * @internal
     */
    toJson(o) {
        // inject linked note ids into JSON
        if (this.tieDestination !== null) {
            o.set('tiedestinationnoteid', this.tieDestination.id);
        }
        if (this.tieOrigin !== null) {
            o.set('tieoriginnoteid', this.tieOrigin.id);
        }
        if (this.slurDestination !== null) {
            o.set('slurdestinationnoteid', this.slurDestination.id);
        }
        if (this.slurOrigin !== null) {
            o.set('sluroriginnoteid', this.slurOrigin.id);
        }
        if (this.hammerPullOrigin !== null) {
            o.set('hammerpulloriginnoteid', this.hammerPullOrigin.id);
        }
        if (this.hammerPullDestination !== null) {
            o.set('hammerpulldestinationnoteid', this.hammerPullDestination.id);
        }
    }
    /**
     * @internal
     */
    setProperty(property, v) {
        switch (property) {
            case 'tiedestinationnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.tieDestinationNoteId = v;
                return true;
            case 'tieoriginnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.tieOriginNoteId = v;
                return true;
            case 'slurdestinationnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.slurDestinationNoteId = v;
                return true;
            case 'sluroriginnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.slurOriginNoteId = v;
                return true;
            case 'hammerpulloriginnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.hammerPullOriginNoteId = v;
                return true;
            case 'hammerpulldestinationnoteid':
                if (this._noteIdBag === null) {
                    this._noteIdBag = new NoteIdBag();
                }
                this._noteIdBag.hammerPullDestinationNoteId = v;
                return true;
        }
        return false;
    }
}
Note.GlobalNoteId = 0;
Note.MaxOffsetForSameLineSearch = 3;
Note.NoteIdLookupKey = 'NoteIdLookup';

/**
 * Represents a list of beats that are grouped within the same tuplet.
 */
class TupletGroup {
    /**
     * Initializes a new instance of the {@link TupletGroup} class.
     * @param voice The voice this group belongs to.
     */
    constructor(voice) {
        this._isEqualLengthTuplet = true;
        this.totalDuration = 0;
        /**
         * Gets or sets the list of beats contained in this group.
         */
        this.beats = [];
        /**
         * Gets a value indicating whether the tuplet group is fully filled.
         */
        this.isFull = false;
        this.voice = voice;
    }
    check(beat) {
        if (this.beats.length === 0) {
            // accept first beat
            this.beats.push(beat);
            this.totalDuration += beat.playbackDuration;
            return true;
        }
        if (beat.graceType !== GraceType.None) {
            // grace notes do not break tuplet group, but also do not contribute to them.
            return true;
        }
        if (beat.voice !== this.voice ||
            this.isFull ||
            beat.tupletNumerator !== this.beats[0].tupletNumerator ||
            beat.tupletDenominator !== this.beats[0].tupletDenominator) {
            // only same tuplets are potentially accepted
            return false;
        }
        // TBH: I do not really know how the 100% tuplet grouping of Guitar Pro might work
        // it sometimes has really strange rules where notes filling 3 quarters, are considered a full 3:2 tuplet
        // in alphaTab we have now 2 rules where we consider a tuplet full:
        // 1. if all beats have the same length, the tuplet must contain N notes of an N:M tuplet
        // 2. if we have mixed beats, we check if the current set of beats, matches a N:M tuplet
        //    by checking all potential note durations.
        // this logic is very likely not 100% correct but for most cases the tuplets
        // appeared correct.
        if (beat.playbackDuration !== this.beats[0].playbackDuration) {
            this._isEqualLengthTuplet = false;
        }
        this.beats.push(beat);
        this.totalDuration += beat.playbackDuration;
        if (this._isEqualLengthTuplet) {
            if (this.beats.length === this.beats[0].tupletNumerator) {
                this.isFull = true;
            }
        }
        else {
            let factor = (this.beats[0].tupletNumerator / this.beats[0].tupletDenominator) | 0;
            for (let potentialMatch of TupletGroup.AllTicks) {
                if (this.totalDuration === potentialMatch * factor) {
                    this.isFull = true;
                    break;
                }
            }
        }
        return true;
    }
}
TupletGroup.HalfTicks = 1920;
TupletGroup.QuarterTicks = 960;
TupletGroup.EighthTicks = 480;
TupletGroup.SixteenthTicks = 240;
TupletGroup.ThirtySecondTicks = 120;
TupletGroup.SixtyFourthTicks = 60;
TupletGroup.OneHundredTwentyEighthTicks = 30;
TupletGroup.TwoHundredFiftySixthTicks = 15;
TupletGroup.AllTicks = [
    TupletGroup.HalfTicks,
    TupletGroup.QuarterTicks,
    TupletGroup.EighthTicks,
    TupletGroup.SixteenthTicks,
    TupletGroup.ThirtySecondTicks,
    TupletGroup.SixtyFourthTicks,
    TupletGroup.OneHundredTwentyEighthTicks,
    TupletGroup.TwoHundredFiftySixthTicks
];

/**
 * Lists all types of whammy bars
 */
var WhammyType;
(function (WhammyType) {
    /**
     * No whammy at all
     */
    WhammyType[WhammyType["None"] = 0] = "None";
    /**
     * Individual points define the whammy in a flexible manner.
     * This system was mainly used in Guitar Pro 3-5
     */
    WhammyType[WhammyType["Custom"] = 1] = "Custom";
    /**
     * Simple dive to a lower or higher note.
     */
    WhammyType[WhammyType["Dive"] = 2] = "Dive";
    /**
     * A dive to a lower or higher note and releasing it back to normal.
     */
    WhammyType[WhammyType["Dip"] = 3] = "Dip";
    /**
     * Continue to hold the whammy at the position from a previous whammy.
     */
    WhammyType[WhammyType["Hold"] = 4] = "Hold";
    /**
     * Dive to a lower or higher note before playing it.
     */
    WhammyType[WhammyType["Predive"] = 5] = "Predive";
    /**
     * Dive to a lower or higher note before playing it, then change to another
     * note.
     */
    WhammyType[WhammyType["PrediveDive"] = 6] = "PrediveDive";
})(WhammyType || (WhammyType = {}));

// <auto-generated>
class BendPointCloner {
    static clone(original) {
        const clone = new BendPoint();
        clone.offset = original.offset;
        clone.value = original.value;
        return clone;
    }
}

// <auto-generated>
class NoteCloner {
    static clone(original) {
        const clone = new Note();
        clone.index = original.index;
        clone.accentuated = original.accentuated;
        clone.bendType = original.bendType;
        clone.bendStyle = original.bendStyle;
        clone.isContinuedBend = original.isContinuedBend;
        clone.bendPoints = [];
        for (const i of original.bendPoints) {
            clone.addBendPoint(BendPointCloner.clone(i));
        }
        clone.fret = original.fret;
        clone.string = original.string;
        clone.octave = original.octave;
        clone.tone = original.tone;
        clone.percussionArticulation = original.percussionArticulation;
        clone.isVisible = original.isVisible;
        clone.isLeftHandTapped = original.isLeftHandTapped;
        clone.isHammerPullOrigin = original.isHammerPullOrigin;
        clone.isSlurDestination = original.isSlurDestination;
        clone.harmonicType = original.harmonicType;
        clone.harmonicValue = original.harmonicValue;
        clone.isGhost = original.isGhost;
        clone.isLetRing = original.isLetRing;
        clone.isPalmMute = original.isPalmMute;
        clone.isDead = original.isDead;
        clone.isStaccato = original.isStaccato;
        clone.slideInType = original.slideInType;
        clone.slideOutType = original.slideOutType;
        clone.vibrato = original.vibrato;
        clone.isTieDestination = original.isTieDestination;
        clone.leftHandFinger = original.leftHandFinger;
        clone.rightHandFinger = original.rightHandFinger;
        clone.isFingering = original.isFingering;
        clone.trillValue = original.trillValue;
        clone.trillSpeed = original.trillSpeed;
        clone.durationPercent = original.durationPercent;
        clone.accidentalMode = original.accidentalMode;
        clone.dynamics = original.dynamics;
        return clone;
    }
}

// <auto-generated>
class AutomationCloner {
    static clone(original) {
        const clone = new Automation();
        clone.isLinear = original.isLinear;
        clone.type = original.type;
        clone.value = original.value;
        clone.ratioPosition = original.ratioPosition;
        clone.text = original.text;
        return clone;
    }
}

// <auto-generated>
class BeatCloner {
    static clone(original) {
        const clone = new Beat();
        clone.index = original.index;
        clone.notes = [];
        for (const i of original.notes) {
            clone.addNote(NoteCloner.clone(i));
        }
        clone.isEmpty = original.isEmpty;
        clone.whammyStyle = original.whammyStyle;
        clone.ottava = original.ottava;
        clone.isLegatoOrigin = original.isLegatoOrigin;
        clone.duration = original.duration;
        clone.isLetRing = original.isLetRing;
        clone.isPalmMute = original.isPalmMute;
        clone.automations = [];
        for (const i of original.automations) {
            clone.automations.push(AutomationCloner.clone(i));
        }
        clone.dots = original.dots;
        clone.fadeIn = original.fadeIn;
        clone.lyrics = original.lyrics ? original.lyrics.slice() : null;
        clone.hasRasgueado = original.hasRasgueado;
        clone.pop = original.pop;
        clone.slap = original.slap;
        clone.tap = original.tap;
        clone.text = original.text;
        clone.brushType = original.brushType;
        clone.brushDuration = original.brushDuration;
        clone.tupletDenominator = original.tupletDenominator;
        clone.tupletNumerator = original.tupletNumerator;
        clone.isContinuedWhammy = original.isContinuedWhammy;
        clone.whammyBarType = original.whammyBarType;
        clone.whammyBarPoints = [];
        for (const i of original.whammyBarPoints) {
            clone.addWhammyBarPoint(BendPointCloner.clone(i));
        }
        clone.vibrato = original.vibrato;
        clone.chordId = original.chordId;
        clone.graceType = original.graceType;
        clone.pickStroke = original.pickStroke;
        clone.tremoloSpeed = original.tremoloSpeed;
        clone.crescendo = original.crescendo;
        clone.displayStart = original.displayStart;
        clone.playbackStart = original.playbackStart;
        clone.displayDuration = original.displayDuration;
        clone.playbackDuration = original.playbackDuration;
        clone.dynamics = original.dynamics;
        clone.invertBeamDirection = original.invertBeamDirection;
        clone.preferredBeamDirection = original.preferredBeamDirection;
        clone.isEffectSlurOrigin = original.isEffectSlurOrigin;
        clone.beamingMode = original.beamingMode;
        return clone;
    }
}

/**
 * Represents a group of grace beats that belong together
 */
class GraceGroup {
    constructor() {
        /**
         * All beats within this group.
         */
        this.beats = [];
        /**
         * Gets a unique ID for this grace group.
         */
        this.id = 'empty';
        /**
         * true if the grace beat are followed by a normal beat within the same
         * bar.
         */
        this.isComplete = false;
    }
    /**
     * Adds a new beat to this group
     * @param beat The beat to add
     */
    addBeat(beat) {
        beat.graceIndex = this.beats.length;
        beat.graceGroup = this;
        this.beats.push(beat);
    }
    finish() {
        if (this.beats.length > 0) {
            this.id = this.beats[0].absoluteDisplayStart + '_' + this.beats[0].voice.index;
        }
    }
}

/**
 * Lists the different modes on how beaming for a beat should be done.
 */
var BeatBeamingMode;
(function (BeatBeamingMode) {
    /**
     * Automatic beaming based on the timing rules.
     */
    BeatBeamingMode[BeatBeamingMode["Auto"] = 0] = "Auto";
    /**
     * Force a split to the next beat.
     */
    BeatBeamingMode[BeatBeamingMode["ForceSplitToNext"] = 1] = "ForceSplitToNext";
    /**
     * Force a merge with the next beat.
     */
    BeatBeamingMode[BeatBeamingMode["ForceMergeWithNext"] = 2] = "ForceMergeWithNext";
})(BeatBeamingMode || (BeatBeamingMode = {}));
/**
 * A beat is a single block within a bar. A beat is a combination
 * of several notes played at the same time.
 * @json
 * @json_strict
 * @cloneable
 */
class Beat {
    constructor() {
        /**
         * Gets or sets the unique id of this beat.
         * @clone_ignore
         */
        this.id = Beat._globalBeatId++;
        /**
         * Gets or sets the zero-based index of this beat within the voice.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the previous beat within the whole song.
         * @json_ignore
         * @clone_ignore
         */
        this.previousBeat = null;
        /**
         * Gets or sets the next beat within the whole song.
         * @json_ignore
         * @clone_ignore
         */
        this.nextBeat = null;
        /**
         * Gets or sets the list of notes contained in this beat.
         * @json_add addNote
         * @clone_add addNote
         */
        this.notes = [];
        /**
         * Gets the lookup where the notes per string are registered.
         * If this staff contains string based notes this lookup allows fast access.
         * @json_ignore
         */
        this.noteStringLookup = new Map();
        /**
         * Gets the lookup where the notes per value are registered.
         * If this staff contains string based notes this lookup allows fast access.
         * @json_ignore
         */
        this.noteValueLookup = new Map();
        /**
         * Gets or sets a value indicating whether this beat is considered empty.
         */
        this.isEmpty = false;
        /**
         * Gets or sets which whammy bar style should be used for this bar.
         */
        this.whammyStyle = BendStyle.Default;
        /**
         * Gets or sets the ottava applied to this beat.
         */
        this.ottava = Ottavia.Regular;
        /**
         * Gets or sets the fermata applied to this beat.
         * @clone_ignore
         * @json_ignore
         */
        this.fermata = null;
        /**
         * Gets a value indicating whether this beat starts a legato slur.
         */
        this.isLegatoOrigin = false;
        /**
         * Gets or sets the note with the lowest pitch in this beat. Only visible notes are considered.
         * @json_ignore
         * @clone_ignore
         */
        this.minNote = null;
        /**
         * Gets or sets the note with the highest pitch in this beat. Only visible notes are considered.
         * @json_ignore
         * @clone_ignore
         */
        this.maxNote = null;
        /**
         * Gets or sets the note with the highest string number in this beat. Only visible notes are considered.
         * @json_ignore
         * @clone_ignore
         */
        this.maxStringNote = null;
        /**
         * Gets or sets the note with the lowest string number in this beat. Only visible notes are considered.
         * @json_ignore
         * @clone_ignore
         */
        this.minStringNote = null;
        /**
         * Gets or sets the duration of this beat.
         */
        this.duration = Duration.Quarter;
        /**
         * Gets or sets whether any note in this beat has a let-ring applied.
         * @json_ignore
         */
        this.isLetRing = false;
        /**
         * Gets or sets whether any note in this beat has a palm-mute paplied.
         * @json_ignore
         */
        this.isPalmMute = false;
        /**
         * Gets or sets a list of all automations on this beat.
         */
        this.automations = [];
        /**
         * Gets or sets the number of dots applied to the duration of this beat.
         */
        this.dots = 0;
        /**
         * Gets or sets a value indicating whether this beat is fade-in.
         */
        this.fadeIn = false;
        /**
         * Gets or sets the lyrics shown on this beat.
         */
        this.lyrics = null;
        /**
         * Gets or sets a value indicating whether the beat is played in rasgueado style.
         */
        this.hasRasgueado = false;
        /**
         * Gets or sets a value indicating whether the notes on this beat are played with a pop-style (bass).
         */
        this.pop = false;
        /**
         * Gets or sets a value indicating whether the notes on this beat are played with a slap-style (bass).
         */
        this.slap = false;
        /**
         * Gets or sets a value indicating whether the notes on this beat are played with a tap-style (bass).
         */
        this.tap = false;
        /**
         * Gets or sets the text annotation shown on this beat.
         */
        this.text = null;
        /**
         * Gets or sets the brush type applied to the notes of this beat.
         */
        this.brushType = BrushType.None;
        /**
         * Gets or sets the duration of the brush between the notes in midi ticks.
         */
        this.brushDuration = 0;
        /**
         * Gets or sets the tuplet denominator.
         */
        this.tupletDenominator = -1;
        /**
         * Gets or sets the tuplet numerator.
         */
        this.tupletNumerator = -1;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.tupletGroup = null;
        /**
         * Gets or sets whether this beat continues a whammy effect.
         */
        this.isContinuedWhammy = false;
        /**
         * Gets or sets the whammy bar style of this beat.
         */
        this.whammyBarType = WhammyType.None;
        /**
         * Gets or sets the points defining the whammy bar usage.
         * @json_add addWhammyBarPoint
         * @clone_add addWhammyBarPoint
         */
        this.whammyBarPoints = [];
        /**
         * Gets or sets the highest point with for the highest whammy bar value.
         * @json_ignore
         * @clone_ignore
         */
        this.maxWhammyPoint = null;
        /**
         * Gets or sets the highest point with for the lowest whammy bar value.
         * @json_ignore
         * @clone_ignore
         */
        this.minWhammyPoint = null;
        /**
         * Gets or sets the vibrato effect used on this beat.
         */
        this.vibrato = VibratoType.None;
        /**
         * Gets or sets the ID of the chord used on this beat.
         */
        this.chordId = null;
        /**
         * Gets or sets the grace style of this beat.
         */
        this.graceType = GraceType.None;
        /**
         * Gets or sets the grace group this beat belongs to.
         * If this beat is not a grace note, it holds the group which belongs to this beat.
         * @json_ignore
         * @clone_ignore
         */
        this.graceGroup = null;
        /**
         * Gets or sets the index of this beat within the grace group if
         * this is a grace beat.
         * @json_ignore
         * @clone_ignore
         */
        this.graceIndex = -1;
        /**
         * Gets or sets the pickstroke applied on this beat.
         */
        this.pickStroke = PickStroke.None;
        /**
         * Gets or sets the speed of the tremolo effect.
         */
        this.tremoloSpeed = null;
        /**
         * Gets or sets whether a crescendo/decrescendo is applied on this beat.
         */
        this.crescendo = CrescendoType.None;
        /**
         * The timeline position of the voice within the current bar as it is displayed. (unit: midi ticks)
         * This might differ from the actual playback time due to special grace types.
         */
        this.displayStart = 0;
        /**
         * The timeline position of the voice within the current bar as it is played. (unit: midi ticks)
         * This might differ from the actual playback time due to special grace types.
         */
        this.playbackStart = 0;
        /**
         * Gets or sets the duration that is used for the display of this beat. It defines the size/width of the beat in
         * the music sheet. (unit: midi ticks).
         */
        this.displayDuration = 0;
        /**
         * Gets or sets the duration that the note is played during the audio generation.
         */
        this.playbackDuration = 0;
        /**
         * Gets or sets the dynamics applied to this beat.
         */
        this.dynamics = DynamicValue.F;
        /**
         * Gets or sets a value indicating whether the beam direction should be inverted.
         */
        this.invertBeamDirection = false;
        /**
         * Gets or sets the preferred beam direction as specified in the input source.
         */
        this.preferredBeamDirection = null;
        /**
         * @json_ignore
         */
        this.isEffectSlurOrigin = false;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.effectSlurOrigin = null;
        /**
         * @clone_ignore
         * @json_ignore
         */
        this.effectSlurDestination = null;
        /**
         * Gets or sets how the beaming should be done for this beat.
         */
        this.beamingMode = BeatBeamingMode.Auto;
    }
    get isLastOfVoice() {
        return this.index === this.voice.beats.length - 1;
    }
    get isLegatoDestination() {
        return !!this.previousBeat && this.previousBeat.isLegatoOrigin;
    }
    get isRest() {
        return this.isEmpty || this.notes.length === 0;
    }
    /**
     * Gets a value indicating whether this beat is a full bar rest.
     */
    get isFullBarRest() {
        return this.isRest && this.voice.beats.length === 1 && this.duration === Duration.Whole;
    }
    get hasTuplet() {
        return (!(this.tupletDenominator === -1 && this.tupletNumerator === -1) &&
            !(this.tupletDenominator === 1 && this.tupletNumerator === 1));
    }
    get hasWhammyBar() {
        return this.whammyBarType !== WhammyType.None;
    }
    get hasChord() {
        return !!this.chordId;
    }
    get chord() {
        return this.chordId ? this.voice.bar.staff.getChord(this.chordId) : null;
    }
    get isTremolo() {
        return !!this.tremoloSpeed;
    }
    get absoluteDisplayStart() {
        return this.voice.bar.masterBar.start + this.displayStart;
    }
    get absolutePlaybackStart() {
        return this.voice.bar.masterBar.start + this.playbackStart;
    }
    get isEffectSlurDestination() {
        return !!this.effectSlurOrigin;
    }
    addWhammyBarPoint(point) {
        this.whammyBarPoints.push(point);
        if (!this.maxWhammyPoint || point.value > this.maxWhammyPoint.value) {
            this.maxWhammyPoint = point;
        }
        if (!this.minWhammyPoint || point.value < this.minWhammyPoint.value) {
            this.minWhammyPoint = point;
        }
        if (this.whammyBarType === WhammyType.None) {
            this.whammyBarType = WhammyType.Custom;
        }
    }
    removeWhammyBarPoint(index) {
        // check index
        const points = this.whammyBarPoints;
        if (index < 0 || index >= points.length) {
            return;
        }
        // remove point
        points.splice(index, 1);
        let point = points[index];
        // update maxWhammy point if required
        if (point === this.maxWhammyPoint) {
            this.maxWhammyPoint = null;
            for (let currentPoint of points) {
                if (!this.maxWhammyPoint || currentPoint.value > this.maxWhammyPoint.value) {
                    this.maxWhammyPoint = currentPoint;
                }
            }
        }
        if (point === this.minWhammyPoint) {
            this.minWhammyPoint = null;
            for (let currentPoint of points) {
                if (!this.minWhammyPoint || currentPoint.value < this.minWhammyPoint.value) {
                    this.minWhammyPoint = currentPoint;
                }
            }
        }
    }
    addNote(note) {
        note.beat = this;
        note.index = this.notes.length;
        this.notes.push(note);
        if (note.isStringed) {
            this.noteStringLookup.set(note.string, note);
        }
    }
    removeNote(note) {
        let index = this.notes.indexOf(note);
        if (index >= 0) {
            this.notes.splice(index, 1);
            if (note.isStringed) {
                this.noteStringLookup.delete(note.string);
            }
        }
    }
    getAutomation(type) {
        for (let i = 0, j = this.automations.length; i < j; i++) {
            let automation = this.automations[i];
            if (automation.type === type) {
                return automation;
            }
        }
        return null;
    }
    getNoteOnString(noteString) {
        if (this.noteStringLookup.has(noteString)) {
            return this.noteStringLookup.get(noteString);
        }
        return null;
    }
    calculateDuration() {
        if (this.isFullBarRest) {
            return this.voice.bar.masterBar.calculateDuration();
        }
        let ticks = MidiUtils.toTicks(this.duration);
        if (this.dots === 2) {
            ticks = MidiUtils.applyDot(ticks, true);
        }
        else if (this.dots === 1) {
            ticks = MidiUtils.applyDot(ticks, false);
        }
        if (this.tupletDenominator > 0 && this.tupletNumerator >= 0) {
            ticks = MidiUtils.applyTuplet(ticks, this.tupletNumerator, this.tupletDenominator);
        }
        return ticks;
    }
    updateDurations() {
        let ticks = this.calculateDuration();
        this.playbackDuration = ticks;
        switch (this.graceType) {
            case GraceType.BeforeBeat:
            case GraceType.OnBeat:
                switch (this.duration) {
                    case Duration.Sixteenth:
                        this.playbackDuration = MidiUtils.toTicks(Duration.SixtyFourth);
                        break;
                    case Duration.ThirtySecond:
                        this.playbackDuration = MidiUtils.toTicks(Duration.OneHundredTwentyEighth);
                        break;
                    default:
                        this.playbackDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                        break;
                }
                this.displayDuration = 0;
                break;
            case GraceType.BendGrace:
                this.playbackDuration /= 2;
                this.displayDuration = 0;
                break;
            default:
                this.displayDuration = ticks;
                let previous = this.previousBeat;
                if (previous && previous.graceType === GraceType.BendGrace) {
                    this.playbackDuration = previous.playbackDuration;
                }
                break;
        }
    }
    finishTuplet() {
        let previousBeat = this.previousBeat;
        let currentTupletGroup = previousBeat ? previousBeat.tupletGroup : null;
        if (this.hasTuplet || (this.graceType !== GraceType.None && currentTupletGroup)) {
            if (!previousBeat || !currentTupletGroup || !currentTupletGroup.check(this)) {
                currentTupletGroup = new TupletGroup(this.voice);
                currentTupletGroup.check(this);
            }
            this.tupletGroup = currentTupletGroup;
        }
    }
    finish(settings, sharedDataBag = null) {
        if (this.getAutomation(AutomationType.Instrument) === null &&
            this.index === 0 &&
            this.voice.index === 0 &&
            this.voice.bar.index === 0 &&
            this.voice.bar.staff.index === 0) {
            this.automations.push(Automation.buildInstrumentAutomation(false, 0, this.voice.bar.staff.track.playbackInfo.program));
        }
        switch (this.graceType) {
            case GraceType.OnBeat:
            case GraceType.BeforeBeat:
                let numberOfGraceBeats = this.graceGroup.beats.length;
                // set right duration for beaming/display
                if (numberOfGraceBeats === 1) {
                    this.duration = Duration.Eighth;
                }
                else if (numberOfGraceBeats === 2) {
                    this.duration = Duration.Sixteenth;
                }
                else {
                    this.duration = Duration.ThirtySecond;
                }
                break;
        }
        let displayMode = !settings ? NotationMode.GuitarPro : settings.notation.notationMode;
        let isGradual = this.text === 'grad' || this.text === 'grad.';
        if (isGradual && displayMode === NotationMode.SongBook) {
            this.text = '';
        }
        let needCopyBeatForBend = false;
        this.minNote = null;
        this.maxNote = null;
        this.minStringNote = null;
        this.maxStringNote = null;
        let visibleNotes = 0;
        let isEffectSlurBeat = false;
        for (let i = 0, j = this.notes.length; i < j; i++) {
            let note = this.notes[i];
            note.dynamics = this.dynamics;
            note.finish(settings, sharedDataBag);
            if (note.isLetRing) {
                this.isLetRing = true;
            }
            if (note.isPalmMute) {
                this.isPalmMute = true;
            }
            if (displayMode === NotationMode.SongBook && note.hasBend && this.graceType !== GraceType.BendGrace) {
                if (!note.isTieOrigin) {
                    switch (note.bendType) {
                        case BendType.Bend:
                        case BendType.PrebendRelease:
                        case BendType.PrebendBend:
                            needCopyBeatForBend = true;
                            break;
                    }
                }
                if (isGradual || note.bendStyle === BendStyle.Gradual) {
                    isGradual = true;
                    note.bendStyle = BendStyle.Gradual;
                    needCopyBeatForBend = false;
                }
                else {
                    note.bendStyle = BendStyle.Fast;
                }
            }
            if (note.isVisible) {
                visibleNotes++;
                if (!this.minNote || note.realValue < this.minNote.realValue) {
                    this.minNote = note;
                }
                if (!this.maxNote || note.realValue > this.maxNote.realValue) {
                    this.maxNote = note;
                }
                if (!this.minStringNote || note.string < this.minStringNote.string) {
                    this.minStringNote = note;
                }
                if (!this.maxStringNote || note.string > this.maxStringNote.string) {
                    this.maxStringNote = note;
                }
                if (note.hasEffectSlur) {
                    isEffectSlurBeat = true;
                }
            }
        }
        if (isEffectSlurBeat) {
            if (this.effectSlurOrigin) {
                this.effectSlurOrigin.effectSlurDestination = this.nextBeat;
                if (this.effectSlurOrigin.effectSlurDestination) {
                    this.effectSlurOrigin.effectSlurDestination.effectSlurOrigin = this.effectSlurOrigin;
                }
                this.effectSlurOrigin = null;
            }
            else {
                this.isEffectSlurOrigin = true;
                this.effectSlurDestination = this.nextBeat;
                if (this.effectSlurDestination) {
                    this.effectSlurDestination.effectSlurOrigin = this;
                }
            }
        }
        if (this.notes.length > 0 && visibleNotes === 0) {
            this.isEmpty = true;
        }
        // we need to clean al letring/palmmute flags for rests
        // in case the effect is not continued on this beat
        if (!this.isRest && (!this.isLetRing || !this.isPalmMute)) {
            let currentBeat = this.previousBeat;
            while (currentBeat && currentBeat.isRest) {
                if (!this.isLetRing) {
                    currentBeat.isLetRing = false;
                }
                if (!this.isPalmMute) {
                    currentBeat.isPalmMute = false;
                }
                currentBeat = currentBeat.previousBeat;
            }
        }
        else if (this.isRest &&
            this.previousBeat &&
            settings &&
            settings.notation.notationMode === NotationMode.GuitarPro) {
            if (this.previousBeat.isLetRing) {
                this.isLetRing = true;
            }
            if (this.previousBeat.isPalmMute) {
                this.isPalmMute = true;
            }
        }
        // try to detect what kind of bend was used and cleans unneeded points if required
        // Guitar Pro 6 and above (gpif.xml) uses exactly 4 points to define all whammys
        const points = this.whammyBarPoints;
        if (points.length > 0 && this.whammyBarType === WhammyType.Custom) {
            if (displayMode === NotationMode.SongBook) {
                this.whammyStyle = isGradual ? BendStyle.Gradual : BendStyle.Fast;
            }
            let isContinuedWhammy = !!this.previousBeat && this.previousBeat.hasWhammyBar;
            this.isContinuedWhammy = isContinuedWhammy;
            if (points.length === 4) {
                let origin = points[0];
                let middle1 = points[1];
                let middle2 = points[2];
                let destination = points[3];
                // the middle points are used for holds, anything else is a new feature we do not support yet
                if (middle1.value === middle2.value) {
                    // constant decrease or increase
                    if ((origin.value < middle1.value && middle1.value < destination.value) ||
                        (origin.value > middle1.value && middle1.value > destination.value)) {
                        if (origin.value !== 0 && !isContinuedWhammy) {
                            this.whammyBarType = WhammyType.PrediveDive;
                        }
                        else {
                            this.whammyBarType = WhammyType.Dive;
                        }
                        points.splice(2, 1);
                        points.splice(1, 1);
                    }
                    else if ((origin.value > middle1.value && middle1.value < destination.value) ||
                        (origin.value < middle1.value && middle1.value > destination.value)) {
                        this.whammyBarType = WhammyType.Dip;
                        if (middle1.offset === middle2.offset || displayMode === NotationMode.SongBook) {
                            points.splice(2, 1);
                        }
                    }
                    else if (origin.value === middle1.value && middle1.value === destination.value) {
                        if (origin.value !== 0 && !isContinuedWhammy) {
                            this.whammyBarType = WhammyType.Predive;
                        }
                        else {
                            this.whammyBarType = WhammyType.Hold;
                        }
                        points.splice(2, 1);
                        points.splice(1, 1);
                    }
                    else {
                        Logger.warning('Model', 'Unsupported whammy type detected, fallback to custom', null);
                    }
                }
                else {
                    Logger.warning('Model', 'Unsupported whammy type detected, fallback to custom', null);
                }
            }
        }
        this.updateDurations();
        if (needCopyBeatForBend) {
            // if this beat is a simple bend convert it to a grace beat
            // and generate a placeholder beat with tied notes
            let cloneBeat = BeatCloner.clone(this);
            cloneBeat.id = Beat._globalBeatId++;
            cloneBeat.pickStroke = PickStroke.None;
            for (let i = 0, j = cloneBeat.notes.length; i < j; i++) {
                let cloneNote = cloneBeat.notes[i];
                let note = this.notes[i];
                // remove bend on cloned note
                cloneNote.bendType = BendType.None;
                cloneNote.maxBendPoint = null;
                cloneNote.bendPoints = [];
                cloneNote.bendStyle = BendStyle.Default;
                cloneNote.id = Note.GlobalNoteId++;
                // fix ties
                if (note.isTieOrigin) {
                    cloneNote.tieDestination = note.tieDestination;
                    note.tieDestination.tieOrigin = cloneNote;
                }
                if (note.isTieDestination) {
                    cloneNote.tieOrigin = note.tieOrigin ? note.tieOrigin : null;
                    note.tieOrigin.tieDestination = cloneNote;
                }
                // if the note has a bend which is continued on the next note
                // we need to convert this note into a hold bend
                if (note.hasBend && note.isTieOrigin) {
                    let tieDestination = Note.findTieOrigin(note);
                    if (tieDestination && tieDestination.hasBend) {
                        cloneNote.bendType = BendType.Hold;
                        let lastPoint = note.bendPoints[note.bendPoints.length - 1];
                        cloneNote.addBendPoint(new BendPoint(0, lastPoint.value));
                        cloneNote.addBendPoint(new BendPoint(BendPoint.MaxPosition, lastPoint.value));
                    }
                }
                // mark as tied note
                cloneNote.isTieDestination = true;
            }
            this.graceType = GraceType.BendGrace;
            this.graceGroup = new GraceGroup();
            this.graceGroup.addBeat(this);
            this.graceGroup.isComplete = true;
            this.graceGroup.finish();
            this.updateDurations();
            this.voice.insertBeat(this, cloneBeat);
            // ensure cloned beat has also a grace simple grace group for itself
            // (see Voice.finish where every beat gets one)
            // this ensures later that grace rods are assigned correctly to this beat.
            cloneBeat.graceGroup = new GraceGroup();
            cloneBeat.graceGroup.addBeat(this);
            cloneBeat.graceGroup.isComplete = true;
            cloneBeat.graceGroup.finish();
        }
    }
    /**
     * Checks whether the current beat is timewise before the given beat.
     * @param beat
     * @returns
     */
    isBefore(beat) {
        return (this.voice.bar.index < beat.voice.bar.index ||
            (beat.voice.bar.index === this.voice.bar.index && this.index < beat.index));
    }
    /**
     * Checks whether the current beat is timewise after the given beat.
     * @param beat
     * @returns
     */
    isAfter(beat) {
        return (this.voice.bar.index > beat.voice.bar.index ||
            (beat.voice.bar.index === this.voice.bar.index && this.index > beat.index));
    }
    hasNoteOnString(noteString) {
        return this.noteStringLookup.has(noteString);
    }
    // TODO: can be likely eliminated
    getNoteWithRealValue(noteRealValue) {
        if (this.noteValueLookup.has(noteRealValue)) {
            return this.noteValueLookup.get(noteRealValue);
        }
        return null;
    }
    chain(sharedDataBag = null) {
        for (const n of this.notes) {
            this.noteValueLookup.set(n.realValue, n);
            n.chain(sharedDataBag);
        }
    }
}
Beat._globalBeatId = 0;

// TODO: rework model to specify for each finger 
// on which frets they are placed. 
/**
 * A chord definition.
 * @json
 * @json_strict
 */
class Chord {
    constructor() {
        /**
         * Gets or sets the name of the chord
         */
        this.name = '';
        /**
         * Indicates the first fret of the chord diagram.
         */
        this.firstFret = 1;
        /**
         * Gets or sets the frets played on the individual strings for this chord.
         * - The order in this list goes from the highest string to the lowest string.
         * - -1 indicates that the string is not played.
         */
        this.strings = [];
        /**
         * Gets or sets a list of frets where the finger should hold a barre
         */
        this.barreFrets = [];
        /**
         * Gets or sets whether the chord name is shown above the chord diagram.
         */
        this.showName = true;
        /**
         * Gets or sets whether the chord diagram is shown.
         */
        this.showDiagram = true;
        /**
         * Gets or sets whether the fingering is shown below the chord diagram.
         */
        this.showFingering = true;
    }
}

/**
 * This public enumeration lists all available key signatures
 */
var KeySignature;
(function (KeySignature) {
    /**
     * Cb (7 flats)
     */
    KeySignature[KeySignature["Cb"] = -7] = "Cb";
    /**
     * Gb (6 flats)
     */
    KeySignature[KeySignature["Gb"] = -6] = "Gb";
    /**
     * Db (5 flats)
     */
    KeySignature[KeySignature["Db"] = -5] = "Db";
    /**
     * Ab (4 flats)
     */
    KeySignature[KeySignature["Ab"] = -4] = "Ab";
    /**
     * Eb (3 flats)
     */
    KeySignature[KeySignature["Eb"] = -3] = "Eb";
    /**
     * Bb (2 flats)
     */
    KeySignature[KeySignature["Bb"] = -2] = "Bb";
    /**
     * F (1 flat)
     */
    KeySignature[KeySignature["F"] = -1] = "F";
    /**
     * C (no signs)
     */
    KeySignature[KeySignature["C"] = 0] = "C";
    /**
     * G (1 sharp)
     */
    KeySignature[KeySignature["G"] = 1] = "G";
    /**
     * D (2 sharp)
     */
    KeySignature[KeySignature["D"] = 2] = "D";
    /**
     * A (3 sharp)
     */
    KeySignature[KeySignature["A"] = 3] = "A";
    /**
     * E (4 sharp)
     */
    KeySignature[KeySignature["E"] = 4] = "E";
    /**
     * B (5 sharp)
     */
    KeySignature[KeySignature["B"] = 5] = "B";
    /**
     * F# (6 sharp)
     */
    KeySignature[KeySignature["FSharp"] = 6] = "FSharp";
    /**
     * C# (7 sharp)
     */
    KeySignature[KeySignature["CSharp"] = 7] = "CSharp";
})(KeySignature || (KeySignature = {}));

var LyricsState;
(function (LyricsState) {
    LyricsState[LyricsState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
    LyricsState[LyricsState["Begin"] = 1] = "Begin";
    LyricsState[LyricsState["Text"] = 2] = "Text";
    LyricsState[LyricsState["Comment"] = 3] = "Comment";
    LyricsState[LyricsState["Dash"] = 4] = "Dash";
})(LyricsState || (LyricsState = {}));
/**
 * Represents the lyrics of a song.
 */
class Lyrics {
    constructor() {
        /**
         * Gets or sets he start bar on which the lyrics should begin.
         */
        this.startBar = 0;
        /**
         * Gets or sets the raw lyrics text in Guitar Pro format.
         * (spaces split word syllables, plus merge syllables, [..] are comments)
         */
        this.text = '';
    }
    finish(skipEmptyEntries = false) {
        this.chunks = [];
        this.parse(this.text, 0, this.chunks, skipEmptyEntries);
    }
    parse(str, p, chunks, skipEmptyEntries) {
        if (!str) {
            return;
        }
        let state = LyricsState.Begin;
        let next = LyricsState.Begin;
        let skipSpace = false;
        let start = 0;
        while (p < str.length) {
            let c = str.charCodeAt(p);
            switch (state) {
                case LyricsState.IgnoreSpaces:
                    switch (c) {
                        case Lyrics.CharCodeLF:
                        case Lyrics.CharCodeCR:
                        case Lyrics.CharCodeTab:
                            break;
                        case Lyrics.CharCodeSpace:
                            if (!skipSpace) {
                                state = next;
                                continue;
                            }
                            break;
                        default:
                            skipSpace = false;
                            state = next;
                            continue;
                    }
                    break;
                case LyricsState.Begin:
                    switch (c) {
                        case Lyrics.CharCodeBrackedOpen:
                            state = LyricsState.Comment;
                            break;
                        default:
                            start = p;
                            state = LyricsState.Text;
                            continue;
                    }
                    break;
                case LyricsState.Comment:
                    switch (c) {
                        case Lyrics.CharCodeBrackedClose:
                            state = LyricsState.Begin;
                            break;
                    }
                    break;
                case LyricsState.Text:
                    switch (c) {
                        case Lyrics.CharCodeDash:
                            state = LyricsState.Dash;
                            break;
                        case Lyrics.CharCodeCR:
                        case Lyrics.CharCodeLF:
                        case Lyrics.CharCodeSpace:
                            let txt = str.substr(start, p - start);
                            this.addChunk(txt, skipEmptyEntries);
                            state = LyricsState.IgnoreSpaces;
                            next = LyricsState.Begin;
                            break;
                    }
                    break;
                case LyricsState.Dash:
                    switch (c) {
                        case Lyrics.CharCodeDash:
                            break;
                        default:
                            let txt = str.substr(start, p - start);
                            this.addChunk(txt, skipEmptyEntries);
                            skipSpace = true;
                            state = LyricsState.IgnoreSpaces;
                            next = LyricsState.Begin;
                            continue;
                    }
                    break;
            }
            p += 1;
        }
        if (state === LyricsState.Text) {
            if (p !== start) {
                this.addChunk(str.substr(start, p - start), skipEmptyEntries);
            }
        }
    }
    addChunk(txt, skipEmptyEntries) {
        txt = this.prepareChunk(txt);
        if (!skipEmptyEntries || (txt.length > 0 && txt !== '-')) {
            this.chunks.push(txt);
        }
    }
    prepareChunk(txt) {
        let chunk = txt.split('+').join(' ');
        // trim off trailing _ like "You____" becomes "You"
        let endLength = chunk.length;
        while (endLength > 0 && chunk.charAt(endLength - 1) === '_') {
            endLength--;
        }
        return endLength !== chunk.length ? chunk.substr(0, endLength) : chunk;
    }
}
Lyrics.CharCodeLF = 10;
Lyrics.CharCodeTab = 9;
Lyrics.CharCodeCR = 13;
Lyrics.CharCodeSpace = 32;
Lyrics.CharCodeBrackedClose = 93;
Lyrics.CharCodeBrackedOpen = 91;
Lyrics.CharCodeDash = 45;

/**
 * This public enumeration lists all available types of KeySignatures
 */
var KeySignatureType;
(function (KeySignatureType) {
    /**
     * Major
     */
    KeySignatureType[KeySignatureType["Major"] = 0] = "Major";
    /**
     * Minor
     */
    KeySignatureType[KeySignatureType["Minor"] = 1] = "Minor";
})(KeySignatureType || (KeySignatureType = {}));

/**
 * This public enumeration lists all feels of triplets.
 */
var TripletFeel;
(function (TripletFeel) {
    /**
     * No triplet feel
     */
    TripletFeel[TripletFeel["NoTripletFeel"] = 0] = "NoTripletFeel";
    /**
     * Triplet 16th
     */
    TripletFeel[TripletFeel["Triplet16th"] = 1] = "Triplet16th";
    /**
     * Triplet 8th
     */
    TripletFeel[TripletFeel["Triplet8th"] = 2] = "Triplet8th";
    /**
     * Dotted 16th
     */
    TripletFeel[TripletFeel["Dotted16th"] = 3] = "Dotted16th";
    /**
     * Dotted 8th
     */
    TripletFeel[TripletFeel["Dotted8th"] = 4] = "Dotted8th";
    /**
     * Scottish 16th
     */
    TripletFeel[TripletFeel["Scottish16th"] = 5] = "Scottish16th";
    /**
     * Scottish 8th
     */
    TripletFeel[TripletFeel["Scottish8th"] = 6] = "Scottish8th";
})(TripletFeel || (TripletFeel = {}));

/**
 * The MasterBar stores information about a bar which affects
 * all tracks.
 * @json
 * @json_strict
 */
class MasterBar {
    constructor() {
        /**
         * Gets or sets the bitflag for the alternate endings. Each bit defines for which repeat counts
         * the bar is played.
         */
        this.alternateEndings = 0;
        /**
         * Gets or sets the next masterbar in the song.
         * @json_ignore
         */
        this.nextMasterBar = null;
        /**
         * Gets or sets the next masterbar in the song.
         * @json_ignore
         */
        this.previousMasterBar = null;
        /**
         * Gets the zero based index of the masterbar.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the key signature used on all bars.
         */
        this.keySignature = KeySignature.C;
        /**
         * Gets or sets the type of key signature (major/minor)
         */
        this.keySignatureType = KeySignatureType.Major;
        /**
         * Gets or sets whether a double bar is shown for this masterbar.
         */
        this.isDoubleBar = false;
        /**
         * Gets or sets whether a repeat section starts on this masterbar.
         */
        this.isRepeatStart = false;
        /**
         * Gets or sets the number of repeats for the current repeat section.
         */
        this.repeatCount = 0;
        /**
         * Gets or sets the time signature numerator.
         */
        this.timeSignatureNumerator = 4;
        /**
         * Gets or sets the time signature denominiator.
         */
        this.timeSignatureDenominator = 4;
        /**
         * Gets or sets whether this is bar has a common time signature.
         */
        this.timeSignatureCommon = false;
        /**
         * Gets or sets the triplet feel that is valid for this bar.
         */
        this.tripletFeel = TripletFeel.NoTripletFeel;
        /**
         * Gets or sets the new section information for this bar.
         */
        this.section = null;
        /**
         * Gets or sets the tempo automation for this bar.
         */
        this.tempoAutomation = null;
        /**
         * Gets or sets the fermatas for this bar. The key is the offset of the fermata in midi ticks.
         * @json_add addFermata
         */
        this.fermata = new Map();
        /**
         * The timeline position of the voice within the whole score. (unit: midi ticks)
         */
        this.start = 0;
        /**
         * Gets or sets a value indicating whether the master bar is an anacrusis (aka. pickup bar)
         */
        this.isAnacrusis = false;
    }
    get isRepeatEnd() {
        return this.repeatCount > 0;
    }
    get isSectionStart() {
        return !!this.section;
    }
    /**
     * Calculates the time spent in this bar. (unit: midi ticks)
     */
    calculateDuration(respectAnacrusis = true) {
        if (this.isAnacrusis && respectAnacrusis) {
            let duration = 0;
            for (let track of this.score.tracks) {
                for (let staff of track.staves) {
                    let barDuration = this.index < staff.bars.length ? staff.bars[this.index].calculateDuration() : 0;
                    if (barDuration > duration) {
                        duration = barDuration;
                    }
                }
            }
            return duration;
        }
        return this.timeSignatureNumerator * MidiUtils.valueToTicks(this.timeSignatureDenominator);
    }
    /**
     * Adds a fermata to the masterbar.
     * @param offset The offset of the fermata within the bar in midi ticks.
     * @param fermata The fermata.
     */
    addFermata(offset, fermata) {
        this.fermata.set(offset, fermata);
    }
    /**
     * Gets the fermata for a given beat.
     * @param beat The beat to get the fermata for.
     * @returns
     */
    getFermata(beat) {
        const fermataMap = this.fermata;
        if (fermataMap.has(beat.playbackStart)) {
            return fermataMap.get(beat.playbackStart);
        }
        return null;
    }
}
MasterBar.MaxAlternateEndings = 8;

/**
 * This class represents the rendering stylesheet.
 * It contains settings which control the display of the score when rendered.
 * @json
 * @json_strict
 */
class RenderStylesheet {
    constructor() {
        /**
         * Gets or sets whether dynamics are hidden.
         */
        this.hideDynamics = false;
    }
}

/**
 * This public class can store the information about a group of measures which are repeated
 */
class RepeatGroup {
    constructor() {
        /**
         * All masterbars repeated within this group
         */
        this.masterBars = [];
        /**
         * the masterbars which opens the group.
         */
        this.opening = null;
        /**
         * a list of masterbars which close the group.
         */
        this.closings = [];
        /**
         * true if the repeat group was closed well
         */
        this.isClosed = false;
    }
    /**
     * a list of masterbars which open the group.
     * @deprecated There can only be one opening, use the opening property instead
     */
    get openings() {
        const opening = this.opening;
        return opening ? [opening] : [];
    }
    /**
     * Gets whether this repeat group is really opened as a repeat.
     */
    get isOpened() { var _a; return ((_a = this.opening) === null || _a === void 0 ? void 0 : _a.isRepeatStart) === true; }
    addMasterBar(masterBar) {
        if (this.opening === null) {
            this.opening = masterBar;
        }
        this.masterBars.push(masterBar);
        masterBar.repeatGroup = this;
        if (masterBar.isRepeatEnd) {
            this.closings.push(masterBar);
            this.isClosed = true;
        }
    }
}

/**
 * The score is the root node of the complete
 * model. It stores the basic information of
 * a song and stores the sub components.
 * @json
 * @json_strict
 */
class Score {
    constructor() {
        this._currentRepeatGroup = null;
        this._openedRepeatGroups = [];
        this._properlyOpenedRepeatGroups = 0;
        /**
         * The album of this song.
         */
        this.album = '';
        /**
         * The artist who performs this song.
         */
        this.artist = '';
        /**
         * The owner of the copyright of this song.
         */
        this.copyright = '';
        /**
         * Additional instructions
         */
        this.instructions = '';
        /**
         * The author of the music.
         */
        this.music = '';
        /**
         * Some additional notes about the song.
         */
        this.notices = '';
        /**
         * The subtitle of the song.
         */
        this.subTitle = '';
        /**
         * The title of the song.
         */
        this.title = '';
        /**
         * The author of the song lyrics
         */
        this.words = '';
        /**
         * The author of this tablature.
         */
        this.tab = '';
        /**
         * Gets or sets the global tempo of the song in BPM. The tempo might change via {@link MasterBar.tempo}.
         */
        this.tempo = 120;
        /**
         * Gets or sets the name/label of the tempo.
         */
        this.tempoLabel = '';
        /**
         * Gets or sets a list of all masterbars contained in this song.
         * @json_add addMasterBar
         */
        this.masterBars = [];
        /**
         * Gets or sets a list of all tracks contained in this song.
         * @json_add addTrack
         */
        this.tracks = [];
        /**
         * Gets or sets the rendering stylesheet for this song.
         */
        this.stylesheet = new RenderStylesheet();
    }
    rebuildRepeatGroups() {
        this._currentRepeatGroup = null;
        this._openedRepeatGroups = [];
        this._properlyOpenedRepeatGroups = 0;
        for (const bar of this.masterBars) {
            this.addMasterBarToRepeatGroups(bar);
        }
    }
    addMasterBar(bar) {
        bar.score = this;
        bar.index = this.masterBars.length;
        if (this.masterBars.length !== 0) {
            bar.previousMasterBar = this.masterBars[this.masterBars.length - 1];
            bar.previousMasterBar.nextMasterBar = bar;
            // TODO: this will not work on anacrusis. Correct anacrusis durations are only working
            // when there are beats with playback positions already computed which requires full finish
            // chicken-egg problem here. temporarily forcing anacrusis length here to 0
            bar.start =
                bar.previousMasterBar.start +
                    (bar.previousMasterBar.isAnacrusis ? 0 : bar.previousMasterBar.calculateDuration());
        }
        this.addMasterBarToRepeatGroups(bar);
        this.masterBars.push(bar);
    }
    /**
     * Adds the given bar correctly into the current repeat group setup.
     * @param bar
     */
    addMasterBarToRepeatGroups(bar) {
        // handling the repeats is quite tricky due to many invalid combinations a user might define
        // there are also some complexities due to nested repeats and repeats with multiple endings but only one opening.
        // all scenarios are handled below.
        var _a;
        // NOTE: In all paths we need to ensure that the bar is added to some repeat group
        // start a new repeat group if really a repeat is started
        // or we don't have a group.
        if (bar.isRepeatStart) {
            // if the current group was already closed (this opening doesn't cause nesting)
            // we consider the group as completed
            if ((_a = this._currentRepeatGroup) === null || _a === void 0 ? void 0 : _a.isClosed) {
                this._openedRepeatGroups.pop();
                this._properlyOpenedRepeatGroups--;
            }
            this._currentRepeatGroup = new RepeatGroup();
            this._openedRepeatGroups.push(this._currentRepeatGroup);
            this._properlyOpenedRepeatGroups++;
        }
        else if (!this._currentRepeatGroup) {
            this._currentRepeatGroup = new RepeatGroup();
            this._openedRepeatGroups.push(this._currentRepeatGroup);
        }
        // close current group if there was one started
        this._currentRepeatGroup.addMasterBar(bar);
        // handle repeat ends
        if (bar.isRepeatEnd) {
            // if we have nested repeat groups a repeat end
            // will treat the group as completed
            if (this._properlyOpenedRepeatGroups > 1) {
                this._openedRepeatGroups.pop();
                this._properlyOpenedRepeatGroups--;
                // restore outer group in cases like "open open close close"
                this._currentRepeatGroup =
                    this._openedRepeatGroups.length > 0
                        ? this._openedRepeatGroups[this._openedRepeatGroups.length - 1]
                        : null;
            }
            // else: if only one group is opened, this group stays active for 
            // scenarios like open close bar close
        }
    }
    addTrack(track) {
        track.score = this;
        track.index = this.tracks.length;
        this.tracks.push(track);
    }
    finish(settings) {
        const sharedDataBag = new Map();
        for (let i = 0, j = this.tracks.length; i < j; i++) {
            this.tracks[i].finish(settings, sharedDataBag);
        }
    }
}

/**
 * This public class is used to describe the beginning of a
 * section within a song. It acts like a marker.
 * @json
 * @json_strict
 */
class Section {
    constructor() {
        /**
         * Gets or sets the marker ID for this section.
         */
        this.marker = '';
        /**
         * Gets or sets the descriptional text of this section.
         */
        this.text = '';
    }
}

/**
 * An invalid input format was detected (e.g. invalid setting values, file formats,...)
 */
class FormatError extends AlphaTabError {
    constructor(message) {
        super(AlphaTabErrorType.Format, message);
        Object.setPrototypeOf(this, FormatError.prototype);
    }
}

/**
 * @json_immutable
 */
class Color {
    /**
     * Initializes a new instance of the {@link Color} class.
     * @param r The red component.
     * @param g The green component.
     * @param b The blue component.
     * @param a The alpha component.
     */
    constructor(r, g, b, a = 0xff) {
        /**
         * Gets or sets the raw RGBA value.
         */
        this.raw = 0;
        this.raw = ((a & 0xff) << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
        this.updateRgba();
    }
    updateRgba() {
        if (this.a === 0xff) {
            this.rgba =
                '#' +
                    ModelUtils.toHexString(this.r, 2) +
                    ModelUtils.toHexString(this.g, 2) +
                    ModelUtils.toHexString(this.b, 2);
        }
        else {
            this.rgba = `rgba(${this.r},${this.g},${this.b},${this.a / 255.0})`;
        }
    }
    get a() {
        return (this.raw >> 24) & 0xff;
    }
    get r() {
        return (this.raw >> 16) & 0xff;
    }
    get g() {
        return (this.raw >> 8) & 0xff;
    }
    get b() {
        return this.raw & 0xff;
    }
    static random(opacity = 100) {
        return new Color((Math.random() * 255) | 0, (Math.random() * 255) | 0, (Math.random() * 255) | 0, opacity);
    }
    static fromJson(v) {
        switch (typeof v) {
            case 'number': {
                const c = new Color(0, 0, 0, 0);
                c.raw = v;
                c.updateRgba();
                return c;
            }
            case 'string': {
                const json = v;
                if (json.startsWith('#')) {
                    if (json.length === 4) {
                        // #RGB
                        return new Color(parseInt(json[1], 16) * 17, parseInt(json[2], 16) * 17, parseInt(json[3], 16) * 17);
                    }
                    if (json.length === 5) {
                        // #RGBA
                        return new Color(parseInt(json[1], 16) * 17, parseInt(json[2], 16) * 17, parseInt(json[3], 16) * 17, parseInt(json[4], 16) * 17);
                    }
                    if (json.length === 7) {
                        // #RRGGBB
                        return new Color(parseInt(json.substring(1, 3), 16), parseInt(json.substring(3, 5), 16), parseInt(json.substring(5, 7), 16));
                    }
                    if (json.length === 9) {
                        // #RRGGBBAA
                        return new Color(parseInt(json.substring(1, 3), 16), parseInt(json.substring(3, 5), 16), parseInt(json.substring(5, 7), 16), parseInt(json.substring(7, 9), 16));
                    }
                }
                else if (json.startsWith('rgba') || json.startsWith('rgb')) {
                    const start = json.indexOf('(');
                    const end = json.lastIndexOf(')');
                    if (start === -1 || end === -1) {
                        throw new FormatError('No values specified for rgb/rgba function');
                    }
                    const numbers = json.substring(start + 1, end).split(',');
                    if (numbers.length === 3) {
                        return new Color(parseInt(numbers[0]), parseInt(numbers[1]), parseInt(numbers[2]));
                    }
                    if (numbers.length === 4) {
                        return new Color(parseInt(numbers[0]), parseInt(numbers[1]), parseInt(numbers[2]), parseFloat(numbers[3]) * 255);
                    }
                }
                return null;
            }
        }
        throw new FormatError('Unsupported format for color');
    }
    static toJson(obj) {
        return obj.raw;
    }
}
Color.BlackRgb = '#000000';

/**
 * This public class stores the midi specific information of a track needed
 * for playback.
 * @json
 * @json_strict
 */
class PlaybackInformation {
    constructor() {
        /**
         * Gets or sets the volume (0-16)
         */
        this.volume = 15;
        /**
         * Gets or sets the balance (0-16; 8=center)
         */
        this.balance = 8;
        /**
         * Gets or sets the midi port to use.
         */
        this.port = 1;
        /**
         * Gets or sets the midi program to use.
         */
        this.program = 0;
        /**
         * Gets or sets the primary channel for all normal midi events.
         */
        this.primaryChannel = 0;
        /**
         * Gets or sets the secondary channel for special midi events.
         */
        this.secondaryChannel = 0;
        /**
         * Gets or sets whether the track is muted.
         */
        this.isMute = false;
        /**
         * Gets or sets whether the track is playing alone.
         */
        this.isSolo = false;
    }
}

/**
 * This public class represents a predefined string tuning.
 * @json
 * @json_strict
 */
class Tuning {
    /**
     * Initializes a new instance of the {@link Tuning} class.
     * @param name The name.
     * @param tuning The tuning.
     * @param isStandard if set to`true`[is standard].
     */
    constructor(name = '', tuning = null, isStandard = false) {
        this.isStandard = isStandard;
        this.name = name;
        this.tunings = tuning !== null && tuning !== void 0 ? tuning : [];
    }
    static getTextForTuning(tuning, includeOctave) {
        let parts = Tuning.getTextPartsForTuning(tuning);
        return includeOctave ? parts.join('') : parts[0];
    }
    static getTextPartsForTuning(tuning, octaveShift = -1) {
        let octave = (tuning / 12) | 0;
        let note = tuning % 12;
        let notes = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];
        return [notes[note], (octave + octaveShift).toString()];
    }
    /**
     * Gets the default tuning for the given string count.
     * @param stringCount The string count.
     * @returns The tuning for the given string count or null if the string count is not defined.
     */
    static getDefaultTuningFor(stringCount) {
        if (Tuning._defaultTunings.has(stringCount)) {
            return Tuning._defaultTunings.get(stringCount);
        }
        return null;
    }
    /**
     * Gets a list of all tuning presets for a given stirng count.
     * @param stringCount The string count.
     * @returns The list of known tunings for the given string count or an empty list if the string count is not defined.
     */
    static getPresetsFor(stringCount) {
        switch (stringCount) {
            case 7:
                return Tuning._sevenStrings;
            case 6:
                return Tuning._sixStrings;
            case 5:
                return Tuning._fiveStrings;
            case 4:
                return Tuning._fourStrings;
        }
        return [];
    }
    static initialize() {
        Tuning._defaultTunings.set(7, new Tuning('Guitar 7 strings', [64, 59, 55, 50, 45, 40, 35], true));
        Tuning._sevenStrings.push(Tuning._defaultTunings.get(7));
        Tuning._defaultTunings.set(6, new Tuning('Guitar Standard Tuning', [64, 59, 55, 50, 45, 40], true));
        Tuning._sixStrings.push(Tuning._defaultTunings.get(6));
        Tuning._sixStrings.push(new Tuning('Guitar Tune down Â½ step', [63, 58, 54, 49, 44, 39], false));
        Tuning._sixStrings.push(new Tuning('Guitar Tune down 1 step', [62, 57, 53, 48, 43, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Tune down 2 step', [60, 55, 51, 46, 41, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning', [64, 59, 55, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Dropped D Tuning variant', [64, 57, 55, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Double Dropped D Tuning', [62, 59, 55, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Dropped E Tuning', [66, 61, 57, 52, 47, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Dropped C Tuning', [62, 57, 53, 48, 43, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open C Tuning', [64, 60, 55, 48, 43, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Cm Tuning', [63, 60, 55, 48, 43, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open C6 Tuning', [64, 57, 55, 48, 43, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Cmaj7 Tuning', [64, 59, 55, 52, 43, 36], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open D Tuning', [62, 57, 54, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Dm Tuning', [62, 57, 53, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open D5 Tuning', [62, 57, 50, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open D6 Tuning', [62, 59, 54, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Dsus4 Tuning', [62, 57, 55, 50, 45, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open E Tuning', [64, 59, 56, 52, 47, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Em Tuning', [64, 59, 55, 52, 47, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Esus11 Tuning', [64, 59, 55, 52, 45, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open F Tuning', [65, 60, 53, 48, 45, 41], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open G Tuning', [62, 59, 55, 50, 43, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Gm Tuning', [62, 58, 55, 50, 43, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open G6 Tuning', [64, 59, 55, 50, 43, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Gsus4 Tuning', [62, 60, 55, 50, 43, 38], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open A Tuning', [64, 61, 57, 52, 45, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Open Am Tuning', [64, 60, 57, 52, 45, 40], false));
        Tuning._sixStrings.push(new Tuning('Guitar Nashville Tuning', [64, 59, 67, 62, 57, 52], false));
        Tuning._sixStrings.push(new Tuning('Bass 6 Strings Tuning', [48, 43, 38, 33, 28, 23], false));
        Tuning._sixStrings.push(new Tuning('Lute or Vihuela Tuning', [64, 59, 54, 50, 45, 40], false));
        Tuning._defaultTunings.set(5, new Tuning('Bass 5 Strings Tuning', [43, 38, 33, 28, 23], true));
        Tuning._fiveStrings.push(Tuning._defaultTunings.get(5));
        Tuning._fiveStrings.push(new Tuning('Banjo Dropped C Tuning', [62, 59, 55, 48, 67], false));
        Tuning._fiveStrings.push(new Tuning('Banjo Open D Tuning', [62, 57, 54, 50, 69], false));
        Tuning._fiveStrings.push(new Tuning('Banjo Open G Tuning', [62, 59, 55, 50, 67], false));
        Tuning._fiveStrings.push(new Tuning('Banjo G Minor Tuning', [62, 58, 55, 50, 67], false));
        Tuning._fiveStrings.push(new Tuning('Banjo G Modal Tuning', [62, 57, 55, 50, 67], false));
        Tuning._defaultTunings.set(4, new Tuning('Bass Standard Tuning', [43, 38, 33, 28], true));
        Tuning._fourStrings.push(Tuning._defaultTunings.get(4));
        Tuning._fourStrings.push(new Tuning('Bass Tune down Â½ step', [42, 37, 32, 27], false));
        Tuning._fourStrings.push(new Tuning('Bass Tune down 1 step', [41, 36, 31, 26], false));
        Tuning._fourStrings.push(new Tuning('Bass Tune down 2 step', [39, 34, 29, 24], false));
        Tuning._fourStrings.push(new Tuning('Bass Dropped D Tuning', [43, 38, 33, 26], false));
        Tuning._fourStrings.push(new Tuning('Ukulele C Tuning', [45, 40, 36, 43], false));
        Tuning._fourStrings.push(new Tuning('Ukulele G Tuning', [52, 47, 43, 38], false));
        Tuning._fourStrings.push(new Tuning('Mandolin Standard Tuning', [64, 57, 50, 43], false));
        Tuning._fourStrings.push(new Tuning('Mandolin or Violin Tuning', [76, 69, 62, 55], false));
        Tuning._fourStrings.push(new Tuning('Viola Tuning', [69, 62, 55, 48], false));
        Tuning._fourStrings.push(new Tuning('Cello Tuning', [57, 50, 43, 36], false));
    }
    /**
     * Tries to find a known tuning by a given list of tuning values.
     * @param strings The values defining the tuning.
     * @returns The known tuning.
     */
    static findTuning(strings) {
        let tunings = Tuning.getPresetsFor(strings.length);
        for (let t = 0, tc = tunings.length; t < tc; t++) {
            let tuning = tunings[t];
            let equals = true;
            for (let i = 0, j = strings.length; i < j; i++) {
                if (strings[i] !== tuning.tunings[i]) {
                    equals = false;
                    break;
                }
            }
            if (equals) {
                return tuning;
            }
        }
        return null;
    }
    /**
     * Tries to detect the name and standard flag of the tuning from a known tuning list based
     * on the string values.
     */
    finish() {
        const knownTuning = Tuning.findTuning(this.tunings);
        if (knownTuning) {
            this.name = knownTuning.name;
            this.isStandard = knownTuning.isStandard;
        }
        this.name = this.name.trim();
    }
}
Tuning._sevenStrings = [];
Tuning._sixStrings = [];
Tuning._fiveStrings = [];
Tuning._fourStrings = [];
Tuning._defaultTunings = new Map();
Tuning.defaultAccidentals = ['', '#', '', '#', '', '', '#', '', '#', '', '#', ''];
Tuning.defaultSteps = ['C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'];
Tuning.initialize();

/**
 * This class describes a single staff within a track. There are instruments like pianos
 * where a single track can contain multiple staffs.
 * @json
 * @json_strict
 */
class Staff {
    constructor() {
        /**
         * Gets or sets the zero-based index of this staff within the track.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets a list of all bars contained in this staff.
         * @json_add addBar
         */
        this.bars = [];
        /**
         * Gets or sets a list of all chords defined for this staff. {@link Beat.chordId} refers to entries in this lookup.
         * @json_add addChord
         */
        this.chords = new Map();
        /**
         * Gets or sets the fret on which a capo is set.
         */
        this.capo = 0;
        /**
         * Gets or sets the number of semitones this track should be
         * transposed. This applies to rendering and playback.
         */
        this.transpositionPitch = 0;
        /**
         * Gets or sets the number of semitones this track should be
         * transposed. This applies only to rendering.
         */
        this.displayTranspositionPitch = 0;
        /**
         * Get or set the guitar tuning of the guitar. This tuning also indicates the number of strings shown in the
         * guitar tablature. Unlike the {@link Note.string} property this array directly represents
         * the order of the tracks shown in the tablature. The first item is the most top tablature line.
         */
        this.stringTuning = new Tuning('', [], false);
        /**
         * Gets or sets whether the tabs are shown.
         */
        this.showTablature = true;
        /**
         * Gets or sets whether the standard notation is shown.
         */
        this.showStandardNotation = true;
        /**
         * Gets or sets whether the staff contains percussion notation
         */
        this.isPercussion = false;
        /**
         * The number of lines shown for the standard notation.
         * For some percussion instruments this number might vary.
         */
        this.standardNotationLineCount = 5;
    }
    /**
     * Get or set the values of the related guitar tuning.
     */
    get tuning() {
        return this.stringTuning.tunings;
    }
    /**
     * Gets or sets the name of the tuning.
     */
    get tuningName() {
        return this.stringTuning.name;
    }
    get isStringed() {
        return this.stringTuning.tunings.length > 0;
    }
    finish(settings, sharedDataBag = null) {
        this.stringTuning.finish();
        for (let i = 0, j = this.bars.length; i < j; i++) {
            this.bars[i].finish(settings, sharedDataBag);
        }
    }
    addChord(chordId, chord) {
        chord.staff = this;
        this.chords.set(chordId, chord);
    }
    hasChord(chordId) {
        return this.chords.has(chordId);
    }
    getChord(chordId) {
        return this.chords.get(chordId);
    }
    addBar(bar) {
        let bars = this.bars;
        bar.staff = this;
        bar.index = bars.length;
        if (bars.length > 0) {
            bar.previousBar = bars[bars.length - 1];
            bar.previousBar.nextBar = bar;
        }
        bars.push(bar);
    }
}

/**
 * This public class describes a single track or instrument of score.
 * It is bascially a list of staffs containing individual music notation kinds.
 * @json
 * @json_strict
 */
class Track {
    constructor() {
        /**
         * Gets or sets the zero-based index of this track.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the list of staffs that are defined for this track.
         * @json_add addStaff
         */
        this.staves = [];
        /**
         * Gets or sets the playback information for this track.
         */
        this.playbackInfo = new PlaybackInformation();
        /**
         * Gets or sets the display color defined for this track.
         */
        this.color = new Color(200, 0, 0, 255);
        /**
         * Gets or sets the long name of this track.
         */
        this.name = '';
        /**
         * Gets or sets the short name of this track.
         */
        this.shortName = '';
        /**
         * Gets or sets a mapping on which staff liens particular percussion instruments
         * should be shown.
         */
        this.percussionArticulations = [];
    }
    ensureStaveCount(staveCount) {
        while (this.staves.length < staveCount) {
            this.addStaff(new Staff());
        }
    }
    addStaff(staff) {
        staff.index = this.staves.length;
        staff.track = this;
        this.staves.push(staff);
    }
    finish(settings, sharedDataBag = null) {
        if (!this.shortName) {
            this.shortName = this.name;
            if (this.shortName.length > Track.ShortNameMaxLength) {
                this.shortName = this.shortName.substr(0, Track.ShortNameMaxLength);
            }
        }
        for (let i = 0, j = this.staves.length; i < j; i++) {
            this.staves[i].finish(settings, sharedDataBag);
        }
    }
    applyLyrics(lyrics) {
        for (let lyric of lyrics) {
            lyric.finish();
        }
        let staff = this.staves[0];
        for (let li = 0; li < lyrics.length; li++) {
            let lyric = lyrics[li];
            if (lyric.startBar >= 0 && lyric.startBar < staff.bars.length) {
                let beat = staff.bars[lyric.startBar].voices[0].beats[0];
                for (let ci = 0; ci < lyric.chunks.length && beat; ci++) {
                    // skip rests and empty beats
                    while (beat && (beat.isEmpty || beat.isRest)) {
                        beat = beat.nextBeat;
                    }
                    // mismatch between chunks and beats might lead to missing beats
                    if (beat) {
                        // initialize lyrics list for beat if required
                        if (!beat.lyrics) {
                            beat.lyrics = new Array(lyrics.length);
                        }
                        // assign chunk
                        beat.lyrics[li] = lyric.chunks[ci];
                        beat = beat.nextBeat;
                    }
                }
            }
        }
    }
}
Track.ShortNameMaxLength = 10;

/**
 * A voice represents a group of beats
 * that can be played during a bar.
 * @json
 * @json_strict
 */
class Voice$1 {
    constructor() {
        /**
         * Gets or sets the unique id of this bar.
         */
        this.id = Voice$1._globalBarId++;
        /**
         * Gets or sets the zero-based index of this voice within the bar.
         * @json_ignore
         */
        this.index = 0;
        /**
         * Gets or sets the list of beats contained in this voice.
         * @json_add addBeat
         */
        this.beats = [];
        /**
         * Gets or sets a value indicating whether this voice is empty.
         */
        this.isEmpty = true;
    }
    insertBeat(after, newBeat) {
        newBeat.nextBeat = after.nextBeat;
        if (newBeat.nextBeat) {
            newBeat.nextBeat.previousBeat = newBeat;
        }
        newBeat.previousBeat = after;
        newBeat.voice = this;
        after.nextBeat = newBeat;
        this.beats.splice(after.index + 1, 0, newBeat);
    }
    addBeat(beat) {
        beat.voice = this;
        beat.index = this.beats.length;
        this.beats.push(beat);
        if (!beat.isEmpty) {
            this.isEmpty = false;
        }
    }
    chain(beat, sharedDataBag = null) {
        if (!this.bar) {
            return;
        }
        if (beat.index < this.beats.length - 1) {
            beat.nextBeat = this.beats[beat.index + 1];
            beat.nextBeat.previousBeat = beat;
        }
        else if (beat.isLastOfVoice && beat.voice.bar.nextBar) {
            let nextVoice = this.bar.nextBar.voices[this.index];
            if (nextVoice.beats.length > 0) {
                beat.nextBeat = nextVoice.beats[0];
                beat.nextBeat.previousBeat = beat;
            }
            else {
                beat.nextBeat.previousBeat = beat;
            }
        }
        beat.chain(sharedDataBag);
    }
    addGraceBeat(beat) {
        if (this.beats.length === 0) {
            this.addBeat(beat);
            return;
        }
        // remove last beat
        let lastBeat = this.beats[this.beats.length - 1];
        this.beats.splice(this.beats.length - 1, 1);
        // insert grace beat
        this.addBeat(beat);
        // reinsert last beat
        this.addBeat(lastBeat);
        this.isEmpty = false;
    }
    getBeatAtPlaybackStart(playbackStart) {
        if (this._beatLookup.has(playbackStart)) {
            return this._beatLookup.get(playbackStart);
        }
        return null;
    }
    finish(settings, sharedDataBag = null) {
        this._beatLookup = new Map();
        let currentGraceGroup = null;
        for (let index = 0; index < this.beats.length; index++) {
            let beat = this.beats[index];
            beat.index = index;
            this.chain(beat, sharedDataBag);
            if (beat.graceType === GraceType.None) {
                beat.graceGroup = currentGraceGroup;
                if (currentGraceGroup) {
                    currentGraceGroup.isComplete = true;
                }
                currentGraceGroup = null;
            }
            else {
                if (!currentGraceGroup) {
                    currentGraceGroup = new GraceGroup();
                }
                currentGraceGroup.addBeat(beat);
            }
        }
        let currentDisplayTick = 0;
        let currentPlaybackTick = 0;
        for (let i = 0; i < this.beats.length; i++) {
            let beat = this.beats[i];
            beat.index = i;
            beat.finish(settings, sharedDataBag);
            // if this beat is a non-grace but has grace notes
            // we need to first steal the duration from the right beat
            // and place the grace beats correctly
            if (beat.graceType === GraceType.None) {
                if (beat.graceGroup) {
                    const firstGraceBeat = beat.graceGroup.beats[0];
                    const lastGraceBeat = beat.graceGroup.beats[beat.graceGroup.beats.length - 1];
                    if (firstGraceBeat.graceType !== GraceType.BendGrace) {
                        // find out the stolen duration first
                        let stolenDuration = lastGraceBeat.playbackStart + lastGraceBeat.playbackDuration - firstGraceBeat.playbackStart;
                        switch (firstGraceBeat.graceType) {
                            case GraceType.BeforeBeat:
                                // steal duration from previous beat and then place grace beats newly
                                if (firstGraceBeat.previousBeat) {
                                    firstGraceBeat.previousBeat.playbackDuration -= stolenDuration;
                                    // place beats starting after new beat end
                                    if (firstGraceBeat.previousBeat.voice == this) {
                                        currentPlaybackTick =
                                            firstGraceBeat.previousBeat.playbackStart +
                                                firstGraceBeat.previousBeat.playbackDuration;
                                    }
                                    else {
                                        // stealing into the previous bar
                                        currentPlaybackTick = -stolenDuration;
                                    }
                                }
                                else {
                                    // before-beat on start is somehow not possible as it causes negative ticks
                                    currentPlaybackTick = -stolenDuration;
                                }
                                for (const graceBeat of beat.graceGroup.beats) {
                                    this._beatLookup.delete(graceBeat.playbackStart);
                                    graceBeat.playbackStart = currentPlaybackTick;
                                    this._beatLookup.set(graceBeat.playbackStart, beat);
                                    currentPlaybackTick += graceBeat.playbackDuration;
                                }
                                break;
                            case GraceType.OnBeat:
                                // steal duration from current beat
                                beat.playbackDuration -= stolenDuration;
                                if (lastGraceBeat.voice === this) {
                                    // with changed durations, update current position to be after the last grace beat
                                    currentPlaybackTick = lastGraceBeat.playbackStart + lastGraceBeat.playbackDuration;
                                }
                                else {
                                    // if last grace beat is on the previous bar, we shift the time back to have the note played earlier
                                    currentPlaybackTick = -stolenDuration;
                                }
                                break;
                        }
                    }
                }
                beat.displayStart = currentDisplayTick;
                beat.playbackStart = currentPlaybackTick;
                if (beat.fermata) {
                    this.bar.masterBar.addFermata(beat.playbackStart, beat.fermata);
                }
                else {
                    beat.fermata = this.bar.masterBar.getFermata(beat);
                }
                this._beatLookup.set(beat.playbackStart, beat);
            }
            else {
                beat.displayStart = currentDisplayTick;
                beat.playbackStart = currentPlaybackTick;
            }
            beat.finishTuplet();
            if (beat.graceGroup) {
                beat.graceGroup.finish();
            }
            currentDisplayTick += beat.displayDuration;
            currentPlaybackTick += beat.playbackDuration;
        }
    }
    calculateDuration() {
        if (this.isEmpty || this.beats.length === 0) {
            return 0;
        }
        let lastBeat = this.beats[this.beats.length - 1];
        let firstBeat = this.beats[0];
        return lastBeat.playbackStart + lastBeat.playbackDuration - firstBeat.playbackStart;
    }
}
Voice$1._globalBarId = 0;

/**
 * @target web
 */
class TypeConversions {
    static float64ToBytes(v) {
        TypeConversions._dataView.setFloat64(0, v, true);
        return this._conversionByteArray;
    }
    static bytesToFloat64(bytes) {
        TypeConversions._conversionByteArray.set(bytes, 0);
        throw TypeConversions._dataView.getFloat64(0, true);
    }
    static uint16ToInt16(v) {
        TypeConversions._dataView.setUint16(0, v, true);
        return TypeConversions._dataView.getInt16(0, true);
    }
    static int16ToUint32(v) {
        TypeConversions._dataView.setInt16(0, v, true);
        return TypeConversions._dataView.getUint32(0, true);
    }
    static int32ToUint16(v) {
        TypeConversions._dataView.setInt32(0, v, true);
        return TypeConversions._dataView.getUint16(0, true);
    }
    static int32ToInt16(v) {
        TypeConversions._dataView.setInt32(0, v, true);
        return TypeConversions._dataView.getInt16(0, true);
    }
    static int32ToUint32(v) {
        TypeConversions._dataView.setInt32(0, v, true);
        return TypeConversions._dataView.getUint32(0, true);
    }
    static uint8ToInt8(v) {
        TypeConversions._dataView.setUint8(0, v);
        return TypeConversions._dataView.getInt8(0);
    }
}
TypeConversions._conversionBuffer = new ArrayBuffer(8);
TypeConversions._conversionByteArray = new Uint8Array(TypeConversions._conversionBuffer);
TypeConversions._dataView = new DataView(TypeConversions._conversionBuffer);

class IOHelper {
    static readInt32BE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        let ch3 = input.readByte();
        let ch4 = input.readByte();
        return (ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4;
    }
    static readInt32LE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        let ch3 = input.readByte();
        let ch4 = input.readByte();
        return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
    }
    static readUInt32LE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        let ch3 = input.readByte();
        let ch4 = input.readByte();
        return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
    }
    static decodeUInt32LE(data, index) {
        let ch1 = data[index];
        let ch2 = data[index + 1];
        let ch3 = data[index + 2];
        let ch4 = data[index + 3];
        return (ch4 << 24) | (ch3 << 16) | (ch2 << 8) | ch1;
    }
    static readUInt16LE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        return TypeConversions.int32ToUint16((ch2 << 8) | ch1);
    }
    static readInt16LE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        return TypeConversions.int32ToInt16((ch2 << 8) | ch1);
    }
    static readUInt32BE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        let ch3 = input.readByte();
        let ch4 = input.readByte();
        return TypeConversions.int32ToUint32((ch1 << 24) | (ch2 << 16) | (ch3 << 8) | ch4);
    }
    static readUInt16BE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
    }
    static readInt16BE(input) {
        let ch1 = input.readByte();
        let ch2 = input.readByte();
        return TypeConversions.int32ToInt16((ch1 << 8) | ch2);
    }
    static readByteArray(input, length) {
        let v = new Uint8Array(length);
        input.read(v, 0, length);
        return v;
    }
    static read8BitChars(input, length) {
        let b = new Uint8Array(length);
        input.read(b, 0, b.length);
        return IOHelper.toString(b, 'utf-8');
    }
    static read8BitString(input) {
        let s = '';
        let c = input.readByte();
        while (c !== 0) {
            s += String.fromCharCode(c);
            c = input.readByte();
        }
        return s;
    }
    static read8BitStringLength(input, length) {
        let s = '';
        let z = -1;
        for (let i = 0; i < length; i++) {
            let c = input.readByte();
            if (c === 0 && z === -1) {
                z = i;
            }
            s += String.fromCharCode(c);
        }
        let t = s;
        if (z >= 0) {
            return t.substr(0, z);
        }
        return t;
    }
    static readSInt8(input) {
        let v = input.readByte();
        return ((v & 255) >> 7) * -256 + (v & 255);
    }
    static readInt24(input, index) {
        let i = input[index] | (input[index + 1] << 8) | (input[index + 2] << 16);
        if ((i & 0x800000) === 0x800000) {
            i = i | (0xff << 24);
        }
        return i;
    }
    static readInt16(input, index) {
        return TypeConversions.int32ToInt16(input[index] | (input[index + 1] << 8));
    }
    static toString(data, encoding) {
        let detectedEncoding = IOHelper.detectEncoding(data);
        if (detectedEncoding) {
            encoding = detectedEncoding;
        }
        if (!encoding) {
            encoding = 'utf-8';
        }
        let decoder = new TextDecoder(encoding);
        return decoder.decode(data.buffer);
    }
    static detectEncoding(data) {
        if (data.length > 2 && data[0] === 0xfe && data[1] === 0xff) {
            return 'utf-16be';
        }
        if (data.length > 2 && data[0] === 0xff && data[1] === 0xfe) {
            return 'utf-16le';
        }
        if (data.length > 4 && data[0] === 0x00 && data[1] === 0x00 && data[2] === 0xfe && data[3] === 0xff) {
            return 'utf-32be';
        }
        if (data.length > 4 && data[0] === 0xff && data[1] === 0xfe && data[2] === 0x00 && data[3] === 0x00) {
            return 'utf-32le';
        }
        return null;
    }
    static stringToBytes(str) {
        let decoder = new TextEncoder();
        return decoder.encode(str);
    }
    static writeInt32BE(o, v) {
        o.writeByte((v >> 24) & 0xff);
        o.writeByte((v >> 16) & 0xff);
        o.writeByte((v >> 8) & 0xff);
        o.writeByte((v >> 0) & 0xff);
    }
    static writeInt32LE(o, v) {
        o.writeByte((v >> 0) & 0xff);
        o.writeByte((v >> 8) & 0xff);
        o.writeByte((v >> 16) & 0xff);
        o.writeByte((v >> 24) & 0xff);
    }
    static writeUInt16LE(o, v) {
        o.writeByte((v >> 0) & 0xff);
        o.writeByte((v >> 8) & 0xff);
    }
    static writeInt16LE(o, v) {
        o.writeByte((v >> 0) & 0xff);
        o.writeByte((v >> 8) & 0xff);
    }
}

class ByteBuffer {
    constructor() {
        this.length = 0;
        this.position = 0;
    }
    get bytesWritten() {
        return this.position;
    }
    getBuffer() {
        return this._buffer;
    }
    static empty() {
        return ByteBuffer.withCapacity(0);
    }
    static withCapacity(capacity) {
        let buffer = new ByteBuffer();
        buffer._buffer = new Uint8Array(capacity);
        return buffer;
    }
    static fromBuffer(data) {
        let buffer = new ByteBuffer();
        buffer._buffer = data;
        buffer.length = data.length;
        return buffer;
    }
    static fromString(contents) {
        let byteArray = IOHelper.stringToBytes(contents);
        return ByteBuffer.fromBuffer(byteArray);
    }
    reset() {
        this.position = 0;
    }
    skip(offset) {
        this.position += offset;
    }
    readByte() {
        let n = this.length - this.position;
        if (n <= 0) {
            return -1;
        }
        return this._buffer[this.position++];
    }
    read(buffer, offset, count) {
        let n = this.length - this.position;
        if (n > count) {
            n = count;
        }
        if (n <= 0) {
            return 0;
        }
        buffer.set(this._buffer.subarray(this.position, this.position + n), offset);
        this.position += n;
        return n;
    }
    writeByte(value) {
        let i = this.position + 1;
        this.ensureCapacity(i);
        this._buffer[this.position] = value & 0xFF;
        if (i > this.length) {
            this.length = i;
        }
        this.position = i;
    }
    write(buffer, offset, count) {
        let i = this.position + count;
        this.ensureCapacity(i);
        let count1 = Math.min(count, buffer.length - offset);
        this._buffer.set(buffer.subarray(offset, offset + count1), this.position);
        if (i > this.length) {
            this.length = i;
        }
        this.position = i;
    }
    ensureCapacity(value) {
        if (value > this._buffer.length) {
            let newCapacity = value;
            if (newCapacity < 256) {
                newCapacity = 256;
            }
            if (newCapacity < this._buffer.length * 2) {
                newCapacity = this._buffer.length * 2;
            }
            let newBuffer = new Uint8Array(newCapacity);
            if (this.length > 0) {
                newBuffer.set(this._buffer.subarray(0, 0 + this.length), 0);
            }
            this._buffer = newBuffer;
        }
    }
    readAll() {
        return this.toArray();
    }
    toArray() {
        let copy = new Uint8Array(this.length);
        copy.set(this._buffer.subarray(0, 0 + this.length), 0);
        return copy;
    }
}

/**
 * A list of terminals recognized by the alphaTex-parser
 */
var AlphaTexSymbols;
(function (AlphaTexSymbols) {
    AlphaTexSymbols[AlphaTexSymbols["No"] = 0] = "No";
    AlphaTexSymbols[AlphaTexSymbols["Eof"] = 1] = "Eof";
    AlphaTexSymbols[AlphaTexSymbols["Number"] = 2] = "Number";
    AlphaTexSymbols[AlphaTexSymbols["DoubleDot"] = 3] = "DoubleDot";
    AlphaTexSymbols[AlphaTexSymbols["Dot"] = 4] = "Dot";
    AlphaTexSymbols[AlphaTexSymbols["String"] = 5] = "String";
    AlphaTexSymbols[AlphaTexSymbols["Tuning"] = 6] = "Tuning";
    AlphaTexSymbols[AlphaTexSymbols["LParensis"] = 7] = "LParensis";
    AlphaTexSymbols[AlphaTexSymbols["RParensis"] = 8] = "RParensis";
    AlphaTexSymbols[AlphaTexSymbols["LBrace"] = 9] = "LBrace";
    AlphaTexSymbols[AlphaTexSymbols["RBrace"] = 10] = "RBrace";
    AlphaTexSymbols[AlphaTexSymbols["Pipe"] = 11] = "Pipe";
    AlphaTexSymbols[AlphaTexSymbols["MetaCommand"] = 12] = "MetaCommand";
    AlphaTexSymbols[AlphaTexSymbols["Multiply"] = 13] = "Multiply";
    AlphaTexSymbols[AlphaTexSymbols["LowerThan"] = 14] = "LowerThan";
    AlphaTexSymbols[AlphaTexSymbols["Property"] = 15] = "Property";
})(AlphaTexSymbols || (AlphaTexSymbols = {}));
class AlphaTexError extends AlphaTabError {
    constructor(message) {
        super(AlphaTabErrorType.AlphaTex, message);
        this.position = 0;
        this.nonTerm = '';
        this.expected = AlphaTexSymbols.No;
        this.symbol = AlphaTexSymbols.No;
        this.symbolData = null;
        Object.setPrototypeOf(this, AlphaTexError.prototype);
    }
    static symbolError(position, nonTerm, expected, symbol, symbolData = null) {
        let message;
        if (expected !== symbol) {
            message = `MalFormed AlphaTex: @${position}: Error on block ${nonTerm}, expected a ${AlphaTexSymbols[expected]} found a ${AlphaTexSymbols[symbol]}: '${symbolData}'`;
        }
        else {
            message = `MalFormed AlphaTex: @${position}: Error on block ${nonTerm}, invalid value: '${symbolData}'`;
        }
        let exception = new AlphaTexError(message);
        exception.position = position;
        exception.nonTerm = nonTerm;
        exception.expected = expected;
        exception.symbol = symbol;
        exception.symbolData = symbolData;
        return exception;
    }
    static errorMessage(position, message) {
        message = `MalFormed AlphaTex: @${position}: ${message}`;
        let exception = new AlphaTexError(message);
        exception.position = position;
        return exception;
    }
}
/**
 * This importer can parse alphaTex markup into a score structure.
 */
class AlphaTexImporter extends ScoreImporter {
    constructor() {
        super();
        this._trackChannel = 0;
        this._input = "";
        this._ch = 0;
        this._curChPos = 0;
        this._sy = AlphaTexSymbols.No;
        this._syData = "";
        this._allowNegatives = false;
        this._allowTuning = false;
        this._currentDuration = Duration.QuadrupleWhole;
        this._currentDynamics = DynamicValue.PPP;
        this._currentTuplet = 0;
        this._staffHasExplicitTuning = false;
        this._staffTuningApplied = false;
        this.logErrors = false;
    }
    get name() {
        return 'AlphaTex';
    }
    initFromString(tex, settings) {
        this.data = ByteBuffer.empty();
        this._input = tex;
        this.settings = settings;
    }
    readScore() {
        try {
            if (this.data.length > 0) {
                this._input = IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
            }
            this._allowTuning = true;
            this._lyrics = new Map();
            this.createDefaultScore();
            this._curChPos = 0;
            this._currentDuration = Duration.Quarter;
            this._currentDynamics = DynamicValue.F;
            this._currentTuplet = 1;
            this._ch = this.nextChar();
            this._sy = this.newSy();
            if (this._sy === AlphaTexSymbols.LowerThan) {
                // potential XML, stop parsing (alphaTex never starts with <)
                throw new UnsupportedFormatError('Unknown start sign <');
            }
            this.score();
            this.consolidate();
            this._score.finish(this.settings);
            this._score.rebuildRepeatGroups();
            for (const [track, lyrics] of this._lyrics) {
                this._score.tracks[track].applyLyrics(lyrics);
            }
            return this._score;
        }
        catch (e) {
            if (e instanceof AlphaTexError) {
                throw new UnsupportedFormatError(e.message);
            }
            else {
                throw e;
            }
        }
    }
    consolidate() {
        // the number of bars per staff and track could be inconsistent,
        // we need to ensure all staffs of all tracks have the correct number of bars
        for (let track of this._score.tracks) {
            for (let staff of track.staves) {
                while (staff.bars.length < this._score.masterBars.length) {
                    let bar = this.newBar(staff);
                    let emptyBeat = new Beat();
                    emptyBeat.isEmpty = true;
                    bar.voices[0].addBeat(emptyBeat);
                }
            }
        }
    }
    error(nonterm, expected, symbolError = true) {
        let e;
        if (symbolError) {
            e = AlphaTexError.symbolError(this._curChPos, nonterm, expected, this._sy, this._syData);
        }
        else {
            e = AlphaTexError.symbolError(this._curChPos, nonterm, expected, expected, this._syData);
        }
        if (this.logErrors) {
            Logger.error(this.name, e.message);
        }
        throw e;
    }
    errorMessage(message) {
        let e = AlphaTexError.errorMessage(this._curChPos, message);
        if (this.logErrors) {
            Logger.error(this.name, e.message);
        }
        throw e;
    }
    /**
     * Initializes the song with some required default values.
     * @returns
     */
    createDefaultScore() {
        this._score = new Score();
        this._score.tempo = 120;
        this._score.tempoLabel = '';
        this.newTrack();
    }
    newTrack() {
        this._currentTrack = new Track();
        this._currentTrack.ensureStaveCount(1);
        this._currentTrack.playbackInfo.program = 25;
        this._currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
        this._currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
        this._currentStaff = this._currentTrack.staves[0];
        this._currentStaff.displayTranspositionPitch = -12;
        this._currentStaff.stringTuning.tunings = Tuning.getDefaultTuningFor(6).tunings;
        this._score.addTrack(this._currentTrack);
        this._lyrics.set(this._currentTrack.index, []);
        this._currentDynamics = DynamicValue.F;
    }
    /**
     * Converts a clef string into the clef value.
     * @param str the string to convert
     * @returns the clef value
     */
    parseClefFromString(str) {
        switch (str.toLowerCase()) {
            case 'g2':
            case 'treble':
                return Clef.G2;
            case 'f4':
            case 'bass':
                return Clef.F4;
            case 'c3':
            case 'tenor':
                return Clef.C3;
            case 'c4':
            case 'alto':
                return Clef.C4;
            case 'n':
            case 'neutral':
                return Clef.Neutral;
            default:
                return Clef.G2;
            // error("clef-value", AlphaTexSymbols.String, false);
        }
    }
    /**
     * Converts a clef tuning into the clef value.
     * @param i the tuning value to convert
     * @returns the clef value
     */
    parseClefFromInt(i) {
        switch (i) {
            case 43:
                return Clef.G2;
            case 65:
                return Clef.F4;
            case 48:
                return Clef.C3;
            case 60:
                return Clef.C4;
            default:
                return Clef.G2;
        }
    }
    parseTripletFeelFromString(str) {
        switch (str.toLowerCase()) {
            case 'no':
            case 'none':
                return TripletFeel.NoTripletFeel;
            case 't16':
            case 'triplet-16th':
                return TripletFeel.Triplet16th;
            case 't8':
            case 'triplet-8th':
                return TripletFeel.Triplet8th;
            case 'd16':
            case 'dotted-16th':
                return TripletFeel.Dotted16th;
            case 'd8':
            case 'dotted-8th':
                return TripletFeel.Dotted8th;
            case 's16':
            case 'scottish-16th':
                return TripletFeel.Scottish16th;
            case 's8':
            case 'scottish-8th':
                return TripletFeel.Scottish8th;
            default:
                return TripletFeel.NoTripletFeel;
        }
    }
    parseTripletFeelFromInt(i) {
        switch (i) {
            case 0:
                return TripletFeel.NoTripletFeel;
            case 1:
                return TripletFeel.Triplet16th;
            case 2:
                return TripletFeel.Triplet8th;
            case 3:
                return TripletFeel.Dotted16th;
            case 4:
                return TripletFeel.Dotted8th;
            case 5:
                return TripletFeel.Scottish16th;
            case 6:
                return TripletFeel.Scottish8th;
            default:
                return TripletFeel.NoTripletFeel;
        }
    }
    /**
     * Converts a keysignature string into the assocciated value.
     * @param str the string to convert
     * @returns the assocciated keysignature value
     */
    parseKeySignature(str) {
        switch (str.toLowerCase()) {
            case 'cb':
            case 'cbmajor':
                return KeySignature.Cb;
            case 'gb':
            case 'gbmajor':
            case 'd#minor':
                return KeySignature.Gb;
            case 'db':
            case 'dbmajor':
            case 'bbminor':
                return KeySignature.Db;
            case 'ab':
            case 'abmajor':
            case 'fminor':
                return KeySignature.Ab;
            case 'eb':
            case 'ebmajor':
            case 'cminor':
                return KeySignature.Eb;
            case 'bb':
            case 'bbmajor':
            case 'gminor':
                return KeySignature.Bb;
            case 'f':
            case 'fmajor':
            case 'dminor':
                return KeySignature.F;
            case 'c':
            case 'cmajor':
            case 'aminor':
                return KeySignature.C;
            case 'g':
            case 'gmajor':
            case 'eminor':
                return KeySignature.G;
            case 'd':
            case 'dmajor':
            case 'bminor':
                return KeySignature.D;
            case 'a':
            case 'amajor':
            case 'f#minor':
                return KeySignature.A;
            case 'e':
            case 'emajor':
            case 'c#minor':
                return KeySignature.E;
            case 'b':
            case 'bmajor':
            case 'g#minor':
                return KeySignature.B;
            case 'f#':
            case 'f#major':
            case 'ebminor':
                return KeySignature.FSharp;
            case 'c#':
            case 'c#major':
                return KeySignature.CSharp;
            default:
                return KeySignature.C;
            // error("keysignature-value", AlphaTexSymbols.String, false); return 0
        }
    }
    /**
     * Reads the next character of the source stream.
     */
    nextChar() {
        if (this._curChPos < this._input.length) {
            this._ch = this._input.charCodeAt(this._curChPos++);
        }
        else {
            this._ch = 0;
        }
        return this._ch;
    }
    /**
     * Reads the next terminal symbol.
     */
    newSy() {
        this._sy = AlphaTexSymbols.No;
        do {
            if (this._ch === AlphaTexImporter.Eof) {
                this._sy = AlphaTexSymbols.Eof;
            }
            else if (this._ch === 0x20 || this._ch === 0x0b || this._ch === 0x0d || this._ch === 0x0a || this._ch === 0x09) {
                // skip whitespaces
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x2f /* / */) {
                this._ch = this.nextChar();
                if (this._ch === 0x2f /* / */) {
                    // single line comment
                    while (this._ch !== 0x0d /* \r */ &&
                        this._ch !== 0x0a /* \n */ &&
                        this._ch !== AlphaTexImporter.Eof) {
                        this._ch = this.nextChar();
                    }
                }
                else if (this._ch === 0x2a /* * */) {
                    // multiline comment
                    while (this._ch !== AlphaTexImporter.Eof) {
                        if (this._ch === 0x2a /* * */) {
                            this._ch = this.nextChar();
                            if (this._ch === 0x2f /* / */) {
                                this._ch = this.nextChar();
                                break;
                            }
                        }
                        else {
                            this._ch = this.nextChar();
                        }
                    }
                }
                else {
                    this.error('symbol', AlphaTexSymbols.String, false);
                }
            }
            else if (this._ch === 0x22 /* " */ || this._ch === 0x27 /* ' */) {
                let startChar = this._ch;
                this._ch = this.nextChar();
                let s = '';
                this._sy = AlphaTexSymbols.String;
                while (this._ch !== startChar && this._ch !== AlphaTexImporter.Eof) {
                    s += String.fromCharCode(this._ch);
                    this._ch = this.nextChar();
                }
                this._syData = s;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x2d /* - */) {
                // negative number
                // is number?
                if (this._allowNegatives && this.isDigit(this._ch)) {
                    this._sy = AlphaTexSymbols.Number;
                    this._syData = this.readNumber();
                }
                else {
                    this._sy = AlphaTexSymbols.String;
                    this._syData = this.readName();
                }
            }
            else if (this._ch === 0x2e /* . */) {
                this._sy = AlphaTexSymbols.Dot;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x3a /* : */) {
                this._sy = AlphaTexSymbols.DoubleDot;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x28 /* ( */) {
                this._sy = AlphaTexSymbols.LParensis;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x5c /* \ */) {
                this._ch = this.nextChar();
                this._sy = AlphaTexSymbols.MetaCommand;
                this._syData = this.readName();
            }
            else if (this._ch === 0x29 /* ) */) {
                this._sy = AlphaTexSymbols.RParensis;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x7b /* { */) {
                this._sy = AlphaTexSymbols.LBrace;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x7d /* } */) {
                this._sy = AlphaTexSymbols.RBrace;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x7c /* | */) {
                this._sy = AlphaTexSymbols.Pipe;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x2a /* * */) {
                this._sy = AlphaTexSymbols.Multiply;
                this._ch = this.nextChar();
            }
            else if (this._ch === 0x3c /* < */) {
                this._sy = AlphaTexSymbols.LowerThan;
                this._ch = this.nextChar();
            }
            else if (this.isDigit(this._ch)) {
                this._sy = AlphaTexSymbols.Number;
                this._syData = this.readNumber();
            }
            else if (AlphaTexImporter.isLetter(this._ch)) {
                let name = this.readName();
                let tuning = this._allowTuning ? ModelUtils.parseTuning(name) : null;
                if (tuning) {
                    this._sy = AlphaTexSymbols.Tuning;
                    this._syData = tuning;
                }
                else {
                    this._sy = AlphaTexSymbols.String;
                    this._syData = name;
                }
            }
            else {
                this.error('symbol', AlphaTexSymbols.String, false);
            }
        } while (this._sy === AlphaTexSymbols.No);
        return this._sy;
    }
    /**
     * Checks if the given character is a letter.
     * (no control characters, whitespaces, numbers or dots)
     * @param code the character
     * @returns true if the given character is a letter, otherwise false.
     */
    static isLetter(code) {
        // no control characters, whitespaces, numbers or dots
        return (!AlphaTexImporter.isTerminal(code) &&
            ((code >= 0x21 && code <= 0x2f) || (code >= 0x3a && code <= 0x7e) || code > 0x80)); /* Unicode Symbols */
    }
    /**
     * Checks if the given charater is a non terminal.
     * @param ch the character
     * @returns true if the given character is a terminal, otherwise false.
     */
    static isTerminal(ch) {
        return (ch === 0x2e /* . */ ||
            ch === 0x7b /* { */ ||
            ch === 0x7d /* } */ ||
            ch === 0x5b /* [ */ ||
            ch === 0x5d /* ] */ ||
            ch === 0x28 /* ( */ ||
            ch === 0x29 /* ) */ ||
            ch === 0x7c /* | */ ||
            ch === 0x27 /* ' */ ||
            ch === 0x22 /* " */ ||
            ch === 0x5c /* \ */);
    }
    /**
     * Checks if the given character is a digit.
     * @param code the character
     * @returns true if the given character is a digit, otherwise false.
     */
    isDigit(code) {
        return (code >= 0x30 && code <= 0x39) /*0-9*/ || (code === 0x2d /* - */ && this._allowNegatives); // allow - if negatives
    }
    /**
     * Reads a string from the stream.
     * @returns the read string.
     */
    readName() {
        let str = '';
        do {
            str += String.fromCharCode(this._ch);
            this._ch = this.nextChar();
        } while (AlphaTexImporter.isLetter(this._ch) || this.isDigit(this._ch) || this._ch === 0x23);
        return str;
    }
    /**
     * Reads a number from the stream.
     * @returns the read number.
     */
    readNumber() {
        let str = '';
        do {
            str += String.fromCharCode(this._ch);
            this._ch = this.nextChar();
        } while (this.isDigit(this._ch));
        return parseInt(str);
    }
    score() {
        if (this._sy === AlphaTexSymbols.Eof) {
            throw new UnsupportedFormatError('Unexpected end of file');
        }
        const anyMetaRead = this.metaData();
        const anyBarsRead = this.bars();
        if (!anyMetaRead && !anyBarsRead) {
            throw new UnsupportedFormatError('No alphaTex data found');
        }
    }
    metaData() {
        let anyMeta = false;
        let continueReading = true;
        while (this._sy === AlphaTexSymbols.MetaCommand && continueReading) {
            let syData = this._syData.toLowerCase();
            switch (syData) {
                case 'title':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.title = this._syData;
                    }
                    else {
                        this.error('title', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'subtitle':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.subTitle = this._syData;
                    }
                    else {
                        this.error('subtitle', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'artist':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.artist = this._syData;
                    }
                    else {
                        this.error('artist', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'album':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.album = this._syData;
                    }
                    else {
                        this.error('album', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'words':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.words = this._syData;
                    }
                    else {
                        this.error('words', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'music':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.music = this._syData;
                    }
                    else {
                        this.error('music', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'copyright':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.String) {
                        this._score.copyright = this._syData;
                    }
                    else {
                        this.error('copyright', AlphaTexSymbols.String, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                case 'tempo':
                    this._sy = this.newSy();
                    if (this._sy === AlphaTexSymbols.Number) {
                        this._score.tempo = this._syData;
                    }
                    else {
                        this.error('tempo', AlphaTexSymbols.Number, true);
                    }
                    this._sy = this.newSy();
                    anyMeta = true;
                    break;
                default:
                    if (this.handleStaffMeta()) {
                        anyMeta = true;
                    }
                    else if (anyMeta) {
                        // invalid meta encountered
                        this.error('metaDataTags', AlphaTexSymbols.String, false);
                    }
                    else {
                        // fall forward to bar meta if unknown score meta was found
                        continueReading = false;
                    }
                    break;
            }
        }
        if (anyMeta) {
            if (this._sy !== AlphaTexSymbols.Dot) {
                this.error('song', AlphaTexSymbols.Dot, true);
            }
            this._sy = this.newSy();
        }
        else if (this._sy === AlphaTexSymbols.Dot) {
            this._sy = this.newSy();
        }
        return anyMeta;
    }
    handleStaffMeta() {
        let syData = this._syData.toLowerCase();
        switch (syData) {
            case 'capo':
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.Number) {
                    this._currentStaff.capo = this._syData;
                }
                else {
                    this.error('capo', AlphaTexSymbols.Number, true);
                }
                this._sy = this.newSy();
                return true;
            case 'tuning':
                this._sy = this.newSy();
                let strings = this._currentStaff.tuning.length;
                this._staffHasExplicitTuning = true;
                this._staffTuningApplied = false;
                switch (this._sy) {
                    case AlphaTexSymbols.String:
                        let text = this._syData.toLowerCase();
                        if (text === 'piano' || text === 'none' || text === 'voice') {
                            // clear tuning
                            this._currentStaff.stringTuning.tunings = [];
                            this._currentStaff.displayTranspositionPitch = 0;
                        }
                        else {
                            this.error('tuning', AlphaTexSymbols.Tuning, true);
                        }
                        this._sy = this.newSy();
                        break;
                    case AlphaTexSymbols.Tuning:
                        let tuning = [];
                        do {
                            let t = this._syData;
                            tuning.push(t.realValue);
                            this._sy = this.newSy();
                        } while (this._sy === AlphaTexSymbols.Tuning);
                        this._currentStaff.stringTuning.tunings = tuning;
                        break;
                    default:
                        this.error('tuning', AlphaTexSymbols.Tuning, true);
                        break;
                }
                if (strings !== this._currentStaff.tuning.length && this._currentStaff.chords.size > 0) {
                    this.errorMessage('Tuning must be defined before any chord');
                }
                return true;
            case 'instrument':
                this._sy = this.newSy();
                this._staffTuningApplied = false;
                if (this._sy === AlphaTexSymbols.Number) {
                    let instrument = this._syData;
                    if (instrument >= 0 && instrument <= 128) {
                        this._currentTrack.playbackInfo.program = this._syData;
                    }
                    else {
                        this.error('instrument', AlphaTexSymbols.Number, false);
                    }
                }
                else if (this._sy === AlphaTexSymbols.String) {
                    let instrumentName = this._syData.toLowerCase();
                    this._currentTrack.playbackInfo.program = GeneralMidi.getValue(instrumentName);
                }
                else {
                    this.error('instrument', AlphaTexSymbols.Number, true);
                }
                this._sy = this.newSy();
                return true;
            case 'lyrics':
                this._sy = this.newSy();
                let lyrics = new Lyrics();
                lyrics.startBar = 0;
                lyrics.text = '';
                if (this._sy === AlphaTexSymbols.Number) {
                    lyrics.startBar = this._syData;
                    this._sy = this.newSy();
                }
                if (this._sy === AlphaTexSymbols.String) {
                    lyrics.text = this._syData;
                    this._sy = this.newSy();
                }
                else {
                    this.error('lyrics', AlphaTexSymbols.String, true);
                }
                this._lyrics.get(this._currentTrack.index).push(lyrics);
                return true;
            case 'chord':
                this._sy = this.newSy();
                let chord = new Chord();
                this.chordProperties(chord);
                if (this._sy === AlphaTexSymbols.String) {
                    chord.name = this._syData;
                    this._sy = this.newSy();
                }
                else {
                    this.error('chord-name', AlphaTexSymbols.Number, true);
                }
                for (let i = 0; i < this._currentStaff.tuning.length; i++) {
                    if (this._sy === AlphaTexSymbols.Number) {
                        chord.strings.push(this._syData);
                    }
                    else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'x') {
                        chord.strings.push(-1);
                    }
                    this._sy = this.newSy();
                }
                this._currentStaff.addChord(this.getChordId(this._currentStaff, chord.name), chord);
                return true;
            default:
                return false;
        }
    }
    chordProperties(chord) {
        if (this._sy !== AlphaTexSymbols.LBrace) {
            return;
        }
        this._sy = this.newSy();
        while (this._sy === AlphaTexSymbols.String) {
            switch (this._syData.toLowerCase()) {
                case 'firstfret':
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.Number:
                            chord.firstFret = this._syData;
                            break;
                        default:
                            this.error('chord-firstfret', AlphaTexSymbols.Number, true);
                            break;
                    }
                    this._sy = this.newSy();
                    break;
                case 'showdiagram':
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            chord.showDiagram = this._syData.toLowerCase() !== 'false';
                            break;
                        case AlphaTexSymbols.Number:
                            chord.showDiagram = this._syData !== 0;
                            break;
                        default:
                            this.error('chord-showdiagram', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                    break;
                case 'showfingering':
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            chord.showDiagram = this._syData.toLowerCase() !== 'false';
                            break;
                        case AlphaTexSymbols.Number:
                            chord.showFingering = this._syData !== 0;
                            break;
                        default:
                            this.error('chord-showfingering', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                    break;
                case 'showname':
                    this._sy = this.newSy();
                    switch (this._sy) {
                        case AlphaTexSymbols.String:
                            chord.showName = this._syData.toLowerCase() !== 'false';
                            break;
                        case AlphaTexSymbols.Number:
                            chord.showName = this._syData !== 0;
                            break;
                        default:
                            this.error('chord-showname', AlphaTexSymbols.String, true);
                            break;
                    }
                    this._sy = this.newSy();
                    break;
                case 'barre':
                    this._sy = this.newSy();
                    while (this._sy === AlphaTexSymbols.Number) {
                        chord.barreFrets.push(this._syData);
                        this._sy = this.newSy();
                    }
                    break;
                default:
                    this.error('chord-properties', AlphaTexSymbols.String, false);
                    break;
            }
        }
        if (this._sy !== AlphaTexSymbols.RBrace) {
            this.error('chord-properties', AlphaTexSymbols.RBrace, true);
        }
        this._sy = this.newSy();
    }
    bars() {
        let anyData = this.bar();
        while (this._sy !== AlphaTexSymbols.Eof) {
            // read pipe from last bar
            if (this._sy === AlphaTexSymbols.Pipe) {
                this._sy = this.newSy();
                this.bar();
            }
            else if (this._sy === AlphaTexSymbols.MetaCommand) {
                this.bar();
            }
            else {
                break;
            }
        }
        return anyData;
    }
    trackStaffMeta() {
        let anyMeta = false;
        if (this._sy === AlphaTexSymbols.MetaCommand) {
            anyMeta = true;
            let syData = this._syData.toLowerCase();
            if (syData === 'track') {
                this._staffHasExplicitTuning = false;
                this._staffTuningApplied = false;
                this._sy = this.newSy();
                // new track starting? - if no masterbars it's the \track of the initial track.
                if (this._score.masterBars.length > 0) {
                    this.newTrack();
                }
                // name
                if (this._sy === AlphaTexSymbols.String) {
                    this._currentTrack.name = this._syData;
                    this._sy = this.newSy();
                }
                // short name
                if (this._sy === AlphaTexSymbols.String) {
                    this._currentTrack.shortName = this._syData;
                    this._sy = this.newSy();
                }
            }
            if (this._sy === AlphaTexSymbols.MetaCommand) {
                syData = this._syData.toLowerCase();
                if (syData === 'staff') {
                    this._staffHasExplicitTuning = false;
                    this._staffTuningApplied = false;
                    this._sy = this.newSy();
                    if (this._currentTrack.staves[0].bars.length > 0) {
                        this._currentTrack.ensureStaveCount(this._currentTrack.staves.length + 1);
                        this._currentStaff = this._currentTrack.staves[this._currentTrack.staves.length - 1];
                        this._currentDynamics = DynamicValue.F;
                    }
                    this.staffProperties();
                }
            }
        }
        return anyMeta;
    }
    staffProperties() {
        if (this._sy !== AlphaTexSymbols.LBrace) {
            return;
        }
        this._sy = this.newSy();
        let showStandardNotation = false;
        let showTabs = false;
        while (this._sy === AlphaTexSymbols.String) {
            switch (this._syData.toLowerCase()) {
                case 'score':
                    showStandardNotation = true;
                    this._sy = this.newSy();
                    break;
                case 'tabs':
                    showTabs = true;
                    this._sy = this.newSy();
                    break;
                default:
                    this.error('staff-properties', AlphaTexSymbols.String, false);
                    break;
            }
        }
        if (showStandardNotation || showTabs) {
            this._currentStaff.showStandardNotation = showStandardNotation;
            this._currentStaff.showTablature = showTabs;
        }
        if (this._sy !== AlphaTexSymbols.RBrace) {
            this.error('staff-properties', AlphaTexSymbols.RBrace, true);
        }
        this._sy = this.newSy();
    }
    bar() {
        const anyStaffMeta = this.trackStaffMeta();
        let bar = this.newBar(this._currentStaff);
        if (this._currentStaff.bars.length > this._score.masterBars.length) {
            let master = new MasterBar();
            this._score.addMasterBar(master);
            if (master.index > 0) {
                master.keySignature = master.previousMasterBar.keySignature;
                master.keySignatureType = master.previousMasterBar.keySignatureType;
                master.timeSignatureDenominator = master.previousMasterBar.timeSignatureDenominator;
                master.timeSignatureNumerator = master.previousMasterBar.timeSignatureNumerator;
                master.tripletFeel = master.previousMasterBar.tripletFeel;
            }
        }
        const anyBarMeta = this.barMeta(bar);
        // detect tuning for staff
        if (!this._staffTuningApplied && !this._staffHasExplicitTuning) {
            const program = this._currentTrack.playbackInfo.program;
            // reset to defaults
            this._currentStaff.displayTranspositionPitch = 0;
            this._currentStaff.stringTuning.tunings = [];
            if (program == 15 || program >= 24 && program <= 31) {
                // dulcimer+guitar E4 B3 G3 D3 A2 E2
                this._currentStaff.displayTranspositionPitch = -12;
                this._currentStaff.stringTuning.tunings = Tuning.getDefaultTuningFor(6).tunings;
            }
            else if (program >= 32 && program <= 39) {
                // bass G2 D2 A1 E1
                this._currentStaff.displayTranspositionPitch = -12;
                this._currentStaff.stringTuning.tunings = [43, 38, 33, 28];
            }
            else if (program == 40 || program == 44 || program == 45 || program == 48 || program == 49 || program == 50 || program == 51) {
                // violin E3 A3 D3 G2
                this._currentStaff.stringTuning.tunings = [52, 57, 50, 43];
            }
            else if (program == 41) {
                // viola A3 D3 G2 C2
                this._currentStaff.stringTuning.tunings = [57, 50, 43, 36];
            }
            else if (program == 42) {
                // cello A2 D2 G1 C1
                this._currentStaff.stringTuning.tunings = [45, 38, 31, 24];
            }
            else if (program == 43) {
                // contrabass
                // G2 D2 A1 E1
                this._currentStaff.displayTranspositionPitch = -12;
                this._currentStaff.stringTuning.tunings = [43, 38, 33, 28];
            }
            else if (program == 105) {
                // banjo
                // D3 B2 G2 D2 G3
                this._currentStaff.stringTuning.tunings = [50, 47, 43, 38, 55];
            }
            else if (program == 106) {
                // shamisen
                // A3 E3 A2
                this._currentStaff.stringTuning.tunings = [57, 52, 45];
            }
            else if (program == 107) {
                // koto
                // E3 A2 D2 G1
                this._currentStaff.stringTuning.tunings = [52, 45, 38, 31];
            }
            else if (program == 110) {
                // Fiddle
                // E4 A3 D3 G2
                this._currentStaff.stringTuning.tunings = [64, 57, 50, 43];
            }
            this._staffTuningApplied = true;
        }
        let anyBeatData = false;
        let voice = bar.voices[0];
        while (this._sy !== AlphaTexSymbols.Pipe && this._sy !== AlphaTexSymbols.Eof) {
            if (!this.beat(voice)) {
                break;
            }
            anyBeatData = true;
        }
        if (voice.beats.length === 0) {
            let emptyBeat = new Beat();
            emptyBeat.isEmpty = true;
            voice.addBeat(emptyBeat);
        }
        return anyStaffMeta || anyBarMeta || anyBeatData;
    }
    newBar(staff) {
        let bar = new Bar();
        staff.addBar(bar);
        if (bar.index > 0) {
            bar.clef = bar.previousBar.clef;
        }
        let voice = new Voice$1();
        bar.addVoice(voice);
        return bar;
    }
    beat(voice) {
        // duration specifier?
        this.beatDuration();
        let beat = new Beat();
        voice.addBeat(beat);
        // notes
        if (this._sy === AlphaTexSymbols.LParensis) {
            this._sy = this.newSy();
            this.note(beat);
            while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                if (!this.note(beat)) {
                    break;
                }
            }
            if (this._sy !== AlphaTexSymbols.RParensis) {
                this.error('note-list', AlphaTexSymbols.RParensis, true);
            }
            this._sy = this.newSy();
        }
        else if (this._sy === AlphaTexSymbols.String && this._syData.toLowerCase() === 'r') {
            // rest voice -> no notes
            this._sy = this.newSy();
        }
        else {
            if (!this.note(beat)) {
                voice.beats.splice(voice.beats.length - 1, 1);
                return false;
            }
        }
        // new duration
        if (this._sy === AlphaTexSymbols.Dot) {
            this._allowNegatives = true;
            this._sy = this.newSy();
            this._allowNegatives = false;
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('duration', AlphaTexSymbols.Number, true);
            }
            this._currentDuration = this.parseDuration(this._syData);
            this._sy = this.newSy();
        }
        beat.duration = this._currentDuration;
        beat.dynamics = this._currentDynamics;
        if (this._currentTuplet !== 1 && !beat.hasTuplet) {
            this.applyTuplet(beat, this._currentTuplet);
        }
        // beat multiplier (repeat beat n times)
        let beatRepeat = 1;
        if (this._sy === AlphaTexSymbols.Multiply) {
            this._sy = this.newSy();
            // multiplier count
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('multiplier', AlphaTexSymbols.Number, true);
            }
            else {
                beatRepeat = this._syData;
            }
            this._sy = this.newSy();
        }
        this.beatEffects(beat);
        for (let i = 0; i < beatRepeat - 1; i++) {
            voice.addBeat(BeatCloner.clone(beat));
        }
        return true;
    }
    beatDuration() {
        if (this._sy !== AlphaTexSymbols.DoubleDot) {
            return;
        }
        this._allowNegatives = true;
        this._sy = this.newSy();
        this._allowNegatives = false;
        if (this._sy !== AlphaTexSymbols.Number) {
            this.error('duration', AlphaTexSymbols.Number, true);
        }
        this._currentDuration = this.parseDuration(this._syData);
        this._currentTuplet = 1;
        this._sy = this.newSy();
        if (this._sy !== AlphaTexSymbols.LBrace) {
            return;
        }
        this._sy = this.newSy();
        while (this._sy === AlphaTexSymbols.String) {
            let effect = this._syData.toLowerCase();
            switch (effect) {
                case 'tu':
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('duration-tuplet', AlphaTexSymbols.Number, true);
                    }
                    this._currentTuplet = this._syData;
                    this._sy = this.newSy();
                    break;
                default:
                    this.error('beat-duration', AlphaTexSymbols.String, false);
                    break;
            }
        }
        if (this._sy !== AlphaTexSymbols.RBrace) {
            this.error('beat-duration', AlphaTexSymbols.RBrace, true);
        }
        this._sy = this.newSy();
    }
    beatEffects(beat) {
        if (this._sy !== AlphaTexSymbols.LBrace) {
            return;
        }
        this._sy = this.newSy();
        while (this._sy === AlphaTexSymbols.String) {
            this._syData = this._syData.toLowerCase();
            if (!this.applyBeatEffect(beat)) {
                this.error('beat-effects', AlphaTexSymbols.String, false);
            }
        }
        if (this._sy !== AlphaTexSymbols.RBrace) {
            this.error('beat-effects', AlphaTexSymbols.RBrace, true);
        }
        this._sy = this.newSy();
    }
    /**
     * Tries to apply a beat effect to the given beat.
     * @returns true if a effect could be applied, otherwise false
     */
    applyBeatEffect(beat) {
        let syData = this._syData.toLowerCase();
        if (syData === 'f') {
            beat.fadeIn = true;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'v') {
            beat.vibrato = VibratoType.Slight;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 's') {
            beat.slap = true;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'p') {
            beat.pop = true;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'tt') {
            beat.tap = true;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'dd') {
            beat.dots = 2;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'd') {
            beat.dots = 1;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'su') {
            beat.pickStroke = PickStroke.Up;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'sd') {
            beat.pickStroke = PickStroke.Down;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'tu') {
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('tuplet', AlphaTexSymbols.Number, true);
                return false;
            }
            this.applyTuplet(beat, this._syData);
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'tb' || syData === 'tbe') {
            let exact = syData === 'tbe';
            // read points
            this._sy = this.newSy();
            if (this._sy !== AlphaTexSymbols.LParensis) {
                this.error('tremolobar-effect', AlphaTexSymbols.LParensis, true);
                return false;
            }
            this._allowNegatives = true;
            this._sy = this.newSy();
            while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                let offset = 0;
                let value = 0;
                if (exact) {
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        return false;
                    }
                    offset = this._syData;
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        return false;
                    }
                    value = this._syData;
                }
                else {
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('tremolobar-effect', AlphaTexSymbols.Number, true);
                        return false;
                    }
                    offset = 0;
                    value = this._syData;
                }
                beat.addWhammyBarPoint(new BendPoint(offset, value));
                this._sy = this.newSy();
            }
            while (beat.whammyBarPoints.length > 60) {
                beat.removeWhammyBarPoint(beat.whammyBarPoints.length - 1);
            }
            // set positions
            if (!exact) {
                let count = beat.whammyBarPoints.length;
                let step = (60 / count) | 0;
                let i = 0;
                while (i < count) {
                    beat.whammyBarPoints[i].offset = Math.min(60, i * step);
                    i++;
                }
            }
            else {
                beat.whammyBarPoints.sort((a, b) => {
                    return a.offset - b.offset;
                });
            }
            this._allowNegatives = false;
            if (this._sy !== AlphaTexSymbols.RParensis) {
                this.error('tremolobar-effect', AlphaTexSymbols.RParensis, true);
                return false;
            }
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'bu' || syData === 'bd' || syData === 'au' || syData === 'ad') {
            switch (syData) {
                case 'bu':
                    beat.brushType = BrushType.BrushUp;
                    break;
                case 'bd':
                    beat.brushType = BrushType.BrushDown;
                    break;
                case 'au':
                    beat.brushType = BrushType.ArpeggioUp;
                    break;
                case 'ad':
                    beat.brushType = BrushType.ArpeggioDown;
                    break;
            }
            this._sy = this.newSy();
            if (this._sy === AlphaTexSymbols.Number) {
                // explicit duration
                beat.brushDuration = this._syData;
                this._sy = this.newSy();
                return true;
            }
            // default to calcuated duration
            beat.updateDurations();
            if (syData === 'bu' || syData === 'bd') {
                beat.brushDuration = beat.playbackDuration / 4 / beat.notes.length;
            }
            else if (syData === 'au' || syData === 'ad') {
                beat.brushDuration = beat.playbackDuration / beat.notes.length;
            }
            return true;
        }
        if (syData === 'ch') {
            this._sy = this.newSy();
            let chordName = this._syData;
            let chordId = this.getChordId(this._currentStaff, chordName);
            if (!this._currentStaff.hasChord(chordId)) {
                let chord = new Chord();
                chord.showDiagram = false;
                chord.name = chordName;
                this._currentStaff.addChord(chordId, chord);
            }
            beat.chordId = chordId;
            this._sy = this.newSy();
            return true;
        }
        if (syData === 'gr') {
            this._sy = this.newSy();
            if (this._syData.toLowerCase() === 'ob') {
                beat.graceType = GraceType.OnBeat;
                this._sy = this.newSy();
            }
            else if (this._syData.toLowerCase() === 'b') {
                beat.graceType = GraceType.BendGrace;
                this._sy = this.newSy();
            }
            else {
                beat.graceType = GraceType.BeforeBeat;
            }
            return true;
        }
        if (syData === 'dy') {
            this.newSy();
            switch (this._syData.toLowerCase()) {
                case 'ppp':
                    beat.dynamics = DynamicValue.PPP;
                    break;
                case 'pp':
                    beat.dynamics = DynamicValue.PP;
                    break;
                case 'p':
                    beat.dynamics = DynamicValue.P;
                    break;
                case 'mp':
                    beat.dynamics = DynamicValue.MP;
                    break;
                case 'mf':
                    beat.dynamics = DynamicValue.MF;
                    break;
                case 'f':
                    beat.dynamics = DynamicValue.F;
                    break;
                case 'ff':
                    beat.dynamics = DynamicValue.FF;
                    break;
                case 'fff':
                    beat.dynamics = DynamicValue.FFF;
                    break;
            }
            this._currentDynamics = beat.dynamics;
            this.newSy();
            return true;
        }
        if (syData === 'cre') {
            beat.crescendo = CrescendoType.Crescendo;
            this.newSy();
            return true;
        }
        if (syData === 'dec') {
            beat.crescendo = CrescendoType.Decrescendo;
            this.newSy();
            return true;
        }
        if (syData === 'tp') {
            this._sy = this.newSy();
            let duration = Duration.Eighth;
            if (this._sy === AlphaTexSymbols.Number) {
                switch (this._syData) {
                    case 8:
                        duration = Duration.Eighth;
                        break;
                    case 16:
                        duration = Duration.Sixteenth;
                        break;
                    case 32:
                        duration = Duration.ThirtySecond;
                        break;
                    default:
                        duration = Duration.Eighth;
                        break;
                }
                this._sy = this.newSy();
            }
            beat.tremoloSpeed = duration;
            return true;
        }
        return false;
    }
    getChordId(currentStaff, chordName) {
        return chordName.toLowerCase() + currentStaff.index + currentStaff.track.index;
    }
    applyTuplet(beat, tuplet) {
        switch (tuplet) {
            case 3:
                beat.tupletNumerator = 3;
                beat.tupletDenominator = 2;
                break;
            case 5:
                beat.tupletNumerator = 5;
                beat.tupletDenominator = 4;
                break;
            case 6:
                beat.tupletNumerator = 6;
                beat.tupletDenominator = 4;
                break;
            case 7:
                beat.tupletNumerator = 7;
                beat.tupletDenominator = 4;
                break;
            case 9:
                beat.tupletNumerator = 9;
                beat.tupletDenominator = 8;
                break;
            case 10:
                beat.tupletNumerator = 10;
                beat.tupletDenominator = 8;
                break;
            case 11:
                beat.tupletNumerator = 11;
                beat.tupletDenominator = 8;
                break;
            case 12:
                beat.tupletNumerator = 12;
                beat.tupletDenominator = 8;
                break;
            default:
                beat.tupletNumerator = 1;
                beat.tupletDenominator = 1;
                break;
        }
    }
    isNoteText(txt) {
        return txt === 'x' || txt === '-' || txt === 'r';
    }
    note(beat) {
        // fret.string
        let isDead = false;
        let isTie = false;
        let fret = -1;
        let octave = -1;
        let tone = -1;
        switch (this._sy) {
            case AlphaTexSymbols.Number:
                fret = this._syData;
                break;
            case AlphaTexSymbols.String:
                isDead = this._syData === 'x';
                isTie = this._syData === '-';
                if (isTie || isDead) {
                    fret = 0;
                }
                else {
                    this.error('note-fret', AlphaTexSymbols.Number, true);
                }
                break;
            case AlphaTexSymbols.Tuning:
                let tuning = this._syData;
                octave = tuning.octave;
                tone = tuning.noteValue;
                break;
            default:
                return false;
        }
        this._sy = this.newSy(); // Fret done
        let isFretted = octave === -1 && this._currentStaff.tuning.length > 0;
        let noteString = -1;
        if (isFretted) {
            // Fret [Dot] String
            if (this._sy !== AlphaTexSymbols.Dot) {
                this.error('note', AlphaTexSymbols.Dot, true);
            }
            this._sy = this.newSy(); // dot done
            if (this._sy !== AlphaTexSymbols.Number) {
                this.error('note-string', AlphaTexSymbols.Number, true);
            }
            noteString = this._syData;
            if (noteString < 1 || noteString > this._currentStaff.tuning.length) {
                this.error('note-string', AlphaTexSymbols.Number, false);
            }
            this._sy = this.newSy(); // string done
        }
        // read effects
        let note = new Note();
        if (isFretted) {
            note.string = this._currentStaff.tuning.length - (noteString - 1);
            note.isDead = isDead;
            note.isTieDestination = isTie;
            if (!isTie) {
                note.fret = fret;
            }
        }
        else {
            note.octave = octave;
            note.tone = tone;
            note.isTieDestination = isTie;
        }
        beat.addNote(note);
        this.noteEffects(note);
        return true;
    }
    noteEffects(note) {
        if (this._sy !== AlphaTexSymbols.LBrace) {
            return;
        }
        this._sy = this.newSy();
        while (this._sy === AlphaTexSymbols.String) {
            let syData = this._syData.toLowerCase();
            this._syData = syData;
            if (syData === 'b' || syData === 'be') {
                let exact = this._syData === 'be';
                // read points
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.LParensis) {
                    this.error('bend-effect', AlphaTexSymbols.LParensis, true);
                }
                this._sy = this.newSy();
                while (this._sy !== AlphaTexSymbols.RParensis && this._sy !== AlphaTexSymbols.Eof) {
                    let offset = 0;
                    let value = 0;
                    if (exact) {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                        }
                        offset = this._syData;
                        this._sy = this.newSy();
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                        }
                        value = this._syData;
                    }
                    else {
                        if (this._sy !== AlphaTexSymbols.Number) {
                            this.error('bend-effect-value', AlphaTexSymbols.Number, true);
                        }
                        value = this._syData;
                    }
                    note.addBendPoint(new BendPoint(offset, value));
                    this._sy = this.newSy();
                }
                const points = note.bendPoints;
                while (points.length > 60) {
                    points.splice(points.length - 1, 1);
                }
                // set positions
                if (exact) {
                    points.sort((a, b) => {
                        return a.offset - b.offset;
                    });
                }
                else {
                    let count = points.length;
                    let step = (60 / (count - 1)) | 0;
                    let i = 0;
                    while (i < count) {
                        points[i].offset = Math.min(60, i * step);
                        i++;
                    }
                }
                if (this._sy !== AlphaTexSymbols.RParensis) {
                    this.error('bend-effect', AlphaTexSymbols.RParensis, true);
                }
                this._sy = this.newSy();
            }
            else if (syData === 'nh') {
                note.harmonicType = HarmonicType.Natural;
                this._sy = this.newSy();
            }
            else if (syData === 'ah') {
                // todo: Artificial Key
                note.harmonicType = HarmonicType.Artificial;
                this._sy = this.newSy();
            }
            else if (syData === 'th') {
                // todo: store tapped fret in data
                note.harmonicType = HarmonicType.Tap;
                this._sy = this.newSy();
            }
            else if (syData === 'ph') {
                note.harmonicType = HarmonicType.Pinch;
                this._sy = this.newSy();
            }
            else if (syData === 'sh') {
                note.harmonicType = HarmonicType.Semi;
                this._sy = this.newSy();
            }
            else if (syData === 'tr') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('trill-effect', AlphaTexSymbols.Number, true);
                }
                let fret = this._syData;
                this._sy = this.newSy();
                let duration = Duration.Sixteenth;
                if (this._sy === AlphaTexSymbols.Number) {
                    switch (this._syData) {
                        case 16:
                            duration = Duration.Sixteenth;
                            break;
                        case 32:
                            duration = Duration.ThirtySecond;
                            break;
                        case 64:
                            duration = Duration.SixtyFourth;
                            break;
                        default:
                            duration = Duration.Sixteenth;
                            break;
                    }
                    this._sy = this.newSy();
                }
                note.trillValue = fret + note.stringTuning;
                note.trillSpeed = duration;
            }
            else if (syData === 'v') {
                this._sy = this.newSy();
                note.vibrato = VibratoType.Slight;
            }
            else if (syData === 'sl') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.Legato;
            }
            else if (syData === 'ss') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.Shift;
            }
            else if (syData === 'sib') {
                this._sy = this.newSy();
                note.slideInType = SlideInType.IntoFromBelow;
            }
            else if (syData === 'sia') {
                this._sy = this.newSy();
                note.slideInType = SlideInType.IntoFromAbove;
            }
            else if (syData === 'sou') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.OutUp;
            }
            else if (syData === 'sod') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.OutDown;
            }
            else if (syData === 'psd') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.PickSlideDown;
            }
            else if (syData === 'psu') {
                this._sy = this.newSy();
                note.slideOutType = SlideOutType.PickSlideUp;
            }
            else if (syData === 'h') {
                this._sy = this.newSy();
                note.isHammerPullOrigin = true;
            }
            else if (syData === 'lht') {
                this._sy = this.newSy();
                note.isLeftHandTapped = true;
            }
            else if (syData === 'g') {
                this._sy = this.newSy();
                note.isGhost = true;
            }
            else if (syData === 'ac') {
                this._sy = this.newSy();
                note.accentuated = AccentuationType.Normal;
            }
            else if (syData === 'hac') {
                this._sy = this.newSy();
                note.accentuated = AccentuationType.Heavy;
            }
            else if (syData === 'pm') {
                this._sy = this.newSy();
                note.isPalmMute = true;
            }
            else if (syData === 'st') {
                this._sy = this.newSy();
                note.isStaccato = true;
            }
            else if (syData === 'lr') {
                this._sy = this.newSy();
                note.isLetRing = true;
            }
            else if (syData === 'x') {
                this._sy = this.newSy();
                note.fret = 0;
                note.isDead = true;
            }
            else if (syData === '-' || syData === 't') {
                this._sy = this.newSy();
                note.isTieDestination = true;
            }
            else if (syData === 'lf') {
                this._sy = this.newSy();
                let finger = Fingers.Thumb;
                if (this._sy === AlphaTexSymbols.Number) {
                    finger = this.toFinger(this._syData);
                    this._sy = this.newSy();
                }
                note.leftHandFinger = finger;
            }
            else if (syData === 'rf') {
                this._sy = this.newSy();
                let finger = Fingers.Thumb;
                if (this._sy === AlphaTexSymbols.Number) {
                    finger = this.toFinger(this._syData);
                    this._sy = this.newSy();
                }
                note.rightHandFinger = finger;
            }
            else if (this.applyBeatEffect(note.beat)) ;
            else {
                this.error(syData, AlphaTexSymbols.String, false);
            }
        }
        if (this._sy !== AlphaTexSymbols.RBrace) {
            this.error('note-effect', AlphaTexSymbols.RBrace, false);
        }
        this._sy = this.newSy();
    }
    toFinger(num) {
        switch (num) {
            case 1:
                return Fingers.Thumb;
            case 2:
                return Fingers.IndexFinger;
            case 3:
                return Fingers.MiddleFinger;
            case 4:
                return Fingers.AnnularFinger;
            case 5:
                return Fingers.LittleFinger;
        }
        return Fingers.Thumb;
    }
    parseDuration(duration) {
        switch (duration) {
            case -4:
                return Duration.QuadrupleWhole;
            case -2:
                return Duration.DoubleWhole;
            case 1:
                return Duration.Whole;
            case 2:
                return Duration.Half;
            case 4:
                return Duration.Quarter;
            case 8:
                return Duration.Eighth;
            case 16:
                return Duration.Sixteenth;
            case 32:
                return Duration.ThirtySecond;
            case 64:
                return Duration.SixtyFourth;
            case 128:
                return Duration.OneHundredTwentyEighth;
            case 256:
                return Duration.TwoHundredFiftySixth;
            default:
                return Duration.Quarter;
        }
    }
    barMeta(bar) {
        let anyMeta = false;
        let master = bar.masterBar;
        while (this._sy === AlphaTexSymbols.MetaCommand) {
            anyMeta = true;
            let syData = this._syData.toLowerCase();
            if (syData === 'ts') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('timesignature-numerator', AlphaTexSymbols.Number, true);
                }
                master.timeSignatureNumerator = this._syData;
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('timesignature-denominator', AlphaTexSymbols.Number, true);
                }
                master.timeSignatureDenominator = this._syData;
                this._sy = this.newSy();
            }
            else if (syData === 'ro') {
                master.isRepeatStart = true;
                this._sy = this.newSy();
            }
            else if (syData === 'rc') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('repeatclose', AlphaTexSymbols.Number, true);
                }
                if (this._syData > 2048) {
                    this.error('repeatclose', AlphaTexSymbols.Number, false);
                }
                master.repeatCount = this._syData;
                this._sy = this.newSy();
            }
            else if (syData === 'ae') {
                this._sy = this.newSy();
                if (this._sy === AlphaTexSymbols.LParensis) {
                    this._sy = this.newSy();
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('alternateending', AlphaTexSymbols.Number, true);
                    }
                    this.applyAlternateEnding(master);
                    while (this._sy === AlphaTexSymbols.Number) {
                        this.applyAlternateEnding(master);
                    }
                    if (this._sy !== AlphaTexSymbols.RParensis) {
                        this.error('alternateending-list', AlphaTexSymbols.RParensis, true);
                    }
                    this._sy = this.newSy();
                }
                else {
                    if (this._sy !== AlphaTexSymbols.Number) {
                        this.error('alternateending', AlphaTexSymbols.Number, true);
                    }
                    this.applyAlternateEnding(master);
                }
            }
            else if (syData === 'ks') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('keysignature', AlphaTexSymbols.String, true);
                }
                master.keySignature = this.parseKeySignature(this._syData);
                this._sy = this.newSy();
            }
            else if (syData === 'clef') {
                this._sy = this.newSy();
                switch (this._sy) {
                    case AlphaTexSymbols.String:
                        bar.clef = this.parseClefFromString(this._syData);
                        break;
                    case AlphaTexSymbols.Number:
                        bar.clef = this.parseClefFromInt(this._syData);
                        break;
                    case AlphaTexSymbols.Tuning:
                        let parseResult = this._syData;
                        bar.clef = this.parseClefFromInt(parseResult.realValue);
                        break;
                    default:
                        this.error('clef', AlphaTexSymbols.String, true);
                        break;
                }
                this._sy = this.newSy();
            }
            else if (syData === 'tempo') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.Number) {
                    this.error('tempo', AlphaTexSymbols.Number, true);
                }
                let tempoAutomation = new Automation();
                tempoAutomation.isLinear = false;
                tempoAutomation.type = AutomationType.Tempo;
                tempoAutomation.value = this._syData;
                master.tempoAutomation = tempoAutomation;
                this._sy = this.newSy();
            }
            else if (syData === 'section') {
                this._sy = this.newSy();
                if (this._sy !== AlphaTexSymbols.String) {
                    this.error('section', AlphaTexSymbols.String, true);
                }
                let text = this._syData;
                this._sy = this.newSy();
                let marker = '';
                if (this._sy === AlphaTexSymbols.String && !this.isNoteText(this._syData.toLowerCase())) {
                    marker = text;
                    text = this._syData;
                    this._sy = this.newSy();
                }
                let section = new Section();
                section.marker = marker;
                section.text = text;
                master.section = section;
            }
            else if (syData === 'tf') {
                this._allowTuning = false;
                this._sy = this.newSy();
                this._allowTuning = true;
                switch (this._sy) {
                    case AlphaTexSymbols.String:
                        master.tripletFeel = this.parseTripletFeelFromString(this._syData);
                        break;
                    case AlphaTexSymbols.Number:
                        master.tripletFeel = this.parseTripletFeelFromInt(this._syData);
                        break;
                    default:
                        this.error('triplet-feel', AlphaTexSymbols.String, true);
                        break;
                }
                this._sy = this.newSy();
            }
            else if (syData === 'ac') {
                master.isAnacrusis = true;
                this._sy = this.newSy();
            }
            else {
                if (bar.index === 0) {
                    if (!this.handleStaffMeta()) {
                        this.error('measure-effects', AlphaTexSymbols.String, false);
                    }
                }
                else {
                    this.error('measure-effects', AlphaTexSymbols.String, false);
                }
            }
        }
        if (master.index === 0 && !master.tempoAutomation) {
            let tempoAutomation = new Automation();
            tempoAutomation.isLinear = false;
            tempoAutomation.type = AutomationType.Tempo;
            tempoAutomation.value = this._score.tempo;
            master.tempoAutomation = tempoAutomation;
        }
        return anyMeta;
    }
    applyAlternateEnding(master) {
        let num = this._syData;
        if (num < 1) {
            // Repeat numberings start from 1
            this.error('alternateending', AlphaTexSymbols.Number, true);
        }
        // Alternate endings bitflag starts from 0
        master.alternateEndings |= 1 << (num - 1);
        this._sy = this.newSy();
    }
}
AlphaTexImporter.Eof = 0;

class Gp3To5Importer extends ScoreImporter {
    constructor() {
        super();
        this._versionNumber = 0;
        this._globalTripletFeel = TripletFeel.NoTripletFeel;
        this._lyricsTrack = 0;
        this._lyrics = [];
        this._barCount = 0;
        this._trackCount = 0;
        this._playbackInfos = [];
        this._beatTextChunksByTrack = new Map();
    }
    get name() {
        return 'Guitar Pro 3-5';
    }
    readScore() {
        this.readVersion();
        this._score = new Score();
        // basic song info
        this.readScoreInformation();
        // triplet feel before Gp5
        if (this._versionNumber < 500) {
            this._globalTripletFeel = GpBinaryHelpers.gpReadBool(this.data)
                ? TripletFeel.Triplet8th
                : TripletFeel.NoTripletFeel;
        }
        // beat lyrics
        if (this._versionNumber >= 400) {
            this.readLyrics();
        }
        // rse master settings since GP5.1
        if (this._versionNumber >= 510) {
            // master volume (4)
            // master effect (4)
            // master equalizer (10)
            // master equalizer preset (1)
            this.data.skip(19);
        }
        // page setup since GP5
        if (this._versionNumber >= 500) {
            this.readPageSetup();
            this._score.tempoLabel = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
        // tempo stuff
        this._score.tempo = IOHelper.readInt32LE(this.data);
        if (this._versionNumber >= 510) {
            GpBinaryHelpers.gpReadBool(this.data); // hide tempo?
        }
        // keysignature and octave
        IOHelper.readInt32LE(this.data);
        if (this._versionNumber >= 400) {
            this.data.readByte();
        }
        this.readPlaybackInfos();
        // repetition stuff
        if (this._versionNumber >= 500) {
            // "Coda" bar index (2)
            // "Double Coda" bar index (2)
            // "Segno" bar index (2)
            // "Segno Segno" bar index (2)
            // "Fine" bar index (2)
            // "Da Capo" bar index (2)
            // "Da Capo al Coda" bar index (2)
            // "Da Capo al Double Coda" bar index (2)
            // "Da Capo al Fine" bar index (2)
            // "Da Segno" bar index (2)
            // "Da Segno al Coda" bar index (2)
            // "Da Segno al Double Coda" bar index (2)
            // "Da Segno al Fine "bar index (2)
            // "Da Segno Segno" bar index (2)
            // "Da Segno Segno al Coda" bar index (2)
            // "Da Segno Segno al Double Coda" bar index (2)
            // "Da Segno Segno al Fine" bar index (2)
            // "Da Coda" bar index (2)
            // "Da Double Coda" bar index (2)
            this.data.skip(38);
            // unknown (4)
            this.data.skip(4);
        }
        // contents
        this._barCount = IOHelper.readInt32LE(this.data);
        this._trackCount = IOHelper.readInt32LE(this.data);
        this.readMasterBars();
        this.readTracks();
        this.readBars();
        // To be more in line with the GP7 structure we create an
        // initial tempo automation on the first masterbar
        if (this._score.masterBars.length > 0) {
            this._score.masterBars[0].tempoAutomation = Automation.buildTempoAutomation(false, 0, this._score.tempo, 2);
            this._score.masterBars[0].tempoAutomation.text = this._score.tempoLabel;
        }
        this._score.finish(this.settings);
        if (this._lyrics && this._lyricsTrack >= 0) {
            this._score.tracks[this._lyricsTrack].applyLyrics(this._lyrics);
        }
        return this._score;
    }
    readVersion() {
        let version = GpBinaryHelpers.gpReadStringByteLength(this.data, 30, this.settings.importer.encoding);
        if (!version.startsWith(Gp3To5Importer.VersionString)) {
            throw new UnsupportedFormatError('Unsupported format');
        }
        version = version.substr(Gp3To5Importer.VersionString.length + 1);
        let dot = version.indexOf(String.fromCharCode(46));
        this._versionNumber = 100 * parseInt(version.substr(0, dot)) + parseInt(version.substr(dot + 1));
        Logger.debug(this.name, 'Guitar Pro version ' + version + ' detected');
    }
    readScoreInformation() {
        var _a;
        this._score.title = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.subTitle = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.artist = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.album = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.words = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.music =
            this._versionNumber >= 500
                ? GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)
                : this._score.words;
        this._score.copyright = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.tab = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        this._score.instructions = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
        let noticeLines = IOHelper.readInt32LE(this.data);
        let notice = '';
        for (let i = 0; i < noticeLines; i++) {
            if (i > 0) {
                notice += '\r\n';
            }
            notice += (_a = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding)) === null || _a === void 0 ? void 0 : _a.toString();
        }
        this._score.notices = notice;
    }
    readLyrics() {
        this._lyrics = [];
        this._lyricsTrack = IOHelper.readInt32LE(this.data) - 1;
        for (let i = 0; i < 5; i++) {
            let lyrics = new Lyrics();
            lyrics.startBar = IOHelper.readInt32LE(this.data) - 1;
            lyrics.text = GpBinaryHelpers.gpReadStringInt(this.data, this.settings.importer.encoding);
            this._lyrics.push(lyrics);
        }
    }
    readPageSetup() {
        // Page Width (4)
        // Page Heigth (4)
        // Padding Left (4)
        // Padding Right (4)
        // Padding Top (4)
        // Padding Bottom (4)
        // Size Proportion(4)
        // Header and Footer display flags (2)
        this.data.skip(30);
        // title format
        // subtitle format
        // artist format
        // album format
        // words format
        // music format
        // words and music format
        // copyright format
        // pagpublic enumber format
        for (let i = 0; i < 10; i++) {
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
    }
    readPlaybackInfos() {
        this._playbackInfos = [];
        for (let i = 0; i < 64; i++) {
            let info = new PlaybackInformation();
            info.primaryChannel = i;
            info.secondaryChannel = i;
            info.program = IOHelper.readInt32LE(this.data);
            info.volume = this.data.readByte();
            info.balance = this.data.readByte();
            this.data.skip(6);
            this._playbackInfos.push(info);
        }
    }
    readMasterBars() {
        for (let i = 0; i < this._barCount; i++) {
            this.readMasterBar();
        }
    }
    readMasterBar() {
        let previousMasterBar = null;
        if (this._score.masterBars.length > 0) {
            previousMasterBar = this._score.masterBars[this._score.masterBars.length - 1];
        }
        let newMasterBar = new MasterBar();
        let flags = this.data.readByte();
        // time signature
        if ((flags & 0x01) !== 0) {
            newMasterBar.timeSignatureNumerator = this.data.readByte();
        }
        else if (previousMasterBar) {
            newMasterBar.timeSignatureNumerator = previousMasterBar.timeSignatureNumerator;
        }
        if ((flags & 0x02) !== 0) {
            newMasterBar.timeSignatureDenominator = this.data.readByte();
        }
        else if (previousMasterBar) {
            newMasterBar.timeSignatureDenominator = previousMasterBar.timeSignatureDenominator;
        }
        // repeatings
        newMasterBar.isRepeatStart = (flags & 0x04) !== 0;
        if ((flags & 0x08) !== 0) {
            newMasterBar.repeatCount = this.data.readByte() + (this._versionNumber >= 500 ? 0 : 1);
        }
        // alternate endings
        if ((flags & 0x10) !== 0) {
            if (this._versionNumber < 500) {
                let currentMasterBar = previousMasterBar;
                // get the already existing alternatives to ignore them
                let existentAlternatives = 0;
                while (currentMasterBar) {
                    // found another repeat ending?
                    if (currentMasterBar.isRepeatEnd && currentMasterBar !== previousMasterBar) {
                        break;
                    }
                    // found the opening?
                    if (currentMasterBar.isRepeatStart) {
                        break;
                    }
                    existentAlternatives = existentAlternatives | currentMasterBar.alternateEndings;
                    currentMasterBar = currentMasterBar.previousMasterBar;
                }
                // now calculate the alternative for this bar
                let repeatAlternative = 0;
                let repeatMask = this.data.readByte();
                for (let i = 0; i < 8; i++) {
                    // only add the repeating if it is not existing
                    let repeating = 1 << i;
                    if (repeatMask > i && (existentAlternatives & repeating) === 0) {
                        repeatAlternative = repeatAlternative | repeating;
                    }
                }
                newMasterBar.alternateEndings = repeatAlternative;
            }
            else {
                newMasterBar.alternateEndings = this.data.readByte();
            }
        }
        // marker
        if ((flags & 0x20) !== 0) {
            let section = new Section();
            section.text = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            section.marker = '';
            GpBinaryHelpers.gpReadColor(this.data, false);
            newMasterBar.section = section;
        }
        // keysignature
        if ((flags & 0x40) !== 0) {
            newMasterBar.keySignature = IOHelper.readSInt8(this.data);
            newMasterBar.keySignatureType = this.data.readByte();
        }
        else if (previousMasterBar) {
            newMasterBar.keySignature = previousMasterBar.keySignature;
            newMasterBar.keySignatureType = previousMasterBar.keySignatureType;
        }
        if (this._versionNumber >= 500 && (flags & 0x03) !== 0) {
            this.data.skip(4);
        }
        // better alternate ending mask in GP5
        if (this._versionNumber >= 500 && (flags & 0x10) === 0) {
            newMasterBar.alternateEndings = this.data.readByte();
        }
        // tripletfeel
        if (this._versionNumber >= 500) {
            let tripletFeel = this.data.readByte();
            switch (tripletFeel) {
                case 1:
                    newMasterBar.tripletFeel = TripletFeel.Triplet8th;
                    break;
                case 2:
                    newMasterBar.tripletFeel = TripletFeel.Triplet16th;
                    break;
            }
            this.data.readByte();
        }
        else {
            newMasterBar.tripletFeel = this._globalTripletFeel;
        }
        newMasterBar.isDoubleBar = (flags & 0x80) !== 0;
        this._score.addMasterBar(newMasterBar);
    }
    readTracks() {
        for (let i = 0; i < this._trackCount; i++) {
            this.readTrack();
        }
    }
    readTrack() {
        let newTrack = new Track();
        newTrack.ensureStaveCount(1);
        this._score.addTrack(newTrack);
        let mainStaff = newTrack.staves[0];
        let flags = this.data.readByte();
        newTrack.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 40, this.settings.importer.encoding);
        if ((flags & 0x01) !== 0) {
            mainStaff.isPercussion = true;
        }
        let stringCount = IOHelper.readInt32LE(this.data);
        let tuning = [];
        for (let i = 0; i < 7; i++) {
            let stringTuning = IOHelper.readInt32LE(this.data);
            if (stringCount > i) {
                tuning.push(stringTuning);
            }
        }
        mainStaff.stringTuning.tunings = tuning;
        let port = IOHelper.readInt32LE(this.data);
        let index = IOHelper.readInt32LE(this.data) - 1;
        let effectChannel = IOHelper.readInt32LE(this.data) - 1;
        this.data.skip(4); // Fretcount
        if (index >= 0 && index < this._playbackInfos.length) {
            let info = this._playbackInfos[index];
            info.port = port;
            info.isSolo = (flags & 0x10) !== 0;
            info.isMute = (flags & 0x20) !== 0;
            info.secondaryChannel = effectChannel;
            if (GeneralMidi.isGuitar(info.program)) {
                mainStaff.displayTranspositionPitch = -12;
            }
            newTrack.playbackInfo = info;
        }
        mainStaff.capo = IOHelper.readInt32LE(this.data);
        newTrack.color = GpBinaryHelpers.gpReadColor(this.data, false);
        if (this._versionNumber >= 500) {
            // flags for
            //  0x01 -> show tablature
            //  0x02 -> show standard notation
            this.data.readByte();
            // flags for
            //  0x02 -> auto let ring
            //  0x04 -> auto brush
            this.data.readByte();
            // unknown
            this.data.skip(43);
        }
        // unknown
        if (this._versionNumber >= 510) {
            this.data.skip(4);
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
    }
    readBars() {
        for (let i = 0; i < this._barCount; i++) {
            for (let t = 0; t < this._trackCount; t++) {
                this.readBar(this._score.tracks[t]);
            }
        }
    }
    readBar(track) {
        let newBar = new Bar();
        let mainStaff = track.staves[0];
        if (mainStaff.isPercussion) {
            newBar.clef = Clef.Neutral;
        }
        mainStaff.addBar(newBar);
        let voiceCount = 1;
        if (this._versionNumber >= 500) {
            this.data.readByte();
            voiceCount = 2;
        }
        for (let v = 0; v < voiceCount; v++) {
            this.readVoice(track, newBar);
        }
    }
    readVoice(track, bar) {
        let beatCount = IOHelper.readInt32LE(this.data);
        if (beatCount === 0) {
            return;
        }
        let newVoice = new Voice$1();
        bar.addVoice(newVoice);
        for (let i = 0; i < beatCount; i++) {
            this.readBeat(track, bar, newVoice);
        }
    }
    readBeat(track, bar, voice) {
        let newBeat = new Beat();
        let flags = this.data.readByte();
        if ((flags & 0x01) !== 0) {
            newBeat.dots = 1;
        }
        if ((flags & 0x40) !== 0) {
            let type = this.data.readByte();
            newBeat.isEmpty = (type & 0x02) === 0;
        }
        voice.addBeat(newBeat);
        let duration = IOHelper.readSInt8(this.data);
        switch (duration) {
            case -2:
                newBeat.duration = Duration.Whole;
                break;
            case -1:
                newBeat.duration = Duration.Half;
                break;
            case 0:
                newBeat.duration = Duration.Quarter;
                break;
            case 1:
                newBeat.duration = Duration.Eighth;
                break;
            case 2:
                newBeat.duration = Duration.Sixteenth;
                break;
            case 3:
                newBeat.duration = Duration.ThirtySecond;
                break;
            case 4:
                newBeat.duration = Duration.SixtyFourth;
                break;
            default:
                newBeat.duration = Duration.Quarter;
                break;
        }
        if ((flags & 0x20) !== 0) {
            newBeat.tupletNumerator = IOHelper.readInt32LE(this.data);
            switch (newBeat.tupletNumerator) {
                case 1:
                    newBeat.tupletDenominator = 1;
                    break;
                case 3:
                    newBeat.tupletDenominator = 2;
                    break;
                case 5:
                case 6:
                case 7:
                    newBeat.tupletDenominator = 4;
                    break;
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                    newBeat.tupletDenominator = 8;
                    break;
                case 2:
                case 4:
                case 8:
                    break;
                default:
                    newBeat.tupletNumerator = 1;
                    newBeat.tupletDenominator = 1;
                    break;
            }
        }
        if ((flags & 0x02) !== 0) {
            this.readChord(newBeat);
        }
        let beatTextAsLyrics = this.settings.importer.beatTextAsLyrics
            && track.index !== this._lyricsTrack; // detect if not lyrics track
        if ((flags & 0x04) !== 0) {
            const text = GpBinaryHelpers.gpReadStringIntUnused(this.data, this.settings.importer.encoding);
            if (beatTextAsLyrics) {
                const lyrics = new Lyrics();
                lyrics.text = text.trim();
                lyrics.finish(true);
                // push them in reverse order to the store for applying them 
                // to the next beats being read 
                const beatLyrics = [];
                for (let i = lyrics.chunks.length - 1; i >= 0; i--) {
                    beatLyrics.push(lyrics.chunks[i]);
                }
                this._beatTextChunksByTrack.set(track.index, beatLyrics);
            }
            else {
                newBeat.text = text;
            }
        }
        let allNoteHarmonicType = HarmonicType.None;
        if ((flags & 0x08) !== 0) {
            allNoteHarmonicType = this.readBeatEffects(newBeat);
        }
        if ((flags & 0x10) !== 0) {
            this.readMixTableChange(newBeat);
        }
        let stringFlags = this.data.readByte();
        for (let i = 6; i >= 0; i--) {
            if ((stringFlags & (1 << i)) !== 0 && 6 - i < bar.staff.tuning.length) {
                const note = this.readNote(track, bar, voice, newBeat, 6 - i);
                if (allNoteHarmonicType !== HarmonicType.None) {
                    note.harmonicType = allNoteHarmonicType;
                    if (note.harmonicType === HarmonicType.Natural) {
                        note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
                    }
                }
            }
        }
        if (this._versionNumber >= 500) {
            this.data.readByte();
            let flag = this.data.readByte();
            if ((flag & 0x08) !== 0) {
                this.data.readByte();
            }
        }
        if (beatTextAsLyrics && !newBeat.isRest &&
            this._beatTextChunksByTrack.has(track.index) &&
            this._beatTextChunksByTrack.get(track.index).length > 0) {
            newBeat.lyrics = [this._beatTextChunksByTrack.get(track.index).pop()];
        }
    }
    readChord(beat) {
        let chord = new Chord();
        let chordId = ModelUtils.newGuid();
        if (this._versionNumber >= 500) {
            this.data.skip(17);
            chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
            this.data.skip(4);
            chord.firstFret = IOHelper.readInt32LE(this.data);
            for (let i = 0; i < 7; i++) {
                let fret = IOHelper.readInt32LE(this.data);
                if (i < beat.voice.bar.staff.tuning.length) {
                    chord.strings.push(fret);
                }
            }
            let numberOfBarres = this.data.readByte();
            let barreFrets = new Uint8Array(5);
            this.data.read(barreFrets, 0, barreFrets.length);
            for (let i = 0; i < numberOfBarres; i++) {
                chord.barreFrets.push(barreFrets[i]);
            }
            this.data.skip(26);
        }
        else {
            if (this.data.readByte() !== 0) {
                // gp4
                if (this._versionNumber >= 400) {
                    // Sharp (1)
                    // Unused (3)
                    // Root (1)
                    // Major/Minor (1)
                    // Nin,Eleven or Thirteen (1)
                    // Bass (4)
                    // Diminished/Augmented (4)
                    // Add (1)
                    this.data.skip(16);
                    chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 21, this.settings.importer.encoding);
                    // Unused (2)
                    // Fifth (1)
                    // Ninth (1)
                    // Eleventh (1)
                    this.data.skip(4);
                    chord.firstFret = IOHelper.readInt32LE(this.data);
                    for (let i = 0; i < 7; i++) {
                        let fret = IOHelper.readInt32LE(this.data);
                        if (i < beat.voice.bar.staff.tuning.length) {
                            chord.strings.push(fret);
                        }
                    }
                    let numberOfBarres = this.data.readByte();
                    let barreFrets = new Uint8Array(5);
                    this.data.read(barreFrets, 0, barreFrets.length);
                    for (let i = 0; i < numberOfBarres; i++) {
                        chord.barreFrets.push(barreFrets[i]);
                    }
                    // Barree end (5)
                    // Omission1,3,5,7,9,11,13 (7)
                    // Unused (1)
                    // Fingering (7)
                    // Show Diagram Fingering (1)
                    // ??
                    this.data.skip(26);
                }
                else {
                    // unknown
                    this.data.skip(25);
                    chord.name = GpBinaryHelpers.gpReadStringByteLength(this.data, 34, this.settings.importer.encoding);
                    chord.firstFret = IOHelper.readInt32LE(this.data);
                    for (let i = 0; i < 6; i++) {
                        let fret = IOHelper.readInt32LE(this.data);
                        if (i < beat.voice.bar.staff.tuning.length) {
                            chord.strings.push(fret);
                        }
                    }
                    // unknown
                    this.data.skip(36);
                }
            }
            else {
                let strings = this._versionNumber >= 406 ? 7 : 6;
                chord.name = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
                chord.firstFret = IOHelper.readInt32LE(this.data);
                if (chord.firstFret > 0) {
                    for (let i = 0; i < strings; i++) {
                        let fret = IOHelper.readInt32LE(this.data);
                        if (i < beat.voice.bar.staff.tuning.length) {
                            chord.strings.push(fret);
                        }
                    }
                }
            }
        }
        if (chord.name) {
            beat.chordId = chordId;
            beat.voice.bar.staff.addChord(beat.chordId, chord);
        }
    }
    readBeatEffects(beat) {
        let flags = this.data.readByte();
        let flags2 = 0;
        if (this._versionNumber >= 400) {
            flags2 = this.data.readByte();
        }
        beat.fadeIn = (flags & 0x10) !== 0;
        if ((this._versionNumber < 400 && (flags & 0x01) !== 0) || (flags & 0x02) !== 0) {
            beat.vibrato = VibratoType.Slight;
        }
        beat.hasRasgueado = (flags2 & 0x01) !== 0;
        if ((flags & 0x20) !== 0 && this._versionNumber >= 400) {
            let slapPop = IOHelper.readSInt8(this.data);
            switch (slapPop) {
                case 1:
                    beat.tap = true;
                    break;
                case 2:
                    beat.slap = true;
                    break;
                case 3:
                    beat.pop = true;
                    break;
            }
        }
        else if ((flags & 0x20) !== 0) {
            let slapPop = IOHelper.readSInt8(this.data);
            switch (slapPop) {
                case 1:
                    beat.tap = true;
                    break;
                case 2:
                    beat.slap = true;
                    break;
                case 3:
                    beat.pop = true;
                    break;
            }
            this.data.skip(4);
        }
        if ((flags2 & 0x04) !== 0) {
            this.readTremoloBarEffect(beat);
        }
        if ((flags & 0x40) !== 0) {
            let strokeUp = 0;
            let strokeDown = 0;
            if (this._versionNumber < 500) {
                strokeDown = this.data.readByte();
                strokeUp = this.data.readByte();
            }
            else {
                strokeUp = this.data.readByte();
                strokeDown = this.data.readByte();
            }
            if (strokeUp > 0) {
                beat.brushType = BrushType.BrushUp;
                beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeUp);
            }
            else if (strokeDown > 0) {
                beat.brushType = BrushType.BrushDown;
                beat.brushDuration = Gp3To5Importer.toStrokeValue(strokeDown);
            }
        }
        if ((flags2 & 0x02) !== 0) {
            switch (IOHelper.readSInt8(this.data)) {
                case 0:
                    beat.pickStroke = PickStroke.None;
                    break;
                case 1:
                    beat.pickStroke = PickStroke.Up;
                    break;
                case 2:
                    beat.pickStroke = PickStroke.Down;
                    break;
            }
        }
        if (this._versionNumber < 400) {
            if ((flags & 0x04) !== 0) {
                return HarmonicType.Natural;
            }
            else if ((flags & 0x08) !== 0) {
                return HarmonicType.Artificial;
            }
        }
        return HarmonicType.None;
    }
    readTremoloBarEffect(beat) {
        this.data.readByte(); // type
        IOHelper.readInt32LE(this.data); // value
        let pointCount = IOHelper.readInt32LE(this.data);
        if (pointCount > 0) {
            for (let i = 0; i < pointCount; i++) {
                let point = new BendPoint(0, 0);
                point.offset = IOHelper.readInt32LE(this.data); // 0...60
                point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                GpBinaryHelpers.gpReadBool(this.data); // vibrato
                beat.addWhammyBarPoint(point);
            }
        }
    }
    static toStrokeValue(value) {
        switch (value) {
            case 1:
                return 30;
            case 2:
                return 30;
            case 3:
                return 60;
            case 4:
                return 120;
            case 5:
                return 240;
            case 6:
                return 480;
            default:
                return 0;
        }
    }
    readMixTableChange(beat) {
        let tableChange = new MixTableChange();
        tableChange.instrument = IOHelper.readSInt8(this.data);
        if (this._versionNumber >= 500) {
            this.data.skip(16); // Rse Info
        }
        tableChange.volume = IOHelper.readSInt8(this.data);
        tableChange.balance = IOHelper.readSInt8(this.data);
        let chorus = IOHelper.readSInt8(this.data);
        let reverb = IOHelper.readSInt8(this.data);
        let phaser = IOHelper.readSInt8(this.data);
        let tremolo = IOHelper.readSInt8(this.data);
        if (this._versionNumber >= 500) {
            tableChange.tempoName = GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
        tableChange.tempo = IOHelper.readInt32LE(this.data);
        // durations
        if (tableChange.volume >= 0) {
            this.data.readByte();
        }
        if (tableChange.balance >= 0) {
            this.data.readByte();
        }
        if (chorus >= 0) {
            this.data.readByte();
        }
        if (reverb >= 0) {
            this.data.readByte();
        }
        if (phaser >= 0) {
            this.data.readByte();
        }
        if (tremolo >= 0) {
            this.data.readByte();
        }
        if (tableChange.tempo >= 0) {
            tableChange.duration = IOHelper.readSInt8(this.data);
            if (this._versionNumber >= 510) {
                this.data.readByte(); // hideTempo (bool)
            }
        }
        if (this._versionNumber >= 400) {
            this.data.readByte(); // all tracks flag
        }
        // unknown
        if (this._versionNumber >= 500) {
            this.data.readByte();
        }
        // unknown
        if (this._versionNumber >= 510) {
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
            GpBinaryHelpers.gpReadStringIntByte(this.data, this.settings.importer.encoding);
        }
        if (tableChange.volume >= 0) {
            let volumeAutomation = new Automation();
            volumeAutomation.isLinear = true;
            volumeAutomation.type = AutomationType.Volume;
            volumeAutomation.value = tableChange.volume;
            beat.automations.push(volumeAutomation);
        }
        if (tableChange.balance >= 0) {
            let balanceAutomation = new Automation();
            balanceAutomation.isLinear = true;
            balanceAutomation.type = AutomationType.Balance;
            balanceAutomation.value = tableChange.balance;
            beat.automations.push(balanceAutomation);
        }
        if (tableChange.instrument >= 0) {
            let instrumentAutomation = new Automation();
            instrumentAutomation.isLinear = true;
            instrumentAutomation.type = AutomationType.Instrument;
            instrumentAutomation.value = tableChange.instrument;
            beat.automations.push(instrumentAutomation);
        }
        if (tableChange.tempo >= 0) {
            let tempoAutomation = new Automation();
            tempoAutomation.isLinear = true;
            tempoAutomation.type = AutomationType.Tempo;
            tempoAutomation.value = tableChange.tempo;
            beat.automations.push(tempoAutomation);
            beat.voice.bar.masterBar.tempoAutomation = tempoAutomation;
        }
    }
    readNote(track, bar, voice, beat, stringIndex) {
        let newNote = new Note();
        newNote.string = bar.staff.tuning.length - stringIndex;
        let flags = this.data.readByte();
        if ((flags & 0x02) !== 0) {
            newNote.accentuated = AccentuationType.Heavy;
        }
        else if ((flags & 0x40) !== 0) {
            newNote.accentuated = AccentuationType.Normal;
        }
        newNote.isGhost = (flags & 0x04) !== 0;
        if ((flags & 0x20) !== 0) {
            let noteType = this.data.readByte();
            if (noteType === 3) {
                newNote.isDead = true;
            }
            else if (noteType === 2) {
                newNote.isTieDestination = true;
            }
        }
        if ((flags & 0x01) !== 0 && this._versionNumber < 500) {
            this.data.readByte(); // duration
            this.data.readByte(); // tuplet
        }
        if ((flags & 0x10) !== 0) {
            let dynamicNumber = IOHelper.readSInt8(this.data);
            newNote.dynamics = this.toDynamicValue(dynamicNumber);
            beat.dynamics = newNote.dynamics;
        }
        if ((flags & 0x20) !== 0) {
            newNote.fret = IOHelper.readSInt8(this.data);
        }
        if ((flags & 0x80) !== 0) {
            newNote.leftHandFinger = IOHelper.readSInt8(this.data);
            newNote.rightHandFinger = IOHelper.readSInt8(this.data);
            newNote.isFingering = true;
        }
        let swapAccidentals = false;
        if (this._versionNumber >= 500) {
            if ((flags & 0x01) !== 0) {
                newNote.durationPercent = GpBinaryHelpers.gpReadDouble(this.data);
            }
            let flags2 = this.data.readByte();
            swapAccidentals = (flags2 & 0x02) !== 0;
        }
        beat.addNote(newNote);
        if ((flags & 0x08) !== 0) {
            this.readNoteEffects(track, voice, beat, newNote);
        }
        if (bar.staff.isPercussion) {
            newNote.percussionArticulation = newNote.fret;
            newNote.string = -1;
            newNote.fret = -1;
        }
        if (swapAccidentals) {
            const accidental = Tuning.defaultAccidentals[newNote.realValueWithoutHarmonic % 12];
            if (accidental === '#') {
                newNote.accidentalMode = NoteAccidentalMode.ForceFlat;
            }
            else if (accidental === 'b') {
                newNote.accidentalMode = NoteAccidentalMode.ForceSharp;
            }
            // Note: forcing no sign to sharp not supported
        }
        return newNote;
    }
    toDynamicValue(value) {
        switch (value) {
            case 1:
                return DynamicValue.PPP;
            case 2:
                return DynamicValue.PP;
            case 3:
                return DynamicValue.P;
            case 4:
                return DynamicValue.MP;
            case 5:
                return DynamicValue.MF;
            case 6:
                return DynamicValue.F;
            case 7:
                return DynamicValue.FF;
            case 8:
                return DynamicValue.FFF;
            default:
                return DynamicValue.F;
        }
    }
    readNoteEffects(track, voice, beat, note) {
        let flags = this.data.readByte();
        let flags2 = 0;
        if (this._versionNumber >= 400) {
            flags2 = this.data.readByte();
        }
        if ((flags & 0x01) !== 0) {
            this.readBend(note);
        }
        if ((flags & 0x10) !== 0) {
            this.readGrace(voice, note);
        }
        if ((flags2 & 0x04) !== 0) {
            this.readTremoloPicking(beat);
        }
        if ((flags2 & 0x08) !== 0) {
            this.readSlide(note);
        }
        else if (this._versionNumber < 400) {
            if ((flags & 0x04) !== 0) {
                note.slideOutType = SlideOutType.Shift;
            }
        }
        if ((flags2 & 0x10) !== 0) {
            this.readArtificialHarmonic(note);
        }
        if ((flags2 & 0x20) !== 0) {
            this.readTrill(note);
        }
        note.isLetRing = (flags & 0x08) !== 0;
        note.isHammerPullOrigin = (flags & 0x02) !== 0;
        if ((flags2 & 0x40) !== 0) {
            note.vibrato = VibratoType.Slight;
        }
        note.isPalmMute = (flags2 & 0x02) !== 0;
        note.isStaccato = (flags2 & 0x01) !== 0;
    }
    readBend(note) {
        this.data.readByte(); // type
        IOHelper.readInt32LE(this.data); // value
        let pointCount = IOHelper.readInt32LE(this.data);
        if (pointCount > 0) {
            for (let i = 0; i < pointCount; i++) {
                let point = new BendPoint(0, 0);
                point.offset = IOHelper.readInt32LE(this.data); // 0...60
                point.value = (IOHelper.readInt32LE(this.data) / Gp3To5Importer.BendStep) | 0; // 0..12 (amount of quarters)
                GpBinaryHelpers.gpReadBool(this.data); // vibrato
                note.addBendPoint(point);
            }
        }
    }
    readGrace(voice, note) {
        let graceBeat = new Beat();
        let graceNote = new Note();
        graceNote.string = note.string;
        graceNote.fret = IOHelper.readSInt8(this.data);
        graceBeat.duration = Duration.ThirtySecond;
        graceBeat.dynamics = this.toDynamicValue(IOHelper.readSInt8(this.data));
        let transition = IOHelper.readSInt8(this.data);
        switch (transition) {
            case 0:
                break;
            case 1:
                graceNote.slideOutType = SlideOutType.Legato;
                graceNote.slideTarget = note;
                break;
            case 2:
                break;
            case 3:
                graceNote.isHammerPullOrigin = true;
                break;
        }
        graceNote.dynamics = graceBeat.dynamics;
        this.data.skip(1); // duration
        if (this._versionNumber < 500) {
            graceBeat.graceType = GraceType.BeforeBeat;
        }
        else {
            let flags = this.data.readByte();
            graceNote.isDead = (flags & 0x01) !== 0;
            graceBeat.graceType = (flags & 0x02) !== 0 ? GraceType.OnBeat : GraceType.BeforeBeat;
        }
        voice.addGraceBeat(graceBeat);
        graceBeat.addNote(graceNote);
    }
    readTremoloPicking(beat) {
        let speed = this.data.readByte();
        switch (speed) {
            case 1:
                beat.tremoloSpeed = Duration.Eighth;
                break;
            case 2:
                beat.tremoloSpeed = Duration.Sixteenth;
                break;
            case 3:
                beat.tremoloSpeed = Duration.ThirtySecond;
                break;
        }
    }
    readSlide(note) {
        if (this._versionNumber >= 500) {
            let type = IOHelper.readSInt8(this.data);
            if ((type & 1) !== 0) {
                note.slideOutType = SlideOutType.Shift;
            }
            else if ((type & 2) !== 0) {
                note.slideOutType = SlideOutType.Legato;
            }
            else if ((type & 4) !== 0) {
                note.slideOutType = SlideOutType.OutDown;
            }
            else if ((type & 8) !== 0) {
                note.slideOutType = SlideOutType.OutUp;
            }
            if ((type & 16) !== 0) {
                note.slideInType = SlideInType.IntoFromBelow;
            }
            else if ((type & 32) !== 0) {
                note.slideInType = SlideInType.IntoFromAbove;
            }
        }
        else {
            let type = IOHelper.readSInt8(this.data);
            switch (type) {
                case 1:
                    note.slideOutType = SlideOutType.Shift;
                    break;
                case 2:
                    note.slideOutType = SlideOutType.Legato;
                    break;
                case 3:
                    note.slideOutType = SlideOutType.OutDown;
                    break;
                case 4:
                    note.slideOutType = SlideOutType.OutUp;
                    break;
                case -1:
                    note.slideInType = SlideInType.IntoFromBelow;
                    break;
                case -2:
                    note.slideInType = SlideInType.IntoFromAbove;
                    break;
            }
        }
    }
    readArtificialHarmonic(note) {
        let type = this.data.readByte();
        if (this._versionNumber >= 500) {
            switch (type) {
                case 1:
                    note.harmonicType = HarmonicType.Natural;
                    note.harmonicValue = this.deltaFretToHarmonicValue(note.fret);
                    break;
                case 2:
                    /*let _harmonicTone: number = */ this.data.readByte();
                    /*let _harmonicKey: number =  */ this.data.readByte();
                    /*let _harmonicOctaveOffset: number = */ this.data.readByte();
                    note.harmonicType = HarmonicType.Artificial;
                    break;
                case 3:
                    note.harmonicType = HarmonicType.Tap;
                    note.harmonicValue = this.deltaFretToHarmonicValue(this.data.readByte());
                    break;
                case 4:
                    note.harmonicType = HarmonicType.Pinch;
                    note.harmonicValue = 12;
                    break;
                case 5:
                    note.harmonicType = HarmonicType.Semi;
                    note.harmonicValue = 12;
                    break;
            }
        }
        else if (this._versionNumber >= 400) {
            switch (type) {
                case 1:
                    note.harmonicType = HarmonicType.Natural;
                    break;
                case 3:
                    note.harmonicType = HarmonicType.Tap;
                    break;
                case 4:
                    note.harmonicType = HarmonicType.Pinch;
                    break;
                case 5:
                    note.harmonicType = HarmonicType.Semi;
                    break;
                case 15:
                    note.harmonicType = HarmonicType.Artificial;
                    break;
                case 17:
                    note.harmonicType = HarmonicType.Artificial;
                    break;
                case 22:
                    note.harmonicType = HarmonicType.Artificial;
                    break;
            }
        }
    }
    deltaFretToHarmonicValue(deltaFret) {
        switch (deltaFret) {
            case 2:
                return 2.4;
            case 3:
                return 3.2;
            case 4:
            case 5:
            case 7:
            case 9:
            case 12:
            case 16:
            case 17:
            case 19:
            case 24:
                return deltaFret;
            case 8:
                return 8.2;
            case 10:
                return 9.6;
            case 14:
            case 15:
                return 14.7;
            case 21:
            case 22:
                return 21.7;
            default:
                return 12;
        }
    }
    readTrill(note) {
        note.trillValue = this.data.readByte() + note.stringTuning;
        switch (this.data.readByte()) {
            case 1:
                note.trillSpeed = Duration.Sixteenth;
                break;
            case 2:
                note.trillSpeed = Duration.ThirtySecond;
                break;
            case 3:
                note.trillSpeed = Duration.SixtyFourth;
                break;
        }
    }
}
Gp3To5Importer.VersionString = 'FICHIER GUITAR PRO ';
Gp3To5Importer.BendStep = 25;
class GpBinaryHelpers {
    static gpReadDouble(data) {
        let bytes = new Uint8Array(8);
        data.read(bytes, 0, bytes.length);
        let array = new Float64Array(bytes.buffer);
        return array[0];
    }
    static gpReadFloat(data) {
        let bytes = new Uint8Array(4);
        bytes[3] = data.readByte();
        bytes[2] = data.readByte();
        bytes[2] = data.readByte();
        bytes[1] = data.readByte();
        let array = new Float32Array(bytes.buffer);
        return array[0];
    }
    static gpReadColor(data, readAlpha = false) {
        let r = data.readByte();
        let g = data.readByte();
        let b = data.readByte();
        let a = 255;
        if (readAlpha) {
            a = data.readByte();
        }
        else {
            data.skip(1);
        }
        return new Color(r, g, b, a);
    }
    static gpReadBool(data) {
        return data.readByte() !== 0;
    }
    /**
     * Skips an integer (4byte) and reads a string using
     * a bytesize
     */
    static gpReadStringIntUnused(data, encoding) {
        data.skip(4);
        return GpBinaryHelpers.gpReadString(data, data.readByte(), encoding);
    }
    /**
     * Reads an integer as size, and then the string itself
     */
    static gpReadStringInt(data, encoding) {
        return GpBinaryHelpers.gpReadString(data, IOHelper.readInt32LE(data), encoding);
    }
    /**
     * Reads an integer as size, skips a byte and reads the string itself
     */
    static gpReadStringIntByte(data, encoding) {
        let length = IOHelper.readInt32LE(data) - 1;
        data.readByte();
        return GpBinaryHelpers.gpReadString(data, length, encoding);
    }
    static gpReadString(data, length, encoding) {
        let b = new Uint8Array(length);
        data.read(b, 0, b.length);
        return IOHelper.toString(b, encoding);
    }
    static gpWriteString(data, s) {
        const encoded = IOHelper.stringToBytes(s);
        data.writeByte(s.length);
        data.write(encoded, 0, encoded.length);
    }
    /**
     * Reads a byte as size and the string itself.
     * Additionally it is ensured the specified amount of bytes is read.
     * @param data the data to read from.
     * @param length the amount of bytes to read
     * @param encoding The encoding to use to decode the byte into a string
     * @returns
     */
    static gpReadStringByteLength(data, length, encoding) {
        let stringLength = data.readByte();
        let s = GpBinaryHelpers.gpReadString(data, stringLength, encoding);
        if (stringLength < length) {
            data.skip(length - stringLength);
        }
        return s;
    }
}
/**
 * A mixtablechange describes several track changes.
 */
class MixTableChange {
    constructor() {
        this.volume = -1;
        this.balance = -1;
        this.instrument = -1;
        this.tempoName = '';
        this.tempo = -1;
        this.duration = -1;
    }
}

/**
 * Represents a rectangular area within the renderer music notation.
 */
class Bounds {
    constructor() {
        /**
         * Gets or sets the X-position of the rectangle within the music notation.
         */
        this.x = 0;
        /**
         * Gets or sets the Y-position of the rectangle within the music notation.
         */
        this.y = 0;
        /**
         * Gets or sets the width of the rectangle.
         */
        this.w = 0;
        /**
         * Gets or sets the height of the rectangle.
         */
        this.h = 0;
    }
}

var DataType;
(function (DataType) {
    DataType[DataType["Boolean"] = 0] = "Boolean";
    DataType[DataType["Integer"] = 1] = "Integer";
    DataType[DataType["Float"] = 2] = "Float";
    DataType[DataType["String"] = 3] = "String";
    DataType[DataType["Point"] = 4] = "Point";
    DataType[DataType["Size"] = 5] = "Size";
    DataType[DataType["Rectangle"] = 6] = "Rectangle";
    DataType[DataType["Color"] = 7] = "Color";
})(DataType || (DataType = {}));
/**
 * A BinaryStylesheet from Guitar Pro 6 and 7 files.
 * The BinaryStylesheet is a simple binary key-value store for additional settings
 * related to the display of the music sheet.
 *
 * File:
 *     int32 (big endian) | Number of KeyValuePairs
 *     KeyValuePair[]     | The raw records
 *
 * KeyValuePair:
 *     1 Byte  | length of the key
 *     n Bytes | key as utf8 encoded string
 *     1 Byte  | Data Type
 *     n Bytes | Value
 *
 * Values based on Data Type:
 *     0 = bool
 *         0===false
 *     1 = int32 (big endian)
 *     2 = float (big endian, IEEE)
 *     3 = string
 *       int16 (big endian) | length of string
 *       n bytes            | utf-8 encoded string
 *     4 = point
 *       int32 (big endian) | X-coordinate
 *       int32 (big endian) | Y-coordinate
 *     5 = size
 *       int32 (big endian) | Width
 *       int32 (big endian) | Height
 *     6 = rectangle
 *       int32 (big endian) | X-coordinate
 *       int32 (big endian) | Y-coordinate
 *       int32 (big endian) | Width
 *       int32 (big endian) | Height
 *     7 = color
 *       1 byte | Red
 *       1 byte | Green
 *       1 byte | Blue
 *       1 byte | Alpha
 */
class BinaryStylesheet {
    constructor(data) {
        this.raw = new Map();
        // BinaryStylesheet apears to be big-endien
        let readable = ByteBuffer.fromBuffer(data);
        let entryCount = IOHelper.readInt32BE(readable);
        for (let i = 0; i < entryCount; i++) {
            let key = GpBinaryHelpers.gpReadString(readable, readable.readByte(), 'utf-8');
            let type = readable.readByte();
            switch (type) {
                case DataType.Boolean:
                    let flag = readable.readByte() === 1;
                    this.addValue(key, flag);
                    break;
                case DataType.Integer:
                    let ivalue = IOHelper.readInt32BE(readable);
                    this.addValue(key, ivalue);
                    break;
                case DataType.Float:
                    let fvalue = GpBinaryHelpers.gpReadFloat(readable);
                    this.addValue(key, fvalue);
                    break;
                case DataType.String:
                    let s = GpBinaryHelpers.gpReadString(readable, IOHelper.readInt16BE(readable), 'utf-8');
                    this.addValue(key, s);
                    break;
                case DataType.Point:
                    let x = IOHelper.readInt32BE(readable);
                    let y = IOHelper.readInt32BE(readable);
                    this.addValue(key, new BendPoint(x, y));
                    break;
                case DataType.Size:
                    let width = IOHelper.readInt32BE(readable);
                    let height = IOHelper.readInt32BE(readable);
                    this.addValue(key, new BendPoint(width, height));
                    break;
                case DataType.Rectangle:
                    let rect = new Bounds();
                    rect.x = IOHelper.readInt32BE(readable);
                    rect.y = IOHelper.readInt32BE(readable);
                    rect.w = IOHelper.readInt32BE(readable);
                    rect.h = IOHelper.readInt32BE(readable);
                    this.addValue(key, rect);
                    break;
                case DataType.Color:
                    let color = GpBinaryHelpers.gpReadColor(readable, true);
                    this.addValue(key, color);
                    break;
            }
        }
    }
    apply(score) {
        for (const [key, value] of this.raw) {
            switch (key) {
                case 'StandardNotation/hideDynamics':
                    score.stylesheet.hideDynamics = value;
                    break;
            }
        }
    }
    addValue(key, value) {
        this.raw.set(key, value);
    }
    static writeForScore(score) {
        const writer = ByteBuffer.withCapacity(128);
        IOHelper.writeInt32BE(writer, 1); // entry count
        BinaryStylesheet.writeBooleanEntry(writer, 'StandardNotation/hideDynamics', score.stylesheet.hideDynamics);
        return writer.toArray();
    }
    static writeBooleanEntry(writer, key, value) {
        GpBinaryHelpers.gpWriteString(writer, key);
        writer.writeByte(DataType.Boolean);
        writer.writeByte(value ? 1 : 0);
    }
}

/**
 * Lists all types of fermatas
 */
var FermataType;
(function (FermataType) {
    /**
     * A short fermata (triangle symbol)
     */
    FermataType[FermataType["Short"] = 0] = "Short";
    /**
     * A medium fermata (round symbol)
     */
    FermataType[FermataType["Medium"] = 1] = "Medium";
    /**
     * A long fermata (rectangular symbol)
     */
    FermataType[FermataType["Long"] = 2] = "Long";
})(FermataType || (FermataType = {}));
/**
 * Represents a fermata.
 * @json
 * @json_strict
 */
class Fermata {
    constructor() {
        /**
         * Gets or sets the type of fermata.
         */
        this.type = FermataType.Short;
        /**
         * Gets or sets the actual lenght of the fermata.
         */
        this.length = 0;
    }
}

// This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var XmlNodeType;
(function (XmlNodeType) {
    XmlNodeType[XmlNodeType["None"] = 0] = "None";
    XmlNodeType[XmlNodeType["Element"] = 1] = "Element";
    XmlNodeType[XmlNodeType["Text"] = 2] = "Text";
    XmlNodeType[XmlNodeType["CDATA"] = 3] = "CDATA";
    XmlNodeType[XmlNodeType["Document"] = 4] = "Document";
    XmlNodeType[XmlNodeType["DocumentType"] = 5] = "DocumentType";
})(XmlNodeType || (XmlNodeType = {}));
class XmlNode {
    constructor() {
        this.nodeType = XmlNodeType.None;
        this.localName = null;
        this.value = null;
        this.childNodes = [];
        this.attributes = new Map();
        this.firstChild = null;
        this.firstElement = null;
    }
    addChild(node) {
        this.childNodes.push(node);
        this.firstChild = node;
        if (node.nodeType === XmlNodeType.Element || node.nodeType === XmlNodeType.CDATA) {
            this.firstElement = node;
        }
    }
    getAttribute(name) {
        if (this.attributes.has(name)) {
            return this.attributes.get(name);
        }
        return '';
    }
    getElementsByTagName(name, recursive = false) {
        let tags = [];
        this.searchElementsByTagName(this.childNodes, tags, name, recursive);
        return tags;
    }
    searchElementsByTagName(all, result, name, recursive = false) {
        for (let c of all) {
            if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                result.push(c);
            }
            if (recursive) {
                this.searchElementsByTagName(c.childNodes, result, name, true);
            }
        }
    }
    findChildElement(name) {
        for (let c of this.childNodes) {
            if (c && c.nodeType === XmlNodeType.Element && c.localName === name) {
                return c;
            }
        }
        return null;
    }
    addElement(name) {
        const newNode = new XmlNode();
        newNode.nodeType = XmlNodeType.Element;
        newNode.localName = name;
        this.addChild(newNode);
        return newNode;
    }
    get innerText() {
        var _a, _b;
        if (this.nodeType === XmlNodeType.Element || this.nodeType === XmlNodeType.Document) {
            if (this.firstElement && this.firstElement.nodeType === XmlNodeType.CDATA) {
                return this.firstElement.innerText;
            }
            let txt = '';
            for (let c of this.childNodes) {
                txt += (_a = c.innerText) === null || _a === void 0 ? void 0 : _a.toString();
            }
            let s = txt;
            return s.trim();
        }
        return (_b = this.value) !== null && _b !== void 0 ? _b : '';
    }
    set innerText(value) {
        const textNode = new XmlNode();
        textNode.nodeType = XmlNodeType.Text;
        textNode.value = value;
        this.childNodes = [textNode];
    }
    setCData(s) {
        const textNode = new XmlNode();
        textNode.nodeType = XmlNodeType.CDATA;
        textNode.value = s;
        this.childNodes = [textNode];
    }
}

// This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
class XmlError extends AlphaTabError {
    constructor(message, xml, pos) {
        super(AlphaTabErrorType.Format, message);
        this.pos = 0;
        this.xml = xml;
        this.pos = pos;
        Object.setPrototypeOf(this, XmlError.prototype);
    }
}

// This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
var XmlState;
(function (XmlState) {
    XmlState[XmlState["IgnoreSpaces"] = 0] = "IgnoreSpaces";
    XmlState[XmlState["Begin"] = 1] = "Begin";
    XmlState[XmlState["BeginNode"] = 2] = "BeginNode";
    XmlState[XmlState["TagName"] = 3] = "TagName";
    XmlState[XmlState["Body"] = 4] = "Body";
    XmlState[XmlState["AttribName"] = 5] = "AttribName";
    XmlState[XmlState["Equals"] = 6] = "Equals";
    XmlState[XmlState["AttvalBegin"] = 7] = "AttvalBegin";
    XmlState[XmlState["AttribVal"] = 8] = "AttribVal";
    XmlState[XmlState["Childs"] = 9] = "Childs";
    XmlState[XmlState["Close"] = 10] = "Close";
    XmlState[XmlState["WaitEnd"] = 11] = "WaitEnd";
    XmlState[XmlState["WaitEndRet"] = 12] = "WaitEndRet";
    XmlState[XmlState["Pcdata"] = 13] = "Pcdata";
    XmlState[XmlState["Header"] = 14] = "Header";
    XmlState[XmlState["Comment"] = 15] = "Comment";
    XmlState[XmlState["Doctype"] = 16] = "Doctype";
    XmlState[XmlState["Cdata"] = 17] = "Cdata";
    XmlState[XmlState["Escape"] = 18] = "Escape";
})(XmlState || (XmlState = {}));
class XmlParser {
    static parse(str, p, parent) {
        var _a;
        let c = str.charCodeAt(p);
        let state = XmlState.Begin;
        let next = XmlState.Begin;
        let start = 0;
        let buf = '';
        let escapeNext = XmlState.Begin;
        let xml = null;
        let aname = null;
        let nbrackets = 0;
        let attrValQuote = 0;
        while (p < str.length) {
            c = str.charCodeAt(p);
            switch (state) {
                case XmlState.IgnoreSpaces:
                    switch (c) {
                        case XmlParser.CharCodeLF:
                        case XmlParser.CharCodeCR:
                        case XmlParser.CharCodeTab:
                        case XmlParser.CharCodeSpace:
                            break;
                        default:
                            state = next;
                            continue;
                    }
                    break;
                case XmlState.Begin:
                    switch (c) {
                        case XmlParser.CharCodeLowerThan:
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.BeginNode;
                            break;
                        default:
                            start = p;
                            state = XmlState.Pcdata;
                            continue;
                    }
                    break;
                case XmlState.Pcdata:
                    if (c === XmlParser.CharCodeLowerThan) {
                        buf += str.substr(start, p - start);
                        let child = new XmlNode();
                        child.nodeType = XmlNodeType.Text;
                        child.value = buf;
                        buf = '';
                        parent.addChild(child);
                        state = XmlState.IgnoreSpaces;
                        next = XmlState.BeginNode;
                    }
                    else if (c === XmlParser.CharCodeAmp) {
                        buf += str.substr(start, p - start);
                        state = XmlState.Escape;
                        escapeNext = XmlState.Pcdata;
                        start = p + 1;
                    }
                    break;
                case XmlState.Cdata:
                    if (c === XmlParser.CharCodeBrackedClose &&
                        str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedClose &&
                        str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                        // ]]>
                        let child = new XmlNode();
                        child.nodeType = XmlNodeType.CDATA;
                        child.value = str.substr(start, p - start);
                        parent.addChild(child);
                        p += 2;
                        state = XmlState.Begin;
                    }
                    break;
                case XmlState.BeginNode:
                    switch (c) {
                        case XmlParser.CharCodeExclamation:
                            if (str.charCodeAt(p + 1) === XmlParser.CharCodeBrackedOpen) {
                                p += 2;
                                if (str.substr(p, 6).toUpperCase() !== 'CDATA[') {
                                    throw new XmlError('Expected <![CDATA[', str, p);
                                }
                                p += 5;
                                state = XmlState.Cdata;
                                start = p + 1;
                            }
                            else if (str.charCodeAt(p + 1) === XmlParser.CharCodeUpperD ||
                                str.charCodeAt(p + 1) === XmlParser.CharCodeLowerD) {
                                if (str.substr(p + 2, 6).toUpperCase() !== 'OCTYPE') {
                                    throw new XmlError('Expected <!DOCTYPE', str, p);
                                }
                                p += 8;
                                state = XmlState.Doctype;
                                start = p + 1;
                            }
                            else if (str.charCodeAt(p + 1) !== XmlParser.CharCodeMinus ||
                                str.charCodeAt(p + 2) !== XmlParser.CharCodeMinus) {
                                throw new XmlError('Expected <!--', str, p);
                            }
                            else {
                                p += 2;
                                state = XmlState.Comment;
                                start = p + 1;
                            }
                            break;
                        case XmlParser.CharCodeQuestion:
                            state = XmlState.Header;
                            start = p;
                            break;
                        case XmlParser.CharCodeSlash:
                            if (!parent) {
                                throw new XmlError('Expected node name', str, p);
                            }
                            start = p + 1;
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.Close;
                            break;
                        default:
                            state = XmlState.TagName;
                            start = p;
                            continue;
                    }
                    break;
                case XmlState.TagName:
                    if (!XmlParser.isValidChar(c)) {
                        if (p === start) {
                            throw new XmlError('Expected node name', str, p);
                        }
                        xml = new XmlNode();
                        xml.nodeType = XmlNodeType.Element;
                        xml.localName = str.substr(start, p - start);
                        parent.addChild(xml);
                        state = XmlState.IgnoreSpaces;
                        next = XmlState.Body;
                        continue;
                    }
                    break;
                case XmlState.Body:
                    switch (c) {
                        case XmlParser.CharCodeSlash:
                            state = XmlState.WaitEnd;
                            break;
                        case XmlParser.CharCodeGreaterThan:
                            state = XmlState.Childs;
                            break;
                        default:
                            state = XmlState.AttribName;
                            start = p;
                            continue;
                    }
                    break;
                case XmlState.AttribName:
                    if (!XmlParser.isValidChar(c)) {
                        if (start === p) {
                            throw new XmlError('Expected attribute name', str, p);
                        }
                        let tmp = str.substr(start, p - start);
                        aname = tmp;
                        if (xml.attributes.has(aname)) {
                            throw new XmlError(`Duplicate attribute [${aname}]`, str, p);
                        }
                        state = XmlState.IgnoreSpaces;
                        next = XmlState.Equals;
                        continue;
                    }
                    break;
                case XmlState.Equals:
                    switch (c) {
                        case XmlParser.CharCodeEquals:
                            state = XmlState.IgnoreSpaces;
                            next = XmlState.AttvalBegin;
                            break;
                        default:
                            throw new XmlError('Expected =', str, p);
                    }
                    break;
                case XmlState.AttvalBegin:
                    switch (c) {
                        case XmlParser.CharCodeDoubleQuote:
                        case XmlParser.CharCodeSingleQuote:
                            buf = '';
                            state = XmlState.AttribVal;
                            start = p + 1;
                            attrValQuote = c;
                            break;
                    }
                    break;
                case XmlState.AttribVal:
                    switch (c) {
                        case XmlParser.CharCodeAmp:
                            buf += str.substr(start, p - start);
                            state = XmlState.Escape;
                            escapeNext = XmlState.AttribVal;
                            start = p + 1;
                            break;
                        default:
                            if (c === attrValQuote) {
                                buf += str.substr(start, p - start);
                                let value = buf;
                                buf = '';
                                xml.attributes.set(aname, value);
                                state = XmlState.IgnoreSpaces;
                                next = XmlState.Body;
                            }
                            break;
                    }
                    break;
                case XmlState.Childs:
                    p = XmlParser.parse(str, p, xml);
                    start = p;
                    state = XmlState.Begin;
                    break;
                case XmlState.WaitEnd:
                    switch (c) {
                        case XmlParser.CharCodeGreaterThan:
                            state = XmlState.Begin;
                            break;
                        default:
                            throw new XmlError('Expected >', str, p);
                    }
                    break;
                case XmlState.WaitEndRet:
                    switch (c) {
                        case XmlParser.CharCodeGreaterThan:
                            return p;
                        default:
                            throw new XmlError('Expected >', str, p);
                    }
                case XmlState.Close:
                    if (!XmlParser.isValidChar(c)) {
                        if (start === p) {
                            throw new XmlError('Expected node name', str, p);
                        }
                        let v = str.substr(start, p - start);
                        if (v !== parent.localName) {
                            throw new XmlError('Expected </' + parent.localName + '>', str, p);
                        }
                        state = XmlState.IgnoreSpaces;
                        next = XmlState.WaitEndRet;
                        continue;
                    }
                    break;
                case XmlState.Comment:
                    if (c === XmlParser.CharCodeMinus &&
                        str.charCodeAt(p + 1) === XmlParser.CharCodeMinus &&
                        str.charCodeAt(p + 2) === XmlParser.CharCodeGreaterThan) {
                        p += 2;
                        state = XmlState.Begin;
                    }
                    break;
                case XmlState.Doctype:
                    if (c === XmlParser.CharCodeBrackedOpen) {
                        nbrackets++;
                    }
                    else if (c === XmlParser.CharCodeBrackedClose) {
                        nbrackets--;
                    }
                    else if (c === XmlParser.CharCodeGreaterThan && nbrackets === 0) {
                        // >
                        let node = new XmlNode();
                        node.nodeType = XmlNodeType.DocumentType;
                        node.value = str.substr(start, p - start);
                        parent.addChild(node);
                        state = XmlState.Begin;
                    }
                    break;
                case XmlState.Header:
                    if (c === XmlParser.CharCodeQuestion && str.charCodeAt(p + 1) === XmlParser.CharCodeGreaterThan) {
                        p++;
                        state = XmlState.Begin;
                    }
                    break;
                case XmlState.Escape:
                    if (c === XmlParser.CharCodeSemi) {
                        let s = str.substr(start, p - start);
                        if (s.charCodeAt(0) === XmlParser.CharCodeSharp) {
                            let code = s.charCodeAt(1) === XmlParser.CharCodeLowerX
                                ? parseInt('0' + s.substr(1, s.length - 1))
                                : parseInt(s.substr(1, s.length - 1));
                            buf += String.fromCharCode(code);
                        }
                        else if (XmlParser.Escapes.has(s)) {
                            buf += XmlParser.Escapes.get(s);
                        }
                        else {
                            buf += (_a = ('&' + s + ';')) === null || _a === void 0 ? void 0 : _a.toString();
                        }
                        start = p + 1;
                        state = escapeNext;
                    }
                    else if (!XmlParser.isValidChar(c) && c !== XmlParser.CharCodeSharp) {
                        buf += '&';
                        buf += str.substr(start, p - start);
                        p--;
                        start = p + 1;
                        state = escapeNext;
                    }
                    break;
            }
            p++;
        }
        if (state === XmlState.Begin) {
            start = p;
            state = XmlState.Pcdata;
        }
        if (state === XmlState.Pcdata) {
            if (p !== start) {
                buf += str.substr(start, p - start);
                let node = new XmlNode();
                node.nodeType = XmlNodeType.Text;
                node.value = buf;
                parent.addChild(node);
            }
            return p;
        }
        if (state === XmlState.Escape && escapeNext === XmlState.Pcdata) {
            buf += '&';
            buf += str.substr(start, p - start);
            let node = new XmlNode();
            node.nodeType = XmlNodeType.Text;
            node.value = buf;
            parent.addChild(node);
            return p;
        }
        throw new XmlError('Unexpected end', str, p);
    }
    static isValidChar(c) {
        return ((c >= XmlParser.CharCodeLowerA && c <= XmlParser.CharCodeLowerZ) ||
            (c >= XmlParser.CharCodeUpperA && c <= XmlParser.CharCodeUpperZ) ||
            (c >= XmlParser.CharCode0 && c <= XmlParser.CharCode9) ||
            c === XmlParser.CharCodeColon ||
            c === XmlParser.CharCodeDot ||
            c === XmlParser.CharCodeUnderscore ||
            c === XmlParser.CharCodeMinus);
    }
}
XmlParser.CharCodeLF = 10;
XmlParser.CharCodeTab = 9;
XmlParser.CharCodeCR = 13;
XmlParser.CharCodeSpace = 32;
XmlParser.CharCodeLowerThan = 60;
XmlParser.CharCodeAmp = 38;
XmlParser.CharCodeBrackedClose = 93;
XmlParser.CharCodeBrackedOpen = 91;
XmlParser.CharCodeGreaterThan = 62;
XmlParser.CharCodeExclamation = 33;
XmlParser.CharCodeUpperD = 68;
XmlParser.CharCodeLowerD = 100;
XmlParser.CharCodeMinus = 45;
XmlParser.CharCodeQuestion = 63;
XmlParser.CharCodeSlash = 47;
XmlParser.CharCodeEquals = 61;
XmlParser.CharCodeDoubleQuote = 34;
XmlParser.CharCodeSingleQuote = 39;
XmlParser.CharCodeSharp = 35;
XmlParser.CharCodeLowerX = 120;
XmlParser.CharCodeLowerA = 97;
XmlParser.CharCodeLowerZ = 122;
XmlParser.CharCodeUpperA = 65;
XmlParser.CharCodeUpperZ = 90;
XmlParser.CharCode0 = 48;
XmlParser.CharCode9 = 57;
XmlParser.CharCodeColon = 58;
XmlParser.CharCodeDot = 46;
XmlParser.CharCodeUnderscore = 95;
XmlParser.CharCodeSemi = 59;
XmlParser.Escapes = new Map([
    ['lt', '<'],
    ['gt', '>'],
    ['amp', '&'],
    ['quot', '"'],
    ['apos', "'"]
]);

class XmlWriter {
    constructor(indention, xmlHeader) {
        // NOTE: we use the string.join variant rather than the
        // string concatenation for IE performnace concerns
        this._result = [];
        this._indention = indention;
        this._xmlHeader = xmlHeader;
        this._currentIndention = '';
        this._isStartOfLine = true;
    }
    static write(xml, indention, xmlHeader) {
        const writer = new XmlWriter(indention, xmlHeader);
        writer.writeNode(xml);
        return writer.toString();
    }
    writeNode(xml) {
        switch (xml.nodeType) {
            case XmlNodeType.None:
                break;
            case XmlNodeType.Element:
                if (this._result.length > 0) {
                    this.writeLine();
                }
                this.write(`<${xml.localName}`);
                for (const [name, value] of xml.attributes) {
                    this.write(` ${name}="`);
                    this.writeAttributeValue(value);
                    this.write('"');
                }
                if (xml.childNodes.length === 0) {
                    this.write('/>');
                }
                else {
                    this.write('>');
                    if (xml.childNodes.length === 1 && !xml.firstElement) {
                        this.writeNode(xml.childNodes[0]);
                    }
                    else {
                        this.indent();
                        for (const child of xml.childNodes) {
                            // skip text nodes in case of multiple children
                            if (child.nodeType === XmlNodeType.Element) {
                                this.writeNode(child);
                            }
                        }
                        this.unindend();
                        this.writeLine();
                    }
                    this.write(`</${xml.localName}>`);
                }
                break;
            case XmlNodeType.Text:
                if (xml.value) {
                    this.write(xml.value);
                }
                break;
            case XmlNodeType.CDATA:
                if (xml.value !== null) {
                    this.write(`<![CDATA[${xml.value}]]>`);
                }
                break;
            case XmlNodeType.Document:
                if (this._xmlHeader) {
                    this.write('<?xml version="1.0" encoding="utf-8"?>');
                }
                for (const child of xml.childNodes) {
                    this.writeNode(child);
                }
                break;
            case XmlNodeType.DocumentType:
                this.write(`<!DOCTYPE ${xml.value}>`);
                break;
        }
    }
    unindend() {
        this._currentIndention = this._currentIndention.substr(0, this._currentIndention.length - this._indention.length);
    }
    indent() {
        this._currentIndention += this._indention;
    }
    writeAttributeValue(value) {
        for (let i = 0; i < value.length; i++) {
            const c = value.charAt(i);
            switch (c) {
                case '<':
                    this._result.push('&lt;');
                    break;
                case '>':
                    this._result.push('&gt;');
                    break;
                case '&':
                    this._result.push('&amp;');
                    break;
                case "'":
                    this._result.push('&apos;');
                    break;
                case '"':
                    this._result.push('&quot;');
                    break;
                default:
                    this._result.push(c);
                    break;
            }
        }
    }
    write(s) {
        if (this._isStartOfLine) {
            this._result.push(this._currentIndention);
        }
        this._result.push(s);
        this._isStartOfLine = false;
    }
    writeLine(s = null) {
        if (s) {
            this.write(s);
        }
        if (this._indention.length > 0 && !this._isStartOfLine) {
            this._result.push('\n');
            this._isStartOfLine = true;
        }
    }
    toString() {
        return this._result.join('').trimRight();
    }
}

// This XML parser is based on the XML Parser of the Haxe Standard Library (MIT)
class XmlDocument extends XmlNode {
    constructor() {
        super();
        this.nodeType = XmlNodeType.Document;
    }
    parse(xml) {
        XmlParser.parse(xml, 0, this);
    }
    toString() {
        return this.toFormattedString();
    }
    toFormattedString(indention = '', xmlHeader = false) {
        return XmlWriter.write(this, indention, xmlHeader);
    }
}

var BeamDirection;
(function (BeamDirection) {
    BeamDirection[BeamDirection["Up"] = 0] = "Up";
    BeamDirection[BeamDirection["Down"] = 1] = "Down";
})(BeamDirection || (BeamDirection = {}));

/**
 * This structure represents a duration within a gpif
 */
class GpifRhythm {
    constructor() {
        this.id = '';
        this.dots = 0;
        this.tupletDenominator = -1;
        this.tupletNumerator = -1;
        this.value = Duration.Quarter;
    }
}
class GpifSound {
    constructor() {
        this.name = '';
        this.path = '';
        this.role = '';
        this.program = 0;
    }
    get uniqueId() {
        return this.path + ';' + this.name + ';' + this.role;
    }
}
/**
 * This class can parse a score.gpif xml file into the model structure
 */
class GpifParser {
    constructor() {
        this._hasAnacrusis = false;
        this._skipApplyLyrics = false;
    }
    parseXml(xml, settings) {
        this._masterTrackAutomations = new Map();
        this._automationsPerTrackIdAndBarIndex = new Map();
        this._tracksMapping = [];
        this._tracksById = new Map();
        this._masterBars = [];
        this._barsOfMasterBar = [];
        this._voicesOfBar = new Map();
        this._barsById = new Map();
        this._voiceById = new Map();
        this._beatsOfVoice = new Map();
        this._beatById = new Map();
        this._rhythmOfBeat = new Map();
        this._rhythmById = new Map();
        this._notesOfBeat = new Map();
        this._noteById = new Map();
        this._tappedNotes = new Map();
        this._lyricsByTrack = new Map();
        this._soundsByTrack = new Map();
        this._skipApplyLyrics = false;
        let dom = new XmlDocument();
        try {
            dom.parse(xml);
        }
        catch (e) {
            throw new UnsupportedFormatError('Could not parse XML', e);
        }
        this.parseDom(dom);
        this.buildModel();
        this.score.finish(settings);
        if (!this._skipApplyLyrics && this._lyricsByTrack.size > 0) {
            for (const [t, lyrics] of this._lyricsByTrack) {
                let track = this._tracksById.get(t);
                track.applyLyrics(lyrics);
            }
        }
    }
    parseDom(dom) {
        let root = dom.firstElement;
        if (!root) {
            return;
        }
        // the XML uses IDs for referring elements within the
        //  Therefore we do the parsing in 2 steps:
        // - at first we read all model elements and store them by ID in a lookup table
        // - after that we need to join up the information.
        if (root.localName === 'GPIF') {
            this.score = new Score();
            // parse all children
            for (let n of root.childNodes) {
                if (n.nodeType === XmlNodeType.Element) {
                    switch (n.localName) {
                        case 'Score':
                            this.parseScoreNode(n);
                            break;
                        case 'MasterTrack':
                            this.parseMasterTrackNode(n);
                            break;
                        case 'Tracks':
                            this.parseTracksNode(n);
                            break;
                        case 'MasterBars':
                            this.parseMasterBarsNode(n);
                            break;
                        case 'Bars':
                            this.parseBars(n);
                            break;
                        case 'Voices':
                            this.parseVoices(n);
                            break;
                        case 'Beats':
                            this.parseBeats(n);
                            break;
                        case 'Notes':
                            this.parseNotes(n);
                            break;
                        case 'Rhythms':
                            this.parseRhythms(n);
                            break;
                    }
                }
            }
        }
        else {
            throw new UnsupportedFormatError('Root node of XML was not GPIF');
        }
    }
    //
    // <Score>...</Score>
    //
    parseScoreNode(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Title':
                        this.score.title = c.firstChild.innerText;
                        break;
                    case 'SubTitle':
                        this.score.subTitle = c.firstChild.innerText;
                        break;
                    case 'Artist':
                        this.score.artist = c.firstChild.innerText;
                        break;
                    case 'Album':
                        this.score.album = c.firstChild.innerText;
                        break;
                    case 'Words':
                        this.score.words = c.firstChild.innerText;
                        break;
                    case 'Music':
                        this.score.music = c.firstChild.innerText;
                        break;
                    case 'WordsAndMusic':
                        if (c.firstChild && c.firstChild.innerText !== '') {
                            let wordsAndMusic = c.firstChild.innerText;
                            if (wordsAndMusic && !this.score.words) {
                                this.score.words = wordsAndMusic;
                            }
                            if (wordsAndMusic && !this.score.music) {
                                this.score.music = wordsAndMusic;
                            }
                        }
                        break;
                    case 'Copyright':
                        this.score.copyright = c.firstChild.innerText;
                        break;
                    case 'Tabber':
                        this.score.tab = c.firstChild.innerText;
                        break;
                    case 'Instructions':
                        this.score.instructions = c.firstChild.innerText;
                        break;
                    case 'Notices':
                        this.score.notices = c.firstChild.innerText;
                        break;
                }
            }
        }
    }
    //
    // <MasterTrack>...</MasterTrack>
    //
    parseMasterTrackNode(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Automations':
                        this.parseAutomations(c, this._masterTrackAutomations, null);
                        break;
                    case 'Tracks':
                        this._tracksMapping = c.innerText.split(' ');
                        break;
                    case 'Anacrusis':
                        this._hasAnacrusis = true;
                        break;
                }
            }
        }
    }
    parseAutomations(node, automations, sounds) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Automation':
                        this.parseAutomation(c, automations, sounds);
                        break;
                }
            }
        }
    }
    parseAutomation(node, automations, sounds) {
        let type = null;
        let isLinear = false;
        let barIndex = -1;
        let ratioPosition = 0;
        let numberValue = 0;
        let textValue = null;
        let reference = 0;
        let text = null;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Type':
                        type = c.innerText;
                        break;
                    case 'Linear':
                        isLinear = c.innerText.toLowerCase() === 'true';
                        break;
                    case 'Bar':
                        barIndex = parseInt(c.innerText);
                        break;
                    case 'Position':
                        ratioPosition = parseFloat(c.innerText);
                        break;
                    case 'Value':
                        if (c.firstElement && c.firstElement.nodeType === XmlNodeType.CDATA) {
                            textValue = c.innerText;
                        }
                        else {
                            let parts = c.innerText.split(' ');
                            // Issue 391: Some GPX files might have
                            // single floating point value.
                            if (parts.length === 1) {
                                numberValue = parseFloat(parts[0]);
                                reference = 1;
                            }
                            else {
                                numberValue = parseFloat(parts[0]);
                                reference = parseInt(parts[1]);
                            }
                        }
                        break;
                    case 'Text':
                        text = c.innerText;
                        break;
                }
            }
        }
        if (!type) {
            return;
        }
        let automation = null;
        switch (type) {
            case 'Tempo':
                automation = Automation.buildTempoAutomation(isLinear, ratioPosition, numberValue, reference);
                break;
            case 'Sound':
                if (textValue && sounds && sounds.has(textValue)) {
                    automation = Automation.buildInstrumentAutomation(isLinear, ratioPosition, sounds.get(textValue).program);
                }
                break;
        }
        if (automation) {
            if (text) {
                automation.text = text;
            }
            if (barIndex >= 0) {
                if (!automations.has(barIndex)) {
                    automations.set(barIndex, []);
                }
                automations.get(barIndex).push(automation);
            }
        }
    }
    //
    // <Tracks>...</Tracks>
    //
    parseTracksNode(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Track':
                        this.parseTrack(c);
                        break;
                }
            }
        }
    }
    parseTrack(node) {
        this._articulationByName = new Map();
        let track = new Track();
        track.ensureStaveCount(1);
        let staff = track.staves[0];
        staff.showStandardNotation = true;
        let trackId = node.getAttribute('id');
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Name':
                        track.name = c.innerText;
                        break;
                    case 'Color':
                        let parts = c.innerText.split(' ');
                        if (parts.length >= 3) {
                            let r = parseInt(parts[0]);
                            let g = parseInt(parts[1]);
                            let b = parseInt(parts[2]);
                            track.color = new Color(r, g, b, 0xff);
                        }
                        break;
                    case 'Instrument':
                        let instrumentName = c.getAttribute('ref');
                        if (instrumentName.endsWith('-gs') || instrumentName.endsWith('GrandStaff')) {
                            track.ensureStaveCount(2);
                            track.staves[1].showStandardNotation = true;
                        }
                        break;
                    case 'InstrumentSet':
                        this.parseInstrumentSet(track, c);
                        break;
                    case 'NotationPatch':
                        this.parseNotationPatch(track, c);
                        break;
                    case 'ShortName':
                        track.shortName = c.innerText;
                        break;
                    case 'Lyrics':
                        this.parseLyrics(trackId, c);
                        break;
                    case 'Properties':
                        this.parseTrackProperties(track, c);
                        break;
                    case 'GeneralMidi':
                    case 'MidiConnection':
                    case 'MIDISettings':
                        this.parseGeneralMidi(track, c);
                        break;
                    case 'Sounds':
                        this.parseSounds(trackId, track, c);
                        break;
                    case 'PlaybackState':
                        let state = c.innerText;
                        track.playbackInfo.isSolo = state === 'Solo';
                        track.playbackInfo.isMute = state === 'Mute';
                        break;
                    case 'PartSounding':
                        this.parsePartSounding(track, c);
                        break;
                    case 'Staves':
                        this.parseStaves(track, c);
                        break;
                    case 'Transpose':
                        this.parseTranspose(track, c);
                        break;
                    case 'RSE':
                        this.parseRSE(track, c);
                        break;
                    case 'Automations':
                        this.parseTrackAutomations(trackId, c);
                        break;
                }
            }
        }
        this._tracksById.set(trackId, track);
    }
    parseTrackAutomations(trackId, c) {
        const trackAutomations = new Map();
        this._automationsPerTrackIdAndBarIndex.set(trackId, trackAutomations);
        this.parseAutomations(c, trackAutomations, this._soundsByTrack.get(trackId));
    }
    parseNotationPatch(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'LineCount':
                        const lineCount = parseInt(c.innerText);
                        for (let staff of track.staves) {
                            staff.standardNotationLineCount = lineCount;
                        }
                        break;
                    case 'Elements':
                        this.parseElements(track, c);
                        break;
                }
            }
        }
    }
    parseInstrumentSet(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Type':
                        switch (c.innerText) {
                            case 'drumKit':
                                for (let staff of track.staves) {
                                    staff.isPercussion = true;
                                }
                                break;
                        }
                        if (c.innerText === 'drumKit') {
                            for (let staff of track.staves) {
                                staff.isPercussion = true;
                            }
                        }
                        break;
                    case 'Elements':
                        this.parseElements(track, c);
                        break;
                    case 'LineCount':
                        const lineCount = parseInt(c.innerText);
                        for (let staff of track.staves) {
                            staff.standardNotationLineCount = lineCount;
                        }
                        break;
                }
            }
        }
    }
    parseElements(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Element':
                        this.parseElement(track, c);
                        break;
                }
            }
        }
    }
    parseElement(track, node) {
        const typeElement = node.findChildElement('Type');
        const type = typeElement ? typeElement.innerText : "";
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Name':
                    case 'Articulations':
                        this.parseArticulations(track, c, type);
                        break;
                }
            }
        }
    }
    parseArticulations(track, node, elementType) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Articulation':
                        this.parseArticulation(track, c, elementType);
                        break;
                }
            }
        }
    }
    parseArticulation(track, node, elementType) {
        const articulation = new InstrumentArticulation();
        articulation.outputMidiNumber = -1;
        articulation.elementType = elementType;
        let name = '';
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                const txt = c.innerText;
                switch (c.localName) {
                    case 'Name':
                        name = c.innerText;
                        break;
                    case 'OutputMidiNumber':
                        if (txt.length > 0) {
                            articulation.outputMidiNumber = parseInt(txt);
                        }
                        break;
                    case 'TechniqueSymbol':
                        articulation.techniqueSymbol = this.parseTechniqueSymbol(txt);
                        break;
                    case 'TechniquePlacement':
                        switch (txt) {
                            case 'outside':
                                articulation.techniqueSymbolPlacement = TextBaseline.Bottom;
                                break;
                            case 'inside':
                                articulation.techniqueSymbolPlacement = TextBaseline.Middle;
                                break;
                            case 'above':
                                articulation.techniqueSymbolPlacement = TextBaseline.Bottom;
                                break;
                            case 'below':
                                articulation.techniqueSymbolPlacement = TextBaseline.Top;
                                break;
                        }
                        break;
                    case 'Noteheads':
                        const noteHeadsTxt = txt.split(' ');
                        if (noteHeadsTxt.length >= 1) {
                            articulation.noteHeadDefault = this.parseNoteHead(noteHeadsTxt[0]);
                        }
                        if (noteHeadsTxt.length >= 2) {
                            articulation.noteHeadHalf = this.parseNoteHead(noteHeadsTxt[1]);
                        }
                        if (noteHeadsTxt.length >= 3) {
                            articulation.noteHeadWhole = this.parseNoteHead(noteHeadsTxt[2]);
                        }
                        if (articulation.noteHeadHalf == MusicFontSymbol.None) {
                            articulation.noteHeadHalf = articulation.noteHeadDefault;
                        }
                        if (articulation.noteHeadWhole == MusicFontSymbol.None) {
                            articulation.noteHeadWhole = articulation.noteHeadDefault;
                        }
                        break;
                    case 'StaffLine':
                        if (txt.length > 0) {
                            articulation.staffLine = parseInt(txt);
                        }
                        break;
                }
            }
        }
        if (articulation.outputMidiNumber !== -1) {
            track.percussionArticulations.push(articulation);
            if (name.length > 0) {
                this._articulationByName.set(name, articulation);
            }
        }
        else if (name.length > 0 && this._articulationByName.has(name)) {
            this._articulationByName.get(name).staffLine = articulation.staffLine;
        }
    }
    parseTechniqueSymbol(txt) {
        switch (txt) {
            case 'pictEdgeOfCymbal':
                return MusicFontSymbol.PictEdgeOfCymbal;
            case 'articStaccatoAbove':
                return MusicFontSymbol.ArticStaccatoAbove;
            case 'noteheadParenthesis':
                return MusicFontSymbol.NoteheadParenthesis;
            case 'stringsUpBow':
                return MusicFontSymbol.StringsUpBow;
            case 'stringsDownBow':
                return MusicFontSymbol.StringsDownBow;
            case 'guitarGolpe':
                return MusicFontSymbol.GuitarGolpe;
            default:
                return MusicFontSymbol.None;
        }
    }
    parseNoteHead(txt) {
        switch (txt) {
            case 'noteheadDoubleWholeSquare':
                return MusicFontSymbol.NoteheadDoubleWholeSquare;
            case 'noteheadDoubleWhole':
                return MusicFontSymbol.NoteheadDoubleWhole;
            case 'noteheadWhole':
                return MusicFontSymbol.NoteheadWhole;
            case 'noteheadHalf':
                return MusicFontSymbol.NoteheadHalf;
            case 'noteheadBlack':
                return MusicFontSymbol.NoteheadBlack;
            case 'noteheadNull':
                return MusicFontSymbol.NoteheadNull;
            case 'noteheadXOrnate':
                return MusicFontSymbol.NoteheadXOrnate;
            case 'noteheadTriangleUpWhole':
                return MusicFontSymbol.NoteheadTriangleUpWhole;
            case 'noteheadTriangleUpHalf':
                return MusicFontSymbol.NoteheadTriangleUpHalf;
            case 'noteheadTriangleUpBlack':
                return MusicFontSymbol.NoteheadTriangleUpBlack;
            case 'noteheadDiamondBlackWide':
                return MusicFontSymbol.NoteheadDiamondBlackWide;
            case 'noteheadDiamondWhite':
                return MusicFontSymbol.NoteheadDiamondWhite;
            case 'noteheadDiamondWhiteWide':
                return MusicFontSymbol.NoteheadDiamondWhiteWide;
            case 'noteheadCircleX':
                return MusicFontSymbol.NoteheadCircleX;
            case 'noteheadXWhole':
                return MusicFontSymbol.NoteheadXWhole;
            case 'noteheadXHalf':
                return MusicFontSymbol.NoteheadXHalf;
            case 'noteheadXBlack':
                return MusicFontSymbol.NoteheadXBlack;
            case 'noteheadParenthesis':
                return MusicFontSymbol.NoteheadParenthesis;
            case 'noteheadSlashedBlack2':
                return MusicFontSymbol.NoteheadSlashedBlack2;
            case 'noteheadCircleSlash':
                return MusicFontSymbol.NoteheadCircleSlash;
            case 'noteheadHeavyX':
                return MusicFontSymbol.NoteheadHeavyX;
            case 'noteheadHeavyXHat':
                return MusicFontSymbol.NoteheadHeavyXHat;
            default:
                Logger.warning('GPIF', 'Unknown notehead symbol', txt);
                return MusicFontSymbol.None;
        }
    }
    parseStaves(track, node) {
        let staffIndex = 0;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Staff':
                        track.ensureStaveCount(staffIndex + 1);
                        let staff = track.staves[staffIndex];
                        this.parseStaff(staff, c);
                        staffIndex++;
                        break;
                }
            }
        }
    }
    parseStaff(staff, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Properties':
                        this.parseStaffProperties(staff, c);
                        break;
                }
            }
        }
    }
    parseStaffProperties(staff, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Property':
                        this.parseStaffProperty(staff, c);
                        break;
                }
            }
        }
    }
    parseStaffProperty(staff, node) {
        let propertyName = node.getAttribute('name');
        switch (propertyName) {
            case 'Tuning':
                for (let c of node.childNodes) {
                    if (c.nodeType === XmlNodeType.Element) {
                        switch (c.localName) {
                            case 'Pitches':
                                let tuningParts = node.findChildElement('Pitches').innerText.split(' ');
                                let tuning = new Array(tuningParts.length);
                                for (let i = 0; i < tuning.length; i++) {
                                    tuning[tuning.length - 1 - i] = parseInt(tuningParts[i]);
                                }
                                staff.stringTuning.tunings = tuning;
                                break;
                            case 'Label':
                                staff.stringTuning.name = c.innerText;
                                break;
                        }
                    }
                }
                if (!staff.isPercussion) {
                    staff.showTablature = true;
                }
                break;
            case 'DiagramCollection':
            case 'ChordCollection':
                this.parseDiagramCollectionForStaff(staff, node);
                break;
            case 'CapoFret':
                let capo = parseInt(node.findChildElement('Fret').innerText);
                staff.capo = capo;
                break;
        }
    }
    parseLyrics(trackId, node) {
        let tracks = [];
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Line':
                        tracks.push(this.parseLyricsLine(c));
                        break;
                }
            }
        }
        this._lyricsByTrack.set(trackId, tracks);
    }
    parseLyricsLine(node) {
        let lyrics = new Lyrics();
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Offset':
                        lyrics.startBar = parseInt(c.innerText);
                        break;
                    case 'Text':
                        lyrics.text = c.innerText;
                        break;
                }
            }
        }
        return lyrics;
    }
    parseDiagramCollectionForTrack(track, node) {
        let items = node.findChildElement('Items');
        for (let c of items.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Item':
                        this.parseDiagramItemForTrack(track, c);
                        break;
                }
            }
        }
    }
    parseDiagramCollectionForStaff(staff, node) {
        let items = node.findChildElement('Items');
        for (let c of items.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Item':
                        this.parseDiagramItemForStaff(staff, c);
                        break;
                }
            }
        }
    }
    parseDiagramItemForTrack(track, node) {
        let chord = new Chord();
        let chordId = node.getAttribute('id');
        for (let staff of track.staves) {
            staff.addChord(chordId, chord);
        }
        this.parseDiagramItemForChord(chord, node);
    }
    parseDiagramItemForStaff(staff, node) {
        let chord = new Chord();
        let chordId = node.getAttribute('id');
        staff.addChord(chordId, chord);
        this.parseDiagramItemForChord(chord, node);
    }
    parseDiagramItemForChord(chord, node) {
        chord.name = node.getAttribute('name');
        let diagram = node.findChildElement('Diagram');
        let stringCount = parseInt(diagram.getAttribute('stringCount'));
        let baseFret = parseInt(diagram.getAttribute('baseFret'));
        chord.firstFret = baseFret + 1;
        for (let i = 0; i < stringCount; i++) {
            chord.strings.push(-1);
        }
        for (let c of diagram.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Fret':
                        let guitarString = parseInt(c.getAttribute('string'));
                        chord.strings[stringCount - guitarString - 1] = baseFret + parseInt(c.getAttribute('fret'));
                        break;
                    case 'Fingering':
                        let existingFingers = new Map();
                        for (let p of c.childNodes) {
                            if (p.nodeType === XmlNodeType.Element) {
                                switch (p.localName) {
                                    case 'Position':
                                        let finger = Fingers.Unknown;
                                        let fret = baseFret + parseInt(p.getAttribute('fret'));
                                        switch (p.getAttribute('finger')) {
                                            case 'Index':
                                                finger = Fingers.IndexFinger;
                                                break;
                                            case 'Middle':
                                                finger = Fingers.MiddleFinger;
                                                break;
                                            case 'Rank':
                                                finger = Fingers.AnnularFinger;
                                                break;
                                            case 'Pinky':
                                                finger = Fingers.LittleFinger;
                                                break;
                                            case 'Thumb':
                                                finger = Fingers.Thumb;
                                                break;
                                        }
                                        if (finger !== Fingers.Unknown) {
                                            if (existingFingers.has(finger)) {
                                                chord.barreFrets.push(fret);
                                            }
                                            else {
                                                existingFingers.set(finger, true);
                                            }
                                        }
                                        break;
                                }
                            }
                        }
                        break;
                    case 'Property':
                        switch (c.getAttribute('name')) {
                            case 'ShowName':
                                chord.showName = c.getAttribute('value') === 'true';
                                break;
                            case 'ShowDiagram':
                                chord.showDiagram = c.getAttribute('value') === 'true';
                                break;
                            case 'ShowFingering':
                                chord.showFingering = c.getAttribute('value') === 'true';
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseTrackProperties(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Property':
                        this.parseTrackProperty(track, c);
                        break;
                }
            }
        }
    }
    parseTrackProperty(track, node) {
        let propertyName = node.getAttribute('name');
        switch (propertyName) {
            case 'Tuning':
                let tuningParts = node.findChildElement('Pitches').innerText.split(' ');
                let tuning = new Array(tuningParts.length);
                for (let i = 0; i < tuning.length; i++) {
                    tuning[tuning.length - 1 - i] = parseInt(tuningParts[i]);
                }
                for (let staff of track.staves) {
                    staff.stringTuning.tunings = tuning;
                    staff.showStandardNotation = true;
                    staff.showTablature = true;
                }
                break;
            case 'DiagramCollection':
            case 'ChordCollection':
                this.parseDiagramCollectionForTrack(track, node);
                break;
            case 'CapoFret':
                let capo = parseInt(node.findChildElement('Fret').innerText);
                for (let staff of track.staves) {
                    staff.capo = capo;
                }
                break;
        }
    }
    parseGeneralMidi(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Program':
                        track.playbackInfo.program = parseInt(c.innerText);
                        break;
                    case 'Port':
                        track.playbackInfo.port = parseInt(c.innerText);
                        break;
                    case 'PrimaryChannel':
                        track.playbackInfo.primaryChannel = parseInt(c.innerText);
                        break;
                    case 'SecondaryChannel':
                        track.playbackInfo.secondaryChannel = parseInt(c.innerText);
                        break;
                }
            }
        }
        let isPercussion = node.getAttribute('table') === 'Percussion';
        if (isPercussion) {
            for (let staff of track.staves) {
                staff.isPercussion = true;
            }
        }
    }
    parseSounds(trackId, track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Sound':
                        this.parseSound(trackId, track, c);
                        break;
                }
            }
        }
    }
    parseSound(trackId, track, node) {
        const sound = new GpifSound();
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Name':
                        sound.name = c.innerText;
                        break;
                    case 'Path':
                        sound.path = c.innerText;
                        break;
                    case 'Role':
                        sound.role = c.innerText;
                        break;
                    case 'MIDI':
                        this.parseSoundMidi(sound, c);
                        break;
                }
            }
        }
        if (sound.role === 'Factory' || track.playbackInfo.program === 0) {
            track.playbackInfo.program = sound.program;
        }
        if (!this._soundsByTrack.has(trackId)) {
            this._soundsByTrack.set(trackId, new Map());
        }
        this._soundsByTrack.get(trackId).set(sound.uniqueId, sound);
    }
    parseSoundMidi(sound, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Program':
                        sound.program = parseInt(c.innerText);
                        break;
                }
            }
        }
    }
    parsePartSounding(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'TranspositionPitch':
                        for (let staff of track.staves) {
                            staff.displayTranspositionPitch = parseInt(c.innerText);
                        }
                        break;
                }
            }
        }
    }
    parseTranspose(track, node) {
        let octave = 0;
        let chromatic = 0;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Chromatic':
                        chromatic = parseInt(c.innerText);
                        break;
                    case 'Octave':
                        octave = parseInt(c.innerText);
                        break;
                }
            }
        }
        for (let staff of track.staves) {
            staff.displayTranspositionPitch = octave * 12 + chromatic;
        }
    }
    parseRSE(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'ChannelStrip':
                        this.parseChannelStrip(track, c);
                        break;
                }
            }
        }
    }
    parseChannelStrip(track, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Parameters':
                        this.parseChannelStripParameters(track, c);
                        break;
                }
            }
        }
    }
    parseChannelStripParameters(track, node) {
        if (node.firstChild && node.firstChild.value) {
            let parameters = node.firstChild.value.split(' ');
            if (parameters.length >= 12) {
                track.playbackInfo.balance = Math.floor(parseFloat(parameters[11]) * 16);
                track.playbackInfo.volume = Math.floor(parseFloat(parameters[12]) * 16);
            }
        }
    }
    //
    // <MasterBars>...</MasterBars>
    //
    parseMasterBarsNode(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'MasterBar':
                        this.parseMasterBar(c);
                        break;
                }
            }
        }
    }
    parseMasterBar(node) {
        let masterBar = new MasterBar();
        if (this._masterBars.length === 0 && this._hasAnacrusis) {
            masterBar.isAnacrusis = true;
        }
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Time':
                        let timeParts = c.innerText.split('/');
                        masterBar.timeSignatureNumerator = parseInt(timeParts[0]);
                        masterBar.timeSignatureDenominator = parseInt(timeParts[1]);
                        break;
                    case 'DoubleBar':
                        masterBar.isDoubleBar = true;
                        break;
                    case 'Section':
                        masterBar.section = new Section();
                        masterBar.section.marker = c.findChildElement('Letter').innerText;
                        masterBar.section.text = c.findChildElement('Text').innerText;
                        break;
                    case 'Repeat':
                        if (c.getAttribute('start').toLowerCase() === 'true') {
                            masterBar.isRepeatStart = true;
                        }
                        if (c.getAttribute('end').toLowerCase() === 'true' && c.getAttribute('count')) {
                            masterBar.repeatCount = parseInt(c.getAttribute('count'));
                        }
                        break;
                    case 'AlternateEndings':
                        let alternateEndings = c.innerText.split(' ');
                        let i = 0;
                        for (let k = 0; k < alternateEndings.length; k++) {
                            i = i | (1 << (-1 + parseInt(alternateEndings[k])));
                        }
                        masterBar.alternateEndings = i;
                        break;
                    case 'Bars':
                        this._barsOfMasterBar.push(c.innerText.split(' '));
                        break;
                    case 'TripletFeel':
                        switch (c.innerText) {
                            case 'NoTripletFeel':
                                masterBar.tripletFeel = TripletFeel.NoTripletFeel;
                                break;
                            case 'Triplet8th':
                                masterBar.tripletFeel = TripletFeel.Triplet8th;
                                break;
                            case 'Triplet16th':
                                masterBar.tripletFeel = TripletFeel.Triplet16th;
                                break;
                            case 'Dotted8th':
                                masterBar.tripletFeel = TripletFeel.Dotted8th;
                                break;
                            case 'Dotted16th':
                                masterBar.tripletFeel = TripletFeel.Dotted16th;
                                break;
                            case 'Scottish8th':
                                masterBar.tripletFeel = TripletFeel.Scottish8th;
                                break;
                            case 'Scottish16th':
                                masterBar.tripletFeel = TripletFeel.Scottish16th;
                                break;
                        }
                        break;
                    case 'Key':
                        masterBar.keySignature = parseInt(c.findChildElement('AccidentalCount').innerText);
                        let mode = c.findChildElement('Mode');
                        if (mode) {
                            switch (mode.innerText.toLowerCase()) {
                                case 'major':
                                    masterBar.keySignatureType = KeySignatureType.Major;
                                    break;
                                case 'minor':
                                    masterBar.keySignatureType = KeySignatureType.Minor;
                                    break;
                            }
                        }
                        break;
                    case 'Fermatas':
                        this.parseFermatas(masterBar, c);
                        break;
                }
            }
        }
        this._masterBars.push(masterBar);
    }
    parseFermatas(masterBar, node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Fermata':
                        this.parseFermata(masterBar, c);
                        break;
                }
            }
        }
    }
    parseFermata(masterBar, node) {
        let offset = 0;
        let fermata = new Fermata();
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Type':
                        switch (c.innerText) {
                            case 'Short':
                                fermata.type = FermataType.Short;
                                break;
                            case 'Medium':
                                fermata.type = FermataType.Medium;
                                break;
                            case 'Long':
                                fermata.type = FermataType.Long;
                                break;
                        }
                        break;
                    case 'Length':
                        fermata.length = parseFloat(c.innerText);
                        break;
                    case 'Offset':
                        let parts = c.innerText.split('/');
                        if (parts.length === 2) {
                            let numerator = parseInt(parts[0]);
                            let denominator = parseInt(parts[1]);
                            offset = ((numerator / denominator) * MidiUtils.QuarterTime) | 0;
                        }
                        break;
                }
            }
        }
        masterBar.addFermata(offset, fermata);
    }
    //
    // <Bars>...</Bars>
    //
    parseBars(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Bar':
                        this.parseBar(c);
                        break;
                }
            }
        }
    }
    parseBar(node) {
        let bar = new Bar();
        let barId = node.getAttribute('id');
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Voices':
                        this._voicesOfBar.set(barId, c.innerText.split(' '));
                        break;
                    case 'Clef':
                        switch (c.innerText) {
                            case 'Neutral':
                                bar.clef = Clef.Neutral;
                                break;
                            case 'G2':
                                bar.clef = Clef.G2;
                                break;
                            case 'F4':
                                bar.clef = Clef.F4;
                                break;
                            case 'C4':
                                bar.clef = Clef.C4;
                                break;
                            case 'C3':
                                bar.clef = Clef.C3;
                                break;
                        }
                        break;
                    case 'Ottavia':
                        switch (c.innerText) {
                            case '8va':
                                bar.clefOttava = Ottavia._8va;
                                break;
                            case '15ma':
                                bar.clefOttava = Ottavia._15ma;
                                break;
                            case '8vb':
                                bar.clefOttava = Ottavia._8vb;
                                break;
                            case '15mb':
                                bar.clefOttava = Ottavia._15mb;
                                break;
                        }
                        break;
                    case 'SimileMark':
                        switch (c.innerText) {
                            case 'Simple':
                                bar.simileMark = SimileMark.Simple;
                                break;
                            case 'FirstOfDouble':
                                bar.simileMark = SimileMark.FirstOfDouble;
                                break;
                            case 'SecondOfDouble':
                                bar.simileMark = SimileMark.SecondOfDouble;
                                break;
                        }
                        break;
                }
            }
        }
        this._barsById.set(barId, bar);
    }
    //
    // <Voices>...</Voices>
    //
    parseVoices(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Voice':
                        this.parseVoice(c);
                        break;
                }
            }
        }
    }
    parseVoice(node) {
        let voice = new Voice$1();
        let voiceId = node.getAttribute('id');
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Beats':
                        this._beatsOfVoice.set(voiceId, c.innerText.split(' '));
                        break;
                }
            }
        }
        this._voiceById.set(voiceId, voice);
    }
    //
    // <Beats>...</Beats>
    //
    parseBeats(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Beat':
                        this.parseBeat(c);
                        break;
                }
            }
        }
    }
    parseBeat(node) {
        let beat = new Beat();
        let beatId = node.getAttribute('id');
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Notes':
                        this._notesOfBeat.set(beatId, c.innerText.split(' '));
                        break;
                    case 'Rhythm':
                        this._rhythmOfBeat.set(beatId, c.getAttribute('ref'));
                        break;
                    case 'Fadding':
                        if (c.innerText === 'FadeIn') {
                            beat.fadeIn = true;
                        }
                        break;
                    case 'Tremolo':
                        switch (c.innerText) {
                            case '1/2':
                                beat.tremoloSpeed = Duration.Eighth;
                                break;
                            case '1/4':
                                beat.tremoloSpeed = Duration.Sixteenth;
                                break;
                            case '1/8':
                                beat.tremoloSpeed = Duration.ThirtySecond;
                                break;
                        }
                        break;
                    case 'Chord':
                        beat.chordId = c.innerText;
                        break;
                    case 'Hairpin':
                        switch (c.innerText) {
                            case 'Crescendo':
                                beat.crescendo = CrescendoType.Crescendo;
                                break;
                            case 'Decrescendo':
                                beat.crescendo = CrescendoType.Decrescendo;
                                break;
                        }
                        break;
                    case 'Arpeggio':
                        if (c.innerText === 'Up') {
                            beat.brushType = BrushType.ArpeggioUp;
                        }
                        else {
                            beat.brushType = BrushType.ArpeggioDown;
                        }
                        break;
                    case 'Properties':
                        this.parseBeatProperties(c, beat);
                        break;
                    case 'XProperties':
                        this.parseBeatXProperties(c, beat);
                        break;
                    case 'FreeText':
                        beat.text = c.innerText;
                        break;
                    case 'TransposedPitchStemOrientation':
                        switch (c.innerText) {
                            case 'Upward':
                                beat.preferredBeamDirection = BeamDirection.Up;
                                break;
                            case 'Downward':
                                beat.preferredBeamDirection = BeamDirection.Down;
                                break;
                        }
                        break;
                    case 'Dynamic':
                        switch (c.innerText) {
                            case 'PPP':
                                beat.dynamics = DynamicValue.PPP;
                                break;
                            case 'PP':
                                beat.dynamics = DynamicValue.PP;
                                break;
                            case 'P':
                                beat.dynamics = DynamicValue.P;
                                break;
                            case 'MP':
                                beat.dynamics = DynamicValue.MP;
                                break;
                            case 'MF':
                                beat.dynamics = DynamicValue.MF;
                                break;
                            case 'F':
                                beat.dynamics = DynamicValue.F;
                                break;
                            case 'FF':
                                beat.dynamics = DynamicValue.FF;
                                break;
                            case 'FFF':
                                beat.dynamics = DynamicValue.FFF;
                                break;
                        }
                        break;
                    case 'GraceNotes':
                        switch (c.innerText) {
                            case 'OnBeat':
                                beat.graceType = GraceType.OnBeat;
                                break;
                            case 'BeforeBeat':
                                beat.graceType = GraceType.BeforeBeat;
                                break;
                        }
                        break;
                    case 'Legato':
                        if (c.getAttribute('origin') === 'true') {
                            beat.isLegatoOrigin = true;
                        }
                        break;
                    case 'Whammy':
                        let whammyOrigin = new BendPoint(0, 0);
                        whammyOrigin.value = this.toBendValue(parseFloat(c.getAttribute('originValue')));
                        whammyOrigin.offset = this.toBendOffset(parseFloat(c.getAttribute('originOffset')));
                        beat.addWhammyBarPoint(whammyOrigin);
                        let whammyMiddle1 = new BendPoint(0, 0);
                        whammyMiddle1.value = this.toBendValue(parseFloat(c.getAttribute('middleValue')));
                        whammyMiddle1.offset = this.toBendOffset(parseFloat(c.getAttribute('middleOffset1')));
                        beat.addWhammyBarPoint(whammyMiddle1);
                        let whammyMiddle2 = new BendPoint(0, 0);
                        whammyMiddle2.value = this.toBendValue(parseFloat(c.getAttribute('middleValue')));
                        whammyMiddle2.offset = this.toBendOffset(parseFloat(c.getAttribute('middleOffset2')));
                        beat.addWhammyBarPoint(whammyMiddle2);
                        let whammyDestination = new BendPoint(0, 0);
                        whammyDestination.value = this.toBendValue(parseFloat(c.getAttribute('destinationValue')));
                        whammyDestination.offset = this.toBendOffset(parseFloat(c.getAttribute('destinationOffset')));
                        beat.addWhammyBarPoint(whammyDestination);
                        break;
                    case 'Ottavia':
                        switch (c.innerText) {
                            case '8va':
                                beat.ottava = Ottavia._8va;
                                break;
                            case '8vb':
                                beat.ottava = Ottavia._8vb;
                                break;
                            case '15ma':
                                beat.ottava = Ottavia._15ma;
                                break;
                            case '15mb':
                                beat.ottava = Ottavia._15mb;
                                break;
                        }
                        break;
                    case 'Lyrics':
                        beat.lyrics = this.parseBeatLyrics(c);
                        this._skipApplyLyrics = true;
                        break;
                }
            }
        }
        this._beatById.set(beatId, beat);
    }
    parseBeatLyrics(node) {
        const lines = [];
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Line':
                        lines.push(c.innerText);
                        break;
                }
            }
        }
        return lines;
    }
    parseBeatXProperties(node, beat) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'XProperty':
                        let id = c.getAttribute('id');
                        let value = 0;
                        switch (id) {
                            case '1124204545':
                                value = parseInt(c.findChildElement('Int').innerText);
                                beat.invertBeamDirection = value === 1;
                                break;
                            case '687935489':
                                value = parseInt(c.findChildElement('Int').innerText);
                                beat.brushDuration = value;
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseBeatProperties(node, beat) {
        let isWhammy = false;
        let whammyOrigin = null;
        let whammyMiddleValue = null;
        let whammyMiddleOffset1 = null;
        let whammyMiddleOffset2 = null;
        let whammyDestination = null;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Property':
                        let name = c.getAttribute('name');
                        switch (name) {
                            case 'Brush':
                                if (c.findChildElement('Direction').innerText === 'Up') {
                                    beat.brushType = BrushType.BrushUp;
                                }
                                else {
                                    beat.brushType = BrushType.BrushDown;
                                }
                                break;
                            case 'PickStroke':
                                if (c.findChildElement('Direction').innerText === 'Up') {
                                    beat.pickStroke = PickStroke.Up;
                                }
                                else {
                                    beat.pickStroke = PickStroke.Down;
                                }
                                break;
                            case 'Slapped':
                                if (c.findChildElement('Enable')) {
                                    beat.slap = true;
                                }
                                break;
                            case 'Popped':
                                if (c.findChildElement('Enable')) {
                                    beat.pop = true;
                                }
                                break;
                            case 'VibratoWTremBar':
                                switch (c.findChildElement('Strength').innerText) {
                                    case 'Wide':
                                        beat.vibrato = VibratoType.Wide;
                                        break;
                                    case 'Slight':
                                        beat.vibrato = VibratoType.Slight;
                                        break;
                                }
                                break;
                            case 'WhammyBar':
                                isWhammy = true;
                                break;
                            case 'WhammyBarExtend':
                                // not clear what this is used for
                                break;
                            case 'WhammyBarOriginValue':
                                if (!whammyOrigin) {
                                    whammyOrigin = new BendPoint(0, 0);
                                }
                                whammyOrigin.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarOriginOffset':
                                if (!whammyOrigin) {
                                    whammyOrigin = new BendPoint(0, 0);
                                }
                                whammyOrigin.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarMiddleValue':
                                whammyMiddleValue = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarMiddleOffset1':
                                whammyMiddleOffset1 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarMiddleOffset2':
                                whammyMiddleOffset2 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarDestinationValue':
                                if (!whammyDestination) {
                                    whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                }
                                whammyDestination.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'WhammyBarDestinationOffset':
                                if (!whammyDestination) {
                                    whammyDestination = new BendPoint(0, 0);
                                }
                                whammyDestination.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                        }
                        break;
                }
            }
        }
        if (isWhammy) {
            if (!whammyOrigin) {
                whammyOrigin = new BendPoint(0, 0);
            }
            if (!whammyDestination) {
                whammyDestination = new BendPoint(BendPoint.MaxPosition, 0);
            }
            beat.addWhammyBarPoint(whammyOrigin);
            if (whammyMiddleOffset1 && whammyMiddleValue) {
                beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset1, whammyMiddleValue));
            }
            if (whammyMiddleOffset2 && whammyMiddleValue) {
                beat.addWhammyBarPoint(new BendPoint(whammyMiddleOffset2, whammyMiddleValue));
            }
            if (!whammyMiddleOffset1 && !whammyMiddleOffset2 && whammyMiddleValue) {
                beat.addWhammyBarPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, whammyMiddleValue));
            }
            beat.addWhammyBarPoint(whammyDestination);
        }
    }
    //
    // <Notes>...</Notes>
    //
    parseNotes(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Note':
                        this.parseNote(c);
                        break;
                }
            }
        }
    }
    parseNote(node) {
        let note = new Note();
        let noteId = node.getAttribute('id');
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Properties':
                        this.parseNoteProperties(c, note, noteId);
                        break;
                    case 'AntiAccent':
                        if (c.innerText.toLowerCase() === 'normal') {
                            note.isGhost = true;
                        }
                        break;
                    case 'LetRing':
                        note.isLetRing = true;
                        break;
                    case 'Trill':
                        note.trillValue = parseInt(c.innerText);
                        note.trillSpeed = Duration.Sixteenth;
                        break;
                    case 'Accent':
                        let accentFlags = parseInt(c.innerText);
                        if ((accentFlags & 0x01) !== 0) {
                            note.isStaccato = true;
                        }
                        if ((accentFlags & 0x04) !== 0) {
                            note.accentuated = AccentuationType.Heavy;
                        }
                        if ((accentFlags & 0x08) !== 0) {
                            note.accentuated = AccentuationType.Normal;
                        }
                        break;
                    case 'Tie':
                        if (c.getAttribute('destination').toLowerCase() === 'true') {
                            note.isTieDestination = true;
                        }
                        break;
                    case 'Vibrato':
                        switch (c.innerText) {
                            case 'Slight':
                                note.vibrato = VibratoType.Slight;
                                break;
                            case 'Wide':
                                note.vibrato = VibratoType.Wide;
                                break;
                        }
                        break;
                    case 'LeftFingering':
                        note.isFingering = true;
                        switch (c.innerText) {
                            case 'P':
                                note.leftHandFinger = Fingers.Thumb;
                                break;
                            case 'I':
                                note.leftHandFinger = Fingers.IndexFinger;
                                break;
                            case 'M':
                                note.leftHandFinger = Fingers.MiddleFinger;
                                break;
                            case 'A':
                                note.leftHandFinger = Fingers.AnnularFinger;
                                break;
                            case 'C':
                                note.leftHandFinger = Fingers.LittleFinger;
                                break;
                        }
                        break;
                    case 'RightFingering':
                        note.isFingering = true;
                        switch (c.innerText) {
                            case 'P':
                                note.rightHandFinger = Fingers.Thumb;
                                break;
                            case 'I':
                                note.rightHandFinger = Fingers.IndexFinger;
                                break;
                            case 'M':
                                note.rightHandFinger = Fingers.MiddleFinger;
                                break;
                            case 'A':
                                note.rightHandFinger = Fingers.AnnularFinger;
                                break;
                            case 'C':
                                note.rightHandFinger = Fingers.LittleFinger;
                                break;
                        }
                        break;
                    case 'InstrumentArticulation':
                        note.percussionArticulation = parseInt(c.innerText);
                        break;
                }
            }
        }
        this._noteById.set(noteId, note);
    }
    parseNoteProperties(node, note, noteId) {
        let isBended = false;
        let bendOrigin = null;
        let bendMiddleValue = null;
        let bendMiddleOffset1 = null;
        let bendMiddleOffset2 = null;
        let bendDestination = null;
        // GP6 had percussion as element+variation
        let element = -1;
        let variation = -1;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Property':
                        let name = c.getAttribute('name');
                        switch (name) {
                            case 'String':
                                note.string = parseInt(c.findChildElement('String').innerText) + 1;
                                break;
                            case 'Fret':
                                note.fret = parseInt(c.findChildElement('Fret').innerText);
                                break;
                            case 'Element':
                                element = parseInt(c.findChildElement('Element').innerText);
                                break;
                            case 'Variation':
                                variation = parseInt(c.findChildElement('Variation').innerText);
                                break;
                            case 'Tapped':
                                this._tappedNotes.set(noteId, true);
                                break;
                            case 'HarmonicType':
                                let htype = c.findChildElement('HType');
                                if (htype) {
                                    switch (htype.innerText) {
                                        case 'NoHarmonic':
                                            note.harmonicType = HarmonicType.None;
                                            break;
                                        case 'Natural':
                                            note.harmonicType = HarmonicType.Natural;
                                            break;
                                        case 'Artificial':
                                            note.harmonicType = HarmonicType.Artificial;
                                            break;
                                        case 'Pinch':
                                            note.harmonicType = HarmonicType.Pinch;
                                            break;
                                        case 'Tap':
                                            note.harmonicType = HarmonicType.Tap;
                                            break;
                                        case 'Semi':
                                            note.harmonicType = HarmonicType.Semi;
                                            break;
                                        case 'Feedback':
                                            note.harmonicType = HarmonicType.Feedback;
                                            break;
                                    }
                                }
                                break;
                            case 'HarmonicFret':
                                let hfret = c.findChildElement('HFret');
                                if (hfret) {
                                    note.harmonicValue = parseFloat(hfret.innerText);
                                }
                                break;
                            case 'Muted':
                                if (c.findChildElement('Enable')) {
                                    note.isDead = true;
                                }
                                break;
                            case 'PalmMuted':
                                if (c.findChildElement('Enable')) {
                                    note.isPalmMute = true;
                                }
                                break;
                            case 'Octave':
                                note.octave = parseInt(c.findChildElement('Number').innerText);
                                // when exporting GP6 from GP7 the tone might be missing
                                if (note.tone === -1) {
                                    note.tone = 0;
                                }
                                break;
                            case 'Tone':
                                note.tone = parseInt(c.findChildElement('Step').innerText);
                                break;
                            case 'ConcertPitch':
                                this.parseConcertPitch(c, note);
                                break;
                            case 'Bended':
                                isBended = true;
                                break;
                            case 'BendOriginValue':
                                if (!bendOrigin) {
                                    bendOrigin = new BendPoint(0, 0);
                                }
                                bendOrigin.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendOriginOffset':
                                if (!bendOrigin) {
                                    bendOrigin = new BendPoint(0, 0);
                                }
                                bendOrigin.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendMiddleValue':
                                bendMiddleValue = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendMiddleOffset1':
                                bendMiddleOffset1 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendMiddleOffset2':
                                bendMiddleOffset2 = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendDestinationValue':
                                if (!bendDestination) {
                                    bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
                                }
                                bendDestination.value = this.toBendValue(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'BendDestinationOffset':
                                if (!bendDestination) {
                                    bendDestination = new BendPoint(0, 0);
                                }
                                bendDestination.offset = this.toBendOffset(parseFloat(c.findChildElement('Float').innerText));
                                break;
                            case 'HopoOrigin':
                                if (c.findChildElement('Enable')) {
                                    note.isHammerPullOrigin = true;
                                }
                                break;
                            case 'HopoDestination':
                                // NOTE: gets automatically calculated
                                // if (FindChildElement(node, "Enable"))
                                //     note.isHammerPullDestination = true;
                                break;
                            case 'LeftHandTapped':
                                note.isLeftHandTapped = true;
                                break;
                            case 'Slide':
                                let slideFlags = parseInt(c.findChildElement('Flags').innerText);
                                if ((slideFlags & 1) !== 0) {
                                    note.slideOutType = SlideOutType.Shift;
                                }
                                else if ((slideFlags & 2) !== 0) {
                                    note.slideOutType = SlideOutType.Legato;
                                }
                                else if ((slideFlags & 4) !== 0) {
                                    note.slideOutType = SlideOutType.OutDown;
                                }
                                else if ((slideFlags & 8) !== 0) {
                                    note.slideOutType = SlideOutType.OutUp;
                                }
                                if ((slideFlags & 16) !== 0) {
                                    note.slideInType = SlideInType.IntoFromBelow;
                                }
                                else if ((slideFlags & 32) !== 0) {
                                    note.slideInType = SlideInType.IntoFromAbove;
                                }
                                if ((slideFlags & 64) !== 0) {
                                    note.slideOutType = SlideOutType.PickSlideDown;
                                }
                                else if ((slideFlags & 128) !== 0) {
                                    note.slideOutType = SlideOutType.PickSlideUp;
                                }
                                break;
                        }
                        break;
                }
            }
        }
        if (isBended) {
            if (!bendOrigin) {
                bendOrigin = new BendPoint(0, 0);
            }
            if (!bendDestination) {
                bendDestination = new BendPoint(BendPoint.MaxPosition, 0);
            }
            note.addBendPoint(bendOrigin);
            if (bendMiddleOffset1 && bendMiddleValue) {
                note.addBendPoint(new BendPoint(bendMiddleOffset1, bendMiddleValue));
            }
            if (bendMiddleOffset2 && bendMiddleValue) {
                note.addBendPoint(new BendPoint(bendMiddleOffset2, bendMiddleValue));
            }
            if (!bendMiddleOffset1 && !bendMiddleOffset2 && bendMiddleValue) {
                note.addBendPoint(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendMiddleValue));
            }
            note.addBendPoint(bendDestination);
        }
        // map GP6 element and variation combos to midi numbers
        if (element !== -1 && variation !== -1) {
            note.percussionArticulation = PercussionMapper.articulationFromElementVariation(element, variation);
        }
    }
    parseConcertPitch(node, note) {
        const pitch = node.findChildElement('Pitch');
        if (pitch) {
            for (let c of pitch.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'Accidental':
                            switch (c.innerText) {
                                case 'x':
                                    note.accidentalMode = NoteAccidentalMode.ForceDoubleSharp;
                                    break;
                                case '#':
                                    note.accidentalMode = NoteAccidentalMode.ForceSharp;
                                    break;
                                case 'b':
                                    note.accidentalMode = NoteAccidentalMode.ForceFlat;
                                    break;
                                case 'bb':
                                    note.accidentalMode = NoteAccidentalMode.ForceDoubleFlat;
                                    break;
                            }
                            break;
                    }
                }
            }
        }
    }
    toBendValue(gpxValue) {
        return (gpxValue * GpifParser.BendPointValueFactor) | 0;
    }
    toBendOffset(gpxOffset) {
        return (gpxOffset * GpifParser.BendPointPositionFactor);
    }
    parseRhythms(node) {
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'Rhythm':
                        this.parseRhythm(c);
                        break;
                }
            }
        }
    }
    parseRhythm(node) {
        let rhythm = new GpifRhythm();
        let rhythmId = node.getAttribute('id');
        rhythm.id = rhythmId;
        for (let c of node.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'NoteValue':
                        switch (c.innerText) {
                            case 'Long':
                                rhythm.value = Duration.QuadrupleWhole;
                                break;
                            case 'DoubleWhole':
                                rhythm.value = Duration.DoubleWhole;
                                break;
                            case 'Whole':
                                rhythm.value = Duration.Whole;
                                break;
                            case 'Half':
                                rhythm.value = Duration.Half;
                                break;
                            case 'Quarter':
                                rhythm.value = Duration.Quarter;
                                break;
                            case 'Eighth':
                                rhythm.value = Duration.Eighth;
                                break;
                            case '16th':
                                rhythm.value = Duration.Sixteenth;
                                break;
                            case '32nd':
                                rhythm.value = Duration.ThirtySecond;
                                break;
                            case '64th':
                                rhythm.value = Duration.SixtyFourth;
                                break;
                            case '128th':
                                rhythm.value = Duration.OneHundredTwentyEighth;
                                break;
                            case '256th':
                                rhythm.value = Duration.TwoHundredFiftySixth;
                                break;
                        }
                        break;
                    case 'PrimaryTuplet':
                        rhythm.tupletNumerator = parseInt(c.getAttribute('num'));
                        rhythm.tupletDenominator = parseInt(c.getAttribute('den'));
                        break;
                    case 'AugmentationDot':
                        rhythm.dots = parseInt(c.getAttribute('count'));
                        break;
                }
            }
        }
        this._rhythmById.set(rhythmId, rhythm);
    }
    buildModel() {
        // build score
        for (let i = 0, j = this._masterBars.length; i < j; i++) {
            let masterBar = this._masterBars[i];
            this.score.addMasterBar(masterBar);
        }
        // add tracks to score
        for (let trackId of this._tracksMapping) {
            if (!trackId) {
                continue;
            }
            let track = this._tracksById.get(trackId);
            this.score.addTrack(track);
        }
        // process all masterbars
        for (let barIds of this._barsOfMasterBar) {
            // add all bars of masterbar vertically to all tracks
            let staffIndex = 0;
            for (let barIndex = 0, trackIndex = 0; barIndex < barIds.length && trackIndex < this.score.tracks.length; barIndex++) {
                let barId = barIds[barIndex];
                if (barId !== GpifParser.InvalidId) {
                    let bar = this._barsById.get(barId);
                    let track = this.score.tracks[trackIndex];
                    let staff = track.staves[staffIndex];
                    staff.addBar(bar);
                    if (this._voicesOfBar.has(barId)) {
                        // add voices to bars
                        for (let voiceId of this._voicesOfBar.get(barId)) {
                            if (voiceId !== GpifParser.InvalidId) {
                                let voice = this._voiceById.get(voiceId);
                                bar.addVoice(voice);
                                if (this._beatsOfVoice.has(voiceId)) {
                                    // add beats to voices
                                    for (let beatId of this._beatsOfVoice.get(voiceId)) {
                                        if (beatId !== GpifParser.InvalidId) {
                                            // important! we clone the beat because beats get reused
                                            // in gp6, our model needs to have unique beats.
                                            let beat = BeatCloner.clone(this._beatById.get(beatId));
                                            voice.addBeat(beat);
                                            let rhythmId = this._rhythmOfBeat.get(beatId);
                                            let rhythm = this._rhythmById.get(rhythmId);
                                            // set beat duration
                                            beat.duration = rhythm.value;
                                            beat.dots = rhythm.dots;
                                            beat.tupletNumerator = rhythm.tupletNumerator;
                                            beat.tupletDenominator = rhythm.tupletDenominator;
                                            // add notes to beat
                                            if (this._notesOfBeat.has(beatId)) {
                                                for (let noteId of this._notesOfBeat.get(beatId)) {
                                                    if (noteId !== GpifParser.InvalidId) {
                                                        const note = NoteCloner.clone(this._noteById.get(noteId));
                                                        // reset midi value for non-percussion staves
                                                        if (staff.isPercussion) {
                                                            note.fret = -1;
                                                            note.string = -1;
                                                        }
                                                        else {
                                                            note.percussionArticulation = -1;
                                                        }
                                                        beat.addNote(note);
                                                        if (this._tappedNotes.has(noteId)) {
                                                            beat.tap = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                // invalid voice -> empty voice
                                let voice = new Voice$1();
                                bar.addVoice(voice);
                                let beat = new Beat();
                                beat.isEmpty = true;
                                beat.duration = Duration.Quarter;
                                voice.addBeat(beat);
                            }
                        }
                    }
                    // stave is full? -> next track
                    if (staffIndex === track.staves.length - 1) {
                        trackIndex++;
                        staffIndex = 0;
                    }
                    else {
                        staffIndex++;
                    }
                }
                else {
                    // no bar for track
                    trackIndex++;
                }
            }
        }
        // clear out percussion articulations where not needed 
        // and add automations
        for (let trackId of this._tracksMapping) {
            if (!trackId) {
                continue;
            }
            let track = this._tracksById.get(trackId);
            let hasPercussion = false;
            for (const staff of track.staves) {
                if (staff.isPercussion) {
                    hasPercussion = true;
                    break;
                }
            }
            if (!hasPercussion) {
                track.percussionArticulations = [];
            }
            if (this._automationsPerTrackIdAndBarIndex.has(trackId)) {
                const trackAutomations = this._automationsPerTrackIdAndBarIndex.get(trackId);
                for (const [barNumber, automations] of trackAutomations) {
                    if (track.staves.length > 0 && barNumber < track.staves[0].bars.length) {
                        const bar = track.staves[0].bars[barNumber];
                        if (bar.voices.length > 0 && bar.voices[0].beats.length > 0) {
                            const beat = bar.voices[0].beats[0];
                            for (const a of automations) {
                                beat.automations.push(a);
                            }
                        }
                    }
                }
            }
        }
        // build masterbar automations
        for (const [barNumber, automations] of this._masterTrackAutomations) {
            let masterBar = this.score.masterBars[barNumber];
            for (let i = 0, j = automations.length; i < j; i++) {
                let automation = automations[i];
                if (automation.type === AutomationType.Tempo) {
                    if (barNumber === 0) {
                        this.score.tempo = automation.value | 0;
                        if (automation.text) {
                            this.score.tempoLabel = automation.text;
                        }
                    }
                    masterBar.tempoAutomation = automation;
                }
            }
        }
    }
}
GpifParser.InvalidId = '-1';
/**
 * GPX range: 0-100
 * Internal range: 0 - 60
 */
GpifParser.BendPointPositionFactor = BendPoint.MaxPosition / 100.0;
/**
 * GPIF: 25 per quarternote
 * Internal Range: 1 per quarter note
 */
GpifParser.BendPointValueFactor = 1 / 25.0;

class TrackConfiguration {
    constructor() {
        this.showSlash = false;
        this.showStandardNotation = false;
        this.showTablature = false;
    }
}
class Part {
    constructor() {
        this.isMultiRest = false;
        this.tracks = [];
    }
}
class PartConfiguration {
    constructor(partConfigurationData) {
        this.parts = [];
        this.zoomLevel = 0;
        this.layout = 0;
        let readable = ByteBuffer.fromBuffer(partConfigurationData);
        let entryCount = IOHelper.readInt32BE(readable);
        for (let i = 0; i < entryCount; i++) {
            let part = new Part();
            this.parts.push(part);
            part.isMultiRest = GpBinaryHelpers.gpReadBool(readable);
            let groupCount = IOHelper.readInt32BE(readable);
            for (let j = 0; j < groupCount; j++) {
                let flags = readable.readByte();
                // enable at least standard notation
                if (flags === 0) {
                    flags = 1;
                }
                let trackConfiguration = new TrackConfiguration();
                trackConfiguration.showStandardNotation = (flags & 0x01) !== 0;
                trackConfiguration.showTablature = (flags & 0x02) !== 0;
                trackConfiguration.showSlash = (flags & 0x04) !== 0;
                part.tracks.push(trackConfiguration);
            }
        }
    }
    apply(score) {
        let staffIndex = 0;
        let trackIndex = 0;
        // the PartConfiguration is really twisted compared to how the score structure looks like.
        // the first part typically contains the settings for the first staff of all tracks.
        // but then there is 1 part with 1 track for each other staff of the tracks.
        // So the structure in the PartConfig appears to be:
        // Parts[0].Tracks = { Track1-Staff1, Track2-Staff1, Track3-Staff1, Track4-Staff1, .. }
        // Parts[1].Tracks = { Track1-Staff2 }
        // Parts[2].Tracks = { Track2-Staff2 }
        // Parts[3].Tracks = { Track3-Staff2 }
        // Parts[4].Tracks = { Track4-Staff2 }
        //
        // even if a track has only 1 staff, there are 2 staff configurations stored.
        // I hope Arobas never changes this in the format as the PartConfiguration is not versionized.
        for (let part of this.parts) {
            for (let trackConfig of part.tracks) {
                if (trackIndex < score.tracks.length) {
                    let track = score.tracks[trackIndex];
                    if (staffIndex < track.staves.length) {
                        let staff = track.staves[staffIndex];
                        staff.showTablature = trackConfig.showTablature;
                        staff.showStandardNotation = trackConfig.showStandardNotation;
                    }
                }
                trackIndex++;
                if (trackIndex >= score.tracks.length) {
                    staffIndex++;
                    trackIndex = 0;
                }
            }
        }
    }
    static writeForScore(score) {
        const writer = ByteBuffer.withCapacity(128);
        const parts = [
            new Part() // default part always exists
        ];
        for (const track of score.tracks) {
            for (const staff of track.staves) {
                const trackConfiguration = new TrackConfiguration();
                trackConfiguration.showStandardNotation = staff.showStandardNotation;
                trackConfiguration.showTablature = staff.showTablature;
                if (staff.index === 0) {
                    parts[0].tracks.push(trackConfiguration);
                }
                else {
                    let part = new Part();
                    part.tracks.push(trackConfiguration);
                    parts.push(part);
                }
            }
        }
        IOHelper.writeInt32BE(writer, parts.length);
        for (const part of parts) {
            writer.writeByte(part.isMultiRest ? 1 : 0);
            IOHelper.writeInt32BE(writer, part.tracks.length);
            for (const track of part.tracks) {
                let flags = 0;
                if (track.showStandardNotation) {
                    flags = flags | 0x01;
                }
                if (track.showTablature) {
                    flags = flags | 0x02;
                }
                if (track.showSlash) {
                    flags = flags | 0x04;
                }
                writer.writeByte(flags);
            }
        }
        return writer.toArray();
    }
}

// This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
class Huffman {
}
class Found extends Huffman {
    constructor(n) {
        super();
        this.n = n;
    }
}
class NeedBit extends Huffman {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
}
class NeedBits extends Huffman {
    constructor(n, table) {
        super();
        this.n = n;
        this.table = table;
    }
}

// This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
// This Inflater is based on the Zip Reader of the Haxe Standard Library (MIT)
class HuffTools {
    static make(lengths, pos, nlengths, maxbits) {
        let counts = [];
        let tmp = [];
        if (maxbits > 32) {
            throw new FormatError('Invalid huffman');
        }
        for (let i = 0; i < maxbits; i++) {
            counts.push(0);
            tmp.push(0);
        }
        for (let i = 0; i < nlengths; i++) {
            let p = lengths[i + pos];
            if (p >= maxbits) {
                throw new FormatError('Invalid huffman');
            }
            counts[p]++;
        }
        let code = 0;
        for (let i = 1; i < maxbits - 1; i++) {
            code = (code + counts[i]) << 1;
            tmp[i] = code;
        }
        let bits = new Map();
        for (let i = 0; i < nlengths; i++) {
            let l = lengths[i + pos];
            if (l !== 0) {
                let n = tmp[l - 1];
                tmp[l - 1] = n + 1;
                bits.set((n << 5) | l, i);
            }
        }
        return HuffTools.treeCompress(new NeedBit(HuffTools.treeMake(bits, maxbits, 0, 1), HuffTools.treeMake(bits, maxbits, 1, 1)));
    }
    static treeMake(bits, maxbits, v, len) {
        if (len > maxbits) {
            throw new FormatError('Invalid huffman');
        }
        let idx = (v << 5) | len;
        if (bits.has(idx)) {
            return new Found(bits.get(idx));
        }
        v = v << 1;
        len += 1;
        return new NeedBit(HuffTools.treeMake(bits, maxbits, v, len), HuffTools.treeMake(bits, maxbits, v | 1, len));
    }
    static treeCompress(t) {
        let d = HuffTools.treeDepth(t);
        if (d === 0) {
            return t;
        }
        if (d === 1) {
            if (t instanceof NeedBit) {
                return new NeedBit(HuffTools.treeCompress(t.left), HuffTools.treeCompress(t.right));
            }
            else {
                throw new FormatError('assert');
            }
        }
        let size = 1 << d;
        let table = [];
        for (let i = 0; i < size; i++) {
            table.push(new Found(-1));
        }
        HuffTools.treeWalk(table, 0, 0, d, t);
        return new NeedBits(d, table);
    }
    static treeWalk(table, p, cd, d, t) {
        if (t instanceof NeedBit) {
            if (d > 0) {
                HuffTools.treeWalk(table, p, cd + 1, d - 1, t.left);
                HuffTools.treeWalk(table, p | (1 << cd), cd + 1, d - 1, t.right);
            }
            else {
                table[p] = HuffTools.treeCompress(t);
            }
        }
        else {
            table[p] = HuffTools.treeCompress(t);
        }
    }
    static treeDepth(t) {
        if (t instanceof Found) {
            return 0;
        }
        if (t instanceof NeedBits) {
            throw new FormatError('assert');
        }
        if (t instanceof NeedBit) {
            let da = HuffTools.treeDepth(t.left);
            let db = HuffTools.treeDepth(t.right);
            return 1 + (da < db ? da : db);
        }
        return 0;
    }
}

// This Inflate algorithm is based on the Inflate class of the Haxe Standard Library (MIT)
var InflateState;
(function (InflateState) {
    InflateState[InflateState["Head"] = 0] = "Head";
    InflateState[InflateState["Block"] = 1] = "Block";
    InflateState[InflateState["CData"] = 2] = "CData";
    InflateState[InflateState["Flat"] = 3] = "Flat";
    InflateState[InflateState["Crc"] = 4] = "Crc";
    InflateState[InflateState["Dist"] = 5] = "Dist";
    InflateState[InflateState["DistOne"] = 6] = "DistOne";
    InflateState[InflateState["Done"] = 7] = "Done";
})(InflateState || (InflateState = {}));
class InflateWindow {
    constructor() {
        this.buffer = new Uint8Array(InflateWindow.BufferSize);
        this.pos = 0;
    }
    slide() {
        let b = new Uint8Array(InflateWindow.BufferSize);
        this.pos -= InflateWindow.Size;
        b.set(this.buffer.subarray(InflateWindow.Size, InflateWindow.Size + this.pos), 0);
        this.buffer = b;
    }
    addBytes(b, p, len) {
        if (this.pos + len > InflateWindow.BufferSize) {
            this.slide();
        }
        this.buffer.set(b.subarray(p, p + len), this.pos);
        this.pos += len;
    }
    addByte(c) {
        if (this.pos === InflateWindow.BufferSize) {
            this.slide();
        }
        this.buffer[this.pos] = c;
        this.pos++;
    }
    getLastChar() {
        return this.buffer[this.pos - 1];
    }
    available() {
        return this.pos;
    }
}
InflateWindow.Size = 1 << 15;
InflateWindow.BufferSize = 1 << 16;
class Inflate {
    constructor(readable) {
        this._nbits = 0;
        this._bits = 0;
        this._state = InflateState.Block;
        this._isFinal = false;
        this._huffman = Inflate._fixedHuffman;
        this._huffdist = null;
        this._len = 0;
        this._dist = 0;
        this._needed = 0;
        this._output = null;
        this._outpos = 0;
        this._lengths = [];
        this._window = new InflateWindow();
        this._input = readable;
        for (let i = 0; i < 19; i++) {
            this._lengths.push(-1);
        }
    }
    static buildFixedHuffman() {
        let a = [];
        for (let n = 0; n < 288; n++) {
            a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
        }
        return HuffTools.make(a, 0, 288, 10);
    }
    readBytes(b, pos, len) {
        this._needed = len;
        this._outpos = pos;
        this._output = b;
        if (len > 0) {
            while (this.inflateLoop()) {
                // inflating...
            }
        }
        return len - this._needed;
    }
    inflateLoop() {
        switch (this._state) {
            case InflateState.Head:
                let cmf = this._input.readByte();
                let cm = cmf & 15;
                if (cm !== 8) {
                    throw new FormatError('Invalid data');
                }
                let flg = this._input.readByte();
                // var fcheck = flg & 31;
                let fdict = (flg & 32) !== 0;
                // var flevel = flg >> 6;
                if (((cmf << 8) + flg) % 31 !== 0) {
                    throw new FormatError('Invalid data');
                }
                if (fdict) {
                    throw new FormatError('Unsupported dictionary');
                }
                this._state = InflateState.Block;
                return true;
            case InflateState.Crc:
                this._state = InflateState.Done;
                return true;
            case InflateState.Done:
                // nothing
                return false;
            case InflateState.Block:
                this._isFinal = this.getBit();
                switch (this.getBits(2)) {
                    case 0:
                        this._len = IOHelper.readUInt16LE(this._input);
                        let nlen = IOHelper.readUInt16LE(this._input);
                        if (nlen !== 0xffff - this._len) {
                            throw new FormatError('Invalid data');
                        }
                        this._state = InflateState.Flat;
                        let r = this.inflateLoop();
                        this.resetBits();
                        return r;
                    case 1:
                        this._huffman = Inflate._fixedHuffman;
                        this._huffdist = null;
                        this._state = InflateState.CData;
                        return true;
                    case 2:
                        let hlit = this.getBits(5) + 257;
                        let hdist = this.getBits(5) + 1;
                        let hclen = this.getBits(4) + 4;
                        for (let i = 0; i < hclen; i++) {
                            this._lengths[Inflate.CodeLengthsPos[i]] = this.getBits(3);
                        }
                        for (let i = hclen; i < 19; i++) {
                            this._lengths[Inflate.CodeLengthsPos[i]] = 0;
                        }
                        this._huffman = HuffTools.make(this._lengths, 0, 19, 8);
                        let xlengths = [];
                        for (let i = 0; i < hlit + hdist; i++) {
                            xlengths.push(0);
                        }
                        this.inflateLengths(xlengths, hlit + hdist);
                        this._huffdist = HuffTools.make(xlengths, hlit, hdist, 16);
                        this._huffman = HuffTools.make(xlengths, 0, hlit, 16);
                        this._state = InflateState.CData;
                        return true;
                    default:
                        throw new FormatError('Invalid data');
                }
            case InflateState.Flat: {
                let rlen = this._len < this._needed ? this._len : this._needed;
                let bytes = IOHelper.readByteArray(this._input, rlen);
                this._len -= rlen;
                this.addBytes(bytes, 0, rlen);
                if (this._len === 0)
                    this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                return this._needed > 0;
            }
            case InflateState.DistOne: {
                let rlen = this._len < this._needed ? this._len : this._needed;
                this.addDistOne(rlen);
                this._len -= rlen;
                if (this._len === 0) {
                    this._state = InflateState.CData;
                }
                return this._needed > 0;
            }
            case InflateState.Dist:
                while (this._len > 0 && this._needed > 0) {
                    let rdist = this._len < this._dist ? this._len : this._dist;
                    let rlen = this._needed < rdist ? this._needed : rdist;
                    this.addDist(this._dist, rlen);
                    this._len -= rlen;
                }
                if (this._len === 0) {
                    this._state = InflateState.CData;
                }
                return this._needed > 0;
            case InflateState.CData:
                let n = this.applyHuffman(this._huffman);
                if (n < 256) {
                    this.addByte(n);
                    return this._needed > 0;
                }
                else if (n === 256) {
                    this._state = this._isFinal ? InflateState.Crc : InflateState.Block;
                    return true;
                }
                else {
                    n = (n - 257) & 0xff;
                    let extraBits = Inflate.LenExtraBitsTbl[n];
                    if (extraBits === -1) {
                        throw new FormatError('Invalid data');
                    }
                    this._len = Inflate.LenBaseValTbl[n] + this.getBits(extraBits);
                    let huffdist = this._huffdist;
                    let distCode = !huffdist ? this.getRevBits(5) : this.applyHuffman(huffdist);
                    extraBits = Inflate.DistExtraBitsTbl[distCode];
                    if (extraBits === -1) {
                        throw new FormatError('Invalid data');
                    }
                    this._dist = Inflate.DistBaseValTbl[distCode] + this.getBits(extraBits);
                    if (this._dist > this._window.available()) {
                        throw new FormatError('Invalid data');
                    }
                    this._state = this._dist === 1 ? InflateState.DistOne : InflateState.Dist;
                    return true;
                }
        }
        return false;
    }
    addDistOne(n) {
        let c = this._window.getLastChar();
        for (let i = 0; i < n; i++) {
            this.addByte(c);
        }
    }
    addByte(b) {
        this._window.addByte(b);
        this._output[this._outpos] = b;
        this._needed--;
        this._outpos++;
    }
    addDist(d, len) {
        this.addBytes(this._window.buffer, this._window.pos - d, len);
    }
    getBit() {
        if (this._nbits === 0) {
            this._nbits = 8;
            this._bits = this._input.readByte();
        }
        let b = (this._bits & 1) === 1;
        this._nbits--;
        this._bits = this._bits >> 1;
        return b;
    }
    getBits(n) {
        while (this._nbits < n) {
            this._bits = this._bits | (this._input.readByte() << this._nbits);
            this._nbits += 8;
        }
        let b = this._bits & ((1 << n) - 1);
        this._nbits -= n;
        this._bits = this._bits >> n;
        return b;
    }
    getRevBits(n) {
        return n === 0 ? 0 : this.getBit() ? (1 << (n - 1)) | this.getRevBits(n - 1) : this.getRevBits(n - 1);
    }
    resetBits() {
        this._bits = 0;
        this._nbits = 0;
    }
    addBytes(b, p, len) {
        this._window.addBytes(b, p, len);
        this._output.set(b.subarray(p, p + len), this._outpos);
        this._needed -= len;
        this._outpos += len;
    }
    inflateLengths(a, max) {
        let i = 0;
        let prev = 0;
        while (i < max) {
            let n = this.applyHuffman(this._huffman);
            switch (n) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                    prev = n;
                    a[i] = n;
                    i++;
                    break;
                case 16:
                    let end = i + 3 + this.getBits(2);
                    if (end > max) {
                        throw new FormatError('Invalid data');
                    }
                    while (i < end) {
                        a[i] = prev;
                        i++;
                    }
                    break;
                case 17:
                    i += 3 + this.getBits(3);
                    if (i > max) {
                        throw new FormatError('Invalid data');
                    }
                    break;
                case 18:
                    i += 11 + this.getBits(7);
                    if (i > max) {
                        throw new FormatError('Invalid data');
                    }
                    break;
                default: {
                    throw new FormatError('Invalid data');
                }
            }
        }
    }
    applyHuffman(h) {
        if (h instanceof Found) {
            return h.n;
        }
        if (h instanceof NeedBit) {
            return this.applyHuffman(this.getBit() ? h.right : h.left);
        }
        if (h instanceof NeedBits) {
            return this.applyHuffman(h.table[this.getBits(h.n)]);
        }
        throw new FormatError('Invalid data');
    }
}
// prettier-ignore
Inflate.LenExtraBitsTbl = [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1,
    -1
];
// prettier-ignore
Inflate.LenBaseValTbl = [
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115,
    131, 163, 195, 227, 258
];
// prettier-ignore
Inflate.DistExtraBitsTbl = [
    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12,
    13, 13, -1, -1
];
// prettier-ignore
Inflate.DistBaseValTbl = [
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537,
    2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577
];
// prettier-ignore
Inflate.CodeLengthsPos = [
    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
];
Inflate._fixedHuffman = Inflate.buildFixedHuffman();

class ZipEntry {
    constructor(fullName, data) {
        this.fullName = fullName;
        let i = fullName.lastIndexOf('/');
        this.fileName = i === -1 || i === fullName.length - 1 ? this.fullName : fullName.substr(i + 1);
        this.data = data;
    }
}
ZipEntry.OptionalDataDescriptorSignature = 0x08074b50;
ZipEntry.CompressionMethodDeflate = 8;
ZipEntry.LocalFileHeaderSignature = 0x04034b50;
ZipEntry.CentralFileHeaderSignature = 0x02014b50;
ZipEntry.EndOfCentralDirSignature = 0x06054b50;

class ZipReader {
    constructor(readable) {
        this._readable = readable;
    }
    read() {
        let entries = [];
        while (true) {
            let e = this.readEntry();
            if (!e) {
                break;
            }
            entries.push(e);
        }
        return entries;
    }
    readEntry() {
        let readable = this._readable;
        let h = IOHelper.readInt32LE(readable);
        if (h !== ZipEntry.LocalFileHeaderSignature) {
            return null;
        }
        // 4.3.7 local file header
        IOHelper.readUInt16LE(readable); // version
        let flags = IOHelper.readUInt16LE(readable);
        let compressionMethod = IOHelper.readUInt16LE(readable);
        let compressed = compressionMethod !== 0;
        if (compressed && compressionMethod !== ZipEntry.CompressionMethodDeflate) {
            return null;
        }
        IOHelper.readInt16LE(this._readable); // last mod file time
        IOHelper.readInt16LE(this._readable); // last mod file date
        IOHelper.readInt32LE(readable); // crc-32
        IOHelper.readInt32LE(readable); // compressed size
        let uncompressedSize = IOHelper.readInt32LE(readable);
        let fileNameLength = IOHelper.readInt16LE(readable);
        let extraFieldLength = IOHelper.readInt16LE(readable);
        let fname = IOHelper.toString(IOHelper.readByteArray(readable, fileNameLength), 'utf-8');
        readable.skip(extraFieldLength);
        // 4.3.8 File Data
        let data;
        if (compressed) {
            let target = ByteBuffer.empty();
            let z = new Inflate(this._readable);
            let buffer = new Uint8Array(65536);
            while (true) {
                let bytes = z.readBytes(buffer, 0, buffer.length);
                target.write(buffer, 0, bytes);
                if (bytes < buffer.length) {
                    break;
                }
            }
            data = target.toArray();
        }
        else {
            data = IOHelper.readByteArray(this._readable, uncompressedSize);
        }
        // 4.3.9 Data Descriptor
        // 4.3.9.1
        if ((flags & 8) !== 0) {
            let crc32 = IOHelper.readInt32LE(this._readable);
            // 4.3.9.3
            if (crc32 === ZipEntry.OptionalDataDescriptorSignature) {
                IOHelper.readInt32LE(this._readable); // real crc
            }
            IOHelper.readInt32LE(this._readable); // compressed size
            IOHelper.readInt32LE(this._readable); // uncompressed size
        }
        return new ZipEntry(fname, data);
    }
}

/**
 * This ScoreImporter can read Guitar Pro 7 (gp) files.
 */
class Gp7Importer extends ScoreImporter {
    get name() {
        return 'Guitar Pro 7';
    }
    constructor() {
        super();
    }
    readScore() {
        // at first we need to load the binary file system
        // from the GPX container
        Logger.debug(this.name, 'Loading ZIP entries');
        let fileSystem = new ZipReader(this.data);
        let entries;
        try {
            entries = fileSystem.read();
        }
        catch (e) {
            throw new UnsupportedFormatError('No Zip archive', e);
        }
        Logger.debug(this.name, 'Zip entries loaded');
        let xml = null;
        let binaryStylesheetData = null;
        let partConfigurationData = null;
        for (let entry of entries) {
            switch (entry.fileName) {
                case 'score.gpif':
                    xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                    break;
                case 'BinaryStylesheet':
                    binaryStylesheetData = entry.data;
                    break;
                case 'PartConfiguration':
                    partConfigurationData = entry.data;
                    break;
            }
        }
        if (!xml) {
            throw new UnsupportedFormatError('No score.gpif found in zip archive');
        }
        // the score.gpif file within this filesystem stores
        // the score information as XML we need to parse.
        Logger.debug(this.name, 'Start Parsing score.gpif');
        let gpifParser = new GpifParser();
        gpifParser.parseXml(xml, this.settings);
        Logger.debug(this.name, 'score.gpif parsed');
        let score = gpifParser.score;
        if (binaryStylesheetData) {
            Logger.debug(this.name, 'Start Parsing BinaryStylesheet');
            let stylesheet = new BinaryStylesheet(binaryStylesheetData);
            stylesheet.apply(score);
            Logger.debug(this.name, 'BinaryStylesheet parsed');
        }
        if (partConfigurationData) {
            Logger.debug(this.name, 'Start Parsing Part Configuration');
            let partConfigurationParser = new PartConfiguration(partConfigurationData);
            partConfigurationParser.apply(score);
            Logger.debug(this.name, 'Part Configuration parsed');
        }
        return score;
    }
}

class EndOfReaderError extends AlphaTabError {
    constructor() {
        super(AlphaTabErrorType.Format, 'Unexpected end of data within reader');
        Object.setPrototypeOf(this, EndOfReaderError.prototype);
    }
}

/**
 * This utility public class allows bitwise reading of a stream
 */
class BitReader {
    constructor(source) {
        this._currentByte = 0;
        this._position = BitReader.ByteSize;
        this._source = source;
    }
    readByte() {
        return this.readBits(8);
    }
    readBytes(count) {
        const bytes = new Uint8Array(count);
        for (let i = 0; i < count; i++) {
            bytes[i] = this.readByte() & 0xff;
        }
        return bytes;
    }
    readBits(count) {
        let bits = 0;
        let i = count - 1;
        while (i >= 0) {
            bits = bits | (this.readBit() << i);
            i--;
        }
        return bits;
    }
    readBitsReversed(count) {
        let bits = 0;
        for (let i = 0; i < count; i++) {
            bits = bits | (this.readBit() << i);
        }
        return bits;
    }
    readBit() {
        // need a new byte?
        if (this._position >= 8) {
            this._currentByte = this._source.readByte();
            if (this._currentByte === -1) {
                throw new EndOfReaderError();
            }
            this._position = 0;
        }
        // shift the desired byte to the least significant bit and
        // get the value using masking
        const value = (this._currentByte >> (BitReader.ByteSize - this._position - 1)) & 0x01;
        this._position++;
        return value;
    }
    readAll() {
        let all = ByteBuffer.empty();
        try {
            while (true) {
                all.writeByte(this.readByte() & 0xff);
            }
        }
        catch (e) {
            if (!(e instanceof EndOfReaderError)) {
                throw e;
            }
        }
        return all.toArray();
    }
}
BitReader.ByteSize = 8;

/**
 * this public class represents a file within the GpxFileSystem
 */
class GpxFile {
    constructor() {
        this.fileName = '';
        this.fileSize = 0;
        this.data = null;
    }
}
/**
 * This public class represents the file system structure
 * stored within a GPX container file.
 */
class GpxFileSystem {
    /**
     * Creates a new GpxFileSystem instance
     */
    constructor() {
        /**
         * Gets the list of files stored in this FileSystem.
         */
        this.files = [];
        this.files = [];
        this.fileFilter = s => {
            return true;
        };
    }
    /**
     * Load a complete FileSystem to the memory.
     * @param s the binary source to read from.
     * @returns
     */
    load(s) {
        let src = new BitReader(s);
        this.readBlock(src);
    }
    /**
     * Reads the 4 byte header as a string.
     * @param src the BitInput to read from
     * @returns a string with 4 characters representing the header.
     */
    readHeader(src) {
        return this.getString(src.readBytes(4), 0, 4);
    }
    /**
     * Decompresses the given bitinput using the GPX compression format. Only use this method
     * if you are sure the binary data is compressed using the GPX format. Otherwise unexpected
     * behavior can occure.
     * @param src the bitInput to read the data from
     * @param skipHeader true if the header should NOT be included in the result byteset, otherwise false
     * @returns the decompressed byte data. if skipHeader is set to false the BCFS header is included.
     */
    decompress(src, skipHeader = false) {
        let uncompressed = ByteBuffer.empty();
        let buffer;
        let expectedLength = this.getInteger(src.readBytes(4), 0);
        try {
            // as long we reach our expected length we try to decompress, a EOF might occure.
            while (uncompressed.length < expectedLength) {
                // compression flag
                let flag = src.readBits(1);
                if (flag === 1) {
                    // get offset and size of the content we need to read.
                    // compressed does mean we already have read the data and need
                    // to copy it from our uncompressed buffer to the end
                    let wordSize = src.readBits(4);
                    let offset = src.readBitsReversed(wordSize);
                    let size = src.readBitsReversed(wordSize);
                    // the offset is relative to the end
                    let sourcePosition = uncompressed.length - offset;
                    let toRead = Math.min(offset, size);
                    // get the subbuffer storing the data and add it again to the end
                    buffer = uncompressed.getBuffer();
                    uncompressed.write(buffer, sourcePosition, toRead);
                }
                else {
                    // on raw content we need to read the data from the source buffer
                    let size = src.readBitsReversed(2);
                    for (let i = 0; i < size; i++) {
                        uncompressed.writeByte(src.readByte());
                    }
                }
            }
        }
        catch (e) {
            if (!(e instanceof EndOfReaderError)) {
                throw e;
            }
        }
        buffer = uncompressed.getBuffer();
        let resultOffset = skipHeader ? 4 : 0;
        let resultSize = uncompressed.length - resultOffset;
        let result = new Uint8Array(resultSize);
        let count = resultSize;
        result.set(buffer.subarray(resultOffset, resultOffset + count), 0);
        return result;
    }
    /**
     * Reads a block from the given data source.
     * @param data the data source
     * @returns
     */
    readBlock(data) {
        let header = this.readHeader(data);
        if (header === 'BCFZ') {
            // decompress the data and use this
            // we will skip the header
            this.readUncompressedBlock(this.decompress(data, true));
        }
        else if (header === 'BCFS') {
            this.readUncompressedBlock(data.readAll());
        }
        else {
            throw new UnsupportedFormatError('Unsupported format');
        }
    }
    /**
     * Reads an uncompressed data block into the model.
     * @param data the data store to read from.
     */
    readUncompressedBlock(data) {
        // the uncompressed block contains a list of filesystem entires
        // as long we have data we will try to read more entries
        // the first sector (0x1000 bytes) is empty (filled with 0xFF)
        // so the first sector starts at 0x1000
        // (we already skipped the 4 byte header so we don't have to take care of this)
        let sectorSize = 0x1000;
        let offset = sectorSize;
        // we always need 4 bytes (+3 including offset) to read the type
        while (offset + 3 < data.length) {
            let entryType = this.getInteger(data, offset);
            if (entryType === 2) {
                // file structure:
                //   offset |   type   |   size   | what
                //  --------+----------+----------+------
                //    0x04  |  string  |  127byte | FileName (zero terminated)
                //    0x83  |    ?     |    9byte | Unknown
                //    0x8c  |   int    |    4byte | FileSize
                //    0x90  |    ?     |    4byte | Unknown
                //    0x94  |   int[]  |  n*4byte | Indices of the sector containing the data (end is marked with 0)
                // The sectors marked at 0x94 are absolutely positioned ( 1*0x1000 is sector 1, 2*0x1000 is sector 2,...)
                let file = new GpxFile();
                file.fileName = this.getString(data, offset + 0x04, 127);
                file.fileSize = this.getInteger(data, offset + 0x8c);
                // store file if needed
                let storeFile = !this.fileFilter || this.fileFilter(file.fileName);
                if (storeFile) {
                    this.files.push(file);
                }
                // we need to iterate the blocks because we need to move after the last datasector
                let dataPointerOffset = offset + 0x94;
                let sector = 0;
                // this var is storing the sector index
                let sectorCount = 0;
                // we're keeping count so we can calculate the offset of the array item
                // as long we have data blocks we need to iterate them,
                let fileData = storeFile ? ByteBuffer.withCapacity(file.fileSize) : null;
                while (true) {
                    sector = this.getInteger(data, dataPointerOffset + 4 * sectorCount++);
                    if (sector !== 0) {
                        // the next file entry starts after the last data sector so we
                        // move the offset along
                        offset = sector * sectorSize;
                        // write data only if needed
                        if (storeFile) {
                            fileData.write(data, offset, sectorSize);
                        }
                    }
                    else {
                        break;
                    }
                }
                if (storeFile) {
                    // trim data to filesize if needed
                    file.data = new Uint8Array(Math.min(file.fileSize, fileData.length));
                    // we can use the getBuffer here because we are intelligent and know not to read the empty data.
                    let raw = fileData.toArray();
                    file.data.set(raw.subarray(0, 0 + file.data.length), 0);
                }
            }
            // let's move to the next sector
            offset += sectorSize;
        }
    }
    /**
     * Reads a zeroterminated ascii string from the given source
     * @param data the data source to read from
     * @param offset the offset to start reading from
     * @param length the max length to read
     * @returns the ascii string read from the datasource.
     */
    getString(data, offset, length) {
        let buf = '';
        for (let i = 0; i < length; i++) {
            let code = data[offset + i] & 0xff;
            if (code === 0) {
                break;
                // zero terminated string
            }
            buf += String.fromCharCode(code);
        }
        return buf;
    }
    /**
     * Reads an 4 byte signed integer from the given source
     * @param data the data source to read from
     * @param offset offset the offset to start reading from
     * @returns
     */
    getInteger(data, offset) {
        return (data[offset + 3] << 24) | (data[offset + 2] << 16) | (data[offset + 1] << 8) | data[offset];
    }
}
GpxFileSystem.HeaderBcFs = 'BCFS';
GpxFileSystem.HeaderBcFz = 'BCFZ';
GpxFileSystem.ScoreGpif = 'score.gpif';
GpxFileSystem.BinaryStylesheet = 'BinaryStylesheet';
GpxFileSystem.PartConfiguration = 'PartConfiguration';

/**
 * This ScoreImporter can read Guitar Pro 6 (gpx) files.
 */
class GpxImporter extends ScoreImporter {
    get name() {
        return 'Guitar Pro 6';
    }
    constructor() {
        super();
    }
    readScore() {
        // at first we need to load the binary file system
        // from the GPX container
        Logger.debug(this.name, 'Loading GPX filesystem');
        let fileSystem = new GpxFileSystem();
        fileSystem.fileFilter = s => {
            return s.endsWith('score.gpif') || s.endsWith('BinaryStylesheet') || s.endsWith('PartConfiguration');
        };
        fileSystem.load(this.data);
        Logger.debug(this.name, 'GPX filesystem loaded');
        let xml = null;
        let binaryStylesheetData = null;
        let partConfigurationData = null;
        for (let entry of fileSystem.files) {
            switch (entry.fileName) {
                case 'score.gpif':
                    xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                    break;
                case 'BinaryStylesheet':
                    binaryStylesheetData = entry.data;
                    break;
                case 'PartConfiguration':
                    partConfigurationData = entry.data;
                    break;
            }
        }
        if (!xml) {
            throw new UnsupportedFormatError('No score.gpif found in GPX');
        }
        // the score.gpif file within this filesystem stores
        // the score information as XML we need to parse.
        Logger.debug(this.name, 'Start Parsing score.gpif');
        let gpifParser = new GpifParser();
        gpifParser.parseXml(xml, this.settings);
        Logger.debug(this.name, 'score.gpif parsed');
        let score = gpifParser.score;
        if (binaryStylesheetData) {
            Logger.debug(this.name, 'Start Parsing BinaryStylesheet');
            let binaryStylesheet = new BinaryStylesheet(binaryStylesheetData);
            binaryStylesheet.apply(score);
            Logger.debug(this.name, 'BinaryStylesheet parsed');
        }
        if (partConfigurationData) {
            Logger.debug(this.name, 'Start Parsing Part Configuration');
            let partConfiguration = new PartConfiguration(partConfigurationData);
            partConfiguration.apply(score);
            Logger.debug(this.name, 'Part Configuration parsed');
        }
        return score;
    }
}

class MusicXmlImporter extends ScoreImporter {
    constructor() {
        super();
        this._currentPartGroup = null;
        this._trackFirstMeasureNumber = 0;
        this._maxVoices = 0;
        this._currentDirection = null;
        this._currentChord = null;
        this._divisionsPerQuarterNote = 0;
        this._voiceOfStaff = new Map();
        this._isBeamContinue = false;
        this._previousBeatWasPulled = false;
        this._previousBeat = null;
    }
    get name() {
        return 'MusicXML';
    }
    readScore() {
        this._trackById = new Map();
        this._partGroups = new Map();
        this._tieStarts = [];
        this._tieStartIds = new Map();
        this._slurStarts = new Map();
        let xml = IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
        let dom = new XmlDocument();
        try {
            dom.parse(xml);
        }
        catch (e) {
            throw new UnsupportedFormatError('Unsupported format');
        }
        this._score = new Score();
        this._score.tempo = 120;
        this.parseDom(dom);
        // merge partgroups into a single track with multiple staves
        if (this.settings.importer.mergePartGroupsInMusicXml) {
            this.mergePartGroups();
        }
        this._score.finish(this.settings);
        this._score.rebuildRepeatGroups();
        return this._score;
    }
    mergePartGroups() {
        let anyMerged = false;
        for (const tracks of this._partGroups.values()) {
            if (tracks.length > 1) {
                this.mergeGroup(tracks);
                anyMerged = true;
            }
        }
        // if any groups were merged, we need to rebuild the indexes
        if (anyMerged) {
            for (let i = 0; i < this._score.tracks.length; i++) {
                this._score.tracks[i].index = i;
            }
        }
    }
    mergeGroup(partGroup) {
        let primaryTrack = partGroup[0];
        for (let i = 1; i < partGroup.length; i++) {
            // merge staves over to primary track
            let secondaryTrack = partGroup[i];
            for (let staff of secondaryTrack.staves) {
                primaryTrack.addStaff(staff);
            }
            // remove track from score
            let trackIndex = this._score.tracks.indexOf(secondaryTrack);
            this._score.tracks.splice(trackIndex, 1);
        }
    }
    parseDom(dom) {
        let root = dom.firstElement;
        if (!root) {
            throw new UnsupportedFormatError('Unsupported format');
        }
        switch (root.localName) {
            case 'score-partwise':
                this.parsePartwise(root);
                break;
            case 'score-timewise':
                // ParseTimewise(root);
                break;
            default:
                throw new UnsupportedFormatError('Unsupported format');
        }
    }
    parsePartwise(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'work':
                        this.parseWork(c);
                        break;
                    case 'movement-title':
                        this._score.title = c.innerText;
                        break;
                    case 'identification':
                        this.parseIdentification(c);
                        break;
                    case 'part-list':
                        this.parsePartList(c);
                        break;
                    case 'part':
                        this.parsePart(c);
                        break;
                }
            }
        }
    }
    parseWork(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'work-title':
                        this._score.title = c.innerText;
                        break;
                }
            }
        }
    }
    parsePart(element) {
        let id = element.getAttribute('id');
        if (!this._trackById.has(id)) {
            if (this._trackById.size === 1) {
                for (const [x, t] of this._trackById) {
                    if (t.staves.length === 0 || t.staves[0].bars.length === 0) {
                        id = x;
                    }
                }
                if (!this._trackById.has(id)) {
                    return;
                }
            }
            else {
                return;
            }
        }
        let track = this._trackById.get(id);
        let isFirstMeasure = true;
        this._maxVoices = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'measure':
                        if (this.parseMeasure(c, track, isFirstMeasure)) {
                            isFirstMeasure = false;
                        }
                        break;
                }
            }
        }
        // ensure voices for all bars
        for (let staff of track.staves) {
            for (let bar of staff.bars) {
                this.ensureVoices(bar);
            }
        }
    }
    parseMeasure(element, track, isFirstMeasure) {
        if (element.getAttribute('implicit') === 'yes' && element.getElementsByTagName('note', false).length === 0) {
            return false;
        }
        let barIndex = 0;
        if (isFirstMeasure) {
            this._divisionsPerQuarterNote = 0;
            this._trackFirstMeasureNumber = parseInt(element.getAttribute('number'));
            if (!this._trackFirstMeasureNumber) {
                this._trackFirstMeasureNumber = 0;
            }
            barIndex = 0;
        }
        else {
            barIndex = parseInt(element.getAttribute('number'));
            if (!barIndex) {
                return false;
            }
            barIndex -= this._trackFirstMeasureNumber;
        }
        // try to find out the number of staffs required
        if (isFirstMeasure) {
            let attributes = element.getElementsByTagName('attributes', false);
            if (attributes.length > 0) {
                let stavesElements = attributes[0].getElementsByTagName('staves', false);
                if (stavesElements.length > 0) {
                    let staves = parseInt(stavesElements[0].innerText);
                    track.ensureStaveCount(staves);
                }
            }
        }
        // create empty bars to the current index
        let bars = new Array(track.staves.length);
        let masterBar = null;
        for (let b = track.staves[0].bars.length; b <= barIndex; b++) {
            for (let s = 0; s < track.staves.length; s++) {
                let bar = new Bar();
                bars[s] = bar;
                if (track.staves[s].bars.length > 0) {
                    let previousBar = track.staves[s].bars[track.staves[s].bars.length - 1];
                    bar.clef = previousBar.clef;
                }
                masterBar = this.getOrCreateMasterBar(barIndex);
                track.staves[s].addBar(bar);
                this.ensureVoices(bar);
            }
        }
        if (masterBar) {
            let attributesParsed = false;
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'note':
                            this.parseNoteBeat(c, bars);
                            break;
                        case 'forward':
                            this.parseForward(c, bars);
                            break;
                        case 'direction':
                            this.parseDirection(c, masterBar);
                            break;
                        case 'attributes':
                            if (!attributesParsed) {
                                this.parseAttributes(c, bars, masterBar, track);
                                attributesParsed = true;
                            }
                            break;
                        case 'harmony':
                            this.parseHarmony(c, track);
                            break;
                        case 'sound':
                            // TODO
                            break;
                        case 'barline':
                            this.parseBarline(c, masterBar);
                            break;
                    }
                }
            }
        }
        return true;
    }
    ensureVoices(bar) {
        while (bar.voices.length < this._maxVoices) {
            let emptyVoice = new Voice$1();
            bar.addVoice(emptyVoice);
            let emptyBeat = new Beat();
            emptyBeat.isEmpty = true;
            emptyBeat.chordId = this._currentChord;
            emptyVoice.addBeat(emptyBeat);
        }
    }
    getOrCreateBeat(element, bars, chord) {
        let voiceIndex = 0;
        let voiceNodes = element.getElementsByTagName('voice', false);
        if (voiceNodes.length > 0) {
            voiceIndex = parseInt(voiceNodes[0].innerText) - 1;
        }
        let previousBeatWasPulled = this._previousBeatWasPulled;
        this._previousBeatWasPulled = false;
        let staffElement = element.getElementsByTagName('staff', false);
        let staff = 1;
        if (staffElement.length > 0) {
            staff = parseInt(staffElement[0].innerText);
            // in case we have a beam with a staff-jump we pull the note to the previous staff
            if ((this._isBeamContinue || previousBeatWasPulled) &&
                this._previousBeat.voice.bar.staff.index !== staff - 1) {
                staff = this._previousBeat.voice.bar.staff.index + 1;
                this._previousBeatWasPulled = true;
            }
            let staffId = bars[0].staff.track.index + '-' + staff;
            if (!this._voiceOfStaff.has(staffId)) {
                this._voiceOfStaff.set(staffId, voiceIndex);
            }
        }
        staff--;
        let bar;
        if (staff < 0) {
            bar = bars[0];
        }
        else if (staff >= bars.length) {
            bar = bars[bars.length - 1];
        }
        else {
            bar = bars[staff];
        }
        let beat;
        let voice = this.getOrCreateVoice(bar, voiceIndex);
        if ((chord && voice.beats.length > 0) || (voice.beats.length === 1 && voice.isEmpty)) {
            beat = voice.beats[voice.beats.length - 1];
        }
        else {
            beat = new Beat();
            beat.isEmpty = false;
            voice.addBeat(beat);
        }
        this._isBeamContinue = false;
        this._previousBeat = beat;
        return beat;
    }
    parseForward(element, bars) {
        let beat = this.getOrCreateBeat(element, bars, false);
        let durationInDivisions = parseInt(element.findChildElement('duration').innerText);
        let duration = (durationInDivisions * Duration.Quarter) / this._divisionsPerQuarterNote;
        let durations = [
            Duration.SixtyFourth,
            Duration.ThirtySecond,
            Duration.Sixteenth,
            Duration.Eighth,
            Duration.Quarter,
            Duration.Half,
            Duration.Whole
        ];
        for (let d of durations) {
            if (duration >= d) {
                beat.duration = d;
                duration -= d;
                break;
            }
        }
        beat.isEmpty = false;
    }
    parseStaffDetails(element, track) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'staff-lines':
                        for (let staff of track.staves) {
                            staff.stringTuning.tunings = new Array(parseInt(c.innerText)).fill(0);
                        }
                        break;
                    case 'staff-tuning':
                        this.parseStaffTuning(c, track);
                        break;
                }
            }
        }
        for (let staff of track.staves) {
            if (this.isEmptyTuning(staff.tuning)) {
                staff.stringTuning.tunings = [];
            }
        }
    }
    parseStaffTuning(element, track) {
        let line = parseInt(element.getAttribute('line'));
        let tuningStep = 'C';
        let tuningOctave = '';
        let tuningAlter = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'tuning-step':
                        tuningStep = c.innerText;
                        break;
                    case 'tuning-alter':
                        tuningAlter = parseInt(c.innerText);
                        break;
                    case 'tuning-octave':
                        tuningOctave = c.innerText;
                        break;
                }
            }
        }
        let tuning = ModelUtils.getTuningForText(tuningStep + tuningOctave) + tuningAlter;
        for (let staff of track.staves) {
            staff.tuning[staff.tuning.length - line] = tuning;
        }
    }
    parseHarmony(element, track) {
        let rootStep = null;
        let rootAlter = '';
        // let kind: string | null = null;
        // let kindText: string | null = null;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'root':
                        for (let rootChild of c.childNodes) {
                            if (rootChild.nodeType === XmlNodeType.Element) {
                                switch (rootChild.localName) {
                                    case 'root-step':
                                        rootStep = rootChild.innerText;
                                        break;
                                    case 'root-alter':
                                        switch (parseInt(c.innerText)) {
                                            case -2:
                                                rootAlter = ' bb';
                                                break;
                                            case -1:
                                                rootAlter = ' b';
                                                break;
                                            case 0:
                                                rootAlter = '';
                                                break;
                                            case 1:
                                                rootAlter = ' #';
                                                break;
                                            case 2:
                                                rootAlter = ' ##';
                                                break;
                                        }
                                        break;
                                }
                            }
                        }
                        break;
                }
            }
        }
        let chord = new Chord();
        chord.name = rootStep + rootAlter;
        // TODO: find proper names for the rest
        // switch (kind)
        // {
        //    // triads
        //    case "major":
        //        break;
        //    case "minor":
        //        chord.Name += "m";
        //        break;
        //    // Sevenths
        //    case "augmented":
        //        break;
        //    case "diminished":
        //        break;
        //    case "dominant":
        //        break;
        //    case "major-seventh":
        //        chord.Name += "7M";
        //        break;
        //    case "minor-seventh":
        //        chord.Name += "m7";
        //        break;
        //    case "diminished-seventh":
        //        break;
        //    case "augmented-seventh":
        //        break;
        //    case "half-diminished":
        //        break;
        //    case "major-minor":
        //        break;
        //    // Sixths
        //    case "major-sixth":
        //        break;
        //    case "minor-sixth":
        //        break;
        //    // Ninths
        //    case "dominant-ninth":
        //        break;
        //    case "major-ninth":
        //        break;
        //    case "minor-ninth":
        //        break;
        //    // 11ths
        //    case "dominant-11th":
        //        break;
        //    case "major-11th":
        //        break;
        //    case "minor-11th":
        //        break;
        //    // 13ths
        //    case "dominant-13th":
        //        break;
        //    case "major-13th":
        //        break;
        //    case "minor-13th":
        //        break;
        //    // Suspended
        //    case "suspended-second":
        //        break;
        //    case "suspended-fourth":
        //        break;
        //    // Functional sixths
        //    case "Neapolitan":
        //        break;
        //    case "Italian":
        //        break;
        //    case "French":
        //        break;
        //    case "German":
        //        break;
        //    // Other
        //    case "pedal":
        //        break;
        //    case "power":
        //        break;
        //    case "Tristan":
        //        break;
        // }
        // var degree = element.GetElementsByTagName("degree");
        // if (degree.Length > 0)
        // {
        //    var degreeValue = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-value")[0]);
        //    var degreeAlter = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-alter")[0]);
        //    var degreeType = Platform.GetNodeValue(degree[0].GetElementsByTagName("degree-type")[0]);
        //    if (!string.IsNullOrEmpty(degreeType))
        //    {
        //        chord.Name += degreeType;
        //    }
        //    if (!string.IsNullOrEmpty(degreeValue))
        //    {
        //        chord.Name += "#" + degreeValue;
        //    }
        // }
        this._currentChord = ModelUtils.newGuid();
        for (let staff of track.staves) {
            staff.addChord(this._currentChord, chord);
        }
    }
    parseBarline(element, masterBar) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'repeat':
                        this.parseRepeat(c, masterBar);
                        break;
                    case 'ending':
                        this.parseEnding(c, masterBar);
                        break;
                }
            }
        }
    }
    parseEnding(element, masterBar) {
        let num = parseInt(element.getAttribute('number'));
        if (num > 0) {
            --num;
            masterBar.alternateEndings = masterBar.alternateEndings | ((0x01 << num) & 0xff);
        }
    }
    parseRepeat(element, masterBar) {
        let direction = element.getAttribute('direction');
        let times = parseInt(element.getAttribute('times'));
        if (times < 0 || isNaN(times)) {
            times = 2;
        }
        if (direction === 'backward') {
            masterBar.repeatCount = times;
        }
        else if (direction === 'forward') {
            masterBar.isRepeatStart = true;
        }
    }
    parseNoteBeat(element, bars) {
        let chord = element.getElementsByTagName('chord', false).length > 0;
        let beat = this.getOrCreateBeat(element, bars, chord);
        if (!beat.chordId && this._currentChord) {
            beat.chordId = this._currentChord;
            this._currentChord = null;
        }
        if (this._currentDirection) {
            beat.text = this._currentDirection;
            this._currentDirection = null;
        }
        let note = new Note();
        beat.voice.isEmpty = false;
        beat.isEmpty = false;
        beat.addNote(note);
        beat.dots = 0;
        let isFullBarRest = false;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'grace':
                        // var slash = e.GetAttribute("slash");
                        // var makeTime = Platform.ParseInt(e.GetAttribute("make-time"));
                        // var stealTimePrevious = Platform.ParseInt(e.GetAttribute("steal-time-previous"));
                        // var stealTimeFollowing = Platform.ParseInt(e.GetAttribute("steal-time-following"));
                        beat.graceType = GraceType.BeforeBeat;
                        beat.duration = Duration.ThirtySecond;
                        break;
                    case 'duration':
                        if (beat.isRest && !isFullBarRest) {
                            // unit: divisions per quarter note
                            let duration = parseInt(c.innerText);
                            switch (duration) {
                                case 1:
                                    beat.duration = Duration.Whole;
                                    break;
                                case 2:
                                    beat.duration = Duration.Half;
                                    break;
                                case 4:
                                    beat.duration = Duration.Quarter;
                                    break;
                                case 8:
                                    beat.duration = Duration.Eighth;
                                    break;
                                case 16:
                                    beat.duration = Duration.Sixteenth;
                                    break;
                                case 32:
                                    beat.duration = Duration.ThirtySecond;
                                    break;
                                case 64:
                                    beat.duration = Duration.SixtyFourth;
                                    break;
                                default:
                                    beat.duration = Duration.Quarter;
                                    break;
                            }
                        }
                        break;
                    case 'tie':
                        this.parseTied(c, note);
                        break;
                    case 'cue':
                        // not supported
                        break;
                    case 'instrument':
                        // not supported
                        break;
                    case 'type':
                        beat.duration = this.getDuration(c.innerText);
                        if (beat.graceType !== GraceType.None && beat.duration < Duration.Sixteenth) {
                            beat.duration = Duration.Eighth;
                        }
                        break;
                    case 'dot':
                        beat.dots++;
                        break;
                    case 'accidental':
                        this.parseAccidental(c, note);
                        break;
                    case 'time-modification':
                        this.parseTimeModification(c, beat);
                        break;
                    case 'stem':
                        // not supported
                        break;
                    case 'notehead':
                        if (c.getAttribute('parentheses') === 'yes') {
                            note.isGhost = true;
                        }
                        break;
                    case 'beam':
                        let beamMode = c.innerText;
                        if (beamMode === 'continue') {
                            this._isBeamContinue = true;
                        }
                        break;
                    case 'notations':
                        this.parseNotations(c, beat, note);
                        break;
                    case 'lyric':
                        this.parseLyric(c, beat);
                        break;
                    case 'pitch':
                        this.parsePitch(c, note);
                        break;
                    case 'unpitched':
                        this.parseUnpitched(c, note);
                        break;
                    case 'rest':
                        isFullBarRest = c.getAttribute('measure') === 'yes';
                        beat.isEmpty = false;
                        beat.notes = [];
                        beat.duration = Duration.Whole;
                        break;
                }
            }
        }
        // check if new note is duplicate on string
        if (note.isStringed) {
            for (let i = 0; i < beat.notes.length; i++) {
                if (beat.notes[i].string === note.string && beat.notes[i] !== note) {
                    beat.removeNote(note);
                    break;
                }
            }
        }
    }
    getDuration(text) {
        switch (text) {
            case '256th':
            case '128th':
            case '64th':
                return Duration.SixtyFourth;
            case '32nd':
                return Duration.ThirtySecond;
            case '16th':
                return Duration.Sixteenth;
            case 'eighth':
                return Duration.Eighth;
            case 'quarter':
                return Duration.Quarter;
            case 'half':
                return Duration.Half;
            case 'long':
            case 'breve':
            case 'whole':
                return Duration.Whole;
        }
        return Duration.Quarter;
    }
    parseLyric(element, beat) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'text':
                        if (beat.text) {
                            beat.text += ' ' + c.innerText;
                        }
                        else {
                            beat.text = c.innerText;
                        }
                        break;
                }
            }
        }
    }
    parseAccidental(element, note) {
        switch (element.innerText) {
            case 'sharp':
                note.accidentalMode = NoteAccidentalMode.ForceSharp;
                break;
            case 'natural':
                note.accidentalMode = NoteAccidentalMode.ForceNatural;
                break;
            case 'flat':
                note.accidentalMode = NoteAccidentalMode.ForceFlat;
                break;
        }
    }
    parseTied(element, note) {
        if (element.getAttribute('type') === 'start') {
            if (!this._tieStartIds.has(note.id)) {
                this._tieStartIds.set(note.id, true);
                this._tieStarts.push(note);
            }
        }
        else if (element.getAttribute('type') === 'stop' && this._tieStarts.length > 0 && !note.isTieDestination) {
            note.isTieDestination = true;
            note.tieOrigin = this._tieStarts[0];
            this._tieStarts.splice(0, 1);
            this._tieStartIds.delete(note.id);
        }
    }
    parseNotations(element, beat, note) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'articulations':
                        this.parseArticulations(c, note);
                        break;
                    case 'tied':
                        this.parseTied(c, note);
                        break;
                    case 'slide':
                    case 'glissando':
                        if (c.getAttribute('type') === 'start') {
                            note.slideOutType = SlideOutType.Shift;
                        }
                        break;
                    case 'dynamics':
                        this.parseDynamics(c, beat);
                        break;
                    case 'technical':
                        this.parseTechnical(c, note);
                        break;
                    case 'ornaments':
                        this.parseOrnaments(c, note);
                        break;
                    case 'slur':
                        let slurNumber = c.getAttribute('number');
                        if (!slurNumber) {
                            slurNumber = '1';
                        }
                        // slur numbers are unique in the way that they have the same ID across 
                        // staffs/tracks etc. as long they represent the logically same slur. 
                        // but in our case it must be globally unique to link the correct notes. 
                        // adding the staff ID should be enough to achieve this
                        slurNumber = beat.voice.bar.staff.index + '_' + slurNumber;
                        switch (c.getAttribute('type')) {
                            case 'start':
                                this._slurStarts.set(slurNumber, note);
                                break;
                            case 'stop':
                                if (this._slurStarts.has(slurNumber)) {
                                    note.isSlurDestination = true;
                                    let slurStart = this._slurStarts.get(slurNumber);
                                    slurStart.slurDestination = note;
                                    note.slurOrigin = slurStart;
                                }
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseOrnaments(element, note) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'tremolo':
                        let tremoloSpeed = parseInt(c.innerText);
                        switch (tremoloSpeed) {
                            case 1:
                                note.beat.tremoloSpeed = Duration.Eighth;
                                break;
                            case 2:
                                note.beat.tremoloSpeed = Duration.Sixteenth;
                                break;
                            case 3:
                                note.beat.tremoloSpeed = Duration.ThirtySecond;
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseTechnical(element, note) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'string':
                        note.string = parseInt(c.innerText);
                        if (note.string !== -2147483648) {
                            note.string = note.beat.voice.bar.staff.tuning.length - note.string + 1;
                        }
                        break;
                    case 'fret':
                        note.fret = parseInt(c.innerText);
                        break;
                    case 'down-bow':
                        note.beat.pickStroke = PickStroke.Down;
                        break;
                    case 'up-bow':
                        note.beat.pickStroke = PickStroke.Up;
                        break;
                }
            }
        }
        if (note.string === -2147483648 || note.fret === -2147483648) {
            note.string = -1;
            note.fret = -1;
        }
    }
    parseArticulations(element, note) {
        for (let c of element.childNodes) {
            switch (c.localName) {
                case 'accent':
                    note.accentuated = AccentuationType.Normal;
                    break;
                case 'strong-accent':
                    note.accentuated = AccentuationType.Heavy;
                    break;
                case 'staccato':
                case 'detached-legato':
                    note.isStaccato = true;
                    break;
            }
        }
    }
    parseDynamics(element, beat) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'p':
                        beat.dynamics = DynamicValue.P;
                        break;
                    case 'pp':
                        beat.dynamics = DynamicValue.PP;
                        break;
                    case 'ppp':
                        beat.dynamics = DynamicValue.PPP;
                        break;
                    case 'f':
                        beat.dynamics = DynamicValue.F;
                        break;
                    case 'ff':
                        beat.dynamics = DynamicValue.FF;
                        break;
                    case 'fff':
                        beat.dynamics = DynamicValue.FFF;
                        break;
                    case 'mp':
                        beat.dynamics = DynamicValue.MP;
                        break;
                    case 'mf':
                        beat.dynamics = DynamicValue.MF;
                        break;
                }
            }
        }
    }
    parseTimeModification(element, beat) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'actual-notes':
                        beat.tupletNumerator = parseInt(c.innerText);
                        break;
                    case 'normal-notes':
                        beat.tupletDenominator = parseInt(c.innerText);
                        break;
                }
            }
        }
    }
    parseUnpitched(element, note) {
        let step = '';
        let semitones = 0;
        let octave = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'display-step':
                        step = c.innerText;
                        break;
                    case 'display-alter':
                        semitones = parseInt(c.innerText);
                        break;
                    case 'display-octave':
                        // 0-9, 4 for middle C
                        octave = parseInt(c.innerText);
                        break;
                }
            }
        }
        let value = octave * 12 + ModelUtils.getToneForText(step) + semitones;
        note.octave = (value / 12) | 0;
        note.tone = value - note.octave * 12;
    }
    parsePitch(element, note) {
        let step = '';
        let semitones = 0;
        let octave = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'step':
                        step = c.innerText;
                        break;
                    case 'alter':
                        semitones = parseFloat(c.innerText);
                        if (isNaN(semitones)) {
                            semitones = 0;
                        }
                        break;
                    case 'octave':
                        // 0-9, 4 for middle C
                        octave = parseInt(c.innerText) + 1;
                        break;
                }
            }
        }
        let value = octave * 12 + ModelUtils.getToneForText(step) + (semitones | 0);
        note.octave = (value / 12) | 0;
        note.tone = value - note.octave * 12;
    }
    getOrCreateVoice(bar, index) {
        if (index < bar.voices.length) {
            return bar.voices[index];
        }
        for (let i = bar.voices.length; i <= index; i++) {
            bar.addVoice(new Voice$1());
        }
        this._maxVoices = Math.max(this._maxVoices, bar.voices.length);
        return bar.voices[index];
    }
    parseDirection(element, masterBar) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'sound':
                        let tempo = c.getAttribute('tempo');
                        if (tempo) {
                            let tempoAutomation = new Automation();
                            tempoAutomation.isLinear = true;
                            tempoAutomation.type = AutomationType.Tempo;
                            tempoAutomation.value = parseInt(tempo);
                            masterBar.tempoAutomation = tempoAutomation;
                            if (masterBar.index === 0) {
                                masterBar.score.tempo = tempoAutomation.value;
                            }
                        }
                        break;
                    case 'direction-type':
                        let directionType = c.firstElement;
                        switch (directionType.localName) {
                            case 'words':
                                this._currentDirection = directionType.innerText;
                                break;
                            case 'metronome':
                                this.parseMetronome(directionType, masterBar);
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseMetronome(element, masterBar) {
        let unit = Duration.Quarter;
        let perMinute = 120;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'beat-unit':
                        unit = this.getDuration(c.innerText);
                        break;
                    case 'per-minute':
                        perMinute = parseInt(c.innerText);
                        break;
                }
            }
        }
        let tempoAutomation = new Automation();
        tempoAutomation.type = AutomationType.Tempo;
        tempoAutomation.value = perMinute * ((unit / 4) | 0);
        masterBar.tempoAutomation = tempoAutomation;
        if (masterBar.index === 0) {
            masterBar.score.tempo = tempoAutomation.value;
        }
    }
    parseAttributes(element, bars, masterBar, track) {
        let num = 0;
        let hasTime = false;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'divisions':
                        this._divisionsPerQuarterNote = parseInt(c.innerText);
                        break;
                    case 'key':
                        this.parseKey(c, masterBar);
                        break;
                    case 'time':
                        this.parseTime(c, masterBar);
                        hasTime = true;
                        break;
                    case 'clef':
                        num = parseInt(c.getAttribute('number'));
                        if (isNaN(num)) {
                            num = 1;
                        }
                        this.parseClef(c, bars[num - 1]);
                        break;
                    case 'staff-details':
                        this.parseStaffDetails(c, track);
                        break;
                    case 'transpose':
                        this.parseTranspose(c, track);
                        break;
                }
            }
        }
        if (!hasTime) {
            masterBar.timeSignatureCommon = true;
        }
    }
    parseTranspose(element, track) {
        let semitones = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'chromatic':
                        semitones += parseInt(c.innerText);
                        break;
                    case 'octave-change':
                        semitones += parseInt(c.innerText) * 12;
                        break;
                }
            }
        }
        for (let staff of track.staves) {
            staff.transpositionPitch = semitones;
        }
    }
    parseClef(element, bar) {
        let sign = 's';
        let line = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'sign':
                        sign = c.innerText.toLowerCase();
                        break;
                    case 'line':
                        line = parseInt(c.innerText);
                        break;
                    case 'clef-octave-change':
                        switch (parseInt(c.innerText)) {
                            case -2:
                                bar.clefOttava = Ottavia._15mb;
                                break;
                            case -1:
                                bar.clefOttava = Ottavia._8vb;
                                break;
                            case 1:
                                bar.clefOttava = Ottavia._8va;
                                break;
                            case 2:
                                bar.clefOttava = Ottavia._15mb;
                                break;
                        }
                        break;
                }
            }
        }
        switch (sign) {
            case 'g':
                bar.clef = Clef.G2;
                break;
            case 'f':
                bar.clef = Clef.F4;
                break;
            case 'c':
                if (line === 3) {
                    bar.clef = Clef.C3;
                }
                else {
                    bar.clef = Clef.C4;
                }
                break;
            case 'percussion':
                bar.clef = Clef.Neutral;
                bar.staff.isPercussion = true;
                break;
            case 'tab':
                bar.clef = Clef.G2;
                bar.staff.showTablature = true;
                break;
            default:
                bar.clef = Clef.G2;
                break;
        }
    }
    parseTime(element, masterBar) {
        if (element.getAttribute('symbol') === 'common') {
            masterBar.timeSignatureCommon = true;
        }
        let beatsParsed = false;
        let beatTypeParsed = false;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                let v = c.innerText;
                switch (c.localName) {
                    case 'beats':
                        if (!beatsParsed) {
                            if (v.indexOf('+') === -1) {
                                masterBar.timeSignatureNumerator = parseInt(v);
                            }
                            else {
                                masterBar.timeSignatureNumerator = 4;
                            }
                            beatsParsed = true;
                        }
                        break;
                    case 'beat-type':
                        if (!beatTypeParsed) {
                            if (v.indexOf('+') === -1) {
                                masterBar.timeSignatureDenominator = parseInt(v);
                            }
                            else {
                                masterBar.timeSignatureDenominator = 4;
                            }
                            beatTypeParsed = true;
                        }
                        break;
                }
            }
        }
    }
    parseKey(element, masterBar) {
        let fifths = -2147483648;
        //let keyStep: number = -2147483648;
        //let keyAlter: number = -2147483648;
        let mode = '';
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'fifths':
                        fifths = parseInt(c.innerText);
                        break;
                    case 'key-step':
                        //keyStep = parseInt(c.innerText);
                        break;
                    case 'key-alter':
                        //keyAlter = parseInt(c.innerText);
                        break;
                    case 'mode':
                        mode = c.innerText;
                        break;
                }
            }
        }
        if (-7 <= fifths && fifths <= 7) {
            // TODO: check if this is conrrect
            masterBar.keySignature = fifths;
        }
        else {
            masterBar.keySignature = KeySignature.C;
            // TODO: map keyStep/keyAlter to internal keysignature
        }
        if (mode === 'minor') {
            masterBar.keySignatureType = KeySignatureType.Minor;
        }
        else {
            masterBar.keySignatureType = KeySignatureType.Major;
        }
    }
    getOrCreateMasterBar(index) {
        if (index < this._score.masterBars.length) {
            return this._score.masterBars[index];
        }
        for (let i = this._score.masterBars.length; i <= index; i++) {
            let mb = new MasterBar();
            if (this._score.masterBars.length > 0) {
                let prev = this._score.masterBars[this._score.masterBars.length - 1];
                mb.timeSignatureDenominator = prev.timeSignatureDenominator;
                mb.timeSignatureNumerator = prev.timeSignatureNumerator;
                mb.keySignature = prev.keySignature;
                mb.keySignatureType = prev.keySignatureType;
            }
            this._score.addMasterBar(mb);
        }
        return this._score.masterBars[index];
    }
    parseIdentification(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'creator':
                        if (c.getAttribute('type') === 'composer') {
                            this._score.music = c.innerText;
                        }
                        break;
                    case 'rights':
                        if (this._score.copyright) {
                            this._score.copyright += '\n';
                        }
                        this._score.copyright += c.innerText;
                        break;
                }
            }
        }
    }
    parsePartList(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'part-group':
                        this.parsePartGroup(c);
                        break;
                    case 'score-part':
                        this.parseScorePart(c);
                        break;
                }
            }
        }
    }
    parsePartGroup(element) {
        let type = element.getAttribute('type');
        switch (type) {
            case 'start':
                this._currentPartGroup = element.getAttribute('number');
                this._partGroups.set(this._currentPartGroup, []);
                break;
            case 'stop':
                this._currentPartGroup = null;
                break;
        }
    }
    parseScorePart(element) {
        let id = element.getAttribute('id');
        let track = new Track();
        track.ensureStaveCount(1);
        let staff = track.staves[0];
        staff.showStandardNotation = true;
        this._trackById.set(id, track);
        this._score.addTrack(track);
        if (this._currentPartGroup) {
            this._partGroups.get(this._currentPartGroup).push(track);
        }
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'part-name':
                        track.name = c.innerText;
                        break;
                    case 'part-abbreviation':
                        track.shortName = c.innerText;
                        break;
                    case 'midi-instrument':
                        this.parseMidiInstrument(c, track);
                        break;
                }
            }
        }
        if (this.isEmptyTuning(track.staves[0].tuning)) {
            track.staves[0].stringTuning.tunings = [];
        }
    }
    isEmptyTuning(tuning) {
        if (!tuning) {
            return true;
        }
        for (let i = 0; i < tuning.length; i++) {
            if (tuning[i] !== 0) {
                return false;
            }
        }
        return true;
    }
    parseMidiInstrument(element, track) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'midi-channel':
                        track.playbackInfo.primaryChannel = parseInt(c.innerText);
                        break;
                    case 'midi-program':
                        track.playbackInfo.program = parseInt(c.innerText);
                        break;
                    case 'volume':
                        track.playbackInfo.volume = Math.floor((parseInt(c.innerText) / 100) * 16);
                        break;
                    case 'pan':
                        track.playbackInfo.balance = Math.max(0, Math.min(16, Math.floor(((parseInt(c.innerText) + 90) / 180) * 16)));
                        break;
                }
            }
        }
    }
}

/**
 * Lists all midi events.
 */
var MidiEventType;
(function (MidiEventType) {
    /**
     * A per note pitch bend. (Midi 2.0)
     */
    MidiEventType[MidiEventType["PerNotePitchBend"] = 96] = "PerNotePitchBend";
    /**
     * A note is released.
     */
    MidiEventType[MidiEventType["NoteOff"] = 128] = "NoteOff";
    /**
     * A note is started.
     */
    MidiEventType[MidiEventType["NoteOn"] = 144] = "NoteOn";
    /**
     * The pressure that was used to play the note.
     */
    MidiEventType[MidiEventType["NoteAftertouch"] = 160] = "NoteAftertouch";
    /**
     * Change of a midi controller
     */
    MidiEventType[MidiEventType["Controller"] = 176] = "Controller";
    /**
     * Change of a midi program
     */
    MidiEventType[MidiEventType["ProgramChange"] = 192] = "ProgramChange";
    /**
     * The pressure that should be applied to the whole channel.
     */
    MidiEventType[MidiEventType["ChannelAftertouch"] = 208] = "ChannelAftertouch";
    /**
     * A change of the audio pitch.
     */
    MidiEventType[MidiEventType["PitchBend"] = 224] = "PitchBend";
    /**
     * A System Exclusive event.
     */
    MidiEventType[MidiEventType["SystemExclusive"] = 240] = "SystemExclusive";
    /**
     * A System Exclusive event.
     */
    MidiEventType[MidiEventType["SystemExclusive2"] = 247] = "SystemExclusive2";
    /**
     * A meta event. See `MetaEventType` for details.
     */
    MidiEventType[MidiEventType["Meta"] = 255] = "Meta";
})(MidiEventType || (MidiEventType = {}));
/**
 * Represents a midi event.
 */
class MidiEvent {
    /**
     * Initializes a new instance of the {@link MidiEvent} class.
     * @param track The track this event belongs to.
     * @param tick The absolute midi ticks of this event.
     * @param status The status information of this event.
     * @param data1 The first data component of this midi event.
     * @param data2 The second data component of this midi event.
     */
    constructor(track, tick, status, data1, data2) {
        this.track = track;
        this.tick = tick;
        this.message = status | (data1 << 8) | (data2 << 16);
    }
    get channel() {
        return this.message & 0x000000f;
    }
    get command() {
        return (this.message & 0x00000f0);
    }
    get data1() {
        return (this.message & 0x000ff00) >> 8;
    }
    set data1(value) {
        this.message &= ~0x000ff00;
        this.message |= value << 8;
    }
    get data2() {
        return (this.message & 0x0ff0000) >> 16;
    }
    set data2(value) {
        this.message &= ~0x0ff0000;
        this.message |= value << 16;
    }
    /**
     * Writes the midi event as binary into the given stream.
     * @param s The stream to write to.
     */
    writeTo(s) {
        let b = new Uint8Array([
            (this.message >> 24) & 0xff,
            (this.message >> 16) & 0xff,
            (this.message >> 8) & 0xff,
            this.message & 0xff
        ]);
        s.write(b, 0, b.length);
    }
}

var MetaEventType;
(function (MetaEventType) {
    MetaEventType[MetaEventType["SequenceNumber"] = 0] = "SequenceNumber";
    MetaEventType[MetaEventType["TextEvent"] = 1] = "TextEvent";
    MetaEventType[MetaEventType["CopyrightNotice"] = 2] = "CopyrightNotice";
    MetaEventType[MetaEventType["SequenceOrTrackName"] = 3] = "SequenceOrTrackName";
    MetaEventType[MetaEventType["InstrumentName"] = 4] = "InstrumentName";
    MetaEventType[MetaEventType["LyricText"] = 5] = "LyricText";
    MetaEventType[MetaEventType["MarkerText"] = 6] = "MarkerText";
    MetaEventType[MetaEventType["CuePoint"] = 7] = "CuePoint";
    MetaEventType[MetaEventType["PatchName"] = 8] = "PatchName";
    MetaEventType[MetaEventType["PortName"] = 9] = "PortName";
    MetaEventType[MetaEventType["MidiChannel"] = 32] = "MidiChannel";
    MetaEventType[MetaEventType["MidiPort"] = 33] = "MidiPort";
    MetaEventType[MetaEventType["EndOfTrack"] = 47] = "EndOfTrack";
    MetaEventType[MetaEventType["Tempo"] = 81] = "Tempo";
    MetaEventType[MetaEventType["SmpteOffset"] = 84] = "SmpteOffset";
    MetaEventType[MetaEventType["TimeSignature"] = 88] = "TimeSignature";
    MetaEventType[MetaEventType["KeySignature"] = 89] = "KeySignature";
    MetaEventType[MetaEventType["SequencerSpecific"] = 127] = "SequencerSpecific";
})(MetaEventType || (MetaEventType = {}));
class MetaEvent extends MidiEvent {
    get channel() {
        return -1;
    }
    get command() {
        return (this.message & 0x00000ff);
    }
    get metaStatus() {
        return this.data1;
    }
    constructor(track, delta, status, data1, data2) {
        super(track, delta, status, data1, data2);
    }
}

var SystemCommonType;
(function (SystemCommonType) {
    SystemCommonType[SystemCommonType["SystemExclusive"] = 240] = "SystemExclusive";
    SystemCommonType[SystemCommonType["MtcQuarterFrame"] = 241] = "MtcQuarterFrame";
    SystemCommonType[SystemCommonType["SongPosition"] = 242] = "SongPosition";
    SystemCommonType[SystemCommonType["SongSelect"] = 243] = "SongSelect";
    SystemCommonType[SystemCommonType["TuneRequest"] = 246] = "TuneRequest";
    SystemCommonType[SystemCommonType["SystemExclusive2"] = 247] = "SystemExclusive2";
})(SystemCommonType || (SystemCommonType = {}));
class SystemCommonEvent extends MidiEvent {
    get channel() {
        return -1;
    }
    get command() {
        return (this.message & 0x00000ff);
    }
    constructor(track, delta, status, data1, data2) {
        super(track, delta, status, data1, data2);
    }
}

var AlphaTabSystemExclusiveEvents;
(function (AlphaTabSystemExclusiveEvents) {
    AlphaTabSystemExclusiveEvents[AlphaTabSystemExclusiveEvents["MetronomeTick"] = 0] = "MetronomeTick";
    AlphaTabSystemExclusiveEvents[AlphaTabSystemExclusiveEvents["Rest"] = 1] = "Rest";
})(AlphaTabSystemExclusiveEvents || (AlphaTabSystemExclusiveEvents = {}));
class SystemExclusiveEvent extends SystemCommonEvent {
    constructor(track, delta, status, id, data) {
        super(track, delta, status, id & 0x00ff, (id >> 8) & 0xff);
        this.data = data;
    }
    get isMetronome() {
        return this.manufacturerId == SystemExclusiveEvent.AlphaTabManufacturerId &&
            this.data[0] == AlphaTabSystemExclusiveEvents.MetronomeTick;
    }
    get metronomeNumerator() {
        return this.isMetronome ? this.data[1] : -1;
    }
    get metronomeDurationInTicks() {
        if (!this.isMetronome) {
            return -1;
        }
        return IOHelper.decodeUInt32LE(this.data, 2);
    }
    get metronomeDurationInMilliseconds() {
        if (!this.isMetronome) {
            return -1;
        }
        return IOHelper.decodeUInt32LE(this.data, 6);
    }
    get isRest() {
        return this.manufacturerId == SystemExclusiveEvent.AlphaTabManufacturerId &&
            this.data[0] == AlphaTabSystemExclusiveEvents.Rest;
    }
    get manufacturerId() {
        return this.message >> 8;
    }
    writeTo(s) {
        s.writeByte(0xf0);
        let l = this.data.length + 2;
        s.writeByte(this.manufacturerId);
        let b = new Uint8Array([(l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff]);
        s.write(b, 0, b.length);
        s.writeByte(0xf7);
    }
    static encodeMetronome(counter, durationInTicks, durationInMillis) {
        // [0] type
        // [1] counter
        // [2-5] durationInTicks
        // [6-9] durationInMillis
        const data = ByteBuffer.withCapacity(2 + 2 * 4);
        data.writeByte(AlphaTabSystemExclusiveEvents.MetronomeTick);
        data.writeByte(counter);
        IOHelper.writeInt32LE(data, durationInTicks);
        IOHelper.writeInt32LE(data, durationInMillis);
        return data.toArray();
    }
}
SystemExclusiveEvent.AlphaTabManufacturerId = 0x7D;

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class SynthEvent {
    constructor(eventIndex, e) {
        this.time = 0;
        this.eventIndex = eventIndex;
        this.event = e;
        this.isMetronome = this.event instanceof SystemExclusiveEvent && this.event.isMetronome;
    }
    static newMetronomeEvent(eventIndex, tick, counter, durationInTicks, durationInMillis) {
        const evt = new SystemExclusiveEvent(0, tick, MidiEventType.SystemExclusive2, SystemExclusiveEvent.AlphaTabManufacturerId, SystemExclusiveEvent.encodeMetronome(counter, durationInTicks, durationInMillis));
        const x = new SynthEvent(eventIndex, evt);
        return x;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
class SynthConstants {
}
SynthConstants.DefaultChannelCount = 16 + 1;
SynthConstants.MetronomeChannel = SynthConstants.DefaultChannelCount - 1;
SynthConstants.AudioChannels = 2;
SynthConstants.MinVolume = 0;
SynthConstants.MinProgram = 0;
SynthConstants.MaxProgram = 127;
SynthConstants.MinPlaybackSpeed = 0.125;
SynthConstants.MaxPlaybackSpeed = 8;
/**
 * The Midi Pitch bend message is a 15-bit value
 */
SynthConstants.MaxPitchWheel = 0x4000;
/**
 * The Midi 2.0 Pitch bend message is a 32-bit value
 */
SynthConstants.MaxPitchWheel20 = 0x100000000;
/**
 * The pitch wheel value for no pitch change at all.
 */
SynthConstants.DefaultPitchWheel = SynthConstants.MaxPitchWheel / 2;
SynthConstants.MicroBufferCount = 32;
SynthConstants.MicroBufferSize = 64;

class MidiFileSequencerTempoChange {
    constructor(bpm, ticks, time) {
        this.bpm = bpm;
        this.ticks = ticks;
        this.time = time;
    }
}
class MidiSequencerState {
    constructor() {
        this.tempoChanges = [];
        this.firstProgramEventPerChannel = new Map();
        this.firstTimeSignatureNumerator = 0;
        this.firstTimeSignatureDenominator = 0;
        this.synthData = [];
        this.division = MidiUtils.QuarterTime;
        this.eventIndex = 0;
        this.currentTime = 0;
        this.playbackRange = null;
        this.playbackRangeStartTime = 0;
        this.playbackRangeEndTime = 0;
        this.endTick = 0;
        this.endTime = 0;
    }
}
/**
 * This sequencer dispatches midi events to the synthesizer based on the current
 * synthesize position. The sequencer does not consider the playback speed.
 */
class MidiFileSequencer {
    constructor(synthesizer) {
        this._oneTimeState = null;
        this._countInState = null;
        this.isLooping = false;
        /**
         * Gets or sets the playback speed.
         */
        this.playbackSpeed = 1;
        this._synthesizer = synthesizer;
        this._mainState = new MidiSequencerState();
        this._currentState = this._mainState;
    }
    get isPlayingMain() {
        return this._currentState == this._mainState;
    }
    get isPlayingOneTimeMidi() {
        return this._currentState == this._oneTimeState;
    }
    get isPlayingCountIn() {
        return this._currentState == this._countInState;
    }
    get mainPlaybackRange() {
        return this._mainState.playbackRange;
    }
    set mainPlaybackRange(value) {
        this._mainState.playbackRange = value;
        if (value) {
            this._mainState.playbackRangeStartTime = this.tickPositionToTimePositionWithSpeed(this._mainState, value.startTick, 1);
            this._mainState.playbackRangeEndTime = this.tickPositionToTimePositionWithSpeed(this._mainState, value.endTick, 1);
        }
    }
    get currentTime() {
        return this._currentState.currentTime / this.playbackSpeed;
    }
    /**
     * Gets the duration of the song in ticks.
     */
    get currentEndTick() {
        return this._currentState.endTick;
    }
    get currentEndTime() {
        return this._currentState.endTime / this.playbackSpeed;
    }
    mainSeek(timePosition) {
        // map to speed=1
        timePosition *= this.playbackSpeed;
        // ensure playback range
        if (this.mainPlaybackRange) {
            if (timePosition < this._mainState.playbackRangeStartTime) {
                timePosition = this._mainState.playbackRangeStartTime;
            }
            else if (timePosition > this._mainState.playbackRangeEndTime) {
                timePosition = this._mainState.playbackRangeEndTime;
            }
        }
        if (timePosition > this._mainState.currentTime) {
            this.mainSilentProcess(timePosition - this._mainState.currentTime);
        }
        else if (timePosition < this._mainState.currentTime) {
            // we have to restart the midi to make sure we get the right state: instruments, volume, pan, etc
            this._mainState.currentTime = 0;
            this._mainState.eventIndex = 0;
            if (this.isPlayingMain) {
                let metronomeVolume = this._synthesizer.metronomeVolume;
                this._synthesizer.noteOffAll(true);
                this._synthesizer.resetSoft();
                this._synthesizer.setupMetronomeChannel(metronomeVolume);
            }
            this.mainSilentProcess(timePosition);
        }
    }
    mainSilentProcess(milliseconds) {
        if (milliseconds <= 0) {
            return;
        }
        let start = Date.now();
        let finalTime = this._mainState.currentTime + milliseconds;
        if (this.isPlayingMain) {
            while (this._mainState.currentTime < finalTime) {
                if (this.fillMidiEventQueueLimited(finalTime - this._mainState.currentTime)) {
                    this._synthesizer.synthesizeSilent(SynthConstants.MicroBufferSize);
                }
            }
        }
        this._mainState.currentTime = finalTime;
        let duration = Date.now() - start;
        Logger.debug('Sequencer', 'Silent seek finished in ' + duration + 'ms (main)');
    }
    loadOneTimeMidi(midiFile) {
        this._oneTimeState = this.createStateFromFile(midiFile);
        this._currentState = this._oneTimeState;
    }
    loadMidi(midiFile) {
        this._mainState = this.createStateFromFile(midiFile);
        this._currentState = this._mainState;
    }
    createStateFromFile(midiFile) {
        const state = new MidiSequencerState();
        state.tempoChanges = [];
        state.division = midiFile.division;
        state.eventIndex = 0;
        state.currentTime = 0;
        // build synth events.
        state.synthData = [];
        // Converts midi to milliseconds for easy sequencing
        let bpm = 120;
        let absTick = 0;
        let absTime = 0.0;
        let metronomeCount = 0;
        let metronomeLengthInTicks = 0;
        let metronomeLengthInMillis = 0;
        let metronomeTick = 0;
        let metronomeTime = 0.0;
        let previousTick = 0;
        for (let mEvent of midiFile.events) {
            let synthData = new SynthEvent(state.synthData.length, mEvent);
            state.synthData.push(synthData);
            let deltaTick = mEvent.tick - previousTick;
            absTick += deltaTick;
            absTime += deltaTick * (60000.0 / (bpm * midiFile.division));
            synthData.time = absTime;
            previousTick = mEvent.tick;
            if (metronomeLengthInTicks > 0) {
                while (metronomeTick < absTick) {
                    let metronome = SynthEvent.newMetronomeEvent(state.synthData.length, metronomeTick, Math.floor(metronomeTick / metronomeLengthInTicks) % metronomeCount, metronomeLengthInTicks, metronomeLengthInMillis);
                    state.synthData.push(metronome);
                    metronome.time = metronomeTime;
                    metronomeTick += metronomeLengthInTicks;
                    metronomeTime += metronomeLengthInMillis;
                }
            }
            if (mEvent.command === MidiEventType.Meta && mEvent.data1 === MetaEventType.Tempo) {
                let meta = mEvent;
                bpm = 60000000 / meta.value;
                state.tempoChanges.push(new MidiFileSequencerTempoChange(bpm, absTick, absTime));
                metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * midiFile.division));
            }
            else if (mEvent.command === MidiEventType.Meta && mEvent.data1 === MetaEventType.TimeSignature) {
                let meta = mEvent;
                let timeSignatureDenominator = Math.pow(2, meta.data[1]);
                metronomeCount = meta.data[0];
                metronomeLengthInTicks = (state.division * (4.0 / timeSignatureDenominator)) | 0;
                metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * midiFile.division));
                if (state.firstTimeSignatureDenominator === 0) {
                    state.firstTimeSignatureNumerator = meta.data[0];
                    state.firstTimeSignatureDenominator = timeSignatureDenominator;
                }
            }
            else if (mEvent.command === MidiEventType.ProgramChange) {
                let channel = mEvent.channel;
                if (!state.firstProgramEventPerChannel.has(channel)) {
                    state.firstProgramEventPerChannel.set(channel, synthData);
                }
            }
        }
        state.synthData.sort((a, b) => {
            if (a.time > b.time) {
                return 1;
            }
            if (a.time < b.time) {
                return -1;
            }
            return a.eventIndex - b.eventIndex;
        });
        state.endTime = absTime;
        state.endTick = absTick;
        return state;
    }
    fillMidiEventQueue() {
        return this.fillMidiEventQueueLimited(-1);
    }
    fillMidiEventQueueLimited(maxMilliseconds) {
        let millisecondsPerBuffer = (SynthConstants.MicroBufferSize / this._synthesizer.outSampleRate) * 1000 * this.playbackSpeed;
        let endTime = this.internalEndTime;
        if (maxMilliseconds > 0) {
            // ensure that first microbuffer does not already exceed max time
            if (maxMilliseconds < millisecondsPerBuffer) {
                millisecondsPerBuffer = maxMilliseconds;
            }
            endTime = Math.min(this.internalEndTime, this._currentState.currentTime + maxMilliseconds);
        }
        let anyEventsDispatched = false;
        this._currentState.currentTime += millisecondsPerBuffer;
        while (this._currentState.eventIndex < this._currentState.synthData.length &&
            this._currentState.synthData[this._currentState.eventIndex].time < this._currentState.currentTime &&
            this._currentState.currentTime < endTime) {
            this._synthesizer.dispatchEvent(this._currentState.synthData[this._currentState.eventIndex]);
            this._currentState.eventIndex++;
            anyEventsDispatched = true;
        }
        return anyEventsDispatched;
    }
    mainTickPositionToTimePosition(tickPosition) {
        return this.tickPositionToTimePositionWithSpeed(this._mainState, tickPosition, this.playbackSpeed);
    }
    mainTimePositionToTickPosition(timePosition) {
        return this.timePositionToTickPositionWithSpeed(this._mainState, timePosition, this.playbackSpeed);
    }
    currentTimePositionToTickPosition(timePosition) {
        return this.timePositionToTickPositionWithSpeed(this._currentState, timePosition, this.playbackSpeed);
    }
    tickPositionToTimePositionWithSpeed(state, tickPosition, playbackSpeed) {
        let timePosition = 0.0;
        let bpm = 120.0;
        let lastChange = 0;
        // find start and bpm of last tempo change before time
        for (const c of state.tempoChanges) {
            if (tickPosition < c.ticks) {
                break;
            }
            timePosition = c.time;
            bpm = c.bpm;
            lastChange = c.ticks;
        }
        // add the missing millis
        tickPosition -= lastChange;
        timePosition += tickPosition * (60000.0 / (bpm * state.division));
        return timePosition / playbackSpeed;
    }
    timePositionToTickPositionWithSpeed(state, timePosition, playbackSpeed) {
        timePosition *= playbackSpeed;
        let ticks = 0;
        let bpm = 120.0;
        let lastChange = 0;
        // find start and bpm of last tempo change before time
        for (const c of state.tempoChanges) {
            if (timePosition < c.time) {
                break;
            }
            ticks = c.ticks;
            bpm = c.bpm;
            lastChange = c.time;
        }
        // add the missing ticks
        timePosition -= lastChange;
        ticks += (timePosition / (60000.0 / (bpm * state.division))) | 0;
        // we add 1 for possible rounding errors.(floating point issuses)
        return ticks + 1;
    }
    get internalEndTime() {
        if (this.isPlayingMain) {
            return !this.mainPlaybackRange ? this._currentState.endTime : this._currentState.playbackRangeEndTime;
        }
        else {
            return this._currentState.endTime;
        }
    }
    get isFinished() {
        return this._currentState.currentTime >= this.internalEndTime;
    }
    stop() {
        if (this.isPlayingMain && this.mainPlaybackRange) {
            this._currentState.currentTime = this.mainPlaybackRange.startTick;
        }
        else {
            this._currentState.currentTime = 0;
        }
        this._currentState.eventIndex = 0;
    }
    resetOneTimeMidi() {
        this._oneTimeState = null;
        this._currentState = this._mainState;
    }
    resetCountIn() {
        this._countInState = null;
        this._currentState = this._mainState;
    }
    startCountIn() {
        this.generateCountInMidi();
        this._currentState = this._countInState;
        this.stop();
        this._synthesizer.noteOffAll(true);
    }
    generateCountInMidi() {
        const state = new MidiSequencerState();
        state.division = this._mainState.division;
        let bpm = 120;
        let timeSignatureNumerator = 4;
        let timeSignatureDenominator = 4;
        if (this._mainState.eventIndex === 0) {
            bpm = this._mainState.tempoChanges[0].bpm;
            timeSignatureNumerator = this._mainState.firstTimeSignatureNumerator;
            timeSignatureDenominator = this._mainState.firstTimeSignatureDenominator;
        }
        else {
            bpm = this._synthesizer.currentTempo;
            timeSignatureNumerator = this._synthesizer.timeSignatureNumerator;
            timeSignatureDenominator = this._synthesizer.timeSignatureDenominator;
        }
        state.tempoChanges.push(new MidiFileSequencerTempoChange(bpm, 0, 0));
        let metronomeLengthInTicks = (state.division * (4.0 / timeSignatureDenominator)) | 0;
        let metronomeLengthInMillis = metronomeLengthInTicks * (60000.0 / (bpm * this._mainState.division));
        let metronomeTick = 0;
        let metronomeTime = 0.0;
        for (let i = 0; i < timeSignatureNumerator; i++) {
            let metronome = SynthEvent.newMetronomeEvent(state.synthData.length, metronomeTick, i, metronomeLengthInTicks, metronomeLengthInMillis);
            state.synthData.push(metronome);
            metronome.time = metronomeTime;
            metronomeTick += metronomeLengthInTicks;
            metronomeTime += metronomeLengthInMillis;
        }
        state.synthData.sort((a, b) => {
            if (a.time > b.time) {
                return 1;
            }
            if (a.time < b.time) {
                return -1;
            }
            return a.eventIndex - b.eventIndex;
        });
        state.endTime = metronomeTime;
        state.endTick = metronomeTick;
        this._countInState = state;
    }
}

/**
 * Lists the different states of the player
 */
var PlayerState;
(function (PlayerState) {
    /**
     * Player is paused
     */
    PlayerState[PlayerState["Paused"] = 0] = "Paused";
    /**
     * Player is playing
     */
    PlayerState[PlayerState["Playing"] = 1] = "Playing";
})(PlayerState || (PlayerState = {}));

/**
 * Represents the info when the player state changes.
 */
class PlayerStateChangedEventArgs {
    /**
     * Initializes a new instance of the {@link PlayerStateChangedEventArgs} class.
     * @param state The state.
     */
    constructor(state, stopped) {
        this.state = state;
        this.stopped = stopped;
    }
}

/**
 * Represents the info when the time in the synthesizer changes.
 */
class PositionChangedEventArgs {
    /**
     * Initializes a new instance of the {@link PositionChangedEventArgs} class.
     * @param currentTime The current time.
     * @param endTime The end time.
     * @param currentTick The current tick.
     * @param endTick The end tick.
     * @param isSeek Whether the time was seeked.
     */
    constructor(currentTime, endTime, currentTick, endTick, isSeek) {
        this.currentTime = currentTime;
        this.endTime = endTime;
        this.currentTick = currentTick;
        this.endTick = endTick;
        this.isSeek = isSeek;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class RiffChunk {
    constructor() {
        this.id = '';
        this.size = 0;
    }
    static load(parent, chunk, stream) {
        if (parent && RiffChunk.HeaderSize > parent.size) {
            return false;
        }
        if (stream.position + RiffChunk.HeaderSize >= stream.length) {
            return false;
        }
        chunk.id = IOHelper.read8BitStringLength(stream, 4);
        if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
            return false;
        }
        chunk.size = IOHelper.readUInt32LE(stream);
        if (parent && RiffChunk.HeaderSize + chunk.size > parent.size) {
            return false;
        }
        if (parent) {
            parent.size -= RiffChunk.HeaderSize + chunk.size;
        }
        let isRiff = chunk.id === 'RIFF';
        let isList = chunk.id === 'LIST';
        if (isRiff && parent) {
            // not allowed
            return false;
        }
        if (!isRiff && !isList) {
            // custom type without sub type
            return true;
        }
        // for lists unwrap the list type
        chunk.id = IOHelper.read8BitStringLength(stream, 4);
        if (chunk.id.charCodeAt(0) <= 32 || chunk.id.charCodeAt(0) >= 122) {
            return false;
        }
        chunk.size -= 4;
        return true;
    }
}
RiffChunk.HeaderSize = 4 /*FourCC*/ + 4 /*Size*/;

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class Hydra {
    constructor() {
        this.phdrs = [];
        this.pbags = [];
        this.pmods = [];
        this.pgens = [];
        this.insts = [];
        this.ibags = [];
        this.imods = [];
        this.igens = [];
        this.sHdrs = [];
        this.fontSamples = new Float32Array(0);
    }
    load(readable) {
        const chunkHead = new RiffChunk();
        const chunkFastList = new RiffChunk();
        if (!RiffChunk.load(null, chunkHead, readable) || chunkHead.id !== 'sfbk') {
            throw new FormatError('Soundfont is not a valid Soundfont2 file');
        }
        while (RiffChunk.load(chunkHead, chunkFastList, readable)) {
            let chunk = new RiffChunk();
            if (chunkFastList.id === 'pdta') {
                while (RiffChunk.load(chunkFastList, chunk, readable)) {
                    switch (chunk.id) {
                        case 'phdr':
                            for (let i = 0, count = (chunk.size / HydraPhdr.SizeInFile) | 0; i < count; i++) {
                                this.phdrs.push(new HydraPhdr(readable));
                            }
                            break;
                        case 'pbag':
                            for (let i = 0, count = (chunk.size / HydraPbag.SizeInFile) | 0; i < count; i++) {
                                this.pbags.push(new HydraPbag(readable));
                            }
                            break;
                        case 'pmod':
                            for (let i = 0, count = (chunk.size / HydraPmod.SizeInFile) | 0; i < count; i++) {
                                this.pmods.push(new HydraPmod(readable));
                            }
                            break;
                        case 'pgen':
                            for (let i = 0, count = (chunk.size / HydraPgen.SizeInFile) | 0; i < count; i++) {
                                this.pgens.push(new HydraPgen(readable));
                            }
                            break;
                        case 'inst':
                            for (let i = 0, count = (chunk.size / HydraInst.SizeInFile) | 0; i < count; i++) {
                                this.insts.push(new HydraInst(readable));
                            }
                            break;
                        case 'ibag':
                            for (let i = 0, count = (chunk.size / HydraIbag.SizeInFile) | 0; i < count; i++) {
                                this.ibags.push(new HydraIbag(readable));
                            }
                            break;
                        case 'imod':
                            for (let i = 0, count = (chunk.size / HydraImod.SizeInFile) | 0; i < count; i++) {
                                this.imods.push(new HydraImod(readable));
                            }
                            break;
                        case 'igen':
                            for (let i = 0, count = (chunk.size / HydraIgen.SizeInFile) | 0; i < count; i++) {
                                this.igens.push(new HydraIgen(readable));
                            }
                            break;
                        case 'shdr':
                            for (let i = 0, count = (chunk.size / HydraShdr.SizeInFile) | 0; i < count; i++) {
                                this.sHdrs.push(new HydraShdr(readable));
                            }
                            break;
                        default:
                            readable.position += chunk.size;
                            break;
                    }
                }
            }
            else if (chunkFastList.id === 'sdta') {
                while (RiffChunk.load(chunkFastList, chunk, readable)) {
                    switch (chunk.id) {
                        case 'smpl':
                            this.fontSamples = Hydra.loadSamples(chunk, readable);
                            break;
                        default:
                            readable.position += chunk.size;
                            break;
                    }
                }
            }
            else {
                readable.position += chunkFastList.size;
            }
        }
    }
    static loadSamples(chunk, reader) {
        let samplesLeft = (chunk.size / 2) | 0;
        const samples = new Float32Array(samplesLeft);
        let samplesPos = 0;
        const sampleBuffer = new Uint8Array(16 * 1024);
        while (samplesLeft > 0) {
            let samplesToRead = Math.min(samplesLeft, (sampleBuffer.length / 2) | 0);
            reader.read(sampleBuffer, 0, samplesToRead * 2);
            for (let i = 0; i < samplesToRead; i++) {
                const shortSample = TypeConversions.int32ToInt16((sampleBuffer[i * 2 + 1] << 8) | sampleBuffer[i * 2]);
                samples[samplesPos + i] = shortSample / 32767;
            }
            samplesLeft -= samplesToRead;
            samplesPos += samplesToRead;
        }
        return samples;
    }
}
class HydraIbag {
    constructor(reader) {
        this.instGenNdx = IOHelper.readUInt16LE(reader);
        this.instModNdx = IOHelper.readUInt16LE(reader);
    }
}
HydraIbag.SizeInFile = 4;
class HydraImod {
    constructor(reader) {
        this.modSrcOper = IOHelper.readUInt16LE(reader);
        this.modDestOper = IOHelper.readUInt16LE(reader);
        this.modAmount = IOHelper.readInt16LE(reader);
        this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
        this.modTransOper = IOHelper.readUInt16LE(reader);
    }
}
HydraImod.SizeInFile = 10;
class HydraIgen {
    constructor(reader) {
        this.genOper = IOHelper.readUInt16LE(reader);
        this.genAmount = new HydraGenAmount(reader);
    }
}
HydraIgen.SizeInFile = 4;
class HydraInst {
    constructor(reader) {
        this.instName = IOHelper.read8BitStringLength(reader, 20);
        this.instBagNdx = IOHelper.readUInt16LE(reader);
    }
}
HydraInst.SizeInFile = 22;
class HydraPbag {
    constructor(reader) {
        this.genNdx = IOHelper.readUInt16LE(reader);
        this.modNdx = IOHelper.readUInt16LE(reader);
    }
}
HydraPbag.SizeInFile = 4;
class HydraPgen {
    constructor(reader) {
        this.genOper = IOHelper.readUInt16LE(reader);
        this.genAmount = new HydraGenAmount(reader);
    }
}
HydraPgen.SizeInFile = 4;
HydraPgen.GenInstrument = 41;
HydraPgen.GenKeyRange = 43;
HydraPgen.GenVelRange = 44;
HydraPgen.GenSampleId = 53;
class HydraPhdr {
    constructor(reader) {
        this.presetName = IOHelper.read8BitStringLength(reader, 20);
        this.preset = IOHelper.readUInt16LE(reader);
        this.bank = IOHelper.readUInt16LE(reader);
        this.presetBagNdx = IOHelper.readUInt16LE(reader);
        this.library = IOHelper.readUInt32LE(reader);
        this.genre = IOHelper.readUInt32LE(reader);
        this.morphology = IOHelper.readUInt32LE(reader);
    }
}
HydraPhdr.SizeInFile = 38;
class HydraPmod {
    constructor(reader) {
        this.modSrcOper = IOHelper.readUInt16LE(reader);
        this.modDestOper = IOHelper.readUInt16LE(reader);
        this.modAmount = IOHelper.readUInt16LE(reader);
        this.modAmtSrcOper = IOHelper.readUInt16LE(reader);
        this.modTransOper = IOHelper.readUInt16LE(reader);
    }
}
HydraPmod.SizeInFile = 10;
class HydraShdr {
    constructor(reader) {
        this.sampleName = IOHelper.read8BitStringLength(reader, 20);
        this.start = IOHelper.readUInt32LE(reader);
        this.end = IOHelper.readUInt32LE(reader);
        this.startLoop = IOHelper.readUInt32LE(reader);
        this.endLoop = IOHelper.readUInt32LE(reader);
        this.sampleRate = IOHelper.readUInt32LE(reader);
        this.originalPitch = reader.readByte();
        this.pitchCorrection = IOHelper.readSInt8(reader);
        this.sampleLink = IOHelper.readUInt16LE(reader);
        this.sampleType = IOHelper.readUInt16LE(reader);
    }
}
HydraShdr.SizeInFile = 46;
class HydraGenAmount {
    constructor(reader) {
        this.wordAmount = IOHelper.readUInt16LE(reader);
    }
    get shortAmount() {
        return TypeConversions.uint16ToInt16(this.wordAmount);
    }
    get lowByteAmount() {
        return this.wordAmount & 0x00ff;
    }
    get highByteAmount() {
        return ((this.wordAmount & 0xff00) >> 8) & 0xff;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
class Channel {
    constructor() {
        this.presetIndex = 0;
        this.bank = 0;
        this.pitchWheel = 0;
        this.perNotePitchWheel = new Map();
        this.midiPan = 0;
        this.midiVolume = 0;
        this.midiExpression = 0;
        this.midiRpn = 0;
        this.midiData = 0;
        this.panOffset = 0;
        this.gainDb = 0;
        this.pitchRange = 0;
        this.tuning = 0;
        this.mixVolume = 0;
        this.mute = false;
        this.solo = false;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
class Channels {
    constructor() {
        this.activeChannel = 0;
        this.channelList = [];
    }
    setupVoice(tinySoundFont, voice) {
        const c = this.channelList[this.activeChannel];
        const newpan = voice.region.pan + c.panOffset;
        voice.playingChannel = this.activeChannel;
        voice.mixVolume = c.mixVolume;
        voice.noteGainDb += c.gainDb;
        voice.updatePitchRatio(c, tinySoundFont.outSampleRate);
        if (newpan <= -0.5) {
            voice.panFactorLeft = 1.0;
            voice.panFactorRight = 0.0;
        }
        else if (newpan >= 0.5) {
            voice.panFactorLeft = 0.0;
            voice.panFactorRight = 1.0;
        }
        else {
            voice.panFactorLeft = Math.sqrt(0.5 - newpan);
            voice.panFactorRight = Math.sqrt(0.5 + newpan);
        }
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
var LoopMode;
(function (LoopMode) {
    LoopMode[LoopMode["None"] = 0] = "None";
    LoopMode[LoopMode["Continuous"] = 1] = "Continuous";
    LoopMode[LoopMode["Sustain"] = 2] = "Sustain";
})(LoopMode || (LoopMode = {}));

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
/**
 * Supported output modes by the render methods
 */
var OutputMode;
(function (OutputMode) {
    /**
     * Two channels with single left/right samples one after another
     */
    OutputMode[OutputMode["StereoInterleaved"] = 0] = "StereoInterleaved";
    /**
     * Two channels with all samples for the left channel first then right
     */
    OutputMode[OutputMode["StereoUnweaved"] = 1] = "StereoUnweaved";
    /**
     * A single channel (stereo instruments are mixed into center)
     */
    OutputMode[OutputMode["Mono"] = 2] = "Mono";
})(OutputMode || (OutputMode = {}));

class Preset {
    constructor() {
        this.name = "";
        this.presetNumber = 0;
        this.bank = 0;
        this.regions = null;
        this.fontSamples = null;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
class SynthHelper {
    static timecents2Secs(timecents) {
        return Math.pow(2, timecents / 1200.0);
    }
    static decibelsToGain(db) {
        return db > -100 ? Math.pow(10.0, db * 0.05) : 0;
    }
    static gainToDecibels(gain) {
        return gain <= 0.00001 ? -100 : 20.0 * Math.log10(gain);
    }
    static cents2Hertz(cents) {
        return 8.176 * Math.pow(2.0, cents / 1200.0);
    }
    static clamp(value, min, max) {
        if (value <= min) {
            return min;
        }
        if (value >= max) {
            return max;
        }
        return value;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class Envelope {
    constructor(other) {
        this.delay = 0;
        this.attack = 0;
        this.hold = 0;
        this.decay = 0;
        this.sustain = 0;
        this.release = 0;
        this.keynumToHold = 0;
        this.keynumToDecay = 0;
        if (other) {
            this.delay = other.delay;
            this.attack = other.attack;
            this.hold = other.hold;
            this.decay = other.decay;
            this.sustain = other.sustain;
            this.release = other.release;
            this.keynumToHold = other.keynumToHold;
            this.keynumToDecay = other.keynumToDecay;
        }
    }
    clear() {
        this.delay = 0;
        this.attack = 0;
        this.hold = 0;
        this.decay = 0;
        this.sustain = 0;
        this.release = 0;
        this.keynumToHold = 0;
        this.keynumToDecay = 0;
    }
    envToSecs(sustainIsGain) {
        // EG times need to be converted from timecents to seconds.
        // Pin very short EG segments.  Timecents don't get to zero, and our EG is
        // happier with zero values.
        this.delay = this.delay < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.delay);
        this.attack = this.attack < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.attack);
        this.release = this.release < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.release);
        // If we have dynamic hold or decay times depending on key number we need
        // to keep the values in timecents so we can calculate it during startNote
        if (this.keynumToHold === 0) {
            this.hold = this.hold < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.hold);
        }
        if (this.keynumToDecay === 0) {
            this.decay = this.decay < -11950.0 ? 0.0 : SynthHelper.timecents2Secs(this.decay);
        }
        if (this.sustain < 0.0) {
            this.sustain = 0.0;
        }
        else if (sustainIsGain) {
            this.sustain = SynthHelper.decibelsToGain(-this.sustain / 10.0);
        }
        else {
            this.sustain = 1.0 - this.sustain / 1000.0;
        }
    }
}

var GenOperators;
(function (GenOperators) {
    GenOperators[GenOperators["StartAddrsOffset"] = 0] = "StartAddrsOffset";
    GenOperators[GenOperators["EndAddrsOffset"] = 1] = "EndAddrsOffset";
    GenOperators[GenOperators["StartloopAddrsOffset"] = 2] = "StartloopAddrsOffset";
    GenOperators[GenOperators["EndloopAddrsOffset"] = 3] = "EndloopAddrsOffset";
    GenOperators[GenOperators["StartAddrsCoarseOffset"] = 4] = "StartAddrsCoarseOffset";
    GenOperators[GenOperators["ModLfoToPitch"] = 5] = "ModLfoToPitch";
    GenOperators[GenOperators["VibLfoToPitch"] = 6] = "VibLfoToPitch";
    GenOperators[GenOperators["ModEnvToPitch"] = 7] = "ModEnvToPitch";
    GenOperators[GenOperators["InitialFilterFc"] = 8] = "InitialFilterFc";
    GenOperators[GenOperators["InitialFilterQ"] = 9] = "InitialFilterQ";
    GenOperators[GenOperators["ModLfoToFilterFc"] = 10] = "ModLfoToFilterFc";
    GenOperators[GenOperators["ModEnvToFilterFc"] = 11] = "ModEnvToFilterFc";
    GenOperators[GenOperators["EndAddrsCoarseOffset"] = 12] = "EndAddrsCoarseOffset";
    GenOperators[GenOperators["ModLfoToVolume"] = 13] = "ModLfoToVolume";
    GenOperators[GenOperators["Unused1"] = 14] = "Unused1";
    GenOperators[GenOperators["ChorusEffectsSend"] = 15] = "ChorusEffectsSend";
    GenOperators[GenOperators["ReverbEffectsSend"] = 16] = "ReverbEffectsSend";
    GenOperators[GenOperators["Pan"] = 17] = "Pan";
    GenOperators[GenOperators["Unused2"] = 18] = "Unused2";
    GenOperators[GenOperators["Unused3"] = 19] = "Unused3";
    GenOperators[GenOperators["Unused4"] = 20] = "Unused4";
    GenOperators[GenOperators["DelayModLFO"] = 21] = "DelayModLFO";
    GenOperators[GenOperators["FreqModLFO"] = 22] = "FreqModLFO";
    GenOperators[GenOperators["DelayVibLFO"] = 23] = "DelayVibLFO";
    GenOperators[GenOperators["FreqVibLFO"] = 24] = "FreqVibLFO";
    GenOperators[GenOperators["DelayModEnv"] = 25] = "DelayModEnv";
    GenOperators[GenOperators["AttackModEnv"] = 26] = "AttackModEnv";
    GenOperators[GenOperators["HoldModEnv"] = 27] = "HoldModEnv";
    GenOperators[GenOperators["DecayModEnv"] = 28] = "DecayModEnv";
    GenOperators[GenOperators["SustainModEnv"] = 29] = "SustainModEnv";
    GenOperators[GenOperators["ReleaseModEnv"] = 30] = "ReleaseModEnv";
    GenOperators[GenOperators["KeynumToModEnvHold"] = 31] = "KeynumToModEnvHold";
    GenOperators[GenOperators["KeynumToModEnvDecay"] = 32] = "KeynumToModEnvDecay";
    GenOperators[GenOperators["DelayVolEnv"] = 33] = "DelayVolEnv";
    GenOperators[GenOperators["AttackVolEnv"] = 34] = "AttackVolEnv";
    GenOperators[GenOperators["HoldVolEnv"] = 35] = "HoldVolEnv";
    GenOperators[GenOperators["DecayVolEnv"] = 36] = "DecayVolEnv";
    GenOperators[GenOperators["SustainVolEnv"] = 37] = "SustainVolEnv";
    GenOperators[GenOperators["ReleaseVolEnv"] = 38] = "ReleaseVolEnv";
    GenOperators[GenOperators["KeynumToVolEnvHold"] = 39] = "KeynumToVolEnvHold";
    GenOperators[GenOperators["KeynumToVolEnvDecay"] = 40] = "KeynumToVolEnvDecay";
    GenOperators[GenOperators["Instrument"] = 41] = "Instrument";
    GenOperators[GenOperators["Reserved1"] = 42] = "Reserved1";
    GenOperators[GenOperators["KeyRange"] = 43] = "KeyRange";
    GenOperators[GenOperators["VelRange"] = 44] = "VelRange";
    GenOperators[GenOperators["StartloopAddrsCoarseOffset"] = 45] = "StartloopAddrsCoarseOffset";
    GenOperators[GenOperators["Keynum"] = 46] = "Keynum";
    GenOperators[GenOperators["Velocity"] = 47] = "Velocity";
    GenOperators[GenOperators["InitialAttenuation"] = 48] = "InitialAttenuation";
    GenOperators[GenOperators["Reserved2"] = 49] = "Reserved2";
    GenOperators[GenOperators["EndloopAddrsCoarseOffset"] = 50] = "EndloopAddrsCoarseOffset";
    GenOperators[GenOperators["CoarseTune"] = 51] = "CoarseTune";
    GenOperators[GenOperators["FineTune"] = 52] = "FineTune";
    GenOperators[GenOperators["SampleID"] = 53] = "SampleID";
    GenOperators[GenOperators["SampleModes"] = 54] = "SampleModes";
    GenOperators[GenOperators["Reserved3"] = 55] = "Reserved3";
    GenOperators[GenOperators["ScaleTuning"] = 56] = "ScaleTuning";
    GenOperators[GenOperators["ExclusiveClass"] = 57] = "ExclusiveClass";
    GenOperators[GenOperators["OverridingRootKey"] = 58] = "OverridingRootKey";
    GenOperators[GenOperators["Unused5"] = 59] = "Unused5";
    GenOperators[GenOperators["EndOper"] = 60] = "EndOper";
})(GenOperators || (GenOperators = {}));
class Region {
    constructor(other) {
        this.loopMode = LoopMode.None;
        this.sampleRate = 0;
        this.loKey = 0;
        this.hiKey = 0;
        this.loVel = 0;
        this.hiVel = 0;
        this.group = 0;
        this.offset = 0;
        this.end = 0;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.transpose = 0;
        this.tune = 0;
        this.pitchKeyCenter = 0;
        this.pitchKeyTrack = 0;
        this.attenuation = 0;
        this.pan = 0;
        this.ampEnv = new Envelope();
        this.modEnv = new Envelope();
        this.initialFilterQ = 0;
        this.initialFilterFc = 0;
        this.modEnvToPitch = 0;
        this.modEnvToFilterFc = 0;
        this.modLfoToFilterFc = 0;
        this.modLfoToVolume = 0;
        this.delayModLFO = 0;
        this.freqModLFO = 0;
        this.modLfoToPitch = 0;
        this.delayVibLFO = 0;
        this.freqVibLFO = 0;
        this.vibLfoToPitch = 0;
        if (other) {
            this.loopMode = other.loopMode;
            this.sampleRate = other.sampleRate;
            this.loKey = other.loKey;
            this.hiKey = other.hiKey;
            this.loVel = other.loVel;
            this.hiVel = other.hiVel;
            this.group = other.group;
            this.offset = other.offset;
            this.end = other.end;
            this.loopStart = other.loopStart;
            this.loopEnd = other.loopEnd;
            this.transpose = other.transpose;
            this.tune = other.tune;
            this.pitchKeyCenter = other.pitchKeyCenter;
            this.pitchKeyTrack = other.pitchKeyTrack;
            this.attenuation = other.attenuation;
            this.pan = other.pan;
            this.ampEnv = new Envelope(other.ampEnv);
            this.modEnv = new Envelope(other.modEnv);
            this.initialFilterQ = other.initialFilterQ;
            this.initialFilterFc = other.initialFilterFc;
            this.modEnvToPitch = other.modEnvToPitch;
            this.modEnvToFilterFc = other.modEnvToFilterFc;
            this.modLfoToFilterFc = other.modLfoToFilterFc;
            this.modLfoToVolume = other.modLfoToVolume;
            this.delayModLFO = other.delayModLFO;
            this.freqModLFO = other.freqModLFO;
            this.modLfoToPitch = other.modLfoToPitch;
            this.delayVibLFO = other.delayVibLFO;
            this.freqVibLFO = other.freqVibLFO;
            this.vibLfoToPitch = other.vibLfoToPitch;
        }
    }
    clear(forRelative) {
        this.loopMode = LoopMode.None;
        this.sampleRate = 0;
        this.loKey = 0;
        this.hiKey = 0;
        this.loVel = 0;
        this.hiVel = 0;
        this.group = 0;
        this.offset = 0;
        this.end = 0;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.transpose = 0;
        this.tune = 0;
        this.pitchKeyCenter = 0;
        this.pitchKeyTrack = 0;
        this.attenuation = 0;
        this.pan = 0;
        this.ampEnv.clear();
        this.modEnv.clear();
        this.initialFilterQ = 0;
        this.initialFilterFc = 0;
        this.modEnvToPitch = 0;
        this.modEnvToFilterFc = 0;
        this.modLfoToFilterFc = 0;
        this.modLfoToVolume = 0;
        this.delayModLFO = 0;
        this.freqModLFO = 0;
        this.modLfoToPitch = 0;
        this.delayVibLFO = 0;
        this.freqVibLFO = 0;
        this.vibLfoToPitch = 0;
        this.hiKey = 127;
        this.hiVel = 127;
        this.pitchKeyCenter = 60; // C4
        if (forRelative) {
            return;
        }
        this.pitchKeyTrack = 100;
        this.pitchKeyCenter = -1;
        // SF2 defaults in timecents.
        this.ampEnv.delay = -12000.0;
        this.ampEnv.attack = -12000.0;
        this.ampEnv.hold = -12000.0;
        this.ampEnv.decay = -12000.0;
        this.ampEnv.release = -12000.0;
        this.modEnv.delay = -12000.0;
        this.modEnv.attack = -12000.0;
        this.modEnv.hold = -12000.0;
        this.modEnv.decay = -12000.0;
        this.modEnv.release = -12000.0;
        this.initialFilterFc = 13500;
        this.delayModLFO = -12000.0;
        this.delayVibLFO = -12000.0;
    }
    operator(genOper, amount) {
        switch (genOper) {
            case GenOperators.StartAddrsOffset:
                this.offset += TypeConversions.int16ToUint32(amount.shortAmount);
                break;
            case GenOperators.EndAddrsOffset:
                this.end += TypeConversions.int16ToUint32(amount.shortAmount);
                break;
            case GenOperators.StartloopAddrsOffset:
                this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount);
                break;
            case GenOperators.EndloopAddrsOffset:
                this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount);
                break;
            case GenOperators.StartAddrsCoarseOffset:
                this.offset += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                break;
            case GenOperators.ModLfoToPitch:
                this.modLfoToPitch = amount.shortAmount;
                break;
            case GenOperators.VibLfoToPitch:
                this.vibLfoToPitch = amount.shortAmount;
                break;
            case GenOperators.ModEnvToPitch:
                this.modEnvToPitch = amount.shortAmount;
                break;
            case GenOperators.InitialFilterFc:
                this.initialFilterFc = amount.shortAmount;
                break;
            case GenOperators.InitialFilterQ:
                this.initialFilterQ = amount.shortAmount;
                break;
            case GenOperators.ModLfoToFilterFc:
                this.modLfoToFilterFc = amount.shortAmount;
                break;
            case GenOperators.ModEnvToFilterFc:
                this.modEnvToFilterFc = amount.shortAmount;
                break;
            case GenOperators.EndAddrsCoarseOffset:
                this.end += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                break;
            case GenOperators.ModLfoToVolume:
                this.modLfoToVolume = amount.shortAmount;
                break;
            case GenOperators.Pan:
                this.pan = amount.shortAmount / 1000.0;
                break;
            case GenOperators.DelayModLFO:
                this.delayModLFO = amount.shortAmount;
                break;
            case GenOperators.FreqModLFO:
                this.freqModLFO = amount.shortAmount;
                break;
            case GenOperators.DelayVibLFO:
                this.delayVibLFO = amount.shortAmount;
                break;
            case GenOperators.FreqVibLFO:
                this.freqVibLFO = amount.shortAmount;
                break;
            case GenOperators.DelayModEnv:
                this.modEnv.delay = amount.shortAmount;
                break;
            case GenOperators.AttackModEnv:
                this.modEnv.attack = amount.shortAmount;
                break;
            case GenOperators.HoldModEnv:
                this.modEnv.hold = amount.shortAmount;
                break;
            case GenOperators.DecayModEnv:
                this.modEnv.decay = amount.shortAmount;
                break;
            case GenOperators.SustainModEnv:
                this.modEnv.sustain = amount.shortAmount;
                break;
            case GenOperators.ReleaseModEnv:
                this.modEnv.release = amount.shortAmount;
                break;
            case GenOperators.KeynumToModEnvHold:
                this.modEnv.keynumToHold = amount.shortAmount;
                break;
            case GenOperators.KeynumToModEnvDecay:
                this.modEnv.keynumToDecay = amount.shortAmount;
                break;
            case GenOperators.DelayVolEnv:
                this.ampEnv.delay = amount.shortAmount;
                break;
            case GenOperators.AttackVolEnv:
                this.ampEnv.attack = amount.shortAmount;
                break;
            case GenOperators.HoldVolEnv:
                this.ampEnv.hold = amount.shortAmount;
                break;
            case GenOperators.DecayVolEnv:
                this.ampEnv.decay = amount.shortAmount;
                break;
            case GenOperators.SustainVolEnv:
                this.ampEnv.sustain = amount.shortAmount;
                break;
            case GenOperators.ReleaseVolEnv:
                this.ampEnv.release = amount.shortAmount;
                break;
            case GenOperators.KeynumToVolEnvHold:
                this.ampEnv.keynumToHold = amount.shortAmount;
                break;
            case GenOperators.KeynumToVolEnvDecay:
                this.ampEnv.keynumToDecay = amount.shortAmount;
                break;
            case GenOperators.KeyRange:
                this.loKey = amount.lowByteAmount;
                this.hiKey = amount.highByteAmount;
                break;
            case GenOperators.VelRange:
                this.loVel = amount.lowByteAmount;
                this.hiVel = amount.highByteAmount;
                break;
            case GenOperators.StartloopAddrsCoarseOffset:
                this.loopStart += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                break;
            case GenOperators.InitialAttenuation:
                this.attenuation += amount.shortAmount * 0.1;
                break;
            case GenOperators.EndloopAddrsCoarseOffset:
                this.loopEnd += TypeConversions.int16ToUint32(amount.shortAmount) * 32768;
                break;
            case GenOperators.CoarseTune:
                this.transpose += amount.shortAmount;
                break;
            case GenOperators.FineTune:
                this.tune += amount.shortAmount;
                break;
            case GenOperators.SampleModes:
                this.loopMode =
                    (amount.wordAmount & 3) === 3
                        ? LoopMode.Sustain
                        : (amount.wordAmount & 3) === 1
                            ? LoopMode.Continuous
                            : LoopMode.None;
                break;
            case GenOperators.ScaleTuning:
                this.pitchKeyTrack = amount.shortAmount;
                break;
            case GenOperators.ExclusiveClass:
                this.group = amount.wordAmount;
                break;
            case GenOperators.OverridingRootKey:
                this.pitchKeyCenter = amount.shortAmount;
                break;
        }
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
var VoiceEnvelopeSegment;
(function (VoiceEnvelopeSegment) {
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["None"] = 0] = "None";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Delay"] = 1] = "Delay";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Attack"] = 2] = "Attack";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Hold"] = 3] = "Hold";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Decay"] = 4] = "Decay";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Sustain"] = 5] = "Sustain";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Release"] = 6] = "Release";
    VoiceEnvelopeSegment[VoiceEnvelopeSegment["Done"] = 7] = "Done";
})(VoiceEnvelopeSegment || (VoiceEnvelopeSegment = {}));
class VoiceEnvelope {
    constructor() {
        this.level = 0;
        this.slope = 0;
        this.samplesUntilNextSegment = 0;
        this.segment = VoiceEnvelopeSegment.None;
        this.midiVelocity = 0;
        this.parameters = null;
        this.segmentIsExponential = false;
        this.isAmpEnv = false;
    }
    nextSegment(activeSegment, outSampleRate) {
        if (!this.parameters) {
            return;
        }
        while (true) {
            switch (activeSegment) {
                case VoiceEnvelopeSegment.None:
                    this.samplesUntilNextSegment = (this.parameters.delay * outSampleRate) | 0;
                    if (this.samplesUntilNextSegment > 0) {
                        this.segment = VoiceEnvelopeSegment.Delay;
                        this.segmentIsExponential = false;
                        this.level = 0.0;
                        this.slope = 0.0;
                        return;
                    }
                    activeSegment = VoiceEnvelopeSegment.Delay;
                    break;
                case VoiceEnvelopeSegment.Delay:
                    this.samplesUntilNextSegment = (this.parameters.attack * outSampleRate) | 0;
                    if (this.samplesUntilNextSegment > 0) {
                        if (!this.isAmpEnv) {
                            // mod env attack duration scales with velocity (velocity of 1 is full duration, max velocity is 0.125 times duration)
                            this.samplesUntilNextSegment =
                                (this.parameters.attack * ((145 - this.midiVelocity) / 144.0) * outSampleRate) | 0;
                        }
                        this.segment = VoiceEnvelopeSegment.Attack;
                        this.segmentIsExponential = false;
                        this.level = 0.0;
                        this.slope = 1.0 / this.samplesUntilNextSegment;
                        return;
                    }
                    activeSegment = VoiceEnvelopeSegment.Attack;
                    break;
                case VoiceEnvelopeSegment.Attack:
                    this.samplesUntilNextSegment = (this.parameters.hold * outSampleRate) | 0;
                    if (this.samplesUntilNextSegment > 0) {
                        this.segment = VoiceEnvelopeSegment.Hold;
                        this.segmentIsExponential = false;
                        this.level = 1.0;
                        this.slope = 0.0;
                        return;
                    }
                    activeSegment = VoiceEnvelopeSegment.Hold;
                    break;
                case VoiceEnvelopeSegment.Hold:
                    this.samplesUntilNextSegment = (this.parameters.decay * outSampleRate) | 0;
                    if (this.samplesUntilNextSegment > 0) {
                        this.segment = VoiceEnvelopeSegment.Decay;
                        this.level = 1.0;
                        if (this.isAmpEnv) {
                            // I don't truly understand this; just following what LinuxSampler does.
                            let mysterySlope = -9.226 / this.samplesUntilNextSegment;
                            this.slope = Math.exp(mysterySlope);
                            this.segmentIsExponential = true;
                            if (this.parameters.sustain > 0.0) {
                                // Again, this is following LinuxSampler's example, which is similar to
                                // SF2-style decay, where "decay" specifies the time it would take to
                                // get to zero, not to the sustain level.  The SFZ spec is not that
                                // specific about what "decay" means, so perhaps it's really supposed
                                // to specify the time to reach the sustain level.
                                this.samplesUntilNextSegment = (Math.log(this.parameters.sustain) / mysterySlope) | 0;
                            }
                        }
                        else {
                            this.slope = -1.0 / this.samplesUntilNextSegment;
                            this.samplesUntilNextSegment =
                                (this.parameters.decay * (1.0 - this.parameters.sustain) * outSampleRate) | 0;
                            this.segmentIsExponential = false;
                        }
                        return;
                    }
                    activeSegment = VoiceEnvelopeSegment.Decay;
                    break;
                case VoiceEnvelopeSegment.Decay:
                    this.segment = VoiceEnvelopeSegment.Sustain;
                    this.level = this.parameters.sustain;
                    this.slope = 0.0;
                    this.samplesUntilNextSegment = 0x7fffffff;
                    this.segmentIsExponential = false;
                    return;
                case VoiceEnvelopeSegment.Sustain:
                    this.segment = VoiceEnvelopeSegment.Release;
                    this.samplesUntilNextSegment =
                        ((this.parameters.release <= 0 ? VoiceEnvelope.FastReleaseTime : this.parameters.release) *
                            outSampleRate) | 0;
                    if (this.isAmpEnv) {
                        // I don't truly understand this; just following what LinuxSampler does.
                        let mysterySlope = -9.226 / this.samplesUntilNextSegment;
                        this.slope = Math.exp(mysterySlope);
                        this.segmentIsExponential = true;
                    }
                    else {
                        this.slope = -this.level / this.samplesUntilNextSegment;
                        this.segmentIsExponential = false;
                    }
                    return;
                // case VoiceEnvelopeSegment.Release:
                default:
                    this.segment = VoiceEnvelopeSegment.Done;
                    this.segmentIsExponential = false;
                    this.level = 0.0;
                    this.slope = 0.0;
                    this.samplesUntilNextSegment = 0x7ffffff;
                    return;
            }
        }
    }
    setup(newParameters, midiNoteNumber, midiVelocity, isAmpEnv, outSampleRate) {
        this.parameters = new Envelope(newParameters);
        if (this.parameters.keynumToHold > 0) {
            this.parameters.hold += this.parameters.keynumToHold * (60.0 - midiNoteNumber);
            this.parameters.hold =
                this.parameters.hold < -10000.0 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.hold);
        }
        if (this.parameters.keynumToDecay > 0) {
            this.parameters.decay += this.parameters.keynumToDecay * (60.0 - midiNoteNumber);
            this.parameters.decay =
                this.parameters.decay < -10000.0 ? 0.0 : SynthHelper.timecents2Secs(this.parameters.decay);
        }
        this.midiVelocity = midiVelocity | 0;
        this.isAmpEnv = isAmpEnv;
        this.nextSegment(VoiceEnvelopeSegment.None, outSampleRate);
    }
    process(numSamples, outSampleRate) {
        if (this.slope > 0) {
            if (this.segmentIsExponential) {
                this.level *= Math.pow(this.slope, numSamples);
            }
            else {
                this.level += this.slope * numSamples;
            }
        }
        this.samplesUntilNextSegment -= numSamples;
        if (this.samplesUntilNextSegment <= 0) {
            this.nextSegment(this.segment, outSampleRate);
        }
    }
}
VoiceEnvelope.FastReleaseTime = 0.01;

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class VoiceLfo {
    constructor() {
        this.samplesUntil = 0;
        this.level = 0;
        this.delta = 0;
    }
    setup(delay, freqCents, outSampleRate) {
        this.samplesUntil = (delay * outSampleRate) | 0;
        this.delta = (4.0 * SynthHelper.cents2Hertz(freqCents)) / outSampleRate;
        this.level = 0;
    }
    process(blockSamples) {
        if (this.samplesUntil > blockSamples) {
            this.samplesUntil -= blockSamples;
            return;
        }
        this.level += this.delta * blockSamples;
        if (this.level > 1.0) {
            this.delta = -this.delta;
            this.level = 2.0 - this.level;
        }
        else if (this.level < -1.0) {
            this.delta = -this.delta;
            this.level = -2.0 - this.level;
        }
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
// developed by Bernhard Schelling (https://github.com/schellingb/TinySoundFont)
// TypeScript port for alphaTab: (C) 2020 by Daniel Kuschny
// Licensed under: MPL-2.0
class VoiceLowPass {
    constructor(other) {
        this.qInv = 0;
        this.a0 = 0;
        this.a1 = 0;
        this.b1 = 0;
        this.b2 = 0;
        this.z1 = 0;
        this.z2 = 0;
        this.active = false;
        if (other) {
            this.qInv = other.qInv;
            this.a0 = other.a0;
            this.a1 = other.a1;
            this.b1 = other.b1;
            this.b2 = other.b2;
            this.z1 = other.z1;
            this.z2 = other.z2;
            this.active = other.active;
        }
    }
    setup(fc) {
        // Lowpass filter from http://www.earlevel.com/main/2012/11/26/biquad-c-source-code/
        let k = Math.tan(Math.PI * fc);
        let KK = k * k;
        let norm = 1 / (1 + k * this.qInv + KK);
        this.a0 = KK * norm;
        this.a1 = 2 * this.a0;
        this.b1 = 2 * (KK - 1) * norm;
        this.b2 = (1 - k * this.qInv + KK) * norm;
    }
    process(input) {
        let output = input * this.a0 + this.z1;
        this.z1 = input * this.a1 + this.z2 - this.b1 * output;
        this.z2 = input * this.a0 - this.b2 * output;
        return output;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
class Voice {
    constructor() {
        this.playingPreset = 0;
        this.playingKey = 0;
        this.playingChannel = 0;
        this.region = null;
        this.pitchInputTimecents = 0;
        this.pitchOutputFactor = 0;
        this.sourceSamplePosition = 0;
        this.noteGainDb = 0;
        this.panFactorLeft = 0;
        this.panFactorRight = 0;
        this.playIndex = 0;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.ampEnv = new VoiceEnvelope();
        this.modEnv = new VoiceEnvelope();
        this.lowPass = new VoiceLowPass();
        this.modLfo = new VoiceLfo();
        this.vibLfo = new VoiceLfo();
        this.mixVolume = 0;
        this.mute = false;
    }
    updatePitchRatio(c, outSampleRate) {
        let pitchWheel = c.pitchWheel;
        // add additional note pitch
        if (c.perNotePitchWheel.has(this.playingKey)) {
            pitchWheel += (c.perNotePitchWheel.get(this.playingKey) - 8192);
        }
        const pitchShift = pitchWheel === 8192
            ? c.tuning
            : (pitchWheel / 16383.0 * c.pitchRange * 2) - c.pitchRange + c.tuning;
        this.calcPitchRatio(pitchShift, outSampleRate);
    }
    calcPitchRatio(pitchShift, outSampleRate) {
        if (!this.region) {
            return;
        }
        const note = this.playingKey + this.region.transpose + this.region.tune / 100.0;
        let adjustedPitch = this.region.pitchKeyCenter + (note - this.region.pitchKeyCenter) * (this.region.pitchKeyTrack / 100.0);
        if (pitchShift !== 0)
            adjustedPitch += pitchShift;
        this.pitchInputTimecents = adjustedPitch * 100.0;
        this.pitchOutputFactor =
            this.region.sampleRate / (SynthHelper.timecents2Secs(this.region.pitchKeyCenter * 100.0) * outSampleRate);
    }
    end(outSampleRate) {
        if (!this.region) {
            return;
        }
        this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
        this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
        if (this.region.loopMode === LoopMode.Sustain) {
            // Continue playing, but stop looping.
            this.loopEnd = this.loopStart;
        }
    }
    endQuick(outSampleRate) {
        this.ampEnv.parameters.release = 0.0;
        this.ampEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
        this.modEnv.parameters.release = 0.0;
        this.modEnv.nextSegment(VoiceEnvelopeSegment.Sustain, outSampleRate);
    }
    render(f, outputBuffer, offset, numSamples, isMuted) {
        if (!this.region) {
            return;
        }
        let region = this.region;
        const preset = f.presets[this.playingPreset];
        let input = preset.fontSamples;
        let outL = 0;
        let outR = f.outputMode === OutputMode.StereoUnweaved ? numSamples : -1;
        // Cache some values, to give them at least some chance of ending up in registers.
        let updateModEnv = region.modEnvToPitch !== 0 || region.modEnvToFilterFc !== 0;
        let updateModLFO = this.modLfo.delta > 0 &&
            (region.modLfoToPitch !== 0 || region.modLfoToFilterFc !== 0 || region.modLfoToVolume !== 0);
        let updateVibLFO = this.vibLfo.delta > 0 && region.vibLfoToPitch !== 0;
        let isLooping = this.loopStart < this.loopEnd;
        let tmpLoopStart = this.loopStart;
        let tmpLoopEnd = this.loopEnd;
        let tmpSampleEndDbl = region.end;
        let tmpLoopEndDbl = tmpLoopEnd + 1.0;
        let tmpSourceSamplePosition = this.sourceSamplePosition;
        let tmpLowpass = new VoiceLowPass(this.lowPass);
        let dynamicLowpass = region.modLfoToFilterFc !== 0 || region.modEnvToFilterFc !== 0;
        let tmpSampleRate = 0;
        let tmpInitialFilterFc = 0;
        let tmpModLfoToFilterFc = 0;
        let tmpModEnvToFilterFc = 0;
        let dynamicPitchRatio = region.modLfoToPitch !== 0 || region.modEnvToPitch !== 0 || region.vibLfoToPitch !== 0;
        let pitchRatio = 0;
        let tmpModLfoToPitch = 0;
        let tmpVibLfoToPitch = 0;
        let tmpModEnvToPitch = 0;
        let dynamicGain = region.modLfoToVolume !== 0;
        let noteGain = 0;
        let tmpModLfoToVolume = 0;
        if (dynamicLowpass) {
            tmpSampleRate = f.outSampleRate;
            tmpInitialFilterFc = region.initialFilterFc;
            tmpModLfoToFilterFc = region.modLfoToFilterFc;
            tmpModEnvToFilterFc = region.modEnvToFilterFc;
        }
        else {
            tmpSampleRate = 0;
            tmpInitialFilterFc = 0;
            tmpModLfoToFilterFc = 0;
            tmpModEnvToFilterFc = 0;
        }
        if (dynamicPitchRatio) {
            pitchRatio = 0;
            tmpModLfoToPitch = region.modLfoToPitch;
            tmpVibLfoToPitch = region.vibLfoToPitch;
            tmpModEnvToPitch = region.modEnvToPitch;
        }
        else {
            pitchRatio = SynthHelper.timecents2Secs(this.pitchInputTimecents) * this.pitchOutputFactor;
            tmpModLfoToPitch = 0;
            tmpVibLfoToPitch = 0;
            tmpModEnvToPitch = 0;
        }
        if (dynamicGain) {
            tmpModLfoToVolume = region.modLfoToVolume * 0.1;
        }
        else {
            noteGain = SynthHelper.decibelsToGain(this.noteGainDb);
            tmpModLfoToVolume = 0;
        }
        while (numSamples > 0) {
            let gainMono;
            let gainLeft;
            let gainRight = 0;
            let blockSamples = numSamples > Voice.RenderEffectSampleBlock ? Voice.RenderEffectSampleBlock : numSamples;
            numSamples -= blockSamples;
            if (dynamicLowpass) {
                let fres = tmpInitialFilterFc +
                    this.modLfo.level * tmpModLfoToFilterFc +
                    this.modEnv.level * tmpModEnvToFilterFc;
                tmpLowpass.active = fres <= 13500.0;
                if (tmpLowpass.active) {
                    tmpLowpass.setup(SynthHelper.cents2Hertz(fres) / tmpSampleRate);
                }
            }
            if (dynamicPitchRatio) {
                pitchRatio =
                    SynthHelper.timecents2Secs(this.pitchInputTimecents +
                        (this.modLfo.level * tmpModLfoToPitch +
                            this.vibLfo.level * tmpVibLfoToPitch +
                            this.modEnv.level * tmpModEnvToPitch)) * this.pitchOutputFactor;
            }
            if (dynamicGain) {
                noteGain = SynthHelper.decibelsToGain(this.noteGainDb + this.modLfo.level * tmpModLfoToVolume);
            }
            gainMono = noteGain * this.ampEnv.level;
            if (isMuted) {
                gainMono = 0;
            }
            else {
                gainMono *= this.mixVolume;
            }
            // Update EG.
            this.ampEnv.process(blockSamples, f.outSampleRate);
            if (updateModEnv) {
                this.modEnv.process(blockSamples, f.outSampleRate);
            }
            // Update LFOs.
            if (updateModLFO) {
                this.modLfo.process(blockSamples);
            }
            if (updateVibLFO) {
                this.vibLfo.process(blockSamples);
            }
            switch (f.outputMode) {
                case OutputMode.StereoInterleaved:
                    gainLeft = gainMono * this.panFactorLeft;
                    gainRight = gainMono * this.panFactorRight;
                    while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                        let pos = tmpSourceSamplePosition | 0;
                        let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                        // Simple linear interpolation.
                        // TODO: check for interpolation mode on voice
                        let alpha = tmpSourceSamplePosition - pos;
                        let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                        // Low-pass filter.
                        if (tmpLowpass.active)
                            value = tmpLowpass.process(value);
                        outputBuffer[offset + outL] += value * gainLeft;
                        outL++;
                        outputBuffer[offset + outL] += value * gainRight;
                        outL++;
                        // Next sample.
                        tmpSourceSamplePosition += pitchRatio;
                        if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                            tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                        }
                    }
                    break;
                case OutputMode.StereoUnweaved:
                    gainLeft = gainMono * this.panFactorLeft;
                    gainRight = gainMono * this.panFactorRight;
                    while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                        let pos = tmpSourceSamplePosition | 0;
                        let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                        // Simple linear interpolation.
                        let alpha = tmpSourceSamplePosition - pos;
                        let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                        // Low-pass filter.
                        if (tmpLowpass.active)
                            value = tmpLowpass.process(value);
                        outputBuffer[offset + outL] += value * gainLeft;
                        outL++;
                        outputBuffer[offset + outR] += value * gainRight;
                        outR++;
                        // Next sample.
                        tmpSourceSamplePosition += pitchRatio;
                        if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                            tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                        }
                    }
                    break;
                case OutputMode.Mono:
                    while (blockSamples-- > 0 && tmpSourceSamplePosition < tmpSampleEndDbl) {
                        let pos = tmpSourceSamplePosition | 0;
                        let nextPos = pos >= tmpLoopEnd && isLooping ? tmpLoopStart : pos + 1;
                        // Simple linear interpolation.
                        let alpha = tmpSourceSamplePosition - pos;
                        let value = input[pos] * (1.0 - alpha) + input[nextPos] * alpha;
                        // Low-pass filter.
                        if (tmpLowpass.active)
                            value = tmpLowpass.process(value);
                        outputBuffer[offset + outL] = value * gainMono;
                        outL++;
                        // Next sample.
                        tmpSourceSamplePosition += pitchRatio;
                        if (tmpSourceSamplePosition >= tmpLoopEndDbl && isLooping) {
                            tmpSourceSamplePosition -= tmpLoopEnd - tmpLoopStart + 1.0;
                        }
                    }
                    break;
            }
            if (tmpSourceSamplePosition >= tmpSampleEndDbl || this.ampEnv.segment === VoiceEnvelopeSegment.Done) {
                this.kill();
                return;
            }
        }
        this.sourceSamplePosition = tmpSourceSamplePosition;
        if (tmpLowpass.active || dynamicLowpass) {
            this.lowPass = tmpLowpass;
        }
    }
    kill() {
        this.playingPreset = -1;
    }
}
/**
 * The lower this block size is the more accurate the effects are.
 * Increasing the value significantly lowers the CPU usage of the voice rendering.
 * If LFO affects the low-pass filter it can be hearable even as low as 8.
 */
Voice.RenderEffectSampleBlock = SynthConstants.MicroBufferSize;

class Queue {
    constructor() {
        this._items = [];
        this._position = 0;
        this.isEmpty = true;
    }
    clear() {
        this._items = [];
        this._position = 0;
        this.isEmpty = true;
    }
    enqueue(item) {
        this.isEmpty = false;
        this._items.push(item);
    }
    peek() {
        return this._items[this._position];
    }
    dequeue() {
        const item = this._items[this._position];
        this._position++;
        if (this._position >= this._items.length / 2) {
            this._items = this._items.slice(this._position);
            this._position = 0;
        }
        this.isEmpty = this._items.length == 0;
        return item;
    }
    toArray() {
        const items = this._items.slice(this._position);
        items.reverse();
        return items;
    }
}

// The SoundFont loading and Audio Synthesis is based on TinySoundFont, licensed under MIT,
/**
 * This is a tiny soundfont based synthesizer.
 * NOT YET IMPLEMENTED
 *   - Support for ChorusEffectsSend and ReverbEffectsSend generators
 *   - Better low-pass filter without lowering performance too much
 *   - Support for modulators
 */
class TinySoundFont {
    constructor(sampleRate) {
        this._midiEventQueue = new Queue();
        this._mutedChannels = new Map();
        this._soloChannels = new Map();
        this._isAnySolo = false;
        this.currentTempo = 0;
        this.timeSignatureNumerator = 0;
        this.timeSignatureDenominator = 0;
        this.presets = null;
        this._voices = [];
        this._channels = null;
        this._voicePlayIndex = 0;
        /**
         * Gets the currently configured output mode.
         */
        this.outputMode = OutputMode.StereoInterleaved;
        /**
         * Gets the currently configured sample rate.
         */
        this.outSampleRate = 0;
        /**
         * Gets the currently configured global gain in DB.
         */
        this.globalGainDb = 0;
        this.outSampleRate = sampleRate;
    }
    synthesize(buffer, bufferPos, sampleCount) {
        return this.fillWorkingBuffer(buffer, bufferPos, sampleCount);
    }
    synthesizeSilent(sampleCount) {
        this.fillWorkingBuffer(null, 0, sampleCount);
    }
    channelGetMixVolume(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].mixVolume
            : 1.0;
    }
    channelSetMixVolume(channel, volume) {
        let c = this.channelInit(channel);
        for (let v of this._voices) {
            if (v.playingChannel === channel && v.playingPreset !== -1) {
                v.mixVolume = volume;
            }
        }
        c.mixVolume = volume;
    }
    channelSetMute(channel, mute) {
        if (mute) {
            this._mutedChannels.set(channel, true);
        }
        else {
            this._mutedChannels.delete(channel);
        }
    }
    channelSetSolo(channel, solo) {
        if (solo) {
            this._soloChannels.set(channel, true);
        }
        else {
            this._soloChannels.delete(channel);
        }
        this._isAnySolo = this._soloChannels.size > 0;
    }
    resetChannelStates() {
        this._mutedChannels = new Map();
        this._soloChannels = new Map();
        this._isAnySolo = false;
    }
    dispatchEvent(synthEvent) {
        this._midiEventQueue.enqueue(synthEvent);
    }
    fillWorkingBuffer(buffer, bufferPos, sampleCount) {
        // Break the process loop into sections representing the smallest timeframe before the midi controls need to be updated
        // the bigger the timeframe the more efficent the process is, but playback quality will be reduced.
        const anySolo = this._isAnySolo;
        const processedEvents = [];
        // process in micro-buffers
        // process events for first microbuffer
        while (!this._midiEventQueue.isEmpty) {
            let m = this._midiEventQueue.dequeue();
            if (m.isMetronome && this.metronomeVolume > 0) {
                this.channelNoteOff(SynthConstants.MetronomeChannel, 33);
                this.channelNoteOn(SynthConstants.MetronomeChannel, 33, 95 / 127);
            }
            else if (m.event) {
                this.processMidiMessage(m.event);
            }
            processedEvents.push(m);
        }
        // voice processing loop
        for (const voice of this._voices) {
            if (voice.playingPreset !== -1) {
                const channel = voice.playingChannel;
                // channel is muted if it is either explicitley muted, or another channel is set to solo but not this one.
                // exception. metronome is implicitly added in solo
                const isChannelMuted = this._mutedChannels.has(channel)
                    || (anySolo && channel != SynthConstants.MetronomeChannel && !this._soloChannels.has(channel));
                if (!buffer) {
                    voice.kill();
                }
                else {
                    voice.render(this, buffer, bufferPos, sampleCount, isChannelMuted);
                }
            }
        }
        return processedEvents;
    }
    processMidiMessage(e) {
        const command = e.command;
        const channel = e.channel;
        const data1 = e.data1;
        const data2 = e.data2;
        switch (command) {
            case MidiEventType.NoteOff:
                this.channelNoteOff(channel, data1);
                break;
            case MidiEventType.NoteOn:
                this.channelNoteOn(channel, data1, data2 / 127.0);
                break;
            case MidiEventType.NoteAftertouch:
                break;
            case MidiEventType.Controller:
                this.channelMidiControl(channel, data1, data2);
                break;
            case MidiEventType.ProgramChange:
                this.channelSetPresetNumber(channel, data1, channel === 9);
                break;
            case MidiEventType.ChannelAftertouch:
                break;
            case MidiEventType.PitchBend:
                this.channelSetPitchWheel(channel, data1 | (data2 << 7));
                break;
            case MidiEventType.PerNotePitchBend:
                const midi20 = e;
                let perNotePitchWheel = midi20.pitch;
                // midi 2.0 -> midi 1.0
                perNotePitchWheel = (perNotePitchWheel * SynthConstants.MaxPitchWheel) / SynthConstants.MaxPitchWheel20;
                this.channelSetPerNotePitchWheel(channel, midi20.noteKey, perNotePitchWheel);
                break;
            case MidiEventType.Meta:
                switch (e.data1) {
                    case MetaEventType.Tempo:
                        this.currentTempo = 60000000 / e.value;
                        break;
                    case MetaEventType.TimeSignature:
                        this.timeSignatureNumerator = e.data[0];
                        this.timeSignatureDenominator = Math.pow(2, e.data[1]);
                        break;
                }
                break;
        }
    }
    get metronomeVolume() {
        return this.channelGetMixVolume(SynthConstants.MetronomeChannel);
    }
    set metronomeVolume(value) {
        this.setupMetronomeChannel(value);
    }
    setupMetronomeChannel(volume) {
        this.channelSetMixVolume(SynthConstants.MetronomeChannel, volume);
        if (volume > 0) {
            this.channelSetVolume(SynthConstants.MetronomeChannel, 1);
            this.channelSetPresetNumber(SynthConstants.MetronomeChannel, 0, true);
        }
    }
    get masterVolume() {
        return SynthHelper.decibelsToGain(this.globalGainDb);
    }
    set masterVolume(value) {
        var gainDb = SynthHelper.gainToDecibels(value);
        const gainDBChange = gainDb - this.globalGainDb;
        if (gainDBChange === 0) {
            return;
        }
        for (const v of this._voices) {
            if (v.playingPreset !== -1) {
                v.noteGainDb += gainDBChange;
            }
        }
        this.globalGainDb = gainDb;
    }
    /**
     * Stop all playing notes immediatly and reset all channel parameters but keeps user
     * defined settings
     */
    resetSoft() {
        for (const v of this._voices) {
            if (v.playingPreset !== -1 &&
                (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                v.endQuick(this.outSampleRate);
            }
        }
        if (this._channels) {
            for (const c of this._channels.channelList) {
                c.presetIndex = 0;
                c.bank = 0;
                c.pitchWheel = 8192;
                c.midiPan = 8192;
                c.perNotePitchWheel.clear();
                c.midiVolume = 16383;
                c.midiExpression = 16383;
                c.midiRpn = 0xffff;
                c.midiData = 0;
                c.panOffset = 0.0;
                c.gainDb = 0.0;
                c.pitchRange = 2.0;
                c.tuning = 0.0;
            }
        }
    }
    get presetCount() {
        var _a, _b;
        return (_b = (_a = this.presets) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    }
    /**
     * Stop all playing notes immediatly and reset all channel parameters
     */
    reset() {
        for (let v of this._voices) {
            if (v.playingPreset !== -1 &&
                (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release !== 0)) {
                v.endQuick(this.outSampleRate);
            }
        }
        this._channels = null;
    }
    /**
     * Setup the parameters for the voice render methods
     * @param outputMode if mono or stereo and how stereo channel data is ordered
     * @param sampleRate the number of samples per second (output frequency)
     * @param globalGainDb volume gain in decibels (>0 means higher, <0 means lower)
     */
    setOutput(outputMode, sampleRate, globalGainDb) {
        this.outputMode = outputMode;
        this.outSampleRate = sampleRate >= 1 ? sampleRate : 44100.0;
        this.globalGainDb = globalGainDb;
    }
    /**
     * Start playing a note
     * @param presetIndex preset index >= 0 and < {@link presetCount}
     * @param key note value between 0 and 127 (60 being middle C)
     * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
     */
    noteOn(presetIndex, key, vel) {
        if (!this.presets) {
            return;
        }
        const midiVelocity = (vel * 127) | 0;
        if (presetIndex < 0 || presetIndex >= this.presets.length) {
            return;
        }
        if (vel <= 0.0) {
            this.noteOff(presetIndex, key);
            return;
        }
        // Play all matching regions.
        const voicePlayIndex = this._voicePlayIndex++;
        for (const region of this.presets[presetIndex].regions) {
            if (key < region.loKey ||
                key > region.hiKey ||
                midiVelocity < region.loVel ||
                midiVelocity > region.hiVel) {
                continue;
            }
            let voice = null;
            if (region.group !== 0) {
                for (const v of this._voices) {
                    if (v.playingPreset === presetIndex && v.region.group === region.group) {
                        v.endQuick(this.outSampleRate);
                    }
                    else if (v.playingPreset === -1 && !voice) {
                        voice = v;
                    }
                }
            }
            else {
                for (let v of this._voices) {
                    if (v.playingPreset === -1) {
                        voice = v;
                    }
                }
            }
            if (!voice) {
                for (let i = 0; i < 4; i++) {
                    const newVoice = new Voice();
                    newVoice.playingPreset = -1;
                    this._voices.push(newVoice);
                }
                voice = this._voices[this._voices.length - 4];
            }
            voice.region = region;
            voice.playingPreset = presetIndex;
            voice.playingKey = key;
            voice.playIndex = voicePlayIndex;
            voice.noteGainDb = this.globalGainDb - region.attenuation - SynthHelper.gainToDecibels(1.0 / vel);
            if (this._channels) {
                this._channels.setupVoice(this, voice);
            }
            else {
                voice.calcPitchRatio(0, this.outSampleRate);
                // The SFZ spec is silent about the pan curve, but a 3dB pan law seems common. This sqrt() curve matches what Dimension LE does; Alchemy Free seems closer to sin(adjustedPan * pi/2).
                voice.panFactorLeft = Math.sqrt(0.5 - region.pan);
                voice.panFactorRight = Math.sqrt(0.5 + region.pan);
            }
            // Offset/end.
            voice.sourceSamplePosition = region.offset;
            // Loop.
            const doLoop = region.loopMode !== LoopMode.None && region.loopStart < region.loopEnd;
            voice.loopStart = doLoop ? region.loopStart : 0;
            voice.loopEnd = doLoop ? region.loopEnd : 0;
            // Setup envelopes.
            voice.ampEnv.setup(region.ampEnv, key, midiVelocity, true, this.outSampleRate);
            voice.modEnv.setup(region.modEnv, key, midiVelocity, false, this.outSampleRate);
            // Setup lowpass filter.
            const filterQDB = region.initialFilterQ / 10.0;
            voice.lowPass.qInv = 1.0 / Math.pow(10.0, filterQDB / 20.0);
            voice.lowPass.z1 = 0;
            voice.lowPass.z2 = 0;
            voice.lowPass.active = region.initialFilterFc <= 13500;
            if (voice.lowPass.active) {
                voice.lowPass.setup(SynthHelper.cents2Hertz(region.initialFilterFc) / this.outSampleRate);
            }
            // Setup LFO filters.
            voice.modLfo.setup(region.delayModLFO, region.freqModLFO, this.outSampleRate);
            voice.vibLfo.setup(region.delayVibLFO, region.freqVibLFO, this.outSampleRate);
        }
    }
    /**
     * Start playing a note
     * @param bank instrument bank number (alternative to preset_index)
     * @param presetNumber preset number (alternative to preset_index)
     * @param key note value between 0 and 127 (60 being middle C)
     * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
     * @returns returns false if preset does not exist, otherwise true
     */
    bankNoteOn(bank, presetNumber, key, vel) {
        let presetIndex = this.getPresetIndex(bank, presetNumber);
        if (presetIndex === -1) {
            return false;
        }
        this.noteOn(presetIndex, key, vel);
        return true;
    }
    /**
     * Stop playing a note
     */
    noteOff(presetIndex, key) {
        let matchFirst = null;
        let matchLast = null;
        let matches = [];
        for (let v of this._voices) {
            if (v.playingPreset !== presetIndex ||
                v.playingKey !== key ||
                v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                continue;
            }
            else if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                matchFirst = v;
                matchLast = v;
                matches.push(v);
            }
            else if (v.playIndex === matchFirst.playIndex) {
                matchLast = v;
                matches.push(v);
            }
        }
        if (!matchFirst) {
            return;
        }
        for (const v of matches) {
            if (v !== matchFirst &&
                v !== matchLast &&
                (v.playIndex !== matchFirst.playIndex ||
                    v.playingPreset !== presetIndex ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                continue;
            }
            v.end(this.outSampleRate);
        }
    }
    /**
     * Stop playing a note
     * @returns returns false if preset does not exist, otherwise true
     */
    bankNoteOff(bank, presetNumber, key) {
        const presetIndex = this.getPresetIndex(bank, presetNumber);
        if (presetIndex === -1) {
            return false;
        }
        this.noteOff(presetIndex, key);
        return true;
    }
    /**
     * Stop playing all notes (end with sustain and release)
     */
    noteOffAll(immediate) {
        for (const voice of this._voices) {
            if (voice.playingPreset !== -1 && voice.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                if (immediate) {
                    voice.endQuick(this.outSampleRate);
                }
                else {
                    voice.end(this.outSampleRate);
                }
            }
        }
    }
    get activeVoiceCount() {
        let count = 0;
        for (const v of this._voices) {
            if (v.playingPreset !== -1) {
                count++;
            }
        }
        return count;
    }
    channelInit(channel) {
        if (this._channels && channel < this._channels.channelList.length) {
            return this._channels.channelList[channel];
        }
        if (!this._channels) {
            this._channels = new Channels();
        }
        for (let i = this._channels.channelList.length; i <= channel; i++) {
            let c = new Channel();
            c.presetIndex = 0;
            c.bank = 0;
            c.pitchWheel = 8192;
            c.midiPan = 8192;
            c.midiVolume = 16383;
            c.midiExpression = 16383;
            c.midiRpn = 0xffff;
            c.midiData = 0;
            c.panOffset = 0.0;
            c.gainDb = 0.0;
            c.pitchRange = 2.0;
            c.tuning = 0.0;
            c.mixVolume = 1;
            this._channels.channelList.push(c);
        }
        return this._channels.channelList[channel];
    }
    /**
     * Returns the preset index from a bank and preset number, or -1 if it does not exist in the loaded SoundFont
     */
    getPresetIndex(bank, presetNumber) {
        if (!this.presets) {
            return -1;
        }
        // search reverse (last import wins)
        for (let i = this.presets.length - 1; i >= 0; i--) {
            let preset = this.presets[i];
            if (preset.presetNumber === presetNumber && preset.bank === bank) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Returns the name of a preset index >= 0 and < GetPresetName()
     * @param presetIndex
     */
    getPresetName(presetIndex) {
        if (!this.presets) {
            return null;
        }
        return presetIndex < 0 || presetIndex >= this.presets.length ? null : this.presets[presetIndex].name;
    }
    /**
     * Returns the name of a preset by bank and preset number
     */
    bankGetPresetName(bank, presetNumber) {
        return this.getPresetName(this.getPresetIndex(bank, presetNumber));
    }
    /**
     * Start playing a note on a channel
     * @param channel channel number
     * @param key note value between 0 and 127 (60 being middle C)
     * @param vel velocity as a float between 0.0 (equal to note off) and 1.0 (full)
     */
    channelNoteOn(channel, key, vel) {
        if (!this._channels || channel > this._channels.channelList.length) {
            return;
        }
        this._channels.activeChannel = channel;
        this.noteOn(this._channels.channelList[channel].presetIndex, key, vel);
    }
    /**
     * Stop playing notes on a channel
     * @param channel channel number
     * @param key note value between 0 and 127 (60 being middle C)
     */
    channelNoteOff(channel, key) {
        const matches = [];
        let matchFirst = null;
        let matchLast = null;
        for (const v of this._voices) {
            // Find the first and last entry in the voices list with matching channel, key and look up the smallest play index
            if (v.playingPreset === -1 ||
                v.playingChannel !== channel ||
                v.playingKey !== key ||
                v.ampEnv.segment >= VoiceEnvelopeSegment.Release) {
                continue;
            }
            if (!matchFirst || v.playIndex < matchFirst.playIndex) {
                matchFirst = v;
                matchLast = v;
                matches.push(v);
            }
            else if (v.playIndex === matchFirst.playIndex) {
                matchLast = v;
                matches.push(v);
            }
        }
        let c = this.channelInit(channel);
        c.perNotePitchWheel.delete(key);
        if (!matchFirst) {
            return;
        }
        for (const v of matches) {
            // Stop all voices with matching channel, key and the smallest play index which was enumerated above
            if (v !== matchFirst &&
                v !== matchLast &&
                (v.playIndex !== matchFirst.playIndex ||
                    v.playingPreset === -1 ||
                    v.playingChannel !== channel ||
                    v.playingKey !== key ||
                    v.ampEnv.segment >= VoiceEnvelopeSegment.Release)) {
                continue;
            }
            v.end(this.outSampleRate);
        }
    }
    /**
     * Stop playing all notes on a channel with sustain and release.
     * @param channel channel number
     */
    channelNoteOffAll(channel) {
        let c = this.channelInit(channel);
        c.perNotePitchWheel.clear();
        for (const v of this._voices) {
            if (v.playingPreset !== -1 &&
                v.playingChannel === channel &&
                v.ampEnv.segment < VoiceEnvelopeSegment.Release) {
                v.end(this.outSampleRate);
            }
        }
    }
    /**
     * Stop playing all notes on a channel immediately
     * @param channel channel number
     */
    channelSoundsOffAll(channel) {
        let c = this.channelInit(channel);
        c.perNotePitchWheel.clear();
        for (let v of this._voices) {
            if (v.playingPreset !== -1 &&
                v.playingChannel === channel &&
                (v.ampEnv.segment < VoiceEnvelopeSegment.Release || v.ampEnv.parameters.release === 0)) {
                v.endQuick(this.outSampleRate);
            }
        }
    }
    /**
     *
     * @param channel channel number
     * @param presetIndex preset index <= 0 and > {@link presetCount}
     */
    channelSetPresetIndex(channel, presetIndex) {
        this.channelInit(channel).presetIndex = TypeConversions.int32ToUint16(presetIndex);
    }
    /**
     * @param channel channel number
     * @param presetNumber preset number (alternative to preset_index)
     * @param midiDrums false for normal channels, otherwise apply MIDI drum channel rules
     * @returns return false if preset does not exist, otherwise true
     */
    channelSetPresetNumber(channel, presetNumber, midiDrums = false) {
        const c = this.channelInit(channel);
        let presetIndex = 0;
        if (midiDrums) {
            presetIndex = this.getPresetIndex(128 | (c.bank & 0x7fff), presetNumber);
            if (presetIndex === -1) {
                presetIndex = this.getPresetIndex(128, presetNumber);
            }
            if (presetIndex === -1) {
                presetIndex = this.getPresetIndex(128, 0);
            }
            if (presetIndex === -1) {
                presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
            }
        }
        else {
            presetIndex = this.getPresetIndex(c.bank & 0x7ff, presetNumber);
        }
        c.presetIndex = presetIndex;
        return (presetIndex !== -1);
    }
    /**
     * @param channel channel number
     * @param bank instrument bank number (alternative to preset_index)
     */
    channelSetBank(channel, bank) {
        this.channelInit(channel).bank = TypeConversions.int32ToUint16(bank);
    }
    /**
     * @param channel channel number
     * @param bank instrument bank number (alternative to preset_index)
     * @param presetNumber preset number (alternative to preset_index)
     * @returns return false if preset does not exist, otherwise true
     */
    channelSetBankPreset(channel, bank, presetNumber) {
        const c = this.channelInit(channel);
        const presetIndex = this.getPresetIndex(bank, presetNumber);
        if (presetIndex === -1) {
            return false;
        }
        c.presetIndex = TypeConversions.int32ToUint16(presetIndex);
        c.bank = TypeConversions.int32ToUint16(bank);
        return true;
    }
    /**
     * @param channel channel number
     * @param pan stereo panning value from 0.0 (left) to 1.0 (right) (default 0.5 center)
     */
    channelSetPan(channel, pan) {
        for (const v of this._voices) {
            if (v.playingChannel === channel && v.playingPreset !== -1) {
                let newPan = v.region.pan + pan - 0.5;
                if (newPan <= -0.5) {
                    v.panFactorLeft = 1;
                    v.panFactorRight = 0;
                }
                else if (newPan >= 0.5) {
                    v.panFactorLeft = 0;
                    v.panFactorRight = 1;
                }
                else {
                    v.panFactorLeft = Math.sqrt(0.5 - newPan);
                    v.panFactorRight = Math.sqrt(0.5 + newPan);
                }
            }
        }
        this.channelInit(channel).panOffset = pan - 0.5;
    }
    /**
     * @param channel channel number
     * @param volume linear volume scale factor (default 1.0 full)
     */
    channelSetVolume(channel, volume) {
        const c = this.channelInit(channel);
        const gainDb = SynthHelper.gainToDecibels(volume);
        const gainDBChange = gainDb - c.gainDb;
        if (gainDBChange === 0) {
            return;
        }
        for (const v of this._voices) {
            if (v.playingChannel === channel && v.playingPreset !== -1) {
                v.noteGainDb += gainDBChange;
            }
        }
        c.gainDb = gainDb;
    }
    /**
     * @param channel channel number
     * @param pitchWheel pitch wheel position 0 to 16383 (default 8192 unpitched)
     */
    channelSetPitchWheel(channel, pitchWheel) {
        const c = this.channelInit(channel);
        if (c.pitchWheel === pitchWheel) {
            return;
        }
        c.pitchWheel = TypeConversions.int32ToUint16(pitchWheel);
        this.channelApplyPitch(channel, c);
    }
    /**
     * @param channel channel number
     * @param key note value between 0 and 127
     * @param pitchWheel pitch wheel position 0 to 16383 (default 8192 unpitched)
     */
    channelSetPerNotePitchWheel(channel, key, pitchWheel) {
        const c = this.channelInit(channel);
        if (c.perNotePitchWheel.has(key) && c.perNotePitchWheel.get(key) === pitchWheel) {
            return;
        }
        c.perNotePitchWheel.set(key, pitchWheel);
        this.channelApplyPitch(channel, c, key);
    }
    channelApplyPitch(channel, c, key = -1) {
        for (const v of this._voices) {
            if (v.playingChannel === channel && v.playingPreset !== -1 && (key == -1 || v.playingKey === key)) {
                v.updatePitchRatio(c, this.outSampleRate);
            }
        }
    }
    /**
     * @param channel channel number
     * @param pitchRange range of the pitch wheel in semitones (default 2.0, total +/- 2 semitones)
     */
    channelSetPitchRange(channel, pitchRange) {
        const c = this.channelInit(channel);
        if (c.pitchRange === pitchRange) {
            return;
        }
        c.pitchRange = pitchRange;
        if (c.pitchWheel !== 8192) {
            this.channelApplyPitch(channel, c);
        }
    }
    /**
     * @param channel channel number
     * @param tuning tuning of all playing voices in semitones (default 0.0, standard (A440) tuning)
     */
    channelSetTuning(channel, tuning) {
        const c = this.channelInit(channel);
        if (c.tuning === tuning) {
            return;
        }
        c.tuning = tuning;
        this.channelApplyPitch(channel, c);
    }
    /**
     * Apply a MIDI control change to the channel (not all controllers are supported!)
     */
    channelMidiControl(channel, controller, controlValue) {
        let c = this.channelInit(channel);
        switch (controller) {
            case 5: /*Portamento_Time_MSB*/
            case 96: /*DATA_BUTTON_INCREMENT*/
            case 97: /*DATA_BUTTON_DECREMENT*/
            case 64: /*HOLD_PEDAL*/
            case 65: /*Portamento*/
            case 66: /*SostenutoPedal */
            case 122: /*LocalKeyboard */
            case 124: /*OmniModeOff */
            case 125: /*OmniModeon */
            case 126: /*MonoMode */
            case 127 /*PolyMode*/:
                return;
            case 38 /*DATA_ENTRY_LSB*/:
                c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x3f80) | controlValue);
                if (c.midiRpn === 0) {
                    this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                }
                else if (c.midiRpn === 1) {
                    this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                }
                else if (c.midiRpn === 2) {
                    this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                }
                return;
            case 7 /*VOLUME_MSB*/:
                c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x7f) | (controlValue << 7));
                // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                return;
            case 39 /*VOLUME_LSB*/:
                c.midiVolume = TypeConversions.int32ToUint16((c.midiVolume & 0x3f80) | controlValue);
                // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                return;
            case 11 /*EXPRESSION_MSB*/:
                c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x7f) | (controlValue << 7));
                // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                return;
            case 43 /*EXPRESSION_LSB*/:
                c.midiExpression = TypeConversions.int32ToUint16((c.midiExpression & 0x3f80) | controlValue);
                // Raising to the power of 3 seems to result in a decent sounding volume curve for MIDI
                this.channelSetVolume(channel, Math.pow((c.midiVolume / 16383.0) * (c.midiExpression / 16383.0), 3.0));
                return;
            case 10 /*PAN_MSB*/:
                c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x7f) | (controlValue << 7));
                this.channelSetPan(channel, c.midiPan / 16383.0);
                return;
            case 42 /*PAN_LSB*/:
                c.midiPan = TypeConversions.int32ToUint16((c.midiPan & 0x3f80) | controlValue);
                this.channelSetPan(channel, c.midiPan / 16383.0);
                return;
            case 6 /*DATA_ENTRY_MSB*/:
                c.midiData = TypeConversions.int32ToUint16((c.midiData & 0x7f) | (controlValue << 7));
                if (c.midiRpn === 0) {
                    this.channelSetPitchRange(channel, (c.midiData >> 7) + 0.01 * (c.midiData & 0x7f));
                }
                else if (c.midiRpn === 1) {
                    this.channelSetTuning(channel, (c.tuning | 0) + (c.midiData - 8192.0) / 8192.0); // fine tune
                }
                else if (c.midiRpn === 2 && controller === 6) {
                    this.channelSetTuning(channel, controlValue - 64.0 + (c.tuning - (c.tuning | 0))); // coarse tune
                }
                return;
            case 0 /*BANK_SELECT_MSB*/:
                c.bank = TypeConversions.int32ToUint16(0x8000 | controlValue);
                return;
            // bank select MSB alone acts like LSB
            case 32 /*BANK_SELECT_LSB*/:
                c.bank = TypeConversions.int32ToUint16(((c.bank & 0x8000) !== 0 ? (c.bank & 0x7f) << 7 : 0) | controlValue);
                return;
            case 101 /*RPN_MSB*/:
                c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x7f) | (controlValue << 7));
                // TODO
                return;
            case 100 /*RPN_LSB*/:
                c.midiRpn = TypeConversions.int32ToUint16(((c.midiRpn === 0xffff ? 0 : c.midiRpn) & 0x3f80) | controlValue);
                // TODO
                return;
            case 98 /*NRPN_LSB*/:
                c.midiRpn = 0xffff;
                // TODO
                return;
            case 99 /*NRPN_MSB*/:
                c.midiRpn = 0xffff;
                // TODO
                return;
            case 120 /*ALL_SOUND_OFF*/:
                this.channelSoundsOffAll(channel);
                return;
            case 123 /*ALL_NOTES_OFF*/:
                this.channelNoteOffAll(channel);
                return;
            case 121 /*ALL_CTRL_OFF*/:
                c.midiVolume = 16383;
                c.midiExpression = 16383;
                c.midiPan = 8192;
                c.bank = 0;
                this.channelSetVolume(channel, 1);
                this.channelSetPan(channel, 0.5);
                this.channelSetPitchRange(channel, 2);
                // TODO
                return;
        }
    }
    /**
     * Gets the current preset index of the given channel.
     * @param channel The channel index
     * @returns The current preset index of the given channel.
     */
    channelGetPresetIndex(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].presetIndex
            : 0;
    }
    /**
     * Gets the current bank of the given channel.
     * @param channel The channel index
     * @returns The current bank of the given channel.
     */
    channelGetPresetBank(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].bank & 0x7fff
            : 0;
    }
    /**
     * Gets the current pan of the given channel.
     * @param channel The channel index
     * @returns The current pan of the given channel.
     */
    channelGetPan(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].panOffset - 0.5
            : 0.5;
    }
    /**
     * Gets the current volume of the given channel.
     * @param channel The channel index
     * @returns The current volune of the given channel.
     */
    channelGetVolume(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? SynthHelper.decibelsToGain(this._channels.channelList[channel].gainDb)
            : 1.0;
    }
    /**
     * Gets the current pitch wheel of the given channel.
     * @param channel The channel index
     * @returns The current pitch wheel of the given channel.
     */
    channelGetPitchWheel(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].pitchWheel
            : 8192;
    }
    /**
     * Gets the current pitch range of the given channel.
     * @param channel The channel index
     * @returns The current pitch range of the given channel.
     */
    channelGetPitchRange(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].pitchRange
            : 2.0;
    }
    /**
     * Gets the current tuning of the given channel.
     * @param channel The channel index
     * @returns The current tuning of the given channel.
     */
    channelGetTuning(channel) {
        return this._channels && channel < this._channels.channelList.length
            ? this._channels.channelList[channel].tuning
            : 0.0;
    }
    resetPresets() {
        this.presets = [];
    }
    loadPresets(hydra, append) {
        const newPresets = [];
        for (let phdrIndex = 0; phdrIndex < hydra.phdrs.length - 1; phdrIndex++) {
            const phdr = hydra.phdrs[phdrIndex];
            let regionIndex = 0;
            const preset = new Preset();
            newPresets.push(preset);
            preset.name = phdr.presetName;
            preset.bank = phdr.bank;
            preset.presetNumber = phdr.preset;
            preset.fontSamples = hydra.fontSamples;
            let regionNum = 0;
            for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                const pbag = hydra.pbags[pbagIndex];
                let plokey = 0;
                let phikey = 127;
                let plovel = 0;
                let phivel = 127;
                for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                    let pgen = hydra.pgens[pgenIndex];
                    if (pgen.genOper === HydraPgen.GenKeyRange) {
                        plokey = pgen.genAmount.lowByteAmount;
                        phikey = pgen.genAmount.highByteAmount;
                        continue;
                    }
                    if (pgen.genOper === HydraPgen.GenVelRange) {
                        plovel = pgen.genAmount.lowByteAmount;
                        phivel = pgen.genAmount.highByteAmount;
                        continue;
                    }
                    if (pgen.genOper !== HydraPgen.GenInstrument) {
                        continue;
                    }
                    if (pgen.genAmount.wordAmount >= hydra.insts.length) {
                        continue;
                    }
                    let pinst = hydra.insts[pgen.genAmount.wordAmount];
                    for (let ibagIndex = pinst.instBagNdx; ibagIndex < hydra.insts[pgen.genAmount.wordAmount + 1].instBagNdx; ibagIndex++) {
                        let ibag = hydra.ibags[ibagIndex];
                        let ilokey = 0;
                        let ihikey = 127;
                        let ilovel = 0;
                        let ihivel = 127;
                        for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                            let igen = hydra.igens[igenIndex];
                            if (igen.genOper === HydraPgen.GenKeyRange) {
                                ilokey = igen.genAmount.lowByteAmount;
                                ihikey = igen.genAmount.highByteAmount;
                                continue;
                            }
                            if (igen.genOper === HydraPgen.GenVelRange) {
                                ilovel = igen.genAmount.lowByteAmount;
                                ihivel = igen.genAmount.highByteAmount;
                                continue;
                            }
                            if (igen.genOper === 53 &&
                                ihikey >= plokey &&
                                ilokey <= phikey &&
                                ihivel >= plovel &&
                                ilovel <= phivel) {
                                regionNum++;
                            }
                        }
                    }
                }
            }
            preset.regions = new Array(regionNum);
            let globalRegion = new Region();
            globalRegion.clear(true);
            // Zones.
            for (let pbagIndex = phdr.presetBagNdx; pbagIndex < hydra.phdrs[phdrIndex + 1].presetBagNdx; pbagIndex++) {
                const pbag = hydra.pbags[pbagIndex];
                const presetRegion = new Region(globalRegion);
                let hadGenInstrument = false;
                // Generators.
                for (let pgenIndex = pbag.genNdx; pgenIndex < hydra.pbags[pbagIndex + 1].genNdx; pgenIndex++) {
                    const pgen = hydra.pgens[pgenIndex];
                    // Instrument.
                    if (pgen.genOper === HydraPgen.GenInstrument) {
                        let whichInst = pgen.genAmount.wordAmount;
                        if (whichInst >= hydra.insts.length) {
                            continue;
                        }
                        let instRegion = new Region();
                        instRegion.clear(false);
                        // Generators
                        let inst = hydra.insts[whichInst];
                        for (let ibagIndex = inst.instBagNdx; ibagIndex < hydra.insts[whichInst + 1].instBagNdx; ibagIndex++) {
                            let ibag = hydra.ibags[ibagIndex];
                            let zoneRegion = new Region(instRegion);
                            let hadSampleId = false;
                            for (let igenIndex = ibag.instGenNdx; igenIndex < hydra.ibags[ibagIndex + 1].instGenNdx; igenIndex++) {
                                let igen = hydra.igens[igenIndex];
                                if (igen.genOper === HydraPgen.GenSampleId) {
                                    // preset region key and vel ranges are a filter for the zone regions
                                    if (zoneRegion.hiKey < presetRegion.loKey ||
                                        zoneRegion.loKey > presetRegion.hiKey) {
                                        continue;
                                    }
                                    if (zoneRegion.hiVel < presetRegion.loVel ||
                                        zoneRegion.loVel > presetRegion.hiVel) {
                                        continue;
                                    }
                                    if (presetRegion.loKey > zoneRegion.loKey) {
                                        zoneRegion.loKey = presetRegion.loKey;
                                    }
                                    if (presetRegion.hiKey < zoneRegion.hiKey) {
                                        zoneRegion.hiKey = presetRegion.hiKey;
                                    }
                                    if (presetRegion.loVel > zoneRegion.loVel) {
                                        zoneRegion.loVel = presetRegion.loVel;
                                    }
                                    if (presetRegion.hiVel < zoneRegion.hiVel) {
                                        zoneRegion.hiVel = presetRegion.hiVel;
                                    }
                                    // sum regions
                                    zoneRegion.offset += presetRegion.offset;
                                    zoneRegion.end += presetRegion.end;
                                    zoneRegion.loopStart += presetRegion.loopStart;
                                    zoneRegion.loopEnd += presetRegion.loopEnd;
                                    zoneRegion.transpose += presetRegion.transpose;
                                    zoneRegion.tune += presetRegion.tune;
                                    zoneRegion.pitchKeyTrack += presetRegion.pitchKeyTrack;
                                    zoneRegion.attenuation += presetRegion.attenuation;
                                    zoneRegion.pan += presetRegion.pan;
                                    zoneRegion.ampEnv.delay += presetRegion.ampEnv.delay;
                                    zoneRegion.ampEnv.attack += presetRegion.ampEnv.attack;
                                    zoneRegion.ampEnv.hold += presetRegion.ampEnv.hold;
                                    zoneRegion.ampEnv.decay += presetRegion.ampEnv.decay;
                                    zoneRegion.ampEnv.sustain += presetRegion.ampEnv.sustain;
                                    zoneRegion.ampEnv.release += presetRegion.ampEnv.release;
                                    zoneRegion.modEnv.delay += presetRegion.modEnv.delay;
                                    zoneRegion.modEnv.attack += presetRegion.modEnv.attack;
                                    zoneRegion.modEnv.hold += presetRegion.modEnv.hold;
                                    zoneRegion.modEnv.decay += presetRegion.modEnv.decay;
                                    zoneRegion.modEnv.sustain += presetRegion.modEnv.sustain;
                                    zoneRegion.modEnv.release += presetRegion.modEnv.release;
                                    zoneRegion.initialFilterQ += presetRegion.initialFilterQ;
                                    zoneRegion.initialFilterFc += presetRegion.initialFilterFc;
                                    zoneRegion.modEnvToPitch += presetRegion.modEnvToPitch;
                                    zoneRegion.modEnvToFilterFc += presetRegion.modEnvToFilterFc;
                                    zoneRegion.delayModLFO += presetRegion.delayModLFO;
                                    zoneRegion.freqModLFO += presetRegion.freqModLFO;
                                    zoneRegion.modLfoToPitch += presetRegion.modLfoToPitch;
                                    zoneRegion.modLfoToFilterFc += presetRegion.modLfoToFilterFc;
                                    zoneRegion.modLfoToVolume += presetRegion.modLfoToVolume;
                                    zoneRegion.delayVibLFO += presetRegion.delayVibLFO;
                                    zoneRegion.freqVibLFO += presetRegion.freqVibLFO;
                                    zoneRegion.vibLfoToPitch += presetRegion.vibLfoToPitch;
                                    // EG times need to be converted from timecents to seconds.
                                    zoneRegion.ampEnv.envToSecs(true);
                                    zoneRegion.modEnv.envToSecs(false);
                                    // LFO times need to be converted from timecents to seconds.
                                    zoneRegion.delayModLFO =
                                        zoneRegion.delayModLFO < -11950.0
                                            ? 0.0
                                            : SynthHelper.timecents2Secs(zoneRegion.delayModLFO);
                                    zoneRegion.delayVibLFO =
                                        zoneRegion.delayVibLFO < -11950.0
                                            ? 0.0
                                            : SynthHelper.timecents2Secs(zoneRegion.delayVibLFO);
                                    // Pin values to their ranges.
                                    if (zoneRegion.pan < -0.5) {
                                        zoneRegion.pan = -0.5;
                                    }
                                    else if (zoneRegion.pan > 0.5) {
                                        zoneRegion.pan = 0.5;
                                    }
                                    if (zoneRegion.initialFilterQ < 1500 || zoneRegion.initialFilterQ > 13500) {
                                        zoneRegion.initialFilterQ = 0;
                                    }
                                    let shdr = hydra.sHdrs[igen.genAmount.wordAmount];
                                    zoneRegion.offset += shdr.start;
                                    zoneRegion.end += shdr.end;
                                    zoneRegion.loopStart += shdr.startLoop;
                                    zoneRegion.loopEnd += shdr.endLoop;
                                    if (shdr.endLoop > 0) {
                                        zoneRegion.loopEnd -= 1;
                                    }
                                    if (zoneRegion.pitchKeyCenter === -1) {
                                        zoneRegion.pitchKeyCenter = shdr.originalPitch;
                                    }
                                    zoneRegion.tune += shdr.pitchCorrection;
                                    zoneRegion.sampleRate = shdr.sampleRate;
                                    if (zoneRegion.end !== 0 && zoneRegion.end < preset.fontSamples.length) {
                                        zoneRegion.end++;
                                    }
                                    else {
                                        zoneRegion.end = preset.fontSamples.length;
                                    }
                                    preset.regions[regionIndex] = new Region(zoneRegion);
                                    regionIndex++;
                                    hadSampleId = true;
                                }
                                else {
                                    zoneRegion.operator(igen.genOper, igen.genAmount);
                                }
                            }
                            // Handle instrument's global zone.
                            if (ibag === hydra.ibags[inst.instBagNdx] && !hadSampleId) {
                                instRegion = new Region(zoneRegion);
                            }
                            // Modulators (TODO)
                            //if (ibag->instModNdx < ibag[1].instModNdx) addUnsupportedOpcode("any modulator");
                        }
                        hadGenInstrument = true;
                    }
                    else {
                        presetRegion.operator(pgen.genOper, pgen.genAmount);
                    }
                }
                // Modulators (TODO)
                // if (pbag->modNdx < pbag[1].modNdx) addUnsupportedOpcode("any modulator");
                // Handle preset's global zone.
                if (pbag === hydra.pbags[phdr.presetBagNdx] && !hadGenInstrument) {
                    globalRegion = presetRegion;
                }
            }
        }
        if (!append || !this.presets) {
            this.presets = newPresets;
        }
        else {
            for (const preset of newPresets) {
                this.presets.push(preset);
            }
        }
    }
}

class EventEmitter {
    constructor() {
        this._listeners = [];
    }
    on(value) {
        this._listeners.push(value);
    }
    off(value) {
        this._listeners = this._listeners.filter(l => l !== value);
    }
    trigger() {
        for (const l of this._listeners) {
            l();
        }
    }
}
/**
 * @partial
 */
class EventEmitterOfT {
    constructor() {
        this._listeners = [];
    }
    on(value) {
        this._listeners.push(value);
    }
    off(value) {
        this._listeners = this._listeners.filter(l => l !== value);
    }
    trigger(arg) {
        for (const l of this._listeners) {
            l(arg);
        }
    }
}

/**
 * Represents the info when the synthesizer played certain midi events.
 */
class MidiEventsPlayedEventArgs {
    /**
     * Initializes a new instance of the {@link MidiEventsPlayedEventArgs} class.
     * @param events The events which were played.
     */
    constructor(events) {
        this.events = events;
    }
}

/**
 * Represents the info when the playback range changed.
 */
class PlaybackRangeChangedEventArgs {
    /**
     * Initializes a new instance of the {@link PlaybackRangeChangedEventArgs} class.
     * @param range The range.
     */
    constructor(playbackRange) {
        this.playbackRange = playbackRange;
    }
}

/**
 * This is the main synthesizer component which can be used to
 * play a {@link MidiFile} via a {@link ISynthOutput}.
 */
class AlphaSynth {
    /**
     * Initializes a new instance of the {@link AlphaSynth} class.
     * @param output The output to use for playing the generated samples.
     */
    constructor(output, bufferTimeInMilliseconds) {
        this._isSoundFontLoaded = false;
        this._isMidiLoaded = false;
        this._tickPosition = 0;
        this._timePosition = 0;
        this._metronomeVolume = 0;
        this._countInVolume = 0;
        this._playedEventsQueue = new Queue();
        this._midiEventsPlayedFilter = new Set();
        this._notPlayedSamples = 0;
        this.isReady = false;
        this.state = PlayerState.Paused;
        this.ready = new EventEmitter();
        this.readyForPlayback = new EventEmitter();
        this.finished = new EventEmitter();
        this.soundFontLoaded = new EventEmitter();
        this.soundFontLoadFailed = new EventEmitterOfT();
        this.midiLoaded = new EventEmitterOfT();
        this.midiLoadFailed = new EventEmitterOfT();
        this.stateChanged = new EventEmitterOfT();
        this.positionChanged = new EventEmitterOfT();
        this.midiEventsPlayed = new EventEmitterOfT();
        this.playbackRangeChanged = new EventEmitterOfT();
        Logger.debug('AlphaSynth', 'Initializing player');
        this.state = PlayerState.Paused;
        Logger.debug('AlphaSynth', 'Creating output');
        this.output = output;
        Logger.debug('AlphaSynth', 'Creating synthesizer');
        this._synthesizer = new TinySoundFont(this.output.sampleRate);
        this._sequencer = new MidiFileSequencer(this._synthesizer);
        Logger.debug('AlphaSynth', 'Opening output');
        this.output.ready.on(() => {
            this.isReady = true;
            this.ready.trigger();
            this.checkReadyForPlayback();
        });
        this.output.sampleRequest.on(() => {
            if (!this._sequencer.isFinished) {
                let samples = new Float32Array(SynthConstants.MicroBufferSize * SynthConstants.MicroBufferCount * SynthConstants.AudioChannels);
                let bufferPos = 0;
                for (let i = 0; i < SynthConstants.MicroBufferCount; i++) {
                    // synthesize buffer
                    this._sequencer.fillMidiEventQueue();
                    const synthesizedEvents = this._synthesizer.synthesize(samples, bufferPos, SynthConstants.MicroBufferSize);
                    bufferPos += SynthConstants.MicroBufferSize * SynthConstants.AudioChannels;
                    // push all processed events into the queue
                    // for informing users about played events
                    for (const e of synthesizedEvents) {
                        if (this._midiEventsPlayedFilter.has(e.event.command)) {
                            this._playedEventsQueue.enqueue(e);
                        }
                    }
                    // tell sequencer to check whether its work is done
                    if (this._sequencer.isFinished) {
                        break;
                    }
                }
                // send it to output
                if (bufferPos < samples.length) {
                    samples = samples.subarray(0, bufferPos);
                }
                this._notPlayedSamples += samples.length;
                this.output.addSamples(samples);
            }
            else {
                // Tell output that there is no data left for it.
                let samples = new Float32Array(0);
                this.output.addSamples(samples);
            }
        });
        this.output.samplesPlayed.on(this.onSamplesPlayed.bind(this));
        this.output.open(bufferTimeInMilliseconds);
    }
    get isReadyForPlayback() {
        return this.isReady && this._isSoundFontLoaded && this._isMidiLoaded;
    }
    get logLevel() {
        return Logger.logLevel;
    }
    set logLevel(value) {
        Logger.logLevel = value;
    }
    get masterVolume() {
        return this._synthesizer.masterVolume;
    }
    set masterVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._synthesizer.masterVolume = value;
    }
    get metronomeVolume() {
        return this._metronomeVolume;
    }
    set metronomeVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._metronomeVolume = value;
        this._synthesizer.metronomeVolume = value;
    }
    get countInVolume() {
        return this._countInVolume;
    }
    set countInVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._countInVolume = value;
    }
    get midiEventsPlayedFilter() {
        return Array.from(this._midiEventsPlayedFilter);
    }
    set midiEventsPlayedFilter(value) {
        this._midiEventsPlayedFilter = new Set(value);
    }
    get playbackSpeed() {
        return this._sequencer.playbackSpeed;
    }
    set playbackSpeed(value) {
        value = SynthHelper.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
        let oldSpeed = this._sequencer.playbackSpeed;
        this._sequencer.playbackSpeed = value;
        this.timePosition = this.timePosition * (oldSpeed / value);
    }
    get tickPosition() {
        return this._tickPosition;
    }
    set tickPosition(value) {
        this.timePosition = this._sequencer.mainTickPositionToTimePosition(value);
    }
    get timePosition() {
        return this._timePosition;
    }
    set timePosition(value) {
        Logger.debug('AlphaSynth', `Seeking to position ${value}ms (main)`);
        // tell the sequencer to jump to the given position
        this._sequencer.mainSeek(value);
        // update the internal position
        this.updateTimePosition(value, true);
        // tell the output to reset the already synthesized buffers and request data again
        if (this._sequencer.isPlayingMain) {
            this._notPlayedSamples = 0;
            this.output.resetSamples();
        }
    }
    get playbackRange() {
        return this._sequencer.mainPlaybackRange;
    }
    set playbackRange(value) {
        this._sequencer.mainPlaybackRange = value;
        if (value) {
            this.tickPosition = value.startTick;
        }
        this.playbackRangeChanged.trigger(new PlaybackRangeChangedEventArgs(value));
    }
    get isLooping() {
        return this._sequencer.isLooping;
    }
    set isLooping(value) {
        this._sequencer.isLooping = value;
    }
    destroy() {
        Logger.debug('AlphaSynth', 'Destroying player');
        this.stop();
        this.output.destroy();
    }
    play() {
        if (this.state !== PlayerState.Paused || !this._isMidiLoaded) {
            return false;
        }
        this.output.activate();
        this.playInternal();
        if (this._countInVolume > 0) {
            Logger.debug('AlphaSynth', 'Starting countin');
            this._sequencer.startCountIn();
            this._synthesizer.setupMetronomeChannel(this._countInVolume);
            this.updateTimePosition(0, true);
        }
        this.output.play();
        return true;
    }
    playInternal() {
        if (this._sequencer.isPlayingOneTimeMidi) {
            Logger.debug('AlphaSynth', 'Cancelling one time midi');
            this.stopOneTimeMidi();
        }
        Logger.debug('AlphaSynth', 'Starting playback');
        this._synthesizer.setupMetronomeChannel(this.metronomeVolume);
        this.state = PlayerState.Playing;
        this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
    }
    pause() {
        if (this.state === PlayerState.Paused || !this._isMidiLoaded) {
            return;
        }
        Logger.debug('AlphaSynth', 'Pausing playback');
        this.state = PlayerState.Paused;
        this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, false));
        this.output.pause();
        this._synthesizer.noteOffAll(false);
    }
    playPause() {
        if (this.state !== PlayerState.Paused || !this._isMidiLoaded) {
            this.pause();
        }
        else {
            this.play();
        }
    }
    stop() {
        if (!this._isMidiLoaded) {
            return;
        }
        Logger.debug('AlphaSynth', 'Stopping playback');
        this.state = PlayerState.Paused;
        this.output.pause();
        this._notPlayedSamples = 0;
        this._sequencer.stop();
        this._synthesizer.noteOffAll(true);
        this.tickPosition = this._sequencer.mainPlaybackRange ? this._sequencer.mainPlaybackRange.startTick : 0;
        this.stateChanged.trigger(new PlayerStateChangedEventArgs(this.state, true));
    }
    playOneTimeMidiFile(midi) {
        if (this._sequencer.isPlayingOneTimeMidi) {
            this.stopOneTimeMidi();
        }
        else {
            // pause current playback.
            this.pause();
        }
        this._sequencer.loadOneTimeMidi(midi);
        this._synthesizer.noteOffAll(true);
        // update the internal position
        this.updateTimePosition(0, true);
        // tell the output to reset the already synthesized buffers and request data again
        this._notPlayedSamples = 0;
        this.output.resetSamples();
        this.output.play();
    }
    resetSoundFonts() {
        this.stop();
        this._synthesizer.resetPresets();
        this._isSoundFontLoaded = false;
        this.soundFontLoaded.trigger();
    }
    loadSoundFont(data, append) {
        this.pause();
        let input = ByteBuffer.fromBuffer(data);
        try {
            Logger.debug('AlphaSynth', 'Loading soundfont from bytes');
            let soundFont = new Hydra();
            soundFont.load(input);
            this._synthesizer.loadPresets(soundFont, append);
            this._isSoundFontLoaded = true;
            this.soundFontLoaded.trigger();
            Logger.debug('AlphaSynth', 'soundFont successfully loaded');
            this.checkReadyForPlayback();
        }
        catch (e) {
            Logger.error('AlphaSynth', 'Could not load soundfont from bytes ' + e);
            this.soundFontLoadFailed.trigger(e);
        }
    }
    checkReadyForPlayback() {
        if (this.isReadyForPlayback) {
            this._synthesizer.setupMetronomeChannel(this.metronomeVolume);
            this.readyForPlayback.trigger();
        }
    }
    /**
     * Loads the given midi file for playback.
     * @param midi The midi file to load
     */
    loadMidiFile(midi) {
        this.stop();
        try {
            Logger.debug('AlphaSynth', 'Loading midi from model');
            this._sequencer.loadMidi(midi);
            this._isMidiLoaded = true;
            this.midiLoaded.trigger(new PositionChangedEventArgs(0, this._sequencer.currentEndTime, 0, this._sequencer.currentEndTick, false));
            Logger.debug('AlphaSynth', 'Midi successfully loaded');
            this.checkReadyForPlayback();
            this.tickPosition = 0;
        }
        catch (e) {
            Logger.error('AlphaSynth', 'Could not load midi from model ' + e);
            this.midiLoadFailed.trigger(e);
        }
    }
    setChannelMute(channel, mute) {
        this._synthesizer.channelSetMute(channel, mute);
    }
    resetChannelStates() {
        this._synthesizer.resetChannelStates();
    }
    setChannelSolo(channel, solo) {
        this._synthesizer.channelSetSolo(channel, solo);
    }
    setChannelVolume(channel, volume) {
        volume = Math.max(volume, SynthConstants.MinVolume);
        this._synthesizer.channelSetMixVolume(channel, volume);
    }
    onSamplesPlayed(sampleCount) {
        if (sampleCount === 0) {
            return;
        }
        let playedMillis = (sampleCount / this._synthesizer.outSampleRate) * 1000;
        this._notPlayedSamples -= sampleCount * SynthConstants.AudioChannels;
        this.updateTimePosition(this._timePosition + playedMillis, false);
        this.checkForFinish();
    }
    checkForFinish() {
        let startTick = 0;
        let endTick = 0;
        if (this.playbackRange) {
            startTick = this.playbackRange.startTick;
            endTick = this.playbackRange.endTick;
        }
        else {
            endTick = this._sequencer.currentEndTick;
        }
        if (this._tickPosition >= endTick && this._notPlayedSamples <= 0) {
            this._notPlayedSamples = 0;
            if (this._sequencer.isPlayingCountIn) {
                Logger.debug('AlphaSynth', 'Finished playback (count-in)');
                this._sequencer.resetCountIn();
                this.timePosition = this._sequencer.currentTime;
                this.playInternal();
                this.output.resetSamples();
            }
            else if (this._sequencer.isPlayingOneTimeMidi) {
                Logger.debug('AlphaSynth', 'Finished playback (one time)');
                this.output.resetSamples();
                this.state = PlayerState.Paused;
                this.stopOneTimeMidi();
            }
            else {
                Logger.debug('AlphaSynth', 'Finished playback (main)');
                this.finished.trigger();
                if (this.isLooping) {
                    this.tickPosition = startTick;
                }
                else {
                    this.stop();
                }
            }
        }
    }
    stopOneTimeMidi() {
        this.output.pause();
        this._synthesizer.noteOffAll(true);
        this._sequencer.resetOneTimeMidi();
        this.timePosition = this._sequencer.currentTime;
    }
    updateTimePosition(timePosition, isSeek) {
        // update the real positions
        const currentTime = timePosition;
        this._timePosition = currentTime;
        const currentTick = this._sequencer.currentTimePositionToTickPosition(currentTime);
        this._tickPosition = currentTick;
        const endTime = this._sequencer.currentEndTime;
        const endTick = this._sequencer.currentEndTick;
        const mode = this._sequencer.isPlayingMain
            ? 'main'
            : this._sequencer.isPlayingCountIn
                ? 'count-in'
                : 'one-time';
        Logger.debug('AlphaSynth', `Position changed: (time: ${currentTime}/${endTime}, tick: ${currentTick}/${endTick}, Active Voices: ${this._synthesizer.activeVoiceCount} (${mode})`);
        if (this._sequencer.isPlayingMain) {
            this.positionChanged.trigger(new PositionChangedEventArgs(currentTime, endTime, currentTick, endTick, isSeek));
        }
        // build events which were actually played
        if (isSeek) {
            this._playedEventsQueue.clear();
        }
        else {
            const playedEvents = new Queue();
            while (!this._playedEventsQueue.isEmpty && this._playedEventsQueue.peek().time < currentTime) {
                const synthEvent = this._playedEventsQueue.dequeue();
                playedEvents.enqueue(synthEvent.event);
            }
            if (!playedEvents.isEmpty) {
                this.midiEventsPlayed.trigger(new MidiEventsPlayedEventArgs(playedEvents.toArray()));
            }
        }
    }
}

/**
 * Represents a midi file with a single track that can be played via {@link AlphaSynth}
 */
class MidiFile {
    constructor() {
        /**
         * Gets or sets the division per quarter notes.
         */
        this.division = MidiUtils.QuarterTime;
        /**
         * Gets a list of midi events sorted by time.
         */
        this.events = [];
    }
    /**
     * Adds the given midi event a the correct time position into the file.
     */
    addEvent(e) {
        if (this.events.length === 0) {
            this.events.push(e);
        }
        else {
            let insertPos = this.events.length;
            while (insertPos > 0) {
                const prevItem = this.events[insertPos - 1];
                if (prevItem.tick > e.tick) {
                    insertPos--;
                }
                else {
                    break;
                }
            }
            this.events.splice(insertPos, 0, e);
        }
    }
    /**
     * Writes the midi file into a binary format.
     * @returns The binary midi file.
     */
    toBinary() {
        let data = ByteBuffer.empty();
        this.writeTo(data);
        return data.toArray();
    }
    /**
     * Writes the midi file as binary into the given stream.
     * @returns The stream to write to.
     */
    writeTo(s) {
        // magic number "MThd" (0x4D546864)
        let b = new Uint8Array([0x4d, 0x54, 0x68, 0x64]);
        s.write(b, 0, b.length);
        // Header Length 6 (0x00000006)
        b = new Uint8Array([0x00, 0x00, 0x00, 0x06]);
        s.write(b, 0, b.length);
        // format
        b = new Uint8Array([0x00, 0x00]);
        s.write(b, 0, b.length);
        // number of tracks
        let v = 1;
        b = new Uint8Array([(v >> 8) & 0xff, v & 0xff]);
        s.write(b, 0, b.length);
        v = this.division;
        b = new Uint8Array([(v >> 8) & 0xff, v & 0xff]);
        s.write(b, 0, b.length);
        // build track data first
        let trackData = ByteBuffer.empty();
        let previousTick = 0;
        for (let midiEvent of this.events) {
            let delta = midiEvent.tick - previousTick;
            MidiFile.writeVariableInt(trackData, delta);
            midiEvent.writeTo(trackData);
            previousTick = midiEvent.tick;
        }
        // end of track
        // magic number "MTrk" (0x4D54726B)
        b = new Uint8Array([0x4d, 0x54, 0x72, 0x6b]);
        s.write(b, 0, b.length);
        // size as integer
        let data = trackData.toArray();
        let l = data.length;
        b = new Uint8Array([(l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff]);
        s.write(b, 0, b.length);
        s.write(data, 0, data.length);
    }
    static writeVariableInt(s, value) {
        let array = new Uint8Array(4);
        let n = 0;
        do {
            array[n++] = value & 0x7f;
            value >>= 7;
        } while (value > 0);
        while (n > 0) {
            n--;
            if (n > 0) {
                s.writeByte(array[n] | 0x80);
            }
            else {
                s.writeByte(array[n]);
            }
        }
    }
}

class MetaDataEvent extends MetaEvent {
    constructor(track, delta, status, metaId, data) {
        super(track, delta, status, metaId, 0);
        this.data = data;
    }
    writeTo(s) {
        s.writeByte(0xff);
        s.writeByte(this.metaStatus);
        let l = this.data.length;
        MidiFile.writeVariableInt(s, l);
        s.write(this.data, 0, this.data.length);
    }
}

class MetaNumberEvent extends MetaEvent {
    constructor(track, delta, status, metaId, value) {
        super(track, delta, status, metaId, 0);
        this.value = value;
    }
    writeTo(s) {
        s.writeByte(0xff);
        s.writeByte(this.metaStatus);
        MidiFile.writeVariableInt(s, 3);
        let b = new Uint8Array([(this.value >> 16) & 0xff, (this.value >> 8) & 0xff, this.value & 0xff]);
        s.write(b, 0, b.length);
    }
}

/**
 * @partial
 */
class JsonHelper {
    /**
     * @target web
     * @partial
     */
    static parseEnum(s, enumType) {
        switch (typeof s) {
            case 'string':
                const num = parseInt(s);
                return isNaN(num)
                    ? enumType[Object.keys(enumType).find(k => k.toLowerCase() === s.toLowerCase())]
                    : num;
            case 'number':
                return s;
            case 'undefined':
            case 'object':
                return null;
        }
        throw new AlphaTabError(AlphaTabErrorType.Format, `Could not parse enum value '${s}'`);
    }
    /**
     * @target web
     * @partial
     */
    static forEach(s, func) {
        if (s instanceof Map) {
            s.forEach(func);
        }
        else if (typeof s === 'object') {
            for (const k in s) {
                func(s[k], k);
            }
        }
        // skip
    }
}

/**
 * A very basic font parser which parses the fields according to
 * https://www.w3.org/TR/CSS21/fonts.html#propdef-font
 */
class FontParserToken {
    constructor(text, startPos, endPos) {
        this.text = text;
        this.startPos = startPos;
        this.endPos = endPos;
    }
}
class FontParser {
    constructor(input) {
        this.style = 'normal';
        this.variant = 'normal';
        this.weight = 'normal';
        this.stretch = 'normal';
        this.lineHeight = 'normal';
        this.size = '1rem';
        this.families = [];
        this.parseOnlyFamilies = false;
        this._currentTokenIndex = -1;
        this._input = '';
        this._currentToken = null;
        this._input = input;
        this._tokens = this.splitToTokens(input);
    }
    splitToTokens(input) {
        const tokens = [];
        let startPos = 0;
        while (startPos < input.length) {
            let endPos = startPos;
            while (endPos < input.length && input.charAt(endPos) !== ' ') {
                endPos++;
            }
            if (endPos > startPos) {
                tokens.push(new FontParserToken(input.substring(startPos, endPos), startPos, endPos));
            }
            startPos = endPos + 1;
        }
        return tokens;
    }
    parse() {
        var _a;
        this.reset();
        // default font flags
        if (this._tokens.length === 1) {
            switch ((_a = this._currentToken) === null || _a === void 0 ? void 0 : _a.text) {
                case 'caption':
                case 'icon':
                case 'menu':
                case 'message-box':
                case 'small-caption':
                case 'status-bar':
                case 'inherit':
                    return;
            }
        }
        if (!this.parseOnlyFamilies) {
            this.fontStyleVariantWeight();
            this.fontSizeLineHeight();
        }
        this.fontFamily();
    }
    static parseFamilies(value) {
        const parser = new FontParser(value);
        parser.parseOnlyFamilies = true;
        parser.parse();
        return parser.families;
    }
    fontFamily() {
        if (!this._currentToken) {
            if (this.parseOnlyFamilies) {
                return;
            }
            else {
                throw new Error(`Missing font list`);
            }
        }
        const familyListInput = this._input.substr(this._currentToken.startPos).trim();
        let pos = 0;
        while (pos < familyListInput.length) {
            let c = familyListInput.charAt(pos);
            if (c === ' ' || c == ',') {
                // skip whitespace and quotes
                pos++;
            }
            else if (c === '"' || c === "'") {
                // quoted
                const endOfString = this.findEndOfQuote(familyListInput, pos + 1, c);
                this.families.push(familyListInput
                    .substring(pos + 1, endOfString)
                    .split('\\' + c)
                    .join(c));
                pos = endOfString + 1;
            }
            else {
                // until comma
                const endOfString = this.findEndOfQuote(familyListInput, pos + 1, ',');
                this.families.push(familyListInput.substring(pos, endOfString).trim());
                pos = endOfString + 1;
            }
        }
    }
    findEndOfQuote(s, pos, quoteChar) {
        let escaped = false;
        while (pos < s.length) {
            const c = s.charAt(pos);
            if (!escaped && c === quoteChar) {
                return pos;
            }
            if (!escaped && c === '\\') {
                escaped = true;
            }
            else {
                escaped = false;
            }
            pos += 1;
        }
        return s.length;
    }
    fontSizeLineHeight() {
        if (!this._currentToken) {
            throw new Error(`Missing font size`);
        }
        const parts = this._currentToken.text.split('/');
        if (parts.length >= 3) {
            throw new Error(`Invalid font size '${this._currentToken}' specified`);
        }
        this.nextToken();
        if (parts.length >= 2) {
            if (parts[1] === '/') {
                // size/ line-height (space after slash)
                if (!this._currentToken) {
                    throw new Error('Missing line-height after font size');
                }
                this.lineHeight = this._currentToken.text;
                this.nextToken();
            }
            else {
                // size/line-height (no spaces)
                this.size = parts[0];
                this.lineHeight = parts[1];
            }
        }
        else if (parts.length >= 1) {
            this.size = parts[0];
            if (this._currentToken && this._currentToken.text.indexOf('/') === 0) {
                // size / line-height (with spaces befor and after slash)
                if (this._currentToken.text === '/') {
                    this.nextToken();
                    if (!this._currentToken) {
                        throw new Error('Missing line-height after font size');
                    }
                    this.lineHeight = this._currentToken.text;
                    this.nextToken();
                }
                else {
                    this.lineHeight = this._currentToken.text.substr(1);
                    this.nextToken();
                }
            }
        }
        else {
            throw new Error(`Missing font size`);
        }
    }
    nextToken() {
        this._currentTokenIndex++;
        if (this._currentTokenIndex < this._tokens.length) {
            this._currentToken = this._tokens[this._currentTokenIndex];
        }
        else {
            this._currentToken = null;
        }
    }
    fontStyleVariantWeight() {
        let hasStyle = false;
        let hasVariant = false;
        let hasWeight = false;
        let valuesNeeded = 3;
        let ambiguous = [];
        while (true) {
            if (!this._currentToken) {
                return;
            }
            let text = this._currentToken.text;
            switch (text) {
                // ambiguous
                case 'normal':
                case 'inherit':
                    ambiguous.push(text);
                    valuesNeeded--;
                    this.nextToken();
                    break;
                // style
                case 'italic':
                case 'oblique':
                    this.style = text;
                    hasStyle = true;
                    valuesNeeded--;
                    this.nextToken();
                    break;
                // variant
                case 'small-caps':
                    this.variant = text;
                    hasVariant = true;
                    valuesNeeded--;
                    this.nextToken();
                    break;
                // weight
                case 'bold':
                case 'bolder':
                case 'lighter':
                case '100':
                case '200':
                case '300':
                case '400':
                case '500':
                case '600':
                case '700':
                case '800':
                case '900':
                    this.weight = text;
                    hasWeight = true;
                    valuesNeeded--;
                    this.nextToken();
                    break;
                default:
                    // unknown token -> done with this part
                    return;
            }
            if (valuesNeeded === 0) {
                break;
            }
        }
        while (ambiguous.length > 0) {
            const v = ambiguous.pop();
            if (!hasWeight) {
                this.weight = v;
            }
            else if (!hasVariant) {
                this.variant = v;
            }
            else if (!hasStyle) {
                this.style = v;
            }
        }
    }
    reset() {
        this._currentTokenIndex = -1;
        this.nextToken();
    }
    static quoteFont(f) {
        if (f.indexOf(' ') === -1) {
            return f;
        }
        const escapedQuotes = f.replaceAll('"', '\\"');
        return `"${escapedQuotes}"`;
    }
}
/**
 * Lists all flags for font styles.
 */
var FontStyle;
(function (FontStyle) {
    /**
     * No flags.
     */
    FontStyle[FontStyle["Plain"] = 0] = "Plain";
    /**
     * Font is italic.
     */
    FontStyle[FontStyle["Italic"] = 1] = "Italic";
})(FontStyle || (FontStyle = {}));
/**
 * Lists all font weight values.
 */
var FontWeight;
(function (FontWeight) {
    /**
     * Not bold
     */
    FontWeight[FontWeight["Regular"] = 0] = "Regular";
    /**
     * Font is bold
     */
    FontWeight[FontWeight["Bold"] = 1] = "Bold";
})(FontWeight || (FontWeight = {}));
/**
 * @json_immutable
 */
class Font {
    /**
     * Initializes a new instance of the {@link Font} class.
     * @param family The family.
     * @param size The size.
     * @param style The style.
     * @param weight The weight.
     */
    constructor(family, size, style = FontStyle.Plain, weight = FontWeight.Regular) {
        this._cssScale = 0.0;
        this._families = FontParser.parseFamilies(family);
        this._size = size;
        this._style = style;
        this._weight = weight;
        this._css = this.toCssString();
    }
    reset() {
        this._cssScale = 0;
        this._css = this.toCssString();
    }
    /**
     * Gets the first font family name.
     * @deprecated Consider using {@link families} for multi font family support.
     */
    get family() {
        return this._families[0];
    }
    /**
     * Sets the font family list.
     * @deprecated Consider using {@link families} for multi font family support.
     */
    set family(value) {
        this.families = FontParser.parseFamilies(value);
    }
    /**
     * Gets the font family name.
     */
    get families() {
        return this._families;
    }
    /**
     * Sets the font family name.
     */
    set families(value) {
        this._families = value;
        this.reset();
    }
    /**
     * Gets the font size in pixels.
     */
    get size() {
        return this._size;
    }
    /**
     * Sets the font size in pixels.
     */
    set size(value) {
        this._size = value;
        this.reset();
    }
    /**
     * Gets the font style.
     */
    get style() {
        return this._style;
    }
    /**
     * Sets the font style.
     */
    set style(value) {
        this._style = value;
        this.reset();
    }
    /**
     * Gets the font weight.
     */
    get weight() {
        return this._weight;
    }
    /**
     * Gets or sets the font weight.
     */
    set weight(value) {
        this._weight = value;
        this.reset();
    }
    get isBold() {
        return this.weight === FontWeight.Bold;
    }
    get isItalic() {
        return this.style === FontStyle.Italic;
    }
    /**
     * Initializes a new instance of the {@link Font} class.
     * @param families The families.
     * @param size The size.
     * @param style The style.
     * @param weight The weight.
     */
    static withFamilyList(families, size, style = FontStyle.Plain, weight = FontWeight.Regular) {
        const f = new Font("", size, style, weight);
        f.families = families;
        return f;
    }
    toCssString(scale = 1) {
        if (!this._css || !(Math.abs(scale - this._cssScale) < 0.01)) {
            let buf = '';
            if (this.isBold) {
                buf += 'bold ';
            }
            if (this.isItalic) {
                buf += 'italic ';
            }
            buf += this.size * scale;
            buf += 'px ';
            buf += this.families.map(f => FontParser.quoteFont(f)).join(', ');
            this._css = buf;
            this._cssScale = scale;
        }
        return this._css;
    }
    static fromJson(v) {
        switch (typeof v) {
            case 'undefined':
                return null;
            case 'object': {
                const m = v;
                let families = m.get('families');
                // tslint:disable-next-line: no-unnecessary-type-assertion
                let size = m.get('size');
                let style = JsonHelper.parseEnum(m.get('style'), FontStyle);
                let weight = JsonHelper.parseEnum(m.get('weight'), FontWeight);
                return Font.withFamilyList(families, size, style, weight);
            }
            case 'string': {
                const parser = new FontParser(v);
                parser.parse();
                let families = parser.families;
                let fontSizeString = parser.size.toLowerCase();
                let fontSize = 0;
                // as per https://websemantics.uk/articles/font-size-conversion/
                switch (fontSizeString) {
                    case 'xx-small':
                        fontSize = 7;
                        break;
                    case 'x-small':
                        fontSize = 10;
                        break;
                    case 'small':
                    case 'smaller':
                        fontSize = 13;
                        break;
                    case 'medium':
                        fontSize = 16;
                        break;
                    case 'large':
                    case 'larger':
                        fontSize = 18;
                        break;
                    case 'x-large':
                        fontSize = 24;
                        break;
                    case 'xx-large':
                        fontSize = 32;
                        break;
                    default:
                        try {
                            if (fontSizeString.endsWith('em')) {
                                fontSize = parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16;
                            }
                            else if (fontSizeString.endsWith('pt')) {
                                fontSize =
                                    (parseFloat(fontSizeString.substr(0, fontSizeString.length - 2)) * 16.0) / 12.0;
                            }
                            else if (fontSizeString.endsWith('px')) {
                                fontSize = parseFloat(fontSizeString.substr(0, fontSizeString.length - 2));
                            }
                            else {
                                fontSize = 12;
                            }
                        }
                        catch (e) {
                            fontSize = 12;
                        }
                        break;
                }
                let fontStyle = FontStyle.Plain;
                if (parser.style === 'italic') {
                    fontStyle = FontStyle.Italic;
                }
                let fontWeight = FontWeight.Regular;
                let fontWeightString = parser.weight.toLowerCase();
                switch (fontWeightString) {
                    case 'normal':
                    case 'lighter':
                        break;
                    default:
                        fontWeight = FontWeight.Bold;
                        break;
                }
                return Font.withFamilyList(families, fontSize, fontStyle, fontWeight);
            }
            default:
                return null;
        }
    }
    static toJson(font) {
        const o = new Map();
        o.set('families', font.families);
        o.set('size', font.size);
        o.set('style', font.style);
        o.set('weight', font.weight);
        return o;
    }
}

/**
 * This public class contains central definitions for controlling the visual appearance.
 * @json
 */
class RenderingResources {
    constructor() {
        /**
         * Gets or sets the font to use for displaying the songs copyright information in the header of the music sheet.
         */
        this.copyrightFont = new Font(RenderingResources.sansFont, 12, FontStyle.Plain, FontWeight.Bold);
        /**
         * Gets or sets the font to use for displaying the songs title in the header of the music sheet.
         */
        this.titleFont = new Font(RenderingResources.serifFont, 32, FontStyle.Plain);
        /**
         * Gets or sets the font to use for displaying the songs subtitle in the header of the music sheet.
         */
        this.subTitleFont = new Font(RenderingResources.serifFont, 20, FontStyle.Plain);
        /**
         * Gets or sets the font to use for displaying the lyrics information in the header of the music sheet.
         */
        this.wordsFont = new Font(RenderingResources.serifFont, 15, FontStyle.Plain);
        /**
         * Gets or sets the font to use for displaying certain effect related elements in the music sheet.
         */
        this.effectFont = new Font(RenderingResources.serifFont, 12, FontStyle.Italic);
        /**
         * Gets or sets the font to use for displaying the fretboard numbers in chord diagrams.
         */
        this.fretboardNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
        /**
         * Gets or sets the font to use for displaying the guitar tablature numbers in the music sheet.
         */
        this.tablatureFont = new Font(RenderingResources.sansFont, 13, FontStyle.Plain);
        /**
         * Gets or sets the font to use for grace notation related texts in the music sheet.
         */
        this.graceFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
        /**
         * Gets or sets the color to use for rendering the lines of staves.
         */
        this.staffLineColor = new Color(165, 165, 165, 0xff);
        /**
         * Gets or sets the color to use for rendering bar separators, the accolade and repeat signs.
         */
        this.barSeparatorColor = new Color(34, 34, 17, 0xff);
        /**
         * Gets or sets the font to use for displaying the bar numbers above the music sheet.
         */
        this.barNumberFont = new Font(RenderingResources.sansFont, 11, FontStyle.Plain);
        /**
         * Gets or sets the color to use for displaying the bar numbers above the music sheet.
         */
        this.barNumberColor = new Color(200, 0, 0, 0xff);
        /**
         * Gets or sets the font to use for displaying finger information in the music sheet.
         */
        this.fingeringFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain);
        /**
         * Gets or sets the font to use for section marker labels shown above the music sheet.
         */
        this.markerFont = new Font(RenderingResources.serifFont, 14, FontStyle.Plain, FontWeight.Bold);
        /**
         * Gets or sets the color to use for music notation elements of the primary voice.
         */
        this.mainGlyphColor = new Color(0, 0, 0, 0xff);
        /**
         * Gets or sets the color to use for music notation elements of the secondary voices.
         */
        this.secondaryGlyphColor = new Color(0, 0, 0, 100);
        /**
         * Gets or sets the color to use for displaying the song information above the music sheet.
         */
        this.scoreInfoColor = new Color(0, 0, 0, 0xff);
    }
}
RenderingResources.sansFont = 'Arial, sans-serif';
RenderingResources.serifFont = 'Georgia, serif';

/**
 * The display settings control how the general layout and display of alphaTab is done.
 * @json
 */
class DisplaySettings {
    constructor() {
        /**
         * Sets the zoom level of the rendered notation
         */
        this.scale = 1.0;
        /**
         * The default stretch force to use for layouting.
         */
        this.stretchForce = 1.0;
        /**
         * The layouting mode used to arrange the the notation.
         */
        this.layoutMode = LayoutMode.Page;
        /**
         * The stave profile to use.
         */
        this.staveProfile = StaveProfile.Default;
        /**
         * Limit the displayed bars per row.
         */
        this.barsPerRow = -1;
        /**
         * The bar start number to start layouting with. Note that this is the bar number and not an index!
         */
        this.startBar = 1;
        /**
         * The amount of bars to render overall.
         */
        this.barCount = -1;
        /**
         * The number of bars that should be rendered per partial. This setting is not used by all layouts.
         */
        this.barCountPerPartial = 10;
        /**
         * Gets or sets the resources used during rendering. This defines all fonts and colors used.
         * @json_partial_names
         */
        this.resources = new RenderingResources();
        /**
         * Gets or sets the padding between the music notation and the border.
         */
        this.padding = null;
    }
}

/**
 * All settings related to importers that decode file formats.
 * @json
 */
class ImporterSettings {
    constructor() {
        /**
         * The text encoding to use when decoding strings. By default UTF-8 is used.
         */
        this.encoding = 'utf-8';
        /**
         * If part-groups should be merged into a single track.
         */
        this.mergePartGroupsInMusicXml = false;
        /**
         * If set to true, text annotations on beats are attempted to be parsed as
         * lyrics considering spaces as separators and removing underscores.
         * If a track/staff has explicit lyrics the beat texts will not be detected as lyrics.
         */
        this.beatTextAsLyrics = false;
    }
}

/**
 * Lists all modes how alphaTab can scroll the container during playback.
 */
var ScrollMode;
(function (ScrollMode) {
    /**
     * Do not scroll automatically
     */
    ScrollMode[ScrollMode["Off"] = 0] = "Off";
    /**
     * Scrolling happens as soon the offsets of the cursors change.
     */
    ScrollMode[ScrollMode["Continuous"] = 1] = "Continuous";
    /**
     * Scrolling happens as soon the cursors exceed the displayed range.
     */
    ScrollMode[ScrollMode["OffScreen"] = 2] = "OffScreen";
})(ScrollMode || (ScrollMode = {}));
/**
 * This object defines the details on how to generate the vibrato effects.
 * @json
 */
class VibratoPlaybackSettings {
    constructor() {
        /**
         * Gets or sets the wavelength of the note-wide vibrato in midi ticks.
         */
        this.noteWideLength = 480;
        /**
         * Gets or sets the amplitude for the note-wide vibrato in semitones.
         */
        this.noteWideAmplitude = 2;
        /**
         * Gets or sets the wavelength of the note-slight vibrato in midi ticks.
         */
        this.noteSlightLength = 480;
        /**
         * Gets or sets the amplitude for the note-slight vibrato in semitones.
         */
        this.noteSlightAmplitude = 2;
        /**
         * Gets or sets the wavelength of the beat-wide vibrato in midi ticks.
         */
        this.beatWideLength = 240;
        /**
         * Gets or sets the amplitude for the beat-wide vibrato in semitones.
         */
        this.beatWideAmplitude = 3;
        /**
         * Gets or sets the wavelength of the beat-slight vibrato in midi ticks.
         */
        this.beatSlightLength = 240;
        /**
         * Gets or sets the amplitude for the beat-slight vibrato in semitones.
         */
        this.beatSlightAmplitude = 3;
    }
}
/**
 * This object defines the details on how to generate the slide effects.
 * @json
 */
class SlidePlaybackSettings {
    constructor() {
        /**
         * Gets or sets 1/4 tones (bend value) offset that
         * simple slides like slide-out-below or slide-in-above use.
         */
        this.simpleSlidePitchOffset = 6;
        /**
         * Gets or sets the percentage which the simple slides should take up
         * from the whole note. for "slide into" effects the slide will take place
         * from time 0 where the note is plucked to 25% of the overall note duration.
         * For "slide out" effects the slide will start 75% and finish at 100% of the overall
         * note duration.
         */
        this.simpleSlideDurationRatio = 0.25;
        /**
         * Gets or sets the percentage which the legato and shift slides should take up
         * from the whole note. For a value 0.5 the sliding will start at 50% of the overall note duration
         * and finish at 100%
         */
        this.shiftSlideDurationRatio = 0.5;
    }
}
/**
 * The player settings control how the audio playback and UI is behaving.
 * @json
 */
class PlayerSettings {
    constructor() {
        /**
         * Gets or sets the URL of the sound font to be loaded.
         */
        this.soundFont = null;
        /**
         * Gets or sets the element that should be used for scrolling.
         * @target web
         * @json_read_only
         */
        this.scrollElement = 'html,body';
        /**
         * Gets or sets whether the player should be enabled.
         */
        this.enablePlayer = false;
        /**
         * Gets or sets whether playback cursors should be displayed.
         */
        this.enableCursor = true;
        /**
         * Gets or sets whether the beat cursor should be animated or just ticking.
         */
        this.enableAnimatedBeatCursor = true;
        /**
         * Gets or sets whether the notation elements of the currently played beat should be
         * highlighted.
         */
        this.enableElementHighlighting = true;
        /**
         * Gets or sets alphaTab should provide user interaction features to
         * select playback ranges and jump to the playback position by click (aka. seeking).
         */
        this.enableUserInteraction = true;
        /**
         * Gets or sets the X-offset to add when scrolling.
         */
        this.scrollOffsetX = 0;
        /**
         * Gets or sets the Y-offset to add when scrolling
         */
        this.scrollOffsetY = 0;
        /**
         * Gets or sets the mode how to scroll.
         */
        this.scrollMode = ScrollMode.Continuous;
        /**
         * Gets or sets how fast the scrolling to the new position should happen (in milliseconds)
         */
        this.scrollSpeed = 300;
        /**
         * Gets or sets whether the native browser smooth scroll mechanism should be used over a custom animation.
         * @target web
         */
        this.nativeBrowserSmoothScroll = true;
        /**
         * Gets or sets the bend duration in milliseconds for songbook bends.
         */
        this.songBookBendDuration = 75;
        /**
         * Gets or sets the duration of whammy dips in milliseconds for songbook whammys.
         */
        this.songBookDipDuration = 150;
        /**
         * Gets or sets the settings on how the vibrato audio is generated.
         * @json_partial_names
         */
        this.vibrato = new VibratoPlaybackSettings();
        /**
         * Gets or sets the setitngs on how the slide audio is generated.
         * @json_partial_names
         */
        this.slide = new SlidePlaybackSettings();
        /**
         * Gets or sets whether the triplet feel should be applied/played during audio playback.
         */
        this.playTripletFeel = true;
        /**
         * Gets or sets how many milliseconds of audio samples should be buffered in total.
         * Larger buffers cause a delay from when audio settings like volumes will be applied.
         * Smaller buffers can cause audio crackling due to constant buffering that is happening.
         */
        this.bufferTimeInMilliseconds = 500;
    }
}

class CoreSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        /*@target web*/
        o.set("scriptfile", obj.scriptFile);
        /*@target web*/
        o.set("fontdirectory", obj.fontDirectory);
        /*@target web*/
        o.set("file", obj.file);
        /*@target web*/
        o.set("tex", obj.tex);
        /*@target web*/
        o.set("tracks", obj.tracks);
        o.set("enablelazyloading", obj.enableLazyLoading);
        o.set("engine", obj.engine);
        o.set("loglevel", obj.logLevel);
        o.set("useworkers", obj.useWorkers);
        o.set("includenotebounds", obj.includeNoteBounds);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            /*@target web*/
            case "scriptfile":
                obj.scriptFile = v;
                return true;
            /*@target web*/
            case "fontdirectory":
                obj.fontDirectory = v;
                return true;
            /*@target web*/
            case "file":
                obj.file = v;
                return true;
            /*@target web*/
            case "tex":
                obj.tex = v;
                return true;
            /*@target web*/
            case "tracks":
                obj.tracks = v;
                return true;
            case "enablelazyloading":
                obj.enableLazyLoading = v;
                return true;
            case "engine":
                obj.engine = v;
                return true;
            case "loglevel":
                obj.logLevel = JsonHelper.parseEnum(v, LogLevel);
                return true;
            case "useworkers":
                obj.useWorkers = v;
                return true;
            case "includenotebounds":
                obj.includeNoteBounds = v;
                return true;
        }
        return false;
    }
}

class RenderingResourcesSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("copyrightfont", Font.toJson(obj.copyrightFont));
        o.set("titlefont", Font.toJson(obj.titleFont));
        o.set("subtitlefont", Font.toJson(obj.subTitleFont));
        o.set("wordsfont", Font.toJson(obj.wordsFont));
        o.set("effectfont", Font.toJson(obj.effectFont));
        o.set("fretboardnumberfont", Font.toJson(obj.fretboardNumberFont));
        o.set("tablaturefont", Font.toJson(obj.tablatureFont));
        o.set("gracefont", Font.toJson(obj.graceFont));
        o.set("stafflinecolor", Color.toJson(obj.staffLineColor));
        o.set("barseparatorcolor", Color.toJson(obj.barSeparatorColor));
        o.set("barnumberfont", Font.toJson(obj.barNumberFont));
        o.set("barnumbercolor", Color.toJson(obj.barNumberColor));
        o.set("fingeringfont", Font.toJson(obj.fingeringFont));
        o.set("markerfont", Font.toJson(obj.markerFont));
        o.set("mainglyphcolor", Color.toJson(obj.mainGlyphColor));
        o.set("secondaryglyphcolor", Color.toJson(obj.secondaryGlyphColor));
        o.set("scoreinfocolor", Color.toJson(obj.scoreInfoColor));
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "copyrightfont":
                obj.copyrightFont = Font.fromJson(v);
                return true;
            case "titlefont":
                obj.titleFont = Font.fromJson(v);
                return true;
            case "subtitlefont":
                obj.subTitleFont = Font.fromJson(v);
                return true;
            case "wordsfont":
                obj.wordsFont = Font.fromJson(v);
                return true;
            case "effectfont":
                obj.effectFont = Font.fromJson(v);
                return true;
            case "fretboardnumberfont":
                obj.fretboardNumberFont = Font.fromJson(v);
                return true;
            case "tablaturefont":
                obj.tablatureFont = Font.fromJson(v);
                return true;
            case "gracefont":
                obj.graceFont = Font.fromJson(v);
                return true;
            case "stafflinecolor":
                obj.staffLineColor = Color.fromJson(v);
                return true;
            case "barseparatorcolor":
                obj.barSeparatorColor = Color.fromJson(v);
                return true;
            case "barnumberfont":
                obj.barNumberFont = Font.fromJson(v);
                return true;
            case "barnumbercolor":
                obj.barNumberColor = Color.fromJson(v);
                return true;
            case "fingeringfont":
                obj.fingeringFont = Font.fromJson(v);
                return true;
            case "markerfont":
                obj.markerFont = Font.fromJson(v);
                return true;
            case "mainglyphcolor":
                obj.mainGlyphColor = Color.fromJson(v);
                return true;
            case "secondaryglyphcolor":
                obj.secondaryGlyphColor = Color.fromJson(v);
                return true;
            case "scoreinfocolor":
                obj.scoreInfoColor = Color.fromJson(v);
                return true;
        }
        return false;
    }
}

class DisplaySettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("scale", obj.scale);
        o.set("stretchforce", obj.stretchForce);
        o.set("layoutmode", obj.layoutMode);
        o.set("staveprofile", obj.staveProfile);
        o.set("barsperrow", obj.barsPerRow);
        o.set("startbar", obj.startBar);
        o.set("barcount", obj.barCount);
        o.set("barcountperpartial", obj.barCountPerPartial);
        o.set("resources", RenderingResourcesSerializer.toJson(obj.resources));
        o.set("padding", obj.padding);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "scale":
                obj.scale = v;
                return true;
            case "stretchforce":
                obj.stretchForce = v;
                return true;
            case "layoutmode":
                obj.layoutMode = JsonHelper.parseEnum(v, LayoutMode);
                return true;
            case "staveprofile":
                obj.staveProfile = JsonHelper.parseEnum(v, StaveProfile);
                return true;
            case "barsperrow":
                obj.barsPerRow = v;
                return true;
            case "startbar":
                obj.startBar = v;
                return true;
            case "barcount":
                obj.barCount = v;
                return true;
            case "barcountperpartial":
                obj.barCountPerPartial = v;
                return true;
            case "padding":
                obj.padding = v;
                return true;
        }
        if (["resources"].indexOf(property) >= 0) {
            RenderingResourcesSerializer.fromJson(obj.resources, v);
            return true;
        }
        else {
            for (const c of ["resources"]) {
                if (property.indexOf(c) === 0) {
                    if (RenderingResourcesSerializer.setProperty(obj.resources, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

class NotationSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("notationmode", obj.notationMode);
        o.set("fingeringmode", obj.fingeringMode);
        {
            const m = new Map();
            o.set("elements", m);
            for (const [k, v] of obj.elements) {
                m.set(k.toString(), v);
            }
        }
        o.set("rhythmmode", obj.rhythmMode);
        o.set("rhythmheight", obj.rhythmHeight);
        o.set("transpositionpitches", obj.transpositionPitches);
        o.set("displaytranspositionpitches", obj.displayTranspositionPitches);
        o.set("smallgracetabnotes", obj.smallGraceTabNotes);
        o.set("extendbendarrowsontiednotes", obj.extendBendArrowsOnTiedNotes);
        o.set("extendlineeffectstobeatend", obj.extendLineEffectsToBeatEnd);
        o.set("slurheight", obj.slurHeight);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "notationmode":
                obj.notationMode = JsonHelper.parseEnum(v, NotationMode);
                return true;
            case "fingeringmode":
                obj.fingeringMode = JsonHelper.parseEnum(v, FingeringMode);
                return true;
            case "elements":
                obj.elements = new Map();
                JsonHelper.forEach(v, (v, k) => {
                    obj.elements.set(JsonHelper.parseEnum(k, NotationElement), v);
                });
                return true;
            case "rhythmmode":
                obj.rhythmMode = JsonHelper.parseEnum(v, TabRhythmMode);
                return true;
            case "rhythmheight":
                obj.rhythmHeight = v;
                return true;
            case "transpositionpitches":
                obj.transpositionPitches = v;
                return true;
            case "displaytranspositionpitches":
                obj.displayTranspositionPitches = v;
                return true;
            case "smallgracetabnotes":
                obj.smallGraceTabNotes = v;
                return true;
            case "extendbendarrowsontiednotes":
                obj.extendBendArrowsOnTiedNotes = v;
                return true;
            case "extendlineeffectstobeatend":
                obj.extendLineEffectsToBeatEnd = v;
                return true;
            case "slurheight":
                obj.slurHeight = v;
                return true;
        }
        return false;
    }
}

class ImporterSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("encoding", obj.encoding);
        o.set("mergepartgroupsinmusicxml", obj.mergePartGroupsInMusicXml);
        o.set("beattextaslyrics", obj.beatTextAsLyrics);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "encoding":
                obj.encoding = v;
                return true;
            case "mergepartgroupsinmusicxml":
                obj.mergePartGroupsInMusicXml = v;
                return true;
            case "beattextaslyrics":
                obj.beatTextAsLyrics = v;
                return true;
        }
        return false;
    }
}

class VibratoPlaybackSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("notewidelength", obj.noteWideLength);
        o.set("notewideamplitude", obj.noteWideAmplitude);
        o.set("noteslightlength", obj.noteSlightLength);
        o.set("noteslightamplitude", obj.noteSlightAmplitude);
        o.set("beatwidelength", obj.beatWideLength);
        o.set("beatwideamplitude", obj.beatWideAmplitude);
        o.set("beatslightlength", obj.beatSlightLength);
        o.set("beatslightamplitude", obj.beatSlightAmplitude);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "notewidelength":
                obj.noteWideLength = v;
                return true;
            case "notewideamplitude":
                obj.noteWideAmplitude = v;
                return true;
            case "noteslightlength":
                obj.noteSlightLength = v;
                return true;
            case "noteslightamplitude":
                obj.noteSlightAmplitude = v;
                return true;
            case "beatwidelength":
                obj.beatWideLength = v;
                return true;
            case "beatwideamplitude":
                obj.beatWideAmplitude = v;
                return true;
            case "beatslightlength":
                obj.beatSlightLength = v;
                return true;
            case "beatslightamplitude":
                obj.beatSlightAmplitude = v;
                return true;
        }
        return false;
    }
}

class SlidePlaybackSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("simpleslidepitchoffset", obj.simpleSlidePitchOffset);
        o.set("simpleslidedurationratio", obj.simpleSlideDurationRatio);
        o.set("shiftslidedurationratio", obj.shiftSlideDurationRatio);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "simpleslidepitchoffset":
                obj.simpleSlidePitchOffset = v;
                return true;
            case "simpleslidedurationratio":
                obj.simpleSlideDurationRatio = v;
                return true;
            case "shiftslidedurationratio":
                obj.shiftSlideDurationRatio = v;
                return true;
        }
        return false;
    }
}

class PlayerSettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("soundfont", obj.soundFont);
        o.set("enableplayer", obj.enablePlayer);
        o.set("enablecursor", obj.enableCursor);
        o.set("enableanimatedbeatcursor", obj.enableAnimatedBeatCursor);
        o.set("enableelementhighlighting", obj.enableElementHighlighting);
        o.set("enableuserinteraction", obj.enableUserInteraction);
        o.set("scrolloffsetx", obj.scrollOffsetX);
        o.set("scrolloffsety", obj.scrollOffsetY);
        o.set("scrollmode", obj.scrollMode);
        o.set("scrollspeed", obj.scrollSpeed);
        /*@target web*/
        o.set("nativebrowsersmoothscroll", obj.nativeBrowserSmoothScroll);
        o.set("songbookbendduration", obj.songBookBendDuration);
        o.set("songbookdipduration", obj.songBookDipDuration);
        o.set("vibrato", VibratoPlaybackSettingsSerializer.toJson(obj.vibrato));
        o.set("slide", SlidePlaybackSettingsSerializer.toJson(obj.slide));
        o.set("playtripletfeel", obj.playTripletFeel);
        o.set("buffertimeinmilliseconds", obj.bufferTimeInMilliseconds);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "soundfont":
                obj.soundFont = v;
                return true;
            /*@target web*/
            case "scrollelement":
                obj.scrollElement = v;
                return true;
            case "enableplayer":
                obj.enablePlayer = v;
                return true;
            case "enablecursor":
                obj.enableCursor = v;
                return true;
            case "enableanimatedbeatcursor":
                obj.enableAnimatedBeatCursor = v;
                return true;
            case "enableelementhighlighting":
                obj.enableElementHighlighting = v;
                return true;
            case "enableuserinteraction":
                obj.enableUserInteraction = v;
                return true;
            case "scrolloffsetx":
                obj.scrollOffsetX = v;
                return true;
            case "scrolloffsety":
                obj.scrollOffsetY = v;
                return true;
            case "scrollmode":
                obj.scrollMode = JsonHelper.parseEnum(v, ScrollMode);
                return true;
            case "scrollspeed":
                obj.scrollSpeed = v;
                return true;
            /*@target web*/
            case "nativebrowsersmoothscroll":
                obj.nativeBrowserSmoothScroll = v;
                return true;
            case "songbookbendduration":
                obj.songBookBendDuration = v;
                return true;
            case "songbookdipduration":
                obj.songBookDipDuration = v;
                return true;
            case "playtripletfeel":
                obj.playTripletFeel = v;
                return true;
            case "buffertimeinmilliseconds":
                obj.bufferTimeInMilliseconds = v;
                return true;
        }
        if (["vibrato"].indexOf(property) >= 0) {
            VibratoPlaybackSettingsSerializer.fromJson(obj.vibrato, v);
            return true;
        }
        else {
            for (const c of ["vibrato"]) {
                if (property.indexOf(c) === 0) {
                    if (VibratoPlaybackSettingsSerializer.setProperty(obj.vibrato, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        if (["slide"].indexOf(property) >= 0) {
            SlidePlaybackSettingsSerializer.fromJson(obj.slide, v);
            return true;
        }
        else {
            for (const c of ["slide"]) {
                if (property.indexOf(c) === 0) {
                    if (SlidePlaybackSettingsSerializer.setProperty(obj.slide, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

class SettingsSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("core", CoreSettingsSerializer.toJson(obj.core));
        o.set("display", DisplaySettingsSerializer.toJson(obj.display));
        o.set("notation", NotationSettingsSerializer.toJson(obj.notation));
        o.set("importer", ImporterSettingsSerializer.toJson(obj.importer));
        o.set("player", PlayerSettingsSerializer.toJson(obj.player));
        return o;
    }
    static setProperty(obj, property, v) {
        if (["core", ""].indexOf(property) >= 0) {
            CoreSettingsSerializer.fromJson(obj.core, v);
            return true;
        }
        else {
            for (const c of ["core", ""]) {
                if (property.indexOf(c) === 0) {
                    if (CoreSettingsSerializer.setProperty(obj.core, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        if (["display", ""].indexOf(property) >= 0) {
            DisplaySettingsSerializer.fromJson(obj.display, v);
            return true;
        }
        else {
            for (const c of ["display", ""]) {
                if (property.indexOf(c) === 0) {
                    if (DisplaySettingsSerializer.setProperty(obj.display, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        if (["notation"].indexOf(property) >= 0) {
            NotationSettingsSerializer.fromJson(obj.notation, v);
            return true;
        }
        else {
            for (const c of ["notation"]) {
                if (property.indexOf(c) === 0) {
                    if (NotationSettingsSerializer.setProperty(obj.notation, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        if (["importer"].indexOf(property) >= 0) {
            ImporterSettingsSerializer.fromJson(obj.importer, v);
            return true;
        }
        else {
            for (const c of ["importer"]) {
                if (property.indexOf(c) === 0) {
                    if (ImporterSettingsSerializer.setProperty(obj.importer, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        if (["player"].indexOf(property) >= 0) {
            PlayerSettingsSerializer.fromJson(obj.player, v);
            return true;
        }
        else {
            for (const c of ["player"]) {
                if (property.indexOf(c) === 0) {
                    if (PlayerSettingsSerializer.setProperty(obj.player, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

/**
 * This public class contains instance specific settings for alphaTab
 * @json
 */
class Settings {
    constructor() {
        /**
         * The core settings control the general behavior of alphatab like
         * what modules are active.
         * @json_on_parent
         * @json_partial_names
         */
        this.core = new CoreSettings();
        /**
         * The display settings control how the general layout and display of alphaTab is done.
         * @json_on_parent
         * @json_partial_names
         */
        this.display = new DisplaySettings();
        /**
         * The notation settings control how various music notation elements are shown and behaving.
         * @json_partial_names
         */
        this.notation = new NotationSettings();
        /**
         * All settings related to importers that decode file formats.
         * @json_partial_names
         */
        this.importer = new ImporterSettings();
        /**
         * Contains all player related settings
         * @json_partial_names
         */
        this.player = new PlayerSettings();
    }
    setSongBookModeSettings() {
        this.notation.notationMode = NotationMode.SongBook;
        this.notation.smallGraceTabNotes = false;
        this.notation.fingeringMode = FingeringMode.SingleNoteEffectBand;
        this.notation.extendBendArrowsOnTiedNotes = false;
        this.notation.elements.set(NotationElement.ParenthesisOnTiedBends, false);
        this.notation.elements.set(NotationElement.TabNotesOnTiedBends, false);
        this.notation.elements.set(NotationElement.ZerosOnDiveWhammys, true);
    }
    static get songBook() {
        let settings = new Settings();
        settings.setSongBookModeSettings();
        return settings;
    }
    /**
     * @target web
     */
    fillFromJson(json) {
        SettingsSerializer.fromJson(this, json);
    }
}

/*
 * Represents a MIDI 2.0 Channel Voice Message.
 */
class Midi20PerNotePitchBendEvent extends MidiEvent {
    constructor(track, tick, status, noteKey, pitch) {
        super(track, tick, status, 0, 0);
        this.noteKey = noteKey;
        this.pitch = pitch;
    }
    /**
     * Writes the midi event as binary into the given stream.
     * @param s The stream to write to.
     */
    writeTo(s) {
        let b = new Uint8Array([
            0x40,
            this.message & 0xff,
            this.noteKey & 0xff,
            0x00 /* reserved */,
            /* 32bit pitch integer */
            (this.pitch >> 24) & 0xff,
            (this.pitch >> 16) & 0xff,
            (this.pitch >> 8) & 0xff,
            this.pitch & 0xff
        ]);
        s.write(b, 0, b.length);
    }
}

class SectionSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("marker", obj.marker);
        o.set("text", obj.text);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "marker":
                obj.marker = v;
                return true;
            case "text":
                obj.text = v;
                return true;
        }
        return false;
    }
}

class AutomationSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("islinear", obj.isLinear);
        o.set("type", obj.type);
        o.set("value", obj.value);
        o.set("ratioposition", obj.ratioPosition);
        o.set("text", obj.text);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "islinear":
                obj.isLinear = v;
                return true;
            case "type":
                obj.type = JsonHelper.parseEnum(v, AutomationType);
                return true;
            case "value":
                obj.value = v;
                return true;
            case "ratioposition":
                obj.ratioPosition = v;
                return true;
            case "text":
                obj.text = v;
                return true;
        }
        return false;
    }
}

class FermataSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("type", obj.type);
        o.set("length", obj.length);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "type":
                obj.type = JsonHelper.parseEnum(v, FermataType);
                return true;
            case "length":
                obj.length = v;
                return true;
        }
        return false;
    }
}

class MasterBarSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("alternateendings", obj.alternateEndings);
        o.set("keysignature", obj.keySignature);
        o.set("keysignaturetype", obj.keySignatureType);
        o.set("isdoublebar", obj.isDoubleBar);
        o.set("isrepeatstart", obj.isRepeatStart);
        o.set("repeatcount", obj.repeatCount);
        o.set("timesignaturenumerator", obj.timeSignatureNumerator);
        o.set("timesignaturedenominator", obj.timeSignatureDenominator);
        o.set("timesignaturecommon", obj.timeSignatureCommon);
        o.set("tripletfeel", obj.tripletFeel);
        o.set("section", SectionSerializer.toJson(obj.section));
        o.set("tempoautomation", AutomationSerializer.toJson(obj.tempoAutomation));
        {
            const m = new Map();
            o.set("fermata", m);
            for (const [k, v] of obj.fermata) {
                m.set(k.toString(), FermataSerializer.toJson(v));
            }
        }
        o.set("start", obj.start);
        o.set("isanacrusis", obj.isAnacrusis);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "alternateendings":
                obj.alternateEndings = v;
                return true;
            case "keysignature":
                obj.keySignature = JsonHelper.parseEnum(v, KeySignature);
                return true;
            case "keysignaturetype":
                obj.keySignatureType = JsonHelper.parseEnum(v, KeySignatureType);
                return true;
            case "isdoublebar":
                obj.isDoubleBar = v;
                return true;
            case "isrepeatstart":
                obj.isRepeatStart = v;
                return true;
            case "repeatcount":
                obj.repeatCount = v;
                return true;
            case "timesignaturenumerator":
                obj.timeSignatureNumerator = v;
                return true;
            case "timesignaturedenominator":
                obj.timeSignatureDenominator = v;
                return true;
            case "timesignaturecommon":
                obj.timeSignatureCommon = v;
                return true;
            case "tripletfeel":
                obj.tripletFeel = JsonHelper.parseEnum(v, TripletFeel);
                return true;
            case "fermata":
                obj.fermata = new Map();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new Fermata();
                    FermataSerializer.fromJson(i, v);
                    obj.addFermata(parseInt(k), i);
                });
                return true;
            case "start":
                obj.start = v;
                return true;
            case "isanacrusis":
                obj.isAnacrusis = v;
                return true;
        }
        if (["section"].indexOf(property) >= 0) {
            if (v) {
                obj.section = new Section();
                SectionSerializer.fromJson(obj.section, v);
            }
            else {
                obj.section = null;
            }
            return true;
        }
        if (["tempoautomation"].indexOf(property) >= 0) {
            if (v) {
                obj.tempoAutomation = new Automation();
                AutomationSerializer.fromJson(obj.tempoAutomation, v);
            }
            else {
                obj.tempoAutomation = null;
            }
            return true;
        }
        return false;
    }
}

class BendPointSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("offset", obj.offset);
        o.set("value", obj.value);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "offset":
                obj.offset = v;
                return true;
            case "value":
                obj.value = v;
                return true;
        }
        return false;
    }
}

class NoteSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("id", obj.id);
        o.set("accentuated", obj.accentuated);
        o.set("bendtype", obj.bendType);
        o.set("bendstyle", obj.bendStyle);
        o.set("iscontinuedbend", obj.isContinuedBend);
        o.set("bendpoints", obj.bendPoints.map(i => BendPointSerializer.toJson(i)));
        o.set("fret", obj.fret);
        o.set("string", obj.string);
        o.set("octave", obj.octave);
        o.set("tone", obj.tone);
        o.set("percussionarticulation", obj.percussionArticulation);
        o.set("isvisible", obj.isVisible);
        o.set("islefthandtapped", obj.isLeftHandTapped);
        o.set("ishammerpullorigin", obj.isHammerPullOrigin);
        o.set("isslurdestination", obj.isSlurDestination);
        o.set("harmonictype", obj.harmonicType);
        o.set("harmonicvalue", obj.harmonicValue);
        o.set("isghost", obj.isGhost);
        o.set("isletring", obj.isLetRing);
        o.set("ispalmmute", obj.isPalmMute);
        o.set("isdead", obj.isDead);
        o.set("isstaccato", obj.isStaccato);
        o.set("slideintype", obj.slideInType);
        o.set("slideouttype", obj.slideOutType);
        o.set("vibrato", obj.vibrato);
        o.set("istiedestination", obj.isTieDestination);
        o.set("lefthandfinger", obj.leftHandFinger);
        o.set("righthandfinger", obj.rightHandFinger);
        o.set("isfingering", obj.isFingering);
        o.set("trillvalue", obj.trillValue);
        o.set("trillspeed", obj.trillSpeed);
        o.set("durationpercent", obj.durationPercent);
        o.set("accidentalmode", obj.accidentalMode);
        o.set("dynamics", obj.dynamics);
        obj.toJson(o);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "id":
                obj.id = v;
                return true;
            case "accentuated":
                obj.accentuated = JsonHelper.parseEnum(v, AccentuationType);
                return true;
            case "bendtype":
                obj.bendType = JsonHelper.parseEnum(v, BendType);
                return true;
            case "bendstyle":
                obj.bendStyle = JsonHelper.parseEnum(v, BendStyle);
                return true;
            case "iscontinuedbend":
                obj.isContinuedBend = v;
                return true;
            case "bendpoints":
                obj.bendPoints = [];
                for (const o of v) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, o);
                    obj.addBendPoint(i);
                }
                return true;
            case "fret":
                obj.fret = v;
                return true;
            case "string":
                obj.string = v;
                return true;
            case "octave":
                obj.octave = v;
                return true;
            case "tone":
                obj.tone = v;
                return true;
            case "percussionarticulation":
                obj.percussionArticulation = v;
                return true;
            case "isvisible":
                obj.isVisible = v;
                return true;
            case "islefthandtapped":
                obj.isLeftHandTapped = v;
                return true;
            case "ishammerpullorigin":
                obj.isHammerPullOrigin = v;
                return true;
            case "isslurdestination":
                obj.isSlurDestination = v;
                return true;
            case "harmonictype":
                obj.harmonicType = JsonHelper.parseEnum(v, HarmonicType);
                return true;
            case "harmonicvalue":
                obj.harmonicValue = v;
                return true;
            case "isghost":
                obj.isGhost = v;
                return true;
            case "isletring":
                obj.isLetRing = v;
                return true;
            case "ispalmmute":
                obj.isPalmMute = v;
                return true;
            case "isdead":
                obj.isDead = v;
                return true;
            case "isstaccato":
                obj.isStaccato = v;
                return true;
            case "slideintype":
                obj.slideInType = JsonHelper.parseEnum(v, SlideInType);
                return true;
            case "slideouttype":
                obj.slideOutType = JsonHelper.parseEnum(v, SlideOutType);
                return true;
            case "vibrato":
                obj.vibrato = JsonHelper.parseEnum(v, VibratoType);
                return true;
            case "istiedestination":
                obj.isTieDestination = v;
                return true;
            case "lefthandfinger":
                obj.leftHandFinger = JsonHelper.parseEnum(v, Fingers);
                return true;
            case "righthandfinger":
                obj.rightHandFinger = JsonHelper.parseEnum(v, Fingers);
                return true;
            case "isfingering":
                obj.isFingering = v;
                return true;
            case "trillvalue":
                obj.trillValue = v;
                return true;
            case "trillspeed":
                obj.trillSpeed = JsonHelper.parseEnum(v, Duration);
                return true;
            case "durationpercent":
                obj.durationPercent = v;
                return true;
            case "accidentalmode":
                obj.accidentalMode = JsonHelper.parseEnum(v, NoteAccidentalMode);
                return true;
            case "dynamics":
                obj.dynamics = JsonHelper.parseEnum(v, DynamicValue);
                return true;
        }
        return obj.setProperty(property, v);
    }
}

class BeatSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("id", obj.id);
        o.set("notes", obj.notes.map(i => NoteSerializer.toJson(i)));
        o.set("isempty", obj.isEmpty);
        o.set("whammystyle", obj.whammyStyle);
        o.set("ottava", obj.ottava);
        o.set("islegatoorigin", obj.isLegatoOrigin);
        o.set("duration", obj.duration);
        o.set("automations", obj.automations.map(i => AutomationSerializer.toJson(i)));
        o.set("dots", obj.dots);
        o.set("fadein", obj.fadeIn);
        o.set("lyrics", obj.lyrics);
        o.set("hasrasgueado", obj.hasRasgueado);
        o.set("pop", obj.pop);
        o.set("slap", obj.slap);
        o.set("tap", obj.tap);
        o.set("text", obj.text);
        o.set("brushtype", obj.brushType);
        o.set("brushduration", obj.brushDuration);
        o.set("tupletdenominator", obj.tupletDenominator);
        o.set("tupletnumerator", obj.tupletNumerator);
        o.set("iscontinuedwhammy", obj.isContinuedWhammy);
        o.set("whammybartype", obj.whammyBarType);
        o.set("whammybarpoints", obj.whammyBarPoints.map(i => BendPointSerializer.toJson(i)));
        o.set("vibrato", obj.vibrato);
        o.set("chordid", obj.chordId);
        o.set("gracetype", obj.graceType);
        o.set("pickstroke", obj.pickStroke);
        o.set("tremolospeed", obj.tremoloSpeed);
        o.set("crescendo", obj.crescendo);
        o.set("displaystart", obj.displayStart);
        o.set("playbackstart", obj.playbackStart);
        o.set("displayduration", obj.displayDuration);
        o.set("playbackduration", obj.playbackDuration);
        o.set("dynamics", obj.dynamics);
        o.set("invertbeamdirection", obj.invertBeamDirection);
        o.set("preferredbeamdirection", obj.preferredBeamDirection);
        o.set("beamingmode", obj.beamingMode);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "id":
                obj.id = v;
                return true;
            case "notes":
                obj.notes = [];
                for (const o of v) {
                    const i = new Note();
                    NoteSerializer.fromJson(i, o);
                    obj.addNote(i);
                }
                return true;
            case "isempty":
                obj.isEmpty = v;
                return true;
            case "whammystyle":
                obj.whammyStyle = JsonHelper.parseEnum(v, BendStyle);
                return true;
            case "ottava":
                obj.ottava = JsonHelper.parseEnum(v, Ottavia);
                return true;
            case "islegatoorigin":
                obj.isLegatoOrigin = v;
                return true;
            case "duration":
                obj.duration = JsonHelper.parseEnum(v, Duration);
                return true;
            case "automations":
                obj.automations = [];
                for (const o of v) {
                    const i = new Automation();
                    AutomationSerializer.fromJson(i, o);
                    obj.automations.push(i);
                }
                return true;
            case "dots":
                obj.dots = v;
                return true;
            case "fadein":
                obj.fadeIn = v;
                return true;
            case "lyrics":
                obj.lyrics = v;
                return true;
            case "hasrasgueado":
                obj.hasRasgueado = v;
                return true;
            case "pop":
                obj.pop = v;
                return true;
            case "slap":
                obj.slap = v;
                return true;
            case "tap":
                obj.tap = v;
                return true;
            case "text":
                obj.text = v;
                return true;
            case "brushtype":
                obj.brushType = JsonHelper.parseEnum(v, BrushType);
                return true;
            case "brushduration":
                obj.brushDuration = v;
                return true;
            case "tupletdenominator":
                obj.tupletDenominator = v;
                return true;
            case "tupletnumerator":
                obj.tupletNumerator = v;
                return true;
            case "iscontinuedwhammy":
                obj.isContinuedWhammy = v;
                return true;
            case "whammybartype":
                obj.whammyBarType = JsonHelper.parseEnum(v, WhammyType);
                return true;
            case "whammybarpoints":
                obj.whammyBarPoints = [];
                for (const o of v) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, o);
                    obj.addWhammyBarPoint(i);
                }
                return true;
            case "vibrato":
                obj.vibrato = JsonHelper.parseEnum(v, VibratoType);
                return true;
            case "chordid":
                obj.chordId = v;
                return true;
            case "gracetype":
                obj.graceType = JsonHelper.parseEnum(v, GraceType);
                return true;
            case "pickstroke":
                obj.pickStroke = JsonHelper.parseEnum(v, PickStroke);
                return true;
            case "tremolospeed":
                obj.tremoloSpeed = JsonHelper.parseEnum(v, Duration);
                return true;
            case "crescendo":
                obj.crescendo = JsonHelper.parseEnum(v, CrescendoType);
                return true;
            case "displaystart":
                obj.displayStart = v;
                return true;
            case "playbackstart":
                obj.playbackStart = v;
                return true;
            case "displayduration":
                obj.displayDuration = v;
                return true;
            case "playbackduration":
                obj.playbackDuration = v;
                return true;
            case "dynamics":
                obj.dynamics = JsonHelper.parseEnum(v, DynamicValue);
                return true;
            case "invertbeamdirection":
                obj.invertBeamDirection = v;
                return true;
            case "preferredbeamdirection":
                obj.preferredBeamDirection = JsonHelper.parseEnum(v, BeamDirection);
                return true;
            case "beamingmode":
                obj.beamingMode = JsonHelper.parseEnum(v, BeatBeamingMode);
                return true;
        }
        return false;
    }
}

class VoiceSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("id", obj.id);
        o.set("beats", obj.beats.map(i => BeatSerializer.toJson(i)));
        o.set("isempty", obj.isEmpty);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "id":
                obj.id = v;
                return true;
            case "beats":
                obj.beats = [];
                for (const o of v) {
                    const i = new Beat();
                    BeatSerializer.fromJson(i, o);
                    obj.addBeat(i);
                }
                return true;
            case "isempty":
                obj.isEmpty = v;
                return true;
        }
        return false;
    }
}

class BarSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("id", obj.id);
        o.set("clef", obj.clef);
        o.set("clefottava", obj.clefOttava);
        o.set("voices", obj.voices.map(i => VoiceSerializer.toJson(i)));
        o.set("similemark", obj.simileMark);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "id":
                obj.id = v;
                return true;
            case "clef":
                obj.clef = JsonHelper.parseEnum(v, Clef);
                return true;
            case "clefottava":
                obj.clefOttava = JsonHelper.parseEnum(v, Ottavia);
                return true;
            case "voices":
                obj.voices = [];
                for (const o of v) {
                    const i = new Voice$1();
                    VoiceSerializer.fromJson(i, o);
                    obj.addVoice(i);
                }
                return true;
            case "similemark":
                obj.simileMark = JsonHelper.parseEnum(v, SimileMark);
                return true;
        }
        return false;
    }
}

class ChordSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("name", obj.name);
        o.set("firstfret", obj.firstFret);
        o.set("strings", obj.strings);
        o.set("barrefrets", obj.barreFrets);
        o.set("showname", obj.showName);
        o.set("showdiagram", obj.showDiagram);
        o.set("showfingering", obj.showFingering);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "name":
                obj.name = v;
                return true;
            case "firstfret":
                obj.firstFret = v;
                return true;
            case "strings":
                obj.strings = v;
                return true;
            case "barrefrets":
                obj.barreFrets = v;
                return true;
            case "showname":
                obj.showName = v;
                return true;
            case "showdiagram":
                obj.showDiagram = v;
                return true;
            case "showfingering":
                obj.showFingering = v;
                return true;
        }
        return false;
    }
}

class TuningSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("isstandard", obj.isStandard);
        o.set("name", obj.name);
        o.set("tunings", obj.tunings);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "isstandard":
                obj.isStandard = v;
                return true;
            case "name":
                obj.name = v;
                return true;
            case "tunings":
                obj.tunings = v;
                return true;
        }
        return false;
    }
}

class StaffSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("bars", obj.bars.map(i => BarSerializer.toJson(i)));
        {
            const m = new Map();
            o.set("chords", m);
            for (const [k, v] of obj.chords) {
                m.set(k.toString(), ChordSerializer.toJson(v));
            }
        }
        o.set("capo", obj.capo);
        o.set("transpositionpitch", obj.transpositionPitch);
        o.set("displaytranspositionpitch", obj.displayTranspositionPitch);
        o.set("stringtuning", TuningSerializer.toJson(obj.stringTuning));
        o.set("showtablature", obj.showTablature);
        o.set("showstandardnotation", obj.showStandardNotation);
        o.set("ispercussion", obj.isPercussion);
        o.set("standardnotationlinecount", obj.standardNotationLineCount);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "bars":
                obj.bars = [];
                for (const o of v) {
                    const i = new Bar();
                    BarSerializer.fromJson(i, o);
                    obj.addBar(i);
                }
                return true;
            case "chords":
                obj.chords = new Map();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new Chord();
                    ChordSerializer.fromJson(i, v);
                    obj.addChord(k, i);
                });
                return true;
            case "capo":
                obj.capo = v;
                return true;
            case "transpositionpitch":
                obj.transpositionPitch = v;
                return true;
            case "displaytranspositionpitch":
                obj.displayTranspositionPitch = v;
                return true;
            case "showtablature":
                obj.showTablature = v;
                return true;
            case "showstandardnotation":
                obj.showStandardNotation = v;
                return true;
            case "ispercussion":
                obj.isPercussion = v;
                return true;
            case "standardnotationlinecount":
                obj.standardNotationLineCount = v;
                return true;
        }
        if (["stringtuning"].indexOf(property) >= 0) {
            TuningSerializer.fromJson(obj.stringTuning, v);
            return true;
        }
        return false;
    }
}

class PlaybackInformationSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("volume", obj.volume);
        o.set("balance", obj.balance);
        o.set("port", obj.port);
        o.set("program", obj.program);
        o.set("primarychannel", obj.primaryChannel);
        o.set("secondarychannel", obj.secondaryChannel);
        o.set("ismute", obj.isMute);
        o.set("issolo", obj.isSolo);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "volume":
                obj.volume = v;
                return true;
            case "balance":
                obj.balance = v;
                return true;
            case "port":
                obj.port = v;
                return true;
            case "program":
                obj.program = v;
                return true;
            case "primarychannel":
                obj.primaryChannel = v;
                return true;
            case "secondarychannel":
                obj.secondaryChannel = v;
                return true;
            case "ismute":
                obj.isMute = v;
                return true;
            case "issolo":
                obj.isSolo = v;
                return true;
        }
        return false;
    }
}

class InstrumentArticulationSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("elementtype", obj.elementType);
        o.set("staffline", obj.staffLine);
        o.set("noteheaddefault", obj.noteHeadDefault);
        o.set("noteheadhalf", obj.noteHeadHalf);
        o.set("noteheadwhole", obj.noteHeadWhole);
        o.set("techniquesymbol", obj.techniqueSymbol);
        o.set("techniquesymbolplacement", obj.techniqueSymbolPlacement);
        o.set("outputmidinumber", obj.outputMidiNumber);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "elementtype":
                obj.elementType = v;
                return true;
            case "staffline":
                obj.staffLine = v;
                return true;
            case "noteheaddefault":
                obj.noteHeadDefault = JsonHelper.parseEnum(v, MusicFontSymbol);
                return true;
            case "noteheadhalf":
                obj.noteHeadHalf = JsonHelper.parseEnum(v, MusicFontSymbol);
                return true;
            case "noteheadwhole":
                obj.noteHeadWhole = JsonHelper.parseEnum(v, MusicFontSymbol);
                return true;
            case "techniquesymbol":
                obj.techniqueSymbol = JsonHelper.parseEnum(v, MusicFontSymbol);
                return true;
            case "techniquesymbolplacement":
                obj.techniqueSymbolPlacement = JsonHelper.parseEnum(v, TextBaseline);
                return true;
            case "outputmidinumber":
                obj.outputMidiNumber = v;
                return true;
        }
        return false;
    }
}

class TrackSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("staves", obj.staves.map(i => StaffSerializer.toJson(i)));
        o.set("playbackinfo", PlaybackInformationSerializer.toJson(obj.playbackInfo));
        o.set("color", Color.toJson(obj.color));
        o.set("name", obj.name);
        o.set("shortname", obj.shortName);
        o.set("percussionarticulations", obj.percussionArticulations.map(i => InstrumentArticulationSerializer.toJson(i)));
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "staves":
                obj.staves = [];
                for (const o of v) {
                    const i = new Staff();
                    StaffSerializer.fromJson(i, o);
                    obj.addStaff(i);
                }
                return true;
            case "color":
                obj.color = Color.fromJson(v);
                return true;
            case "name":
                obj.name = v;
                return true;
            case "shortname":
                obj.shortName = v;
                return true;
            case "percussionarticulations":
                obj.percussionArticulations = [];
                for (const o of v) {
                    const i = new InstrumentArticulation();
                    InstrumentArticulationSerializer.fromJson(i, o);
                    obj.percussionArticulations.push(i);
                }
                return true;
        }
        if (["playbackinfo"].indexOf(property) >= 0) {
            PlaybackInformationSerializer.fromJson(obj.playbackInfo, v);
            return true;
        }
        return false;
    }
}

class RenderStylesheetSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("hidedynamics", obj.hideDynamics);
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "hidedynamics":
                obj.hideDynamics = v;
                return true;
        }
        return false;
    }
}

class ScoreSerializer {
    static fromJson(obj, m) {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    static toJson(obj) {
        if (!obj) {
            return null;
        }
        const o = new Map();
        o.set("album", obj.album);
        o.set("artist", obj.artist);
        o.set("copyright", obj.copyright);
        o.set("instructions", obj.instructions);
        o.set("music", obj.music);
        o.set("notices", obj.notices);
        o.set("subtitle", obj.subTitle);
        o.set("title", obj.title);
        o.set("words", obj.words);
        o.set("tab", obj.tab);
        o.set("tempo", obj.tempo);
        o.set("tempolabel", obj.tempoLabel);
        o.set("masterbars", obj.masterBars.map(i => MasterBarSerializer.toJson(i)));
        o.set("tracks", obj.tracks.map(i => TrackSerializer.toJson(i)));
        o.set("stylesheet", RenderStylesheetSerializer.toJson(obj.stylesheet));
        return o;
    }
    static setProperty(obj, property, v) {
        switch (property) {
            case "album":
                obj.album = v;
                return true;
            case "artist":
                obj.artist = v;
                return true;
            case "copyright":
                obj.copyright = v;
                return true;
            case "instructions":
                obj.instructions = v;
                return true;
            case "music":
                obj.music = v;
                return true;
            case "notices":
                obj.notices = v;
                return true;
            case "subtitle":
                obj.subTitle = v;
                return true;
            case "title":
                obj.title = v;
                return true;
            case "words":
                obj.words = v;
                return true;
            case "tab":
                obj.tab = v;
                return true;
            case "tempo":
                obj.tempo = v;
                return true;
            case "tempolabel":
                obj.tempoLabel = v;
                return true;
            case "masterbars":
                obj.masterBars = [];
                for (const o of v) {
                    const i = new MasterBar();
                    MasterBarSerializer.fromJson(i, o);
                    obj.addMasterBar(i);
                }
                return true;
            case "tracks":
                obj.tracks = [];
                for (const o of v) {
                    const i = new Track();
                    TrackSerializer.fromJson(i, o);
                    obj.addTrack(i);
                }
                return true;
        }
        if (["stylesheet"].indexOf(property) >= 0) {
            RenderStylesheetSerializer.fromJson(obj.stylesheet, v);
            return true;
        }
        return false;
    }
}

/**
 * This class can convert a full {@link Score} instance to a simple JavaScript object and back for further
 * JSON serialization.
 */
class JsonConverter {
    /**
     * @target web
     */
    static jsonReplacer(_, v) {
        if (v instanceof Map) {
            if ('fromEntries' in Object) {
                return Object.fromEntries(v);
            }
            else {
                const o = {};
                for (const [k, mv] of v) {
                    o[k] = mv;
                }
                return o;
            }
        }
        else if (ArrayBuffer.isView(v)) {
            return Array.apply([], [v]);
        }
        return v;
    }
    /**
     * Converts the given score into a JSON encoded string.
     * @param score The score to serialize.
     * @returns A JSON encoded string.
     * @target web
     */
    static scoreToJson(score) {
        let obj = JsonConverter.scoreToJsObject(score);
        return JSON.stringify(obj, JsonConverter.jsonReplacer);
    }
    /**
     * Converts the given JSON string back to a {@link Score} object.
     * @param json The JSON string
     * @param settings The settings to use during conversion.
     * @returns The converted score object.
     * @target web
     */
    static jsonToScore(json, settings) {
        return JsonConverter.jsObjectToScore(JSON.parse(json), settings);
    }
    /**
     * Converts the score into a JavaScript object without circular dependencies.
     * @param score The score object to serialize
     * @returns A serialized score object without ciruclar dependencies that can be used for further serializations.
     */
    static scoreToJsObject(score) {
        return ScoreSerializer.toJson(score);
    }
    /**
     * Converts the given JavaScript object into a score object.
     * @param jsObject The javascript object created via {@link Score}
     * @param settings The settings to use during conversion.
     * @returns The converted score object.
     */
    static jsObjectToScore(jsObject, settings) {
        let score = new Score();
        ScoreSerializer.fromJson(score, jsObject);
        score.finish(settings !== null && settings !== void 0 ? settings : new Settings());
        return score;
    }
    /**
     * Converts the given settings into a JSON encoded string.
     * @param settings The settings to serialize.
     * @returns A JSON encoded string.
     * @target web
     */
    static settingsToJson(settings) {
        let obj = JsonConverter.settingsToJsObject(settings);
        return JSON.stringify(obj, JsonConverter.jsonReplacer);
    }
    /**
     * Converts the given JSON string back to a {@link Score} object.
     * @param json The JSON string
     * @returns The converted settings object.
     * @target web
     */
    static jsonToSettings(json) {
        return JsonConverter.jsObjectToSettings(JSON.parse(json));
    }
    /**
     * Converts the settings object into a JavaScript object for transmission between components or saving purposes.
     * @param settings The settings object to serialize
     * @returns A serialized settings object without ciruclar dependencies that can be used for further serializations.
     */
    static settingsToJsObject(settings) {
        return SettingsSerializer.toJson(settings);
    }
    /**
    * Converts the given JavaScript object into a settings object.
    * @param jsObject The javascript object created via {@link Settings}
    * @returns The converted Settings object.
    */
    static jsObjectToSettings(jsObject) {
        let settings = new Settings();
        SettingsSerializer.fromJson(settings, jsObject);
        return settings;
    }
    /**
     * @target web
     */
    static jsObjectToMidiFile(midi) {
        let midi2 = new MidiFile();
        midi2.division = midi.division;
        let midiEvents = midi.events;
        for (let midiEvent of midiEvents) {
            let midiEvent2 = JsonConverter.jsObjectToMidiEvent(midiEvent);
            midi2.events.push(midiEvent2);
        }
        return midi2;
    }
    /**
     * @target web
     */
    static jsObjectToMidiEvent(midiEvent) {
        let track = midiEvent.track;
        let tick = midiEvent.tick;
        let message = midiEvent.message;
        let midiEvent2;
        switch (midiEvent.type) {
            case 'SystemExclusiveEvent':
                midiEvent2 = new SystemExclusiveEvent(track, tick, 0, 0, midiEvent.data);
                midiEvent2.message = message;
                break;
            case 'MetaDataEvent':
                midiEvent2 = new MetaDataEvent(track, tick, 0, 0, midiEvent.data);
                midiEvent2.message = message;
                break;
            case 'MetaNumberEvent':
                midiEvent2 = new MetaNumberEvent(track, tick, 0, 0, midiEvent.value);
                midiEvent2.message = message;
                break;
            case 'Midi20PerNotePitchBendEvent':
                midiEvent2 = new Midi20PerNotePitchBendEvent(track, tick, 0, midiEvent.noteKey, midiEvent.pitch);
                midiEvent2.message = message;
                break;
            default:
                midiEvent2 = new MidiEvent(track, tick, 0, 0, 0);
                midiEvent2.message = message;
                break;
        }
        return midiEvent2;
    }
    /**
     * @target web
     */
    static midiFileToJsObject(midi) {
        let midi2 = {};
        midi2.division = midi.division;
        let midiEvents = [];
        midi2.events = midiEvents;
        for (let midiEvent of midi.events) {
            midiEvents.push(JsonConverter.midiEventToJsObject(midiEvent));
        }
        return midi2;
    }
    /**
     * @target web
     */
    static midiEventToJsObject(midiEvent) {
        let midiEvent2 = {};
        midiEvent2.track = midiEvent.track;
        midiEvent2.tick = midiEvent.tick;
        midiEvent2.message = midiEvent.message;
        if (midiEvent instanceof SystemExclusiveEvent) {
            midiEvent2.type = 'SystemExclusiveEvent';
            midiEvent2.data = midiEvent.data;
        }
        else if (midiEvent instanceof MetaDataEvent) {
            midiEvent2.type = 'MetaDataEvent';
            midiEvent2.data = midiEvent.data;
        }
        else if (midiEvent instanceof MetaNumberEvent) {
            midiEvent2.type = 'MetaNumberEvent';
            midiEvent2.value = midiEvent.value;
        }
        else if (midiEvent instanceof Midi20PerNotePitchBendEvent) {
            midiEvent2.type = 'Midi20PerNotePitchBendEvent';
            midiEvent2.noteKey = midiEvent.noteKey;
            midiEvent2.pitch = midiEvent.pitch;
        }
        return midiEvent2;
    }
}

/**
 * @target web
 */
class AlphaSynthWorkerSynthOutput {
    constructor() {
        this.ready = new EventEmitter();
        this.samplesPlayed = new EventEmitterOfT();
        this.sampleRequest = new EventEmitter();
    }
    get sampleRate() {
        return AlphaSynthWorkerSynthOutput.preferredSampleRate;
    }
    open() {
        Logger.debug('AlphaSynth', 'Initializing webworker worker');
        this._worker = Environment.globalThis;
        this._worker.addEventListener('message', this.handleMessage.bind(this));
        this.ready.trigger();
    }
    destroy() {
        this._worker.postMessage({
            cmd: 'alphaSynth.output.destroy'
        });
    }
    handleMessage(e) {
        let data = e.data;
        let cmd = data.cmd;
        switch (cmd) {
            case AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest:
                this.sampleRequest.trigger();
                break;
            case AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed:
                this.samplesPlayed.trigger(data.samples);
                break;
        }
    }
    addSamples(samples) {
        this._worker.postMessage({
            cmd: 'alphaSynth.output.addSamples',
            samples: samples
        });
    }
    play() {
        this._worker.postMessage({
            cmd: 'alphaSynth.output.play'
        });
    }
    pause() {
        this._worker.postMessage({
            cmd: 'alphaSynth.output.pause'
        });
    }
    resetSamples() {
        this._worker.postMessage({
            cmd: 'alphaSynth.output.resetSamples'
        });
    }
    activate() {
        // nothing to do
    }
}
AlphaSynthWorkerSynthOutput.CmdOutputPrefix = 'alphaSynth.output.';
AlphaSynthWorkerSynthOutput.CmdOutputAddSamples = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'addSamples';
AlphaSynthWorkerSynthOutput.CmdOutputPlay = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'play';
AlphaSynthWorkerSynthOutput.CmdOutputPause = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'pause';
AlphaSynthWorkerSynthOutput.CmdOutputResetSamples = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'resetSamples';
AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'sampleRequest';
AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed = AlphaSynthWorkerSynthOutput.CmdOutputPrefix + 'samplesPlayed';
// this value is initialized by the alphaSynth WebWorker wrapper
// that also includes the alphaSynth library into the worker.
AlphaSynthWorkerSynthOutput.preferredSampleRate = 0;

/**
 * This class implements a HTML5 WebWorker based version of alphaSynth
 * which can be controlled via WebWorker messages.
 * @target web
 */
class AlphaSynthWebWorker {
    constructor(main, bufferTimeInMilliseconds) {
        this._main = main;
        this._main.addEventListener('message', this.handleMessage.bind(this));
        this._player = new AlphaSynth(new AlphaSynthWorkerSynthOutput(), bufferTimeInMilliseconds);
        this._player.positionChanged.on(this.onPositionChanged.bind(this));
        this._player.stateChanged.on(this.onPlayerStateChanged.bind(this));
        this._player.finished.on(this.onFinished.bind(this));
        this._player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
        this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
        this._player.soundFontLoadFailed.on(this.onSoundFontLoadFailed.bind(this));
        this._player.midiLoaded.on(this.onMidiLoaded.bind(this));
        this._player.midiLoadFailed.on(this.onMidiLoadFailed.bind(this));
        this._player.readyForPlayback.on(this.onReadyForPlayback.bind(this));
        this._player.midiEventsPlayed.on(this.onMidiEventsPlayed.bind(this));
        this._player.playbackRangeChanged.on(this.onPlaybackRangeChanged.bind(this));
        this._main.postMessage({
            cmd: 'alphaSynth.ready'
        });
    }
    static init() {
        let main = Environment.globalThis;
        main.addEventListener('message', e => {
            let data = e.data;
            let cmd = data.cmd;
            switch (cmd) {
                case 'alphaSynth.initialize':
                    AlphaSynthWorkerSynthOutput.preferredSampleRate = data.sampleRate;
                    Logger.logLevel = data.logLevel;
                    Environment.globalThis.alphaSynthWebWorker = new AlphaSynthWebWorker(main, data.bufferTimeInMilliseconds);
                    break;
            }
        });
    }
    handleMessage(e) {
        let data = e.data;
        let cmd = data.cmd;
        switch (cmd) {
            case 'alphaSynth.setLogLevel':
                Logger.logLevel = data.value;
                break;
            case 'alphaSynth.setMasterVolume':
                this._player.masterVolume = data.value;
                break;
            case 'alphaSynth.setMetronomeVolume':
                this._player.metronomeVolume = data.value;
                break;
            case 'alphaSynth.setPlaybackSpeed':
                this._player.playbackSpeed = data.value;
                break;
            case 'alphaSynth.setTickPosition':
                this._player.tickPosition = data.value;
                break;
            case 'alphaSynth.setTimePosition':
                this._player.timePosition = data.value;
                break;
            case 'alphaSynth.setPlaybackRange':
                this._player.playbackRange = data.value;
                break;
            case 'alphaSynth.setIsLooping':
                this._player.isLooping = data.value;
                break;
            case 'alphaSynth.setCountInVolume':
                this._player.countInVolume = data.value;
                break;
            case 'alphaSynth.setMidiEventsPlayedFilter':
                this._player.midiEventsPlayedFilter = data.value;
                break;
            case 'alphaSynth.play':
                this._player.play();
                break;
            case 'alphaSynth.pause':
                this._player.pause();
                break;
            case 'alphaSynth.playPause':
                this._player.playPause();
                break;
            case 'alphaSynth.stop':
                this._player.stop();
                break;
            case 'alphaSynth.playOneTimeMidiFile':
                this._player.playOneTimeMidiFile(JsonConverter.jsObjectToMidiFile(data.midi));
                break;
            case 'alphaSynth.loadSoundFontBytes':
                this._player.loadSoundFont(data.data, data.append);
                break;
            case 'alphaSynth.resetSoundFonts':
                this._player.resetSoundFonts();
                break;
            case 'alphaSynth.loadMidi':
                this._player.loadMidiFile(JsonConverter.jsObjectToMidiFile(data.midi));
                break;
            case 'alphaSynth.setChannelMute':
                this._player.setChannelMute(data.channel, data.mute);
                break;
            case 'alphaSynth.setChannelSolo':
                this._player.setChannelSolo(data.channel, data.solo);
                break;
            case 'alphaSynth.setChannelVolume':
                this._player.setChannelVolume(data.channel, data.volume);
                break;
            case 'alphaSynth.resetChannelStates':
                this._player.resetChannelStates();
                break;
            case 'alphaSynth.destroy':
                this._player.destroy();
                this._main.postMessage({
                    cmd: 'alphaSynth.destroyed'
                });
                break;
        }
    }
    onPositionChanged(e) {
        this._main.postMessage({
            cmd: 'alphaSynth.positionChanged',
            currentTime: e.currentTime,
            endTime: e.endTime,
            currentTick: e.currentTick,
            endTick: e.endTick,
            isSeek: e.isSeek
        });
    }
    onPlayerStateChanged(e) {
        this._main.postMessage({
            cmd: 'alphaSynth.playerStateChanged',
            state: e.state,
            stopped: e.stopped
        });
    }
    onFinished() {
        this._main.postMessage({
            cmd: 'alphaSynth.finished'
        });
    }
    onSoundFontLoaded() {
        this._main.postMessage({
            cmd: 'alphaSynth.soundFontLoaded'
        });
    }
    onSoundFontLoadFailed(e) {
        this._main.postMessage({
            cmd: 'alphaSynth.soundFontLoadFailed',
            error: this.serializeException(e)
        });
    }
    serializeException(e) {
        let error = JSON.parse(JSON.stringify(e));
        if (e.message) {
            error.message = e.message;
        }
        if (e.stack) {
            error.stack = e.stack;
        }
        if (e.constructor && e.constructor.name) {
            error.type = e.constructor.name;
        }
        return error;
    }
    onMidiLoaded(e) {
        this._main.postMessage({
            cmd: 'alphaSynth.midiLoaded',
            currentTime: e.currentTime,
            endTime: e.endTime,
            currentTick: e.currentTick,
            endTick: e.endTick,
            isSeek: e.isSeek
        });
    }
    onMidiLoadFailed(e) {
        this._main.postMessage({
            cmd: 'alphaSynth.midiLoaded',
            error: this.serializeException(e)
        });
    }
    onReadyForPlayback() {
        this._main.postMessage({
            cmd: 'alphaSynth.readyForPlayback'
        });
    }
    onMidiEventsPlayed(args) {
        this._main.postMessage({
            cmd: 'alphaSynth.midiEventsPlayed',
            events: args.events.map(JsonConverter.midiEventToJsObject)
        });
    }
    onPlaybackRangeChanged(args) {
        this._main.postMessage({
            cmd: 'alphaSynth.playbackRangeChanged',
            playbackRange: args.playbackRange
        });
    }
}

/**
 * This public class stores text widths for several fonts and allows width calculation
 * @partial
 */
class FontSizes {
    /**
     * @target web
     * @partial
     */
    static generateFontLookup(family) {
        if (FontSizes.FontSizeLookupTables.has(family)) {
            return;
        }
        if (!Environment.isRunningInWorker) {
            let canvas = document.createElement('canvas');
            let measureContext = canvas.getContext('2d');
            measureContext.font = `11px ${family}`;
            let sizes = [];
            for (let i = 0x20; i < 255; i++) {
                let s = String.fromCharCode(i);
                sizes.push(measureContext.measureText(s).width);
            }
            let data = new Uint8Array(sizes);
            FontSizes.FontSizeLookupTables.set(family, data);
        }
        else {
            FontSizes.FontSizeLookupTables.set(family, new Uint8Array([8]));
        }
    }
    static measureString(s, families, size, style, weight) {
        let data;
        let dataSize = 11;
        let family = families[0]; // default to first font
        // find a font which is maybe registered already
        for (let i = 0; i < families.length; i++) {
            if (FontSizes.FontSizeLookupTables.has(families[i])) {
                family = families[i];
                break;
            }
        }
        if (!FontSizes.FontSizeLookupTables.has(family)) {
            FontSizes.generateFontLookup(family);
        }
        data = FontSizes.FontSizeLookupTables.get(family);
        let factor = 1;
        if (style === FontStyle.Italic) {
            factor *= 1.2;
        }
        if (weight === FontWeight.Bold) {
            factor *= 1.2;
        }
        let stringSize = 0;
        for (let i = 0; i < s.length; i++) {
            let code = Math.min(data.length - 1, s.charCodeAt(i) - 32);
            if (code >= 0) {
                stringSize += (data[code] * size) / dataSize;
            }
        }
        return stringSize * factor;
    }
}
// prettier-ignore
FontSizes.Georgia = new Uint8Array([
    3, 4, 5, 7, 7, 9, 8, 2, 4, 4, 5, 7, 3, 4, 3, 5, 7, 5, 6, 6, 6, 6, 6, 6, 7, 6, 3, 3, 7,
    7, 7, 5, 10, 7, 7, 7, 8, 7, 7, 8, 9, 4, 6, 8, 7, 10, 8, 8, 7, 8, 8, 6, 7, 8, 7, 11, 8,
    7, 7, 4, 5, 4, 7, 7, 6, 6, 6, 5, 6, 5, 4, 6, 6, 3, 3, 6, 3, 10, 6, 6, 6, 6, 5, 5, 4, 6,
    5, 8, 6, 5, 5, 5, 4, 5, 7, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 4, 6, 7, 6, 7, 4, 6, 6, 10, 6, 6, 7, 0, 10, 7,
    5, 7, 6, 6, 6, 6, 6, 3, 6, 6, 6, 6, 12, 12, 12, 5, 7, 7, 7, 7, 7, 7, 11, 7, 7, 7, 7, 7,
    4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 7, 7, 6, 6, 6, 6, 6, 6, 6, 8, 5, 5,
    5, 5, 5, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6
]);
// prettier-ignore
FontSizes.Arial = new Uint8Array([
    3, 3, 4, 6, 6, 10, 7, 2, 4, 4, 4, 6, 3, 4, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 3, 6,
    6, 6, 6, 11, 7, 7, 8, 8, 7, 7, 9, 8, 3, 6, 7, 6, 9, 8, 9, 7, 9, 8, 7, 7, 8, 7, 10, 7, 7,
    7, 3, 3, 3, 5, 6, 4, 6, 6, 6, 6, 6, 3, 6, 6, 2, 2, 6, 2, 9, 6, 6, 6, 6, 4, 6, 3, 6, 6,
    8, 6, 6, 6, 4, 3, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 6, 6, 6, 6, 3, 6, 4, 8, 4, 6, 6, 0, 8, 6, 4,
    6, 4, 4, 4, 6, 6, 4, 4, 4, 4, 6, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 11, 8, 7, 7, 7, 7, 3, 3,
    3, 3, 8, 8, 9, 9, 9, 9, 9, 6, 9, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 6, 6, 10, 6, 6, 6, 6,
    6, 3, 3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6
]);
FontSizes.FontSizeLookupTables = new Map([
    ['Arial', FontSizes.Arial],
    ["'Arial'", FontSizes.Arial],
    ['"Arial"', FontSizes.Arial],
    ['Georgia', FontSizes.Georgia],
    ["'Georgia'", FontSizes.Georgia],
    ['"Georgia"', FontSizes.Georgia]
]);
FontSizes.ControlChars = 0x20;

/**
 * This eventargs define the details about the rendering and layouting process and are
 * provided whenever a part of of the music sheet is rendered.
 */
class RenderFinishedEventArgs {
    constructor() {
        /**
         * Gets or sets the unique id of this event args.
         */
        this.id = ModelUtils.newGuid();
        /**
         * Gets or sets the x position of the current rendering result.
         */
        this.x = 0;
        /**
         * Gets or sets the y position of the current rendering result.
         */
        this.y = 0;
        /**
         * Gets or sets the width of the current rendering result.
         */
        this.width = 0;
        /**
         * Gets or sets the height of the current rendering result.
         */
        this.height = 0;
        /**
         * Gets or sets the currently known total width of the final music sheet.
         */
        this.totalWidth = 0;
        /**
         * Gets or sets the currently known total height of the final music sheet.
         */
        this.totalHeight = 0;
        /**
         * Gets or sets the index of the first masterbar that was rendered in this result.
         */
        this.firstMasterBarIndex = -1;
        /**
         * Gets or sets the index of the last masterbar that was rendered in this result.
         */
        this.lastMasterBarIndex = -1;
        /**
         * Gets or sets the render engine specific result object which contains the rendered music sheet.
         */
        this.renderResult = null;
    }
}

/**
 * Represents the boundaries of a single bar.
 */
class BarBounds {
    constructor() {
        /**
         * Gets or sets a list of the beats contained in this lookup.
         */
        this.beats = [];
    }
    /**
     * Adds a new beat to this lookup.
     * @param bounds The beat bounds to add.
     */
    addBeat(bounds) {
        bounds.barBounds = this;
        this.beats.push(bounds);
        this.masterBarBounds.addBeat(bounds);
    }
    /**
     * Tries to find the beat at the given X-position.
     * @param x The X-position of the beat to find.
     * @returns The beat at the given X-position or null if none was found.
     */
    findBeatAtPos(x) {
        let beat = null;
        for (let t of this.beats) {
            if (!beat || t.realBounds.x < x) {
                beat = t;
            }
            else if (t.realBounds.x > x) {
                break;
            }
        }
        return beat;
    }
    /**
     * Finishes the lookup object and optimizes itself for fast access.
     */
    finish() {
        this.beats.sort((a, b) => a.realBounds.x - b.realBounds.x);
    }
}

/**
 * Represents the bounds of a single beat.
 */
class BeatBounds {
    constructor() {
        /**
         * Gets or sets the individual note positions of this beat (if {@link CoreSettings.includeNoteBounds} was set to true).
         */
        this.notes = null;
    }
    /**
     * Adds a new note to this bounds.
     * @param bounds The note bounds to add.
     */
    addNote(bounds) {
        if (!this.notes) {
            this.notes = [];
        }
        bounds.beatBounds = this;
        this.notes.push(bounds);
    }
    /**
     * Tries to find a note at the given position.
     * @param x The X-position of the note to find.
     * @param y The Y-position of the note to find.
     * @returns The note at the given position or null if no note was found, or the note lookup was not enabled before rendering.
     */
    findNoteAtPos(x, y) {
        const notes = this.notes;
        if (!notes) {
            return null;
        }
        // TODO: can be likely optimized
        // a beat is mostly vertically aligned, we could sort the note bounds by Y
        // and then do a binary search on the Y-axis.
        for (let note of notes) {
            let bottom = note.noteHeadBounds.y + note.noteHeadBounds.h;
            let right = note.noteHeadBounds.x + note.noteHeadBounds.w;
            if (note.noteHeadBounds.x <= x && note.noteHeadBounds.y <= y && x <= right && y <= bottom) {
                return note.note;
            }
        }
        return null;
    }
}

/**
 * Represents the boundaries of a list of bars related to a single master bar.
 */
class MasterBarBounds {
    constructor() {
        /**
         * Gets or sets the index of this bounds relative within the parent lookup.
         */
        this.index = 0;
        /**
         * Gets or sets a value indicating whether this bounds are the first of the line.
         */
        this.isFirstOfLine = false;
        /**
         * Gets or sets the list of individual bars within this lookup.
         */
        this.bars = [];
        /**
         * Gets or sets a reference to the parent {@link staveGroupBounds}.
         */
        this.staveGroupBounds = null;
    }
    /**
     * Adds a new bar to this lookup.
     * @param bounds The bar bounds to add to this lookup.
     */
    addBar(bounds) {
        bounds.masterBarBounds = this;
        this.bars.push(bounds);
    }
    /**
     * Tries to find a beat at the given location.
     * @param x The absolute X position where the beat spans across.
     * @param y The absolute Y position where the beat spans across.
     * @returns The beat that spans across the given point, or null if none of the contained bars had a beat at this position.
     */
    findBeatAtPos(x, y) {
        let beat = null;
        let distance = 10000000;
        for (let bar of this.bars) {
            let b = bar.findBeatAtPos(x);
            if (b && (!beat || beat.realBounds.x < b.realBounds.x)) {
                const newDistance = Math.abs(b.realBounds.x - x);
                if (!beat || newDistance < distance) {
                    beat = b;
                }
            }
        }
        return !beat ? null : beat.beat;
    }
    /**
     * Finishes the lookup object and optimizes itself for fast access.
     */
    finish() {
        this.bars.sort((a, b) => {
            if (a.realBounds.y < b.realBounds.y) {
                return -1;
            }
            if (a.realBounds.y > b.realBounds.y) {
                return 1;
            }
            if (a.realBounds.x < b.realBounds.x) {
                return -1;
            }
            if (a.realBounds.x > b.realBounds.x) {
                return 1;
            }
            return 0;
        });
        for (const bar of this.bars) {
            bar.finish();
        }
    }
    /**
     * Adds a new beat to the lookup.
     * @param bounds The beat bounds to add.
     */
    addBeat(bounds) {
        this.staveGroupBounds.boundsLookup.addBeat(bounds);
    }
}

/**
 * Represents the bounds of a single note
 */
class NoteBounds {
}

/**
 * Represents the bounds of a stave group.
 */
class StaveGroupBounds {
    constructor() {
        /**
         * Gets or sets the index of the bounds within the parent lookup.
         * This allows fast access of the next/previous groups.
         */
        this.index = 0;
        /**
         * Gets or sets the list of master bar bounds related to this stave group.
         */
        this.bars = [];
    }
    /**
     * Finished the lookup for optimized access.
     */
    finish() {
        for (let t of this.bars) {
            t.finish();
        }
    }
    /**
     * Adds a new master bar to this lookup.
     * @param bounds The master bar bounds to add.
     */
    addBar(bounds) {
        this.boundsLookup.addMasterBar(bounds);
        bounds.staveGroupBounds = this;
        this.bars.push(bounds);
    }
    /**
     * Tries to find the master bar bounds that are located at the given X-position.
     * @param x The X-position to find a master bar.
     * @returns The master bounds at the given X-position.
     */
    findBarAtPos(x) {
        let b = null;
        // move from left to right as long we find bars that start before the clicked position
        for (let bar of this.bars) {
            if (!b || bar.realBounds.x < x) {
                b = bar;
            }
            else if (x > bar.realBounds.x + bar.realBounds.w) {
                break;
            }
        }
        return b;
    }
}

class BoundsLookup {
    constructor() {
        this._beatLookup = new Map();
        this._masterBarLookup = new Map();
        this._currentStaveGroup = null;
        /**
         * Gets a list of all individual stave groups contained in the rendered music notation.
         */
        this.staveGroups = [];
        /**
         * Gets or sets a value indicating whether this lookup was finished already.
         */
        this.isFinished = false;
    }
    /**
     * @target web
     */
    toJson() {
        let json = {};
        let staveGroups = [];
        json.staveGroups = staveGroups;
        for (let group of this.staveGroups) {
            let g = {};
            g.visualBounds = this.boundsToJson(group.visualBounds);
            g.realBounds = this.boundsToJson(group.realBounds);
            g.bars = [];
            for (let masterBar of group.bars) {
                let mb = {};
                mb.lineAlignedBounds = this.boundsToJson(masterBar.lineAlignedBounds);
                mb.visualBounds = this.boundsToJson(masterBar.visualBounds);
                mb.realBounds = this.boundsToJson(masterBar.realBounds);
                mb.index = masterBar.index;
                mb.bars = [];
                for (let bar of masterBar.bars) {
                    let b = {};
                    b.visualBounds = this.boundsToJson(bar.visualBounds);
                    b.realBounds = this.boundsToJson(bar.realBounds);
                    b.beats = [];
                    for (let beat of bar.beats) {
                        let bb = {};
                        bb.visualBounds = this.boundsToJson(beat.visualBounds);
                        bb.realBounds = this.boundsToJson(beat.realBounds);
                        let bbd = bb;
                        bbd.beatIndex = beat.beat.index;
                        bbd.voiceIndex = beat.beat.voice.index;
                        bbd.barIndex = beat.beat.voice.bar.index;
                        bbd.staffIndex = beat.beat.voice.bar.staff.index;
                        bbd.trackIndex = beat.beat.voice.bar.staff.track.index;
                        if (beat.notes) {
                            let notes = (bb.notes = []);
                            for (let note of beat.notes) {
                                let n = {};
                                let nd = n;
                                nd.index = note.note.index;
                                n.noteHeadBounds = this.boundsToJson(note.noteHeadBounds);
                                notes.push(n);
                            }
                        }
                        b.beats.push(bb);
                    }
                    mb.bars.push(b);
                }
                g.bars.push(mb);
            }
            staveGroups.push(g);
        }
        return json;
    }
    /**
     * @target web
     */
    static fromJson(json, score) {
        let lookup = new BoundsLookup();
        let staveGroups = json['staveGroups'];
        for (let staveGroup of staveGroups) {
            let sg = new StaveGroupBounds();
            sg.visualBounds = staveGroup.visualBounds;
            sg.realBounds = staveGroup.realBounds;
            lookup.addStaveGroup(sg);
            for (let masterBar of staveGroup.bars) {
                let mb = new MasterBarBounds();
                mb.index = masterBar.index;
                mb.isFirstOfLine = masterBar.isFirstOfLine;
                mb.lineAlignedBounds = masterBar.lineAlignedBounds;
                mb.visualBounds = masterBar.visualBounds;
                mb.realBounds = masterBar.realBounds;
                sg.addBar(mb);
                for (let bar of masterBar.bars) {
                    let b = new BarBounds();
                    b.visualBounds = bar.visualBounds;
                    b.realBounds = bar.realBounds;
                    mb.addBar(b);
                    for (let beat of bar.beats) {
                        let bb = new BeatBounds();
                        bb.visualBounds = beat.visualBounds;
                        bb.realBounds = beat.realBounds;
                        let bd = beat;
                        bb.beat =
                            score.tracks[bd.trackIndex].staves[bd.staffIndex].bars[bd.barIndex].voices[bd.voiceIndex].beats[bd.beatIndex];
                        if (beat.notes) {
                            bb.notes = [];
                            for (let note of beat.notes) {
                                let n = new NoteBounds();
                                let nd = note;
                                n.note = bb.beat.notes[nd.index];
                                n.noteHeadBounds = note.noteHeadBounds;
                                bb.addNote(n);
                            }
                        }
                        b.addBeat(bb);
                    }
                }
            }
        }
        return lookup;
    }
    /**
     * @target web
     */
    boundsToJson(bounds) {
        let json = {};
        json.x = bounds.x;
        json.y = bounds.y;
        json.w = bounds.w;
        json.h = bounds.h;
        return json;
    }
    /**
     * Finishes the lookup for optimized access.
     */
    finish() {
        for (let t of this.staveGroups) {
            t.finish();
        }
        this.isFinished = true;
    }
    /**
     * Adds a new stave group to the lookup.
     * @param bounds The stave group bounds to add.
     */
    addStaveGroup(bounds) {
        bounds.index = this.staveGroups.length;
        bounds.boundsLookup = this;
        this.staveGroups.push(bounds);
        this._currentStaveGroup = bounds;
    }
    /**
     * Adds a new master bar to the lookup.
     * @param bounds The master bar bounds to add.
     */
    addMasterBar(bounds) {
        if (!bounds.staveGroupBounds) {
            bounds.staveGroupBounds = this._currentStaveGroup;
            this._masterBarLookup.set(bounds.index, bounds);
            this._currentStaveGroup.addBar(bounds);
        }
        else {
            this._masterBarLookup.set(bounds.index, bounds);
        }
    }
    /**
     * Adds a new beat to the lookup.
     * @param bounds The beat bounds to add.
     */
    addBeat(bounds) {
        var _a;
        if (!this._beatLookup.has(bounds.beat.id)) {
            this._beatLookup.set(bounds.beat.id, []);
        }
        (_a = this._beatLookup.get(bounds.beat.id)) === null || _a === void 0 ? void 0 : _a.push(bounds);
    }
    /**
     * Tries to find the master bar bounds by a given index.
     * @param index The index of the master bar to find.
     * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
     */
    findMasterBarByIndex(index) {
        if (this._masterBarLookup.has(index)) {
            return this._masterBarLookup.get(index);
        }
        return null;
    }
    /**
     * Tries to find the master bar bounds by a given master bar.
     * @param bar The master bar to find.
     * @returns The master bar bounds if it was rendered, or null if no boundary information is available.
     */
    findMasterBar(bar) {
        let id = bar.index;
        if (this._masterBarLookup.has(id)) {
            return this._masterBarLookup.get(id);
        }
        return null;
    }
    /**
     * Tries to find the bounds of a given beat.
     * @param beat The beat to find.
     * @returns The beat bounds if it was rendered, or null if no boundary information is available.
     */
    findBeat(beat) {
        const all = this.findBeats(beat);
        return all ? all[0] : null;
    }
    /**
     * Tries to find the bounds of a given beat.
     * @param beat The beat to find.
     * @returns The beat bounds if it was rendered, or null if no boundary information is available.
     */
    findBeats(beat) {
        let id = beat.id;
        if (this._beatLookup.has(id)) {
            return this._beatLookup.get(id);
        }
        return null;
    }
    /**
     * Tries to find a beat at the given absolute position.
     * @param x The absolute X-position of the beat to find.
     * @param y The absolute Y-position of the beat to find.
     * @returns The beat found at the given position or null if no beat could be found.
     */
    getBeatAtPos(x, y) {
        //
        // find a bar which matches in y-axis
        let bottom = 0;
        let top = this.staveGroups.length - 1;
        let staveGroupIndex = -1;
        while (bottom <= top) {
            let middle = ((top + bottom) / 2) | 0;
            let group = this.staveGroups[middle];
            // found?
            if (y >= group.realBounds.y && y <= group.realBounds.y + group.realBounds.h) {
                staveGroupIndex = middle;
                break;
            }
            // search in lower half
            if (y < group.realBounds.y) {
                top = middle - 1;
            }
            else {
                bottom = middle + 1;
            }
        }
        // no bar found
        if (staveGroupIndex === -1) {
            return null;
        }
        //
        // Find the matching bar in the row
        let staveGroup = this.staveGroups[staveGroupIndex];
        let bar = staveGroup.findBarAtPos(x);
        if (bar) {
            return bar.findBeatAtPos(x, y);
        }
        return null;
    }
    /**
     * Tries to find the note at the given position using the given beat for fast access.
     * Use {@link findBeat} to find a beat for a given position first.
     * @param beat The beat containing the note.
     * @param x The X-position of the note.
     * @param y The Y-position of the note.
     * @returns The note at the given position within the beat.
     */
    getNoteAtPos(beat, x, y) {
        const beatBounds = this.findBeats(beat);
        if (beatBounds) {
            for (const b of beatBounds) {
                const note = b.findNoteAtPos(x, y);
                if (note) {
                    return note;
                }
            }
        }
        return null;
    }
}

/**
 * This is the main wrapper of the rendering engine which
 * can render a single track of a score object into a notation sheet.
 */
class ScoreRenderer {
    /**
     * Initializes a new instance of the {@link ScoreRenderer} class.
     * @param settings The settings to use for rendering.
     */
    constructor(settings) {
        this._currentLayoutMode = LayoutMode.Page;
        this._currentRenderEngine = null;
        this._renderedTracks = null;
        this.canvas = null;
        this.score = null;
        this.tracks = null;
        /**
         * @internal
         */
        this.layout = null;
        this.boundsLookup = null;
        this.width = 0;
        this.preRender = new EventEmitterOfT();
        this.renderFinished = new EventEmitterOfT();
        this.partialRenderFinished = new EventEmitterOfT();
        this.partialLayoutFinished = new EventEmitterOfT();
        this.postRenderFinished = new EventEmitter();
        this.error = new EventEmitterOfT();
        this.settings = settings;
        this.recreateCanvas();
        this.recreateLayout();
    }
    destroy() {
        this.score = null;
        this.canvas = null;
        this.layout = null;
        this.boundsLookup = null;
        this.tracks = null;
    }
    recreateCanvas() {
        if (this._currentRenderEngine !== this.settings.core.engine) {
            this.canvas = Environment.getRenderEngineFactory(this.settings.core.engine).createCanvas();
            this._currentRenderEngine = this.settings.core.engine;
            return true;
        }
        return false;
    }
    recreateLayout() {
        if (!this.layout || this._currentLayoutMode !== this.settings.display.layoutMode) {
            this.layout = Environment.getLayoutEngineFactory(this.settings.display.layoutMode).createLayout(this);
            this._currentLayoutMode = this.settings.display.layoutMode;
            return true;
        }
        return false;
    }
    renderScore(score, trackIndexes) {
        try {
            this.score = score;
            let tracks = null;
            if (score != null && trackIndexes != null) {
                if (!trackIndexes) {
                    tracks = score.tracks.slice(0);
                }
                else {
                    tracks = [];
                    for (let track of trackIndexes) {
                        if (track >= 0 && track < score.tracks.length) {
                            tracks.push(score.tracks[track]);
                        }
                    }
                }
                if (tracks.length === 0 && score.tracks.length > 0) {
                    tracks.push(score.tracks[0]);
                }
            }
            this.tracks = tracks;
            this.render();
        }
        catch (e) {
            this.error.trigger(e);
        }
    }
    /**
     * Initiates rendering fof the given tracks.
     * @param tracks The tracks to render.
     */
    renderTracks(tracks) {
        if (tracks.length === 0) {
            this.score = null;
        }
        else {
            this.score = tracks[0].score;
        }
        this.tracks = tracks;
        this.render();
    }
    updateSettings(settings) {
        this.settings = settings;
    }
    renderResult(resultId) {
        try {
            const layout = this.layout;
            if (layout) {
                Logger.debug('Rendering', 'Request render of lazy partial ' + resultId);
                layout.renderLazyPartial(resultId);
            }
            else {
                Logger.warning('Rendering', 'Request render of lazy partial ' + resultId + ' ignored, no layout exists');
            }
        }
        catch (e) {
            this.error.trigger(e);
        }
    }
    render() {
        if (this.width === 0) {
            Logger.warning('Rendering', 'AlphaTab skipped rendering because of width=0 (element invisible)', null);
            return;
        }
        this.boundsLookup = new BoundsLookup();
        this.recreateCanvas();
        this.canvas.lineWidth = this.settings.display.scale;
        this.canvas.settings = this.settings;
        if (!this.tracks || this.tracks.length === 0 || !this.score) {
            Logger.debug('Rendering', 'Clearing rendered tracks because no score or tracks are set');
            this.preRender.trigger(false);
            this._renderedTracks = null;
            this.onRenderFinished();
            this.postRenderFinished.trigger();
            Logger.debug('Rendering', 'Clearing finished');
        }
        else {
            Logger.debug('Rendering', 'Rendering ' + this.tracks.length + ' tracks');
            for (let i = 0; i < this.tracks.length; i++) {
                let track = this.tracks[i];
                Logger.debug('Rendering', 'Track ' + i + ': ' + track.name);
            }
            this.preRender.trigger(false);
            this.recreateLayout();
            this.layoutAndRender();
            Logger.debug('Rendering', 'Rendering finished');
        }
    }
    resizeRender() {
        if (this.recreateLayout() || this.recreateCanvas() || this._renderedTracks !== this.tracks || !this.tracks) {
            Logger.debug('Rendering', 'Starting full rerendering due to layout or canvas change', null);
            this.render();
        }
        else if (this.layout.supportsResize) {
            Logger.debug('Rendering', 'Starting optimized rerendering for resize');
            this.boundsLookup = new BoundsLookup();
            this.preRender.trigger(true);
            this.canvas.settings = this.settings;
            this.layout.resize();
            this.onRenderFinished();
            this.postRenderFinished.trigger();
        }
        else {
            Logger.warning('Rendering', 'Current layout does not support dynamic resizing, nothing was done', null);
        }
        Logger.debug('Rendering', 'Resize finished');
    }
    layoutAndRender() {
        Logger.debug('Rendering', 'Rendering at scale ' + this.settings.display.scale + ' with layout ' + this.layout.name, null);
        this.layout.layoutAndRender();
        this._renderedTracks = this.tracks;
        this.onRenderFinished();
        this.postRenderFinished.trigger();
    }
    onRenderFinished() {
        var _a;
        (_a = this.boundsLookup) === null || _a === void 0 ? void 0 : _a.finish();
        const e = new RenderFinishedEventArgs();
        e.totalHeight = this.layout.height;
        e.totalWidth = this.layout.width;
        e.renderResult = this.canvas.onRenderFinished();
        this.renderFinished.trigger(e);
    }
}

/**
 * @target web
 */
class AlphaTabWebWorker {
    constructor(main) {
        this._main = main;
        this._main.addEventListener('message', this.handleMessage.bind(this), false);
    }
    static init() {
        Environment.globalThis.alphaTabWebWorker = new AlphaTabWebWorker(Environment.globalThis);
    }
    handleMessage(e) {
        let data = e.data;
        let cmd = data ? data.cmd : '';
        switch (cmd) {
            case 'alphaTab.initialize':
                let settings = JsonConverter.jsObjectToSettings(data.settings);
                Logger.logLevel = settings.core.logLevel;
                this._renderer = new ScoreRenderer(settings);
                this._renderer.partialRenderFinished.on(result => {
                    this._main.postMessage({
                        cmd: 'alphaTab.partialRenderFinished',
                        result: result
                    });
                });
                this._renderer.partialLayoutFinished.on(result => {
                    this._main.postMessage({
                        cmd: 'alphaTab.partialLayoutFinished',
                        result: result
                    });
                });
                this._renderer.renderFinished.on(result => {
                    this._main.postMessage({
                        cmd: 'alphaTab.renderFinished',
                        result: result
                    });
                });
                this._renderer.postRenderFinished.on(() => {
                    var _a, _b;
                    this._main.postMessage({
                        cmd: 'alphaTab.postRenderFinished',
                        boundsLookup: (_b = (_a = this._renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.toJson()) !== null && _b !== void 0 ? _b : null
                    });
                });
                this._renderer.preRender.on(resize => {
                    this._main.postMessage({
                        cmd: 'alphaTab.preRender',
                        resize: resize
                    });
                });
                this._renderer.error.on(this.error.bind(this));
                break;
            case 'alphaTab.invalidate':
                this._renderer.render();
                break;
            case 'alphaTab.resizeRender':
                this._renderer.resizeRender();
                break;
            case 'alphaTab.renderResult':
                this._renderer.renderResult(data.resultId);
                break;
            case 'alphaTab.setWidth':
                this._renderer.width = data.width;
                break;
            case 'alphaTab.renderScore':
                this.updateFontSizes(data.fontSizes);
                let score = data.score == null ? null : JsonConverter.jsObjectToScore(data.score, this._renderer.settings);
                this.renderMultiple(score, data.trackIndexes);
                break;
            case 'alphaTab.updateSettings':
                this.updateSettings(data.settings);
                break;
        }
    }
    updateFontSizes(fontSizes) {
        if (fontSizes) {
            if (!FontSizes.FontSizeLookupTables) {
                FontSizes.FontSizeLookupTables = new Map();
            }
            for (let font in fontSizes) {
                FontSizes.FontSizeLookupTables.set(font, fontSizes[font]);
            }
        }
    }
    updateSettings(json) {
        SettingsSerializer.fromJson(this._renderer.settings, json);
    }
    renderMultiple(score, trackIndexes) {
        try {
            this._renderer.renderScore(score, trackIndexes);
        }
        catch (e) {
            this.error(e);
        }
    }
    error(error) {
        Logger.error('Worker', 'An unexpected error occurred in worker', error);
        this._main.postMessage({
            cmd: 'alphaTab.error',
            error: error
        });
    }
}

/**
 * A canvas implementation for HTML5 canvas
 * @target web
 */
class Html5Canvas {
    constructor() {
        this._canvas = null;
        this._color = new Color(0, 0, 0, 0xff);
        this._font = new Font('Arial', 10, FontStyle.Plain);
        this._lineWidth = 0;
        let fontElement = document.createElement('span');
        fontElement.classList.add('at');
        document.body.appendChild(fontElement);
        let style = window.getComputedStyle(fontElement);
        let family = style.fontFamily;
        if (family.startsWith('"') || family.startsWith("'")) {
            family = family.substr(1, family.length - 2);
        }
        this._musicFont = new Font(family, parseFloat(style.fontSize), FontStyle.Plain);
        this._measureCanvas = document.createElement('canvas');
        this._measureCanvas.width = 10;
        this._measureCanvas.height = 10;
        this._measureCanvas.style.width = '10px';
        this._measureCanvas.style.height = '10px';
        this._measureContext = this._measureCanvas.getContext('2d');
        this._measureContext.textBaseline = 'hanging';
    }
    onRenderFinished() {
        return null;
    }
    beginRender(width, height) {
        this._canvas = document.createElement('canvas');
        this._canvas.width = (width * Environment.HighDpiFactor) | 0;
        this._canvas.height = (height * Environment.HighDpiFactor) | 0;
        this._canvas.style.width = width + 'px';
        this._canvas.style.height = height + 'px';
        this._context = this._canvas.getContext('2d');
        this._context.textBaseline = 'hanging';
        this._context.scale(Environment.HighDpiFactor, Environment.HighDpiFactor);
        this._context.lineWidth = this._lineWidth;
    }
    endRender() {
        let result = this._canvas;
        this._canvas = null;
        return result;
    }
    get color() {
        return this._color;
    }
    set color(value) {
        if (this._color.rgba === value.rgba) {
            return;
        }
        this._color = value;
        this._context.strokeStyle = value.rgba;
        this._context.fillStyle = value.rgba;
    }
    get lineWidth() {
        return this._lineWidth;
    }
    set lineWidth(value) {
        this._lineWidth = value;
        if (this._context) {
            this._context.lineWidth = value;
        }
    }
    fillRect(x, y, w, h) {
        if (w > 0) {
            this._context.fillRect((x | 0), (y | 0), w, h);
        }
    }
    strokeRect(x, y, w, h) {
        this._context.strokeRect((x | 0), (y | 0), w, h);
    }
    beginPath() {
        this._context.beginPath();
    }
    closePath() {
        this._context.closePath();
    }
    moveTo(x, y) {
        this._context.moveTo(x, y);
    }
    lineTo(x, y) {
        this._context.lineTo(x, y);
    }
    quadraticCurveTo(cpx, cpy, x, y) {
        this._context.quadraticCurveTo(cpx, cpy, x, y);
    }
    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    }
    fillCircle(x, y, radius) {
        this._context.beginPath();
        this._context.arc(x, y, radius, 0, Math.PI * 2, true);
        this.fill();
    }
    strokeCircle(x, y, radius) {
        this._context.beginPath();
        this._context.arc(x, y, radius, 0, Math.PI * 2, true);
        this.stroke();
    }
    fill() {
        this._context.fill();
        this._context.beginPath();
    }
    stroke() {
        this._context.stroke();
        this._context.beginPath();
    }
    get font() {
        return this._font;
    }
    set font(value) {
        this._font = value;
        if (this._context) {
            this._context.font = value.toCssString(this.settings.display.scale);
        }
        this._measureContext.font = value.toCssString(this.settings.display.scale);
    }
    get textAlign() {
        switch (this._context.textAlign) {
            case 'left':
                return TextAlign.Left;
            case 'center':
                return TextAlign.Center;
            case 'right':
                return TextAlign.Right;
            default:
                return TextAlign.Left;
        }
    }
    set textAlign(value) {
        switch (value) {
            case TextAlign.Left:
                this._context.textAlign = 'left';
                break;
            case TextAlign.Center:
                this._context.textAlign = 'center';
                break;
            case TextAlign.Right:
                this._context.textAlign = 'right';
                break;
        }
    }
    get textBaseline() {
        switch (this._context.textBaseline) {
            case 'hanging':
                return TextBaseline.Top;
            case 'middle':
                return TextBaseline.Middle;
            case 'bottom':
                return TextBaseline.Bottom;
            default:
                return TextBaseline.Top;
        }
    }
    set textBaseline(value) {
        switch (value) {
            case TextBaseline.Top:
                this._context.textBaseline = 'hanging';
                break;
            case TextBaseline.Middle:
                this._context.textBaseline = 'middle';
                break;
            case TextBaseline.Bottom:
                this._context.textBaseline = 'bottom';
                break;
        }
    }
    beginGroup(_) {
        // not supported
    }
    endGroup() {
        // not supported
    }
    fillText(text, x, y) {
        this._context.fillText(text, x, y);
    }
    measureText(text) {
        return this._measureContext.measureText(text).width;
    }
    fillMusicFontSymbol(x, y, scale, symbol, centerAtPosition = false) {
        if (symbol === MusicFontSymbol.None) {
            return;
        }
        this.fillMusicFontSymbolText(x, y, scale, String.fromCharCode(symbol), centerAtPosition);
    }
    fillMusicFontSymbols(x, y, scale, symbols, centerAtPosition = false) {
        let s = '';
        for (let symbol of symbols) {
            if (symbol !== MusicFontSymbol.None) {
                s += String.fromCharCode(symbol);
            }
        }
        this.fillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
    }
    fillMusicFontSymbolText(x, y, scale, symbols, centerAtPosition = false) {
        let textAlign = this._context.textAlign;
        let baseLine = this._context.textBaseline;
        let font = this._context.font;
        this._context.font = this._musicFont.toCssString(scale);
        this._context.textBaseline = 'middle';
        if (centerAtPosition) {
            this._context.textAlign = 'center';
        }
        else {
            this._context.textAlign = 'left';
        }
        this._context.fillText(symbols, x, y);
        this._context.textBaseline = baseLine;
        this._context.font = font;
        this._context.textAlign = textAlign;
    }
    beginRotate(centerX, centerY, angle) {
        this._context.save();
        this._context.translate(centerX, centerY);
        this._context.rotate((angle * Math.PI) / 180.0);
    }
    endRotate() {
        this._context.restore();
    }
}

/**
 * This implementation of the {@link IMidiFileHandler}
 * generates a {@link MidiFile} object which can be used in AlphaSynth for playback.
 */
class AlphaSynthMidiFileHandler {
    /**
     * Initializes a new instance of the {@link AlphaSynthMidiFileHandler} class.
     * @param midiFile The midi file.
     */
    constructor(midiFile) {
        this._midiFile = midiFile;
    }
    addTimeSignature(tick, timeSignatureNumerator, timeSignatureDenominator) {
        let denominatorIndex = 0;
        while (true) {
            timeSignatureDenominator = timeSignatureDenominator >> 1;
            if (timeSignatureDenominator > 0) {
                denominatorIndex++;
            }
            else {
                break;
            }
        }
        const message = new MetaDataEvent(0, tick, 0xff, MetaEventType.TimeSignature, new Uint8Array([timeSignatureNumerator & 0xff, denominatorIndex & 0xff, 48, 8]));
        this._midiFile.addEvent(message);
    }
    addRest(track, tick, channel) {
        const message = new SystemExclusiveEvent(track, tick, SystemCommonType.SystemExclusive, SystemExclusiveEvent.AlphaTabManufacturerId, new Uint8Array([AlphaTabSystemExclusiveEvents.Rest]));
        this._midiFile.addEvent(message);
    }
    addNote(track, start, length, key, dynamicValue, channel) {
        const velocity = MidiUtils.dynamicToVelocity(dynamicValue);
        const noteOn = new MidiEvent(track, start, this.makeCommand(MidiEventType.NoteOn, channel), AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity));
        this._midiFile.addEvent(noteOn);
        const noteOff = new MidiEvent(track, start + length, this.makeCommand(MidiEventType.NoteOff, channel), AlphaSynthMidiFileHandler.fixValue(key), AlphaSynthMidiFileHandler.fixValue(velocity));
        this._midiFile.addEvent(noteOff);
    }
    makeCommand(command, channel) {
        return (command & 0xf0) | (channel & 0x0f);
    }
    static fixValue(value) {
        if (value > 127) {
            return 127;
        }
        if (value < 0) {
            return 0;
        }
        return value;
    }
    addControlChange(track, tick, channel, controller, value) {
        const message = new MidiEvent(track, tick, this.makeCommand(MidiEventType.Controller, channel), AlphaSynthMidiFileHandler.fixValue(controller), AlphaSynthMidiFileHandler.fixValue(value));
        this._midiFile.addEvent(message);
    }
    addProgramChange(track, tick, channel, program) {
        const message = new MidiEvent(track, tick, this.makeCommand(MidiEventType.ProgramChange, channel), AlphaSynthMidiFileHandler.fixValue(program), 0);
        this._midiFile.addEvent(message);
    }
    addTempo(tick, tempo) {
        // bpm -> microsecond per quarter note
        const tempoInUsq = (60000000 / tempo) | 0;
        const message = new MetaNumberEvent(0, tick, 0xff, MetaEventType.Tempo, tempoInUsq);
        this._midiFile.addEvent(message);
    }
    addBend(track, tick, channel, value) {
        if (value >= SynthConstants.MaxPitchWheel) {
            value = SynthConstants.MaxPitchWheel;
        }
        else {
            value = Math.floor(value);
        }
        const message = new MidiEvent(track, tick, this.makeCommand(MidiEventType.PitchBend, channel), value & 0x7F, (value >> 7) & 0x7F);
        this._midiFile.addEvent(message);
    }
    addNoteBend(track, tick, channel, key, value) {
        if (value >= SynthConstants.MaxPitchWheel) {
            value = SynthConstants.MaxPitchWheel;
        }
        else {
            value = Math.floor(value);
        }
        // map midi 1.0 range of 0-16384     (0x4000)
        // to midi 2.0 range of 0-4294967296 (0x100000000)
        value = value * SynthConstants.MaxPitchWheel20 / SynthConstants.MaxPitchWheel;
        const message = new Midi20PerNotePitchBendEvent(track, tick, this.makeCommand(MidiEventType.PerNotePitchBend, channel), key, value);
        this._midiFile.addEvent(message);
    }
    finishTrack(track, tick) {
        const message = new MetaDataEvent(track, tick, 0xff, MetaEventType.EndOfTrack, new Uint8Array(0));
        this._midiFile.addEvent(message);
    }
}

/**
 * Represents the time period, for which a {@link Beat} is played.
 */
class BeatTickLookup {
    constructor() {
        this._highlightedBeats = new Map();
        /**
         * Gets or sets the index of the lookup within the parent MasterBarTickLookup.
         */
        this.index = 0;
        /**
         * Gets or sets the start time in midi ticks at which the given beat is played.
         */
        this.start = 0;
        /**
         * Gets or sets the end time in midi ticks at which the given beat is played.
         */
        this.end = 0;
        /**
         * Gets or sets whether the beat is the placeholder beat for an empty bar.
         */
        this.isEmptyBar = false;
        /**
         * Gets or sets a list of all beats that should be highlighted when
         * the beat of this lookup starts playing.
         */
        this.beatsToHighlight = [];
    }
    highlightBeat(beat) {
        if (!this._highlightedBeats.has(beat.id)) {
            this._highlightedBeats.set(beat.id, true);
            this.beatsToHighlight.push(beat);
        }
    }
}

/**
 * Lists all midi controllers.
 */
var ControllerType;
(function (ControllerType) {
    /**
     * Bank Select. MSB
     */
    ControllerType[ControllerType["BankSelectCoarse"] = 0] = "BankSelectCoarse";
    /**
     * Modulation wheel or lever MSB
     */
    ControllerType[ControllerType["ModulationCoarse"] = 1] = "ModulationCoarse";
    //BreathControllerCoarse = 0x02,
    //FootControllerCoarse = 0x04,
    //PortamentoTimeCoarse = 0x05,
    /**
     * Data entry MSB
     */
    ControllerType[ControllerType["DataEntryCoarse"] = 6] = "DataEntryCoarse";
    /**
     * Channel Volume MSB
     */
    ControllerType[ControllerType["VolumeCoarse"] = 7] = "VolumeCoarse";
    //BalanceCoarse = 0x08,
    /**
     * Pan MSB
     */
    ControllerType[ControllerType["PanCoarse"] = 10] = "PanCoarse";
    /**
     * Expression Controller MSB
     */
    ControllerType[ControllerType["ExpressionControllerCoarse"] = 11] = "ExpressionControllerCoarse";
    //EffectControl1Coarse = 0x0C,
    //EffectControl2Coarse = 0x0D,
    //GeneralPurposeSlider1 = 0x10,
    //GeneralPurposeSlider2 = 0x11,
    //GeneralPurposeSlider3 = 0x12,
    //GeneralPurposeSlider4 = 0x13,
    //BankSelectFine = 0x20,
    /**
     * Modulation wheel or level LSB
     */
    ControllerType[ControllerType["ModulationFine"] = 33] = "ModulationFine";
    //BreathControllerFine = 0x22,
    //FootControllerFine = 0x24,
    //PortamentoTimeFine = 0x25,
    /**
     * Data Entry LSB
     */
    ControllerType[ControllerType["DataEntryFine"] = 38] = "DataEntryFine";
    /**
     * Channel Volume LSB
     */
    ControllerType[ControllerType["VolumeFine"] = 39] = "VolumeFine";
    //BalanceFine = 0x28,
    /**
     * Pan LSB
     */
    ControllerType[ControllerType["PanFine"] = 42] = "PanFine";
    /**
     * Expression controller LSB
     */
    ControllerType[ControllerType["ExpressionControllerFine"] = 43] = "ExpressionControllerFine";
    //EffectControl1Fine = 0x2C,
    //EffectControl2Fine = 0x2D,
    /**
     * Damper pedal (sustain)
     */
    ControllerType[ControllerType["HoldPedal"] = 64] = "HoldPedal";
    //Portamento = 0x41,
    //SostenutoPedal = 0x42,
    //SoftPedal = 0x43,
    /**
     * Legato Footswitch
     */
    ControllerType[ControllerType["LegatoPedal"] = 68] = "LegatoPedal";
    //Hold2Pedal = 0x45,
    //SoundVariation = 0x46,
    //SoundTimbre = 0x47,
    //SoundReleaseTime = 0x48,
    //SoundAttackTime = 0x49,
    //SoundBrightness = 0x4A,
    //SoundControl6 = 0x4B,
    //SoundControl7 = 0x4C,
    //SoundControl8 = 0x4D,
    //SoundControl9 = 0x4E,
    //SoundControl10 = 0x4F,
    //GeneralPurposeButton1 = 0x50,
    //GeneralPurposeButton2 = 0x51,
    //GeneralPurposeButton3 = 0x52,
    //GeneralPurposeButton4 = 0x53,
    //EffectsLevel = 0x5B,
    //TremuloLevel = 0x5C,
    //ChorusLevel = 0x5D,
    //CelesteLevel = 0x5E,
    //PhaseLevel = 0x5F,
    //DataButtonIncrement = 0x60,
    //DataButtonDecrement = 0x61,
    /**
     * Non-Registered Parameter Number LSB
     */
    ControllerType[ControllerType["NonRegisteredParameterFine"] = 98] = "NonRegisteredParameterFine";
    /**
     * Non-Registered Parameter Number MSB
     */
    ControllerType[ControllerType["NonRegisteredParameterCourse"] = 99] = "NonRegisteredParameterCourse";
    /**
     * Registered Parameter Number LSB
     */
    ControllerType[ControllerType["RegisteredParameterFine"] = 100] = "RegisteredParameterFine";
    /**
     * Registered Parameter Number MSB
     */
    ControllerType[ControllerType["RegisteredParameterCourse"] = 101] = "RegisteredParameterCourse";
    //AllSoundOff = 0x78,
    /**
     * Reset all controllers
     */
    ControllerType[ControllerType["ResetControllers"] = 121] = "ResetControllers";
    //LocalKeyboard = 0x7A,
    /**
     * All notes of.
     */
    ControllerType[ControllerType["AllNotesOff"] = 123] = "AllNotesOff";
    //OmniModeOff = 0x7C,
    //OmniModeOn = 0x7D,
    //MonoMode = 0x7E,
    //PolyMode = 0x7F
})(ControllerType || (ControllerType = {}));

/**
 * Helper container to handle repeats correctly
 */
class Repeat {
    constructor(group, opening) {
        this.closingIndex = 0;
        this.group = group;
        this.opening = opening;
        // sort ascending according to index
        group.closings = group.closings.sort((a, b) => a.index - b.index);
        this.iterations = group.closings.map(_ => 0);
    }
}
class MidiPlaybackController {
    constructor(score) {
        this._repeatStack = [];
        this._groupsOnStack = new Set();
        this._previousAlternateEndings = 0;
        this.shouldPlay = true;
        this.index = 0;
        this.currentTick = 0;
        this._score = score;
    }
    get finished() {
        return this.index >= this._score.masterBars.length;
    }
    processCurrent() {
        const masterBar = this._score.masterBars[this.index];
        let masterBarAlternateEndings = masterBar.alternateEndings;
        // if there are no alternate endings set on this bar. take the ones 
        // from the previously played bar which had alternate endings
        if (masterBarAlternateEndings === 0) {
            masterBarAlternateEndings = this._previousAlternateEndings;
        }
        // Repeat start (only properly closed ones)
        if (masterBar === masterBar.repeatGroup.opening && masterBar.repeatGroup.isClosed) {
            // first encounter of the repeat group? -> initialize repeats accordingly
            if (!this._groupsOnStack.has(masterBar.repeatGroup)) {
                const repeat = new Repeat(masterBar.repeatGroup, masterBar);
                this._repeatStack.push(repeat);
                this._groupsOnStack.add(masterBar.repeatGroup);
                this._previousAlternateEndings = 0;
            }
        }
        // if we're not within repeats or not alternative endings set -> simply play
        if (this._repeatStack.length === 0 || masterBarAlternateEndings === 0) {
            this.shouldPlay = true;
        }
        else {
            const repeat = this._repeatStack[this._repeatStack.length - 1];
            const iteration = repeat.iterations[repeat.closingIndex];
            this._previousAlternateEndings = masterBarAlternateEndings;
            // do we need to skip this section?
            if ((masterBarAlternateEndings & (1 << iteration)) === 0) {
                this.shouldPlay = false;
            }
            else {
                this.shouldPlay = true;
            }
        }
        if (this.shouldPlay) {
            this.currentTick += masterBar.calculateDuration();
        }
    }
    moveNext() {
        const masterBar = this._score.masterBars[this.index];
        const masterBarRepeatCount = masterBar.repeatCount - 1;
        // if we encounter a repeat end...
        if (this._repeatStack.length > 0 && masterBarRepeatCount > 0) {
            // ...more repeats required?
            const repeat = this._repeatStack[this._repeatStack.length - 1];
            const iteration = repeat.iterations[repeat.closingIndex];
            // -> if yes, increase the iteration and jump back to start
            if (iteration < masterBarRepeatCount) {
                // jump to start
                this.index = repeat.opening.index;
                repeat.iterations[repeat.closingIndex]++;
                // clear iterations for previous closings and start over all repeats
                // this ensures on scenarios like "open, bar, close, bar, close"
                // that the second close will repeat again the first repeat.
                for (let i = 0; i < repeat.closingIndex; i++) {
                    repeat.iterations[i] = 0;
                }
                repeat.closingIndex = 0;
                this._previousAlternateEndings = 0;
            }
            else {
                // if we don't have further iterations left but we have additional closings in this group
                // proceed heading to the next close but keep the repeat group active
                if (repeat.closingIndex < repeat.group.closings.length - 1) {
                    repeat.closingIndex++;
                    this.index++; // go to next bar after current close
                }
                else {
                    // if there are no further closings in the current group, we consider the current repeat done and handled
                    this._repeatStack.pop();
                    this._groupsOnStack.delete(repeat.group);
                    this.index++; // go to next bar after current close
                }
            }
        }
        else {
            // we have no started repeat, just proceed to next bar
            this.index++;
        }
    }
}

/**
 * Represents the time period, for which all bars of a {@link MasterBar} are played.
 */
class MasterBarTickLookup {
    constructor() {
        /**
         * Gets or sets the start time in midi ticks at which the MasterBar is played.
         */
        this.start = 0;
        /**
         * Gets or sets the end time in midi ticks at which the MasterBar is played.
         */
        this.end = 0;
        /**
         * Gets or sets the current tempo when the MasterBar is played.
         */
        this.tempo = 0;
        /**
         * Gets or sets the list of {@link BeatTickLookup} object which define the durations
         * for all {@link Beats} played within the period of this MasterBar.
         */
        this.beats = [];
        /**
         * Gets or sets the {@link MasterBarTickLookup} of the next masterbar in the {@link Score}
         */
        this.nextMasterBar = null;
    }
    /**
     * Performs the neccessary finalization steps after all information was written.
     */
    finish() {
        this.beats.sort((a, b) => {
            return a.start - b.start;
        });
    }
    /**
     * Adds a new {@link BeatTickLookup} to the list of played beats during this MasterBar period.
     * @param beat
     */
    addBeat(beat) {
        beat.masterBar = this;
        beat.index = this.beats.length;
        this.beats.push(beat);
    }
}

/**
 * Represents the results of searching the currently played beat.
 * @see MidiTickLookup.FindBeat
 */
class MidiTickLookupFindBeatResult {
    constructor() {
        /**
         * Gets or sets the duration in milliseconds how long this beat is playing.
         */
        this.duration = 0;
        /**
         * Gets or sets the duration in midi ticks for how long this tick lookup is valid
         * starting at the `currentBeatLookup.start`
         */
        this.tickDuration = 0;
        /**
         * Gets or sets the beat lookup for the next beat.
         */
        this.nextBeatLookup = null;
    }
    /**
     * Gets or sets the beat that is currently played.
     */
    get currentBeat() {
        return this.currentBeatLookup.beat;
    }
    /**
     * Gets or sets the beat that will be played next.
     */
    get nextBeat() {
        var _a, _b;
        return (_b = (_a = this.nextBeatLookup) === null || _a === void 0 ? void 0 : _a.beat) !== null && _b !== void 0 ? _b : null;
    }
}
/**
 * This class holds all information about when {@link MasterBar}s and {@link Beat}s are played.
 */
class MidiTickLookup {
    constructor() {
        this._currentMasterBar = null;
        /**
         * Gets a dictionary of all master bars played. The index is the index equals to {@link MasterBar.index}.
         * This lookup only contains the first time a MasterBar is played. For a whole sequence of the song refer to {@link MasterBars}.
         * @internal
         */
        this.masterBarLookup = new Map();
        /**
         * Gets a list of all {@link MasterBarTickLookup} sorted by time.
         * @internal
         */
        this.masterBars = [];
    }
    /**
     * Performs the neccessary finalization steps after all information was written.
     * @internal
     */
    finish() {
        let previous = null;
        let activeBeats = [];
        for (let bar of this.masterBars) {
            bar.finish();
            if (previous) {
                previous.nextMasterBar = bar;
            }
            for (const beat of bar.beats) {
                // 1. calculate newly which beats are still active
                const newActiveBeats = [];
                // TODO: only create new list if current position changed
                for (let activeBeat of activeBeats) {
                    if (activeBeat.end > beat.start) {
                        newActiveBeats.push(activeBeat);
                        // 2. remember for current beat which active beats to highlight
                        beat.highlightBeat(activeBeat.beat);
                        // 3. ensure that active beat highlights current beat if they match the range
                        if (beat.start <= activeBeat.start) {
                            activeBeat.highlightBeat(beat.beat);
                        }
                    }
                }
                newActiveBeats.push(beat);
                activeBeats = newActiveBeats;
            }
            previous = bar;
        }
    }
    /**
     * Finds the currently played beat given a list of tracks and the current time.
     * @param tracks The tracks in which to search the played beat for.
     * @param tick The current time in midi ticks.
     * @returns The information about the current beat or null if no beat could be found.
     */
    findBeat(tracks, tick, currentBeatHint = null) {
        const trackLookup = new Map();
        for (const track of tracks) {
            trackLookup.set(track.index, true);
        }
        let result = null;
        if (currentBeatHint) {
            result = this.findBeatFast(trackLookup, currentBeatHint, tick);
        }
        if (!result) {
            result = this.findBeatSlow(trackLookup, tick);
        }
        return result;
    }
    findBeatFast(trackLookup, currentBeatHint, tick) {
        const end = currentBeatHint.currentBeatLookup.start + currentBeatHint.tickDuration;
        if (tick >= currentBeatHint.currentBeatLookup.start && tick < end) {
            // still same beat?
            return currentBeatHint;
        }
        else if (currentBeatHint.nextBeatLookup &&
            tick >= currentBeatHint.nextBeatLookup.start &&
            tick < currentBeatHint.nextBeatLookup.end) {
            // maybe next beat?
            return this.createResult(currentBeatHint.nextBeatLookup, trackLookup);
        }
        // likely a loop or manual seek, need to fallback to slow path
        return null;
    }
    findBeatSlow(trackLookup, tick) {
        // get all beats within the masterbar
        const masterBar = this.findMasterBar(tick);
        if (!masterBar) {
            return null;
        }
        let beat = null;
        let beats = masterBar.beats;
        for (let b = 0; b < beats.length; b++) {
            // is the current beat played on the given tick?
            let currentBeat = beats[b];
            // skip non relevant beats
            if (!trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                continue;
            }
            if (currentBeat.start <= tick && tick < currentBeat.end) {
                // take the latest played beat we can find. (most right)
                if (!beat || beat.start < currentBeat.start) {
                    beat = beats[b];
                }
            }
            else if (currentBeat.end > tick) {
                break;
            }
        }
        if (!beat) {
            return null;
        }
        return this.createResult(beat, trackLookup);
    }
    createResult(beat, trackLookup) {
        // search for next relevant beat in masterbar
        const nextBeat = this.findNextBeat(beat, trackLookup);
        const result = new MidiTickLookupFindBeatResult();
        result.currentBeatLookup = beat;
        result.nextBeatLookup = nextBeat;
        result.tickDuration = !nextBeat ? beat.end - beat.start : nextBeat.start - beat.start;
        result.duration = MidiUtils.ticksToMillis(result.tickDuration, beat.masterBar.tempo);
        result.beatsToHighlight = beat.beatsToHighlight;
        return result;
    }
    findNextBeat(beat, trackLookup) {
        const masterBar = beat.masterBar;
        let beats = masterBar.beats;
        // search for next relevant beat in masterbar
        let nextBeat = null;
        for (let b = beat.index + 1; b < beats.length; b++) {
            const currentBeat = beats[b];
            if (currentBeat.start > beat.start && trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                nextBeat = currentBeat;
                break;
            }
        }
        // first relevant beat in next bar
        if (!nextBeat && masterBar.nextMasterBar) {
            beats = masterBar.nextMasterBar.beats;
            for (let b = 0; b < beats.length; b++) {
                const currentBeat = beats[b];
                if (trackLookup.has(currentBeat.beat.voice.bar.staff.track.index)) {
                    nextBeat = currentBeat;
                    break;
                }
            }
        }
        return nextBeat;
    }
    findMasterBar(tick) {
        const bars = this.masterBars;
        let bottom = 0;
        let top = bars.length - 1;
        while (bottom <= top) {
            const middle = ((top + bottom) / 2) | 0;
            const bar = bars[middle];
            // found?
            if (tick >= bar.start && tick < bar.end) {
                return bar;
            }
            // search in lower half
            if (tick < bar.start) {
                top = middle - 1;
            }
            else {
                bottom = middle + 1;
            }
        }
        return null;
    }
    /**
     * Gets the {@link MasterBarTickLookup} for a given masterbar at which the masterbar is played the first time.
     * @param bar The masterbar to find the time period for.
     * @returns A {@link MasterBarTickLookup} containing the details about the first time the {@link MasterBar} is played.
     */
    getMasterBar(bar) {
        if (!this.masterBarLookup.has(bar.index)) {
            const fallback = new MasterBarTickLookup();
            fallback.masterBar = bar;
            return fallback;
        }
        return this.masterBarLookup.get(bar.index);
    }
    /**
     * Gets the start time in midi ticks for a given masterbar at which the masterbar is played the first time.
     * @param bar The masterbar to find the time period for.
     * @returns The time in midi ticks at which the masterbar is played the first time or 0 if the masterbar is not contained
     */
    getMasterBarStart(bar) {
        if (!this.masterBarLookup.has(bar.index)) {
            return 0;
        }
        return this.masterBarLookup.get(bar.index).start;
    }
    /**
     * Adds a new {@link MasterBarTickLookup} to the lookup table.
     * @param masterBar The item to add.
     */
    addMasterBar(masterBar) {
        this.masterBars.push(masterBar);
        this._currentMasterBar = masterBar;
        if (!this.masterBarLookup.has(masterBar.masterBar.index)) {
            this.masterBarLookup.set(masterBar.masterBar.index, masterBar);
        }
    }
    /**
     * Adds the given {@link BeatTickLookup} to the current {@link MidiTickLookup}.
     * @param beat The lookup to add.
     */
    addBeat(beat) {
        var _a;
        (_a = this._currentMasterBar) === null || _a === void 0 ? void 0 : _a.addBeat(beat);
    }
}

class MidiNoteDuration {
    constructor() {
        this.noteOnly = 0;
        this.untilTieOrSlideEnd = 0;
        this.letRingEnd = 0;
    }
}
class TripletFeelDurations {
    constructor() {
        this.firstBeatDuration = 0;
        this.secondBeatStartOffset = 0;
        this.secondBeatDuration = 0;
    }
}
/**
 * This generator creates a midi file using a score.
 */
class MidiFileGenerator {
    /**
     * Initializes a new instance of the {@link MidiFileGenerator} class.
     * @param score The score for which the midi file should be generated.
     * @param settings The settings ot use for generation.
     * @param handler The handler that should be used for generating midi events.
     */
    constructor(score, settings, handler) {
        this._currentTempo = 0;
        this._currentBarRepeatLookup = null;
        this._programsPerChannel = new Map();
        /**
         * Gets a lookup object which can be used to quickly find beats and bars
         * at a given midi tick position.
         */
        this.tickLookup = new MidiTickLookup();
        this._currentTripletFeel = null;
        this.vibratoResolution = 16;
        this._score = score;
        this._settings = !settings ? new Settings() : settings;
        this._currentTempo = this._score.tempo;
        this._handler = handler;
    }
    /**
     * Starts the generation of the midi file.
     */
    generate() {
        // initialize tracks
        for (const track of this._score.tracks) {
            this.generateTrack(track);
        }
        Logger.debug('Midi', 'Begin midi generation');
        const controller = new MidiPlaybackController(this._score);
        let previousMasterBar = null;
        // store the previous played bar for repeats
        while (!controller.finished) {
            const index = controller.index;
            const bar = this._score.masterBars[index];
            const currentTick = controller.currentTick;
            controller.processCurrent();
            if (controller.shouldPlay) {
                this.generateMasterBar(bar, previousMasterBar, currentTick);
                for (const track of this._score.tracks) {
                    for (const staff of track.staves) {
                        if (index < staff.bars.length) {
                            this.generateBar(staff.bars[index], currentTick);
                        }
                    }
                }
            }
            controller.moveNext();
            previousMasterBar = bar;
        }
        for (const track of this._score.tracks) {
            this._handler.finishTrack(track.index, controller.currentTick);
        }
        this.tickLookup.finish();
        Logger.debug('Midi', 'Midi generation done');
    }
    generateTrack(track) {
        // channel
        this.generateChannel(track, track.playbackInfo.primaryChannel, track.playbackInfo);
        if (track.playbackInfo.primaryChannel !== track.playbackInfo.secondaryChannel) {
            this.generateChannel(track, track.playbackInfo.secondaryChannel, track.playbackInfo);
        }
    }
    addProgramChange(track, tick, channel, program) {
        if (!this._programsPerChannel.has(channel) || this._programsPerChannel.get(channel) !== program) {
            this._handler.addProgramChange(track.index, tick, channel, program);
            this._programsPerChannel.set(channel, program);
        }
    }
    generateChannel(track, channel, playbackInfo) {
        let volume = MidiFileGenerator.toChannelShort(playbackInfo.volume);
        let balance = MidiFileGenerator.toChannelShort(playbackInfo.balance);
        this._handler.addControlChange(track.index, 0, channel, ControllerType.VolumeCoarse, volume);
        this._handler.addControlChange(track.index, 0, channel, ControllerType.PanCoarse, balance);
        this._handler.addControlChange(track.index, 0, channel, ControllerType.ExpressionControllerCoarse, 127);
        // set parameter that is being updated (0) -> PitchBendRangeCoarse
        this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterFine, 0);
        this._handler.addControlChange(track.index, 0, channel, ControllerType.RegisteredParameterCourse, 0);
        // Set PitchBendRangeCoarse to 12
        this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryFine, 0);
        this._handler.addControlChange(track.index, 0, channel, ControllerType.DataEntryCoarse, MidiFileGenerator.PitchBendRangeInSemitones);
        this.addProgramChange(track, 0, channel, playbackInfo.program);
    }
    static toChannelShort(data) {
        const value = Math.max(-32768, Math.min(32767, data * 8 - 1));
        return Math.max(value, -1) + 1;
    }
    generateMasterBar(masterBar, previousMasterBar, currentTick) {
        // time signature
        if (!previousMasterBar ||
            previousMasterBar.timeSignatureDenominator !== masterBar.timeSignatureDenominator ||
            previousMasterBar.timeSignatureNumerator !== masterBar.timeSignatureNumerator) {
            this._handler.addTimeSignature(currentTick, masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator);
        }
        // tempo
        if (masterBar.tempoAutomation) {
            this._handler.addTempo(currentTick, masterBar.tempoAutomation.value);
            this._currentTempo = masterBar.tempoAutomation.value;
        }
        else if (!previousMasterBar) {
            this._handler.addTempo(currentTick, masterBar.score.tempo);
            this._currentTempo = masterBar.score.tempo;
        }
        const masterBarLookup = new MasterBarTickLookup();
        masterBarLookup.masterBar = masterBar;
        masterBarLookup.start = currentTick;
        masterBarLookup.tempo = this._currentTempo;
        masterBarLookup.end = masterBarLookup.start + masterBar.calculateDuration();
        this.tickLookup.addMasterBar(masterBarLookup);
    }
    generateBar(bar, barStartTick) {
        let playbackBar = this.getPlaybackBar(bar);
        this._currentBarRepeatLookup = null;
        for (const v of playbackBar.voices) {
            this.generateVoice(v, barStartTick, bar);
        }
    }
    getPlaybackBar(bar) {
        switch (bar.simileMark) {
            case SimileMark.Simple:
                if (bar.previousBar) {
                    bar = this.getPlaybackBar(bar.previousBar);
                }
                break;
            case SimileMark.FirstOfDouble:
                if (bar.previousBar && bar.previousBar.previousBar) {
                    bar = this.getPlaybackBar(bar.previousBar.previousBar);
                }
                break;
            case SimileMark.SecondOfDouble:
                if (bar.previousBar && bar.previousBar.previousBar) {
                    bar = this.getPlaybackBar(bar.previousBar.previousBar);
                }
                break;
        }
        return bar;
    }
    generateVoice(voice, barStartTick, realBar) {
        if (voice.isEmpty && (!voice.bar.isEmpty || voice.index !== 0)) {
            return;
        }
        for (const b of voice.beats) {
            this.generateBeat(b, barStartTick, realBar);
        }
    }
    generateBeat(beat, barStartTick, realBar) {
        let beatStart = beat.playbackStart;
        let audioDuration = beat.playbackDuration;
        if (beat.voice.bar.isEmpty) {
            audioDuration = beat.voice.bar.masterBar.calculateDuration();
        }
        else if (beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel &&
            this._settings.player.playTripletFeel) {
            if (this._currentTripletFeel) {
                beatStart -= this._currentTripletFeel.secondBeatStartOffset;
                audioDuration = this._currentTripletFeel.secondBeatDuration;
                this._currentTripletFeel = null;
            }
            else {
                this._currentTripletFeel = MidiFileGenerator.calculateTripletFeelInfo(beatStart, audioDuration, beat);
                if (this._currentTripletFeel) {
                    audioDuration = this._currentTripletFeel.firstBeatDuration;
                }
            }
        }
        const beatLookup = new BeatTickLookup();
        beatLookup.start = barStartTick + beatStart;
        const realTickOffset = !beat.nextBeat
            ? audioDuration
            : beat.nextBeat.absolutePlaybackStart - beat.absolutePlaybackStart;
        beatLookup.end = barStartTick + beatStart;
        beatLookup.highlightBeat(beat);
        beatLookup.end += realTickOffset > audioDuration ? realTickOffset : audioDuration;
        // in case of normal playback register playback
        if (realBar === beat.voice.bar) {
            beatLookup.beat = beat;
            this.tickLookup.addBeat(beatLookup);
        }
        else {
            beatLookup.isEmptyBar = true;
            beatLookup.beat = realBar.voices[0].beats[0];
            if (!this._currentBarRepeatLookup) {
                this._currentBarRepeatLookup = beatLookup;
                this.tickLookup.addBeat(this._currentBarRepeatLookup);
            }
            else {
                this._currentBarRepeatLookup.end = beatLookup.end;
            }
        }
        const track = beat.voice.bar.staff.track;
        for (const automation of beat.automations) {
            this.generateAutomation(beat, automation, barStartTick);
        }
        if (beat.isRest) {
            this._handler.addRest(track.index, barStartTick + beatStart, track.playbackInfo.primaryChannel);
        }
        else {
            let brushInfo = this.getBrushInfo(beat);
            for (const n of beat.notes) {
                this.generateNote(n, barStartTick + beatStart, audioDuration, brushInfo);
            }
        }
        if (beat.vibrato !== VibratoType.None) {
            let phaseLength = 240;
            let bendAmplitude = 3;
            switch (beat.vibrato) {
                case VibratoType.Slight:
                    phaseLength = this._settings.player.vibrato.beatSlightLength;
                    bendAmplitude = this._settings.player.vibrato.beatSlightAmplitude;
                    break;
                case VibratoType.Wide:
                    phaseLength = this._settings.player.vibrato.beatWideLength;
                    bendAmplitude = this._settings.player.vibrato.beatWideAmplitude;
                    break;
            }
            this.generateVibratorWithParams(barStartTick + beatStart, beat.playbackDuration, phaseLength, bendAmplitude, (tick, value) => {
                this._handler.addBend(beat.voice.bar.staff.track.index, tick, track.playbackInfo.secondaryChannel, value);
            });
        }
    }
    static calculateTripletFeelInfo(beatStart, audioDuration, beat) {
        let initialDuration;
        switch (beat.voice.bar.masterBar.tripletFeel) {
            case TripletFeel.Triplet8th:
            case TripletFeel.Dotted8th:
            case TripletFeel.Scottish8th:
                initialDuration = Duration.Eighth;
                break;
            case TripletFeel.Triplet16th:
            case TripletFeel.Dotted16th:
            case TripletFeel.Scottish16th:
                initialDuration = Duration.Sixteenth;
                break;
            default:
                // not possible
                return null;
        }
        const interval = MidiUtils.toTicks(initialDuration);
        // it must be a plain note with the expected duration
        // without dots, triplets, grace notes etc.
        if (audioDuration !== interval) {
            return null;
        }
        // check if the beat is aligned in respect to the duration
        // e.g. the eighth notes on a 4/4 time signature must start exactly on the following
        // times to get a triplet feel applied
        // 0 480 960 1440 1920 2400 2880 3360
        if (beatStart % interval !== 0) {
            return null;
        }
        // ensure next beat matches spec
        if (!beat.nextBeat || beat.nextBeat.voice !== beat.voice || beat.playbackDuration !== interval) {
            return null;
        }
        // looks like we have a triplet feel combination start here!
        const durations = new TripletFeelDurations();
        switch (beat.voice.bar.masterBar.tripletFeel) {
            case TripletFeel.Triplet8th:
                durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Quarter), 3, 2);
                durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                break;
            case TripletFeel.Dotted8th:
                durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                durations.secondBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                break;
            case TripletFeel.Scottish8th:
                durations.firstBeatDuration = MidiUtils.toTicks(Duration.Sixteenth);
                durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Eighth), false);
                break;
            case TripletFeel.Triplet16th:
                durations.firstBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Eighth), 3, 2);
                durations.secondBeatDuration = MidiUtils.applyTuplet(MidiUtils.toTicks(Duration.Sixteenth), 3, 2);
                break;
            case TripletFeel.Dotted16th:
                durations.firstBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                durations.secondBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                break;
            case TripletFeel.Scottish16th:
                durations.firstBeatDuration = MidiUtils.toTicks(Duration.ThirtySecond);
                durations.secondBeatDuration = MidiUtils.applyDot(MidiUtils.toTicks(Duration.Sixteenth), false);
                break;
        }
        // calculate the number of ticks the second beat can start earlier
        durations.secondBeatStartOffset = audioDuration - durations.firstBeatDuration;
        return durations;
    }
    generateNote(note, beatStart, beatDuration, brushInfo) {
        const track = note.beat.voice.bar.staff.track;
        const staff = note.beat.voice.bar.staff;
        let noteKey = note.realValue;
        if (note.isPercussion) {
            const articulation = PercussionMapper.getArticulation(note);
            if (articulation) {
                noteKey = articulation.outputMidiNumber;
            }
        }
        const brushOffset = note.isStringed && note.string <= brushInfo.length ? brushInfo[note.string - 1] : 0;
        const noteStart = beatStart + brushOffset;
        const noteDuration = this.getNoteDuration(note, beatDuration);
        noteDuration.untilTieOrSlideEnd -= brushOffset;
        noteDuration.noteOnly -= brushOffset;
        noteDuration.letRingEnd -= brushOffset;
        const dynamicValue = MidiFileGenerator.getDynamicValue(note);
        const channel = note.hasBend || note.beat.hasWhammyBar || note.beat.vibrato !== VibratoType.None
            ? track.playbackInfo.secondaryChannel
            : track.playbackInfo.primaryChannel;
        let initialBend = 0;
        if (note.hasBend) {
            initialBend = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
        }
        else if (note.beat.hasWhammyBar) {
            initialBend = MidiFileGenerator.getPitchWheel(note.beat.whammyBarPoints[0].value);
        }
        else if (note.isTieDestination ||
            (note.slideOrigin && note.slideOrigin.slideOutType === SlideOutType.Legato)) {
            initialBend = -1;
        }
        else {
            initialBend = MidiFileGenerator.getPitchWheel(0);
        }
        if (initialBend >= 0) {
            this._handler.addNoteBend(track.index, noteStart, channel, noteKey, initialBend);
        }
        //
        // Fade in
        if (note.beat.fadeIn) {
            this.generateFadeIn(note, noteStart, noteDuration);
        }
        //
        // Trill
        if (note.isTrill && !staff.isPercussion) {
            this.generateTrill(note, noteStart, noteDuration, noteKey, dynamicValue, channel);
            // no further generation needed
            return;
        }
        //
        // Tremolo Picking
        if (note.beat.isTremolo) {
            this.generateTremoloPicking(note, noteStart, noteDuration, noteKey, dynamicValue, channel);
            // no further generation needed
            return;
        }
        //
        // All String Bending/Variation effects
        if (note.hasBend) {
            this.generateBend(note, noteStart, noteDuration, noteKey, channel);
        }
        else if (note.beat.hasWhammyBar && note.index === 0) {
            this.generateWhammy(note.beat, noteStart, noteDuration, channel);
        }
        else if (note.slideInType !== SlideInType.None || note.slideOutType !== SlideOutType.None) {
            this.generateSlide(note, noteStart, noteDuration, noteKey, dynamicValue, channel);
        }
        else if (note.vibrato !== VibratoType.None || (note.isTieDestination && note.tieOrigin.vibrato !== VibratoType.None)) {
            this.generateVibrato(note, noteStart, noteDuration, noteKey, channel);
        }
        // for tied notes, and target notes of legato slides we do not pick the note
        // the previous one is extended
        if (!note.isTieDestination && (!note.slideOrigin || note.slideOrigin.slideOutType !== SlideOutType.Legato)) {
            let noteSoundDuration = Math.max(noteDuration.untilTieOrSlideEnd, noteDuration.letRingEnd);
            this._handler.addNote(track.index, noteStart, noteSoundDuration, noteKey, dynamicValue, channel);
        }
    }
    getNoteDuration(note, duration) {
        const durationWithEffects = new MidiNoteDuration();
        durationWithEffects.noteOnly = duration;
        durationWithEffects.untilTieOrSlideEnd = duration;
        durationWithEffects.letRingEnd = duration;
        if (note.isDead) {
            durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationDead, duration);
            durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
            durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
            return durationWithEffects;
        }
        if (note.isPalmMute) {
            durationWithEffects.noteOnly = this.applyStaticDuration(MidiFileGenerator.DefaultDurationPalmMute, duration);
            durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
            durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
            return durationWithEffects;
        }
        if (note.isStaccato) {
            durationWithEffects.noteOnly = (duration / 2) | 0;
            durationWithEffects.untilTieOrSlideEnd = durationWithEffects.noteOnly;
            durationWithEffects.letRingEnd = durationWithEffects.noteOnly;
            return durationWithEffects;
        }
        if (note.isTieOrigin) {
            const endNote = note.tieDestination;
            // for the initial start of the tie calculate absolute duration from start to end note
            if (endNote) {
                if (!note.isTieDestination) {
                    const startTick = note.beat.absolutePlaybackStart;
                    const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration);
                    const endTick = endNote.beat.absolutePlaybackStart + tieDestinationDuration.untilTieOrSlideEnd;
                    durationWithEffects.untilTieOrSlideEnd = endTick - startTick;
                }
                else {
                    // for continuing ties, take the current duration + the one from the destination
                    // this branch will be entered as part of the recusion of the if branch
                    const tieDestinationDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration);
                    durationWithEffects.untilTieOrSlideEnd = duration + tieDestinationDuration.untilTieOrSlideEnd;
                }
            }
        }
        else if (note.slideOutType === SlideOutType.Legato) {
            const endNote = note.slideTarget;
            if (endNote) {
                const startTick = note.beat.absolutePlaybackStart;
                const slideTargetDuration = this.getNoteDuration(endNote, endNote.beat.playbackDuration);
                const endTick = endNote.beat.absolutePlaybackStart + slideTargetDuration.untilTieOrSlideEnd;
                durationWithEffects.untilTieOrSlideEnd = endTick - startTick;
            }
        }
        if (note.isLetRing && this._settings.notation.notationMode === NotationMode.GuitarPro) {
            // LetRing ends when:
            // - rest
            let lastLetRingBeat = note.beat;
            let letRingEnd = 0;
            const maxDuration = note.beat.voice.bar.masterBar.calculateDuration();
            while (lastLetRingBeat.nextBeat) {
                let next = lastLetRingBeat.nextBeat;
                if (next.isRest) {
                    break;
                }
                // note on the same string
                if (note.isStringed && next.hasNoteOnString(note.string)) {
                    break;
                }
                lastLetRingBeat = lastLetRingBeat.nextBeat;
                letRingEnd =
                    lastLetRingBeat.absolutePlaybackStart -
                        note.beat.absolutePlaybackStart +
                        lastLetRingBeat.playbackDuration;
                if (letRingEnd > maxDuration) {
                    letRingEnd = maxDuration;
                    break;
                }
            }
            if (lastLetRingBeat === note.beat) {
                durationWithEffects.letRingEnd = duration;
            }
            else {
                durationWithEffects.letRingEnd = letRingEnd;
            }
        }
        else {
            durationWithEffects.letRingEnd = durationWithEffects.untilTieOrSlideEnd;
        }
        return durationWithEffects;
    }
    applyStaticDuration(duration, maximum) {
        const value = ((this._currentTempo * duration) / BendPoint.MaxPosition) | 0;
        return Math.min(value, maximum);
    }
    static getDynamicValue(note) {
        let dynamicValue = note.dynamics;
        // more silent on hammer destination
        if (!note.beat.voice.bar.staff.isPercussion && note.hammerPullOrigin) {
            dynamicValue--;
        }
        // more silent on ghost notes
        if (note.isGhost) {
            dynamicValue--;
        }
        // louder on accent
        switch (note.accentuated) {
            case AccentuationType.Normal:
                dynamicValue++;
                break;
            case AccentuationType.Heavy:
                dynamicValue += 2;
                break;
        }
        if (dynamicValue < 0) {
            dynamicValue = 0;
        }
        return dynamicValue;
    }
    generateFadeIn(note, noteStart, noteDuration) {
        const track = note.beat.voice.bar.staff.track;
        const endVolume = MidiFileGenerator.toChannelShort(track.playbackInfo.volume);
        const volumeFactor = endVolume / noteDuration.noteOnly;
        const tickStep = 120;
        const steps = (noteDuration.noteOnly / tickStep) | 0;
        const endTick = noteStart + noteDuration.noteOnly;
        for (let i = steps - 1; i >= 0; i--) {
            const tick = endTick - i * tickStep;
            const volume = (tick - noteStart) * volumeFactor;
            if (i === steps - 1) {
                this._handler.addControlChange(track.index, noteStart, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                this._handler.addControlChange(track.index, noteStart, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
            }
            this._handler.addControlChange(track.index, tick, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
            this._handler.addControlChange(track.index, tick, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
        }
    }
    generateVibrato(note, noteStart, noteDuration, noteKey, channel) {
        let phaseLength = 0;
        let bendAmplitude = 0;
        const vibratoType = note.vibrato !== VibratoType.None ? note.vibrato : (note.isTieDestination ? note.tieOrigin.vibrato :
            VibratoType.Slight /* should never happen unless called wrongly */);
        switch (vibratoType) {
            case VibratoType.Slight:
                phaseLength = this._settings.player.vibrato.noteSlightLength;
                bendAmplitude = this._settings.player.vibrato.noteSlightAmplitude;
                break;
            case VibratoType.Wide:
                phaseLength = this._settings.player.vibrato.noteWideLength;
                bendAmplitude = this._settings.player.vibrato.noteWideAmplitude;
                break;
            default:
                return;
        }
        const track = note.beat.voice.bar.staff.track;
        this.generateVibratorWithParams(noteStart, noteDuration.noteOnly, phaseLength, bendAmplitude, (tick, value) => {
            this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
        });
    }
    generateVibratorWithParams(noteStart, noteDuration, phaseLength, bendAmplitude, addBend) {
        const resolution = this.vibratoResolution;
        const phaseHalf = (phaseLength / 2) | 0;
        // 1st Phase stays at bend 0,
        // then we have a sine wave with the given amplitude and phase length
        noteStart += phaseLength;
        const noteEnd = noteStart + noteDuration;
        while (noteStart < noteEnd) {
            let phase = 0;
            const phaseDuration = noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
            while (phase < phaseDuration) {
                let bend = bendAmplitude * Math.sin((phase * Math.PI) / phaseHalf);
                addBend((noteStart + phase) | 0, MidiFileGenerator.getPitchWheel(bend));
                phase += resolution;
            }
            noteStart += phaseLength;
        }
    }
    /**
     * Calculates the midi pitch wheel value for the give bend value.
     */
    static getPitchWheel(bendValue) {
        // bend values are 1/4 notes therefore we only take half a semitone value per bend value
        return SynthConstants.DefaultPitchWheel + (bendValue / 2) * MidiFileGenerator.PitchValuePerSemitone;
    }
    generateSlide(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
        let duration = note.slideOutType === SlideOutType.Legato ? noteDuration.noteOnly : noteDuration.untilTieOrSlideEnd;
        let playedBendPoints = [];
        let track = note.beat.voice.bar.staff.track;
        const simpleSlidePitchOffset = this._settings.player.slide.simpleSlidePitchOffset;
        const simpleSlideDurationOffset = Math.floor(BendPoint.MaxPosition * this._settings.player.slide.simpleSlideDurationRatio);
        const shiftSlideDurationOffset = Math.floor(BendPoint.MaxPosition * this._settings.player.slide.shiftSlideDurationRatio);
        // Shift Slide: Play note, move up to target note, play end note
        // Legato Slide: Play note, move up to target note, no pick on end note, just keep it ringing
        // 2 bend points: one on 0/0, dy/MaxPos.
        // Slide into from above/below: Play note on lower pitch, slide into it quickly at start
        // Slide out above/blow: Play note on normal pitch, slide out quickly at end
        switch (note.slideInType) {
            case SlideInType.IntoFromAbove:
                playedBendPoints.push(new BendPoint(0, simpleSlidePitchOffset));
                playedBendPoints.push(new BendPoint(simpleSlideDurationOffset, 0));
                break;
            case SlideInType.IntoFromBelow:
                playedBendPoints.push(new BendPoint(0, -simpleSlidePitchOffset));
                playedBendPoints.push(new BendPoint(simpleSlideDurationOffset, 0));
                break;
        }
        switch (note.slideOutType) {
            case SlideOutType.Legato:
            case SlideOutType.Shift:
                playedBendPoints.push(new BendPoint(shiftSlideDurationOffset, 0));
                // normal note values are in 1/2 tones, bends are in 1/4 tones
                const dy = (note.slideTarget.realValue - note.realValue) * 2;
                playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, dy));
                break;
            case SlideOutType.OutDown:
                playedBendPoints.push(new BendPoint(BendPoint.MaxPosition - simpleSlideDurationOffset, 0));
                playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, -simpleSlidePitchOffset));
                break;
            case SlideOutType.OutUp:
                playedBendPoints.push(new BendPoint(BendPoint.MaxPosition - simpleSlideDurationOffset, 0));
                playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, simpleSlidePitchOffset));
                break;
        }
        this.generateWhammyOrBend(noteStart, duration, playedBendPoints, (tick, value) => {
            this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
        });
    }
    generateBend(note, noteStart, noteDuration, noteKey, channel) {
        let bendPoints = note.bendPoints;
        let track = note.beat.voice.bar.staff.track;
        const addBend = (tick, value) => {
            this._handler.addNoteBend(track.index, tick, channel, noteKey, value);
        };
        // if bend is extended on next tied note, we directly bend to the final bend value
        let finalBendValue = null;
        // Bends are spread across all tied notes unless they have a bend on their own.
        let duration;
        if (note.isTieOrigin && this._settings.notation.extendBendArrowsOnTiedNotes) {
            let endNote = note;
            while (endNote.isTieOrigin && !endNote.tieDestination.hasBend) {
                endNote = endNote.tieDestination;
            }
            duration =
                endNote.beat.absolutePlaybackStart -
                    note.beat.absolutePlaybackStart +
                    this.getNoteDuration(endNote, endNote.beat.playbackDuration).noteOnly;
        }
        else if (note.isTieOrigin && note.beat.graceType !== GraceType.None) {
            switch (note.tieDestination.bendType) {
                case BendType.Bend:
                case BendType.BendRelease:
                case BendType.PrebendBend:
                    finalBendValue = note.tieDestination.bendPoints[1].value;
                    break;
                case BendType.Prebend:
                case BendType.PrebendRelease:
                    finalBendValue = note.tieDestination.bendPoints[0].value;
                    break;
            }
            duration = Math.max(noteDuration.noteOnly, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
        }
        else {
            duration = noteDuration.noteOnly;
        }
        // ensure prebends are slightly before the actual note.
        if (bendPoints[0].value > 0 && !note.isContinuedBend && noteStart > 0) {
            noteStart--;
        }
        const bendDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
        let playedBendPoints = [];
        switch (note.bendType) {
            case BendType.Custom:
                playedBendPoints = bendPoints;
                break;
            case BendType.Bend:
            case BendType.Release:
                switch (note.bendStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                        if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                            finalBendValue = note.bendPoints[1].value;
                        }
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, finalBendValue));
                        break;
                    case BendStyle.Fast:
                        if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                            finalBendValue = note.bendPoints[1].value;
                        }
                        if (note.beat.graceType === GraceType.BendGrace) {
                            this.generateSongBookWhammyOrBend(noteStart, duration, true, [note.bendPoints[0].value, finalBendValue], bendDuration, addBend);
                        }
                        else {
                            this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, finalBendValue], bendDuration, addBend);
                        }
                        return;
                }
                break;
            case BendType.BendRelease:
                switch (note.bendStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                        playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[2].value));
                        break;
                    case BendStyle.Fast:
                        this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, note.bendPoints[1].value, note.bendPoints[2].value], bendDuration, addBend);
                        return;
                }
                break;
            case BendType.Hold:
                playedBendPoints = bendPoints;
                break;
            case BendType.Prebend:
                playedBendPoints = bendPoints;
                break;
            case BendType.PrebendBend:
                switch (note.bendStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                        break;
                    case BendStyle.Fast:
                        const preBendValue = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
                        addBend(noteStart, preBendValue | 0);
                        if (!finalBendValue || finalBendValue < note.bendPoints[1].value) {
                            finalBendValue = note.bendPoints[1].value;
                        }
                        this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, finalBendValue], bendDuration, addBend);
                        return;
                }
                break;
            case BendType.PrebendRelease:
                switch (note.bendStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, note.bendPoints[0].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                        break;
                    case BendStyle.Fast:
                        const preBendValue = MidiFileGenerator.getPitchWheel(note.bendPoints[0].value);
                        addBend(noteStart, preBendValue | 0);
                        this.generateSongBookWhammyOrBend(noteStart, duration, false, [note.bendPoints[0].value, note.bendPoints[1].value], bendDuration, addBend);
                        return;
                }
                break;
        }
        this.generateWhammyOrBend(noteStart, duration, playedBendPoints, addBend);
    }
    generateSongBookWhammyOrBend(noteStart, duration, bendAtBeginning, bendValues, bendDuration, addBend) {
        const startTick = bendAtBeginning ? noteStart : noteStart + duration - bendDuration;
        const ticksBetweenPoints = bendDuration / (bendValues.length - 1);
        for (let i = 0; i < bendValues.length - 1; i++) {
            const currentBendValue = MidiFileGenerator.getPitchWheel(bendValues[i]);
            const nextBendValue = MidiFileGenerator.getPitchWheel(bendValues[i + 1]);
            const tick = startTick + ticksBetweenPoints * i;
            this.generateBendValues(tick, ticksBetweenPoints, currentBendValue, nextBendValue, addBend);
        }
    }
    generateWhammy(beat, noteStart, noteDuration, channel) {
        const bendPoints = beat.whammyBarPoints;
        const track = beat.voice.bar.staff.track;
        const duration = noteDuration.noteOnly;
        // ensure prebends are slightly before the actual note.
        if (bendPoints[0].value > 0 && !beat.isContinuedWhammy) {
            noteStart--;
        }
        const addBend = (tick, value) => {
            this._handler.addBend(track.index, tick, channel, value);
        };
        let playedBendPoints = [];
        switch (beat.whammyBarType) {
            case WhammyType.Custom:
                playedBendPoints = bendPoints;
                break;
            case WhammyType.Dive:
                switch (beat.whammyStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                        break;
                    case BendStyle.Fast:
                        const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
                        this.generateSongBookWhammyOrBend(noteStart, duration, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration, addBend);
                        return;
                }
                break;
            case WhammyType.Dip:
                switch (beat.whammyStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                        playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[1].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[2].value));
                        break;
                    case BendStyle.Fast:
                        const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookDipDuration, this._currentTempo));
                        this.generateSongBookWhammyOrBend(noteStart, duration, true, [bendPoints[0].value, bendPoints[1].value, bendPoints[2].value], whammyDuration, addBend);
                        return;
                }
                break;
            case WhammyType.Hold:
                playedBendPoints = bendPoints;
                break;
            case WhammyType.Predive:
                playedBendPoints = bendPoints;
                break;
            case WhammyType.PrediveDive:
                switch (beat.whammyStyle) {
                    case BendStyle.Default:
                        playedBendPoints = bendPoints;
                        break;
                    case BendStyle.Gradual:
                        playedBendPoints.push(new BendPoint(0, bendPoints[0].value));
                        playedBendPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, bendPoints[0].value));
                        playedBendPoints.push(new BendPoint(BendPoint.MaxPosition, bendPoints[1].value));
                        break;
                    case BendStyle.Fast:
                        const preDiveValue = MidiFileGenerator.getPitchWheel(bendPoints[0].value);
                        this._handler.addBend(track.index, noteStart, channel, preDiveValue | 0);
                        const whammyDuration = Math.min(duration, MidiUtils.millisToTicks(this._settings.player.songBookBendDuration, this._currentTempo));
                        this.generateSongBookWhammyOrBend(noteStart, duration, false, [bendPoints[0].value, bendPoints[1].value], whammyDuration, addBend);
                        return;
                }
                break;
        }
        this.generateWhammyOrBend(noteStart, duration, playedBendPoints, addBend);
    }
    generateWhammyOrBend(noteStart, duration, playedBendPoints, addBend) {
        const ticksPerPosition = duration / BendPoint.MaxPosition;
        for (let i = 0; i < playedBendPoints.length - 1; i++) {
            const currentPoint = playedBendPoints[i];
            const nextPoint = playedBendPoints[i + 1];
            // calculate the midi pitchbend values start and end values
            const currentBendValue = MidiFileGenerator.getPitchWheel(currentPoint.value);
            const nextBendValue = MidiFileGenerator.getPitchWheel(nextPoint.value);
            // how many midi ticks do we have to spend between this point and the next one?
            const ticksBetweenPoints = ticksPerPosition * (nextPoint.offset - currentPoint.offset);
            // we will generate one pitchbend message for each value
            // for this we need to calculate how many ticks to offset per value
            const tick = noteStart + ticksPerPosition * currentPoint.offset;
            this.generateBendValues(tick, ticksBetweenPoints, currentBendValue, nextBendValue, addBend);
        }
    }
    generateBendValues(currentTick, ticksBetweenPoints, currentBendValue, nextBendValue, addBend) {
        const millisBetweenPoints = MidiUtils.ticksToMillis(ticksBetweenPoints, this._currentTempo);
        const numberOfSemitones = Math.abs(nextBendValue - currentBendValue) / MidiFileGenerator.PitchValuePerSemitone;
        const numberOfSteps = Math.max(MidiFileGenerator.MinBreakpointsPerSemitone * numberOfSemitones, millisBetweenPoints / MidiFileGenerator.MillisecondsPerBreakpoint);
        const ticksPerBreakpoint = ticksBetweenPoints / numberOfSteps;
        const pitchPerBreakpoint = (nextBendValue - currentBendValue) / numberOfSteps;
        for (let i = 0; i < numberOfSteps; i++) {
            addBend(currentTick | 0, Math.round(currentBendValue));
            currentBendValue += pitchPerBreakpoint;
            currentTick += ticksPerBreakpoint;
        }
        // final bend value if needed
        if (currentBendValue < nextBendValue) {
            addBend(currentTick | 0, nextBendValue);
        }
    }
    generateTrill(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
        const track = note.beat.voice.bar.staff.track;
        const trillKey = note.stringTuning + note.trillFret;
        let trillLength = MidiUtils.toTicks(note.trillSpeed);
        let realKey = true;
        let tick = noteStart;
        let end = noteStart + noteDuration.untilTieOrSlideEnd;
        while (tick + 10 < end) {
            // only the rest on last trill play
            if (tick + trillLength >= end) {
                trillLength = end - tick;
            }
            this._handler.addNote(track.index, tick, trillLength, realKey ? trillKey : noteKey, dynamicValue, channel);
            realKey = !realKey;
            tick += trillLength;
        }
    }
    generateTremoloPicking(note, noteStart, noteDuration, noteKey, dynamicValue, channel) {
        const track = note.beat.voice.bar.staff.track;
        let tpLength = MidiUtils.toTicks(note.beat.tremoloSpeed);
        let tick = noteStart;
        const end = noteStart + noteDuration.untilTieOrSlideEnd;
        while (tick + 10 < end) {
            // only the rest on last trill play
            if (tick + tpLength >= end) {
                tpLength = end - tick;
            }
            this._handler.addNote(track.index, tick, tpLength, noteKey, dynamicValue, channel);
            tick += tpLength;
        }
    }
    getBrushInfo(beat) {
        const brushInfo = new Int32Array(beat.voice.bar.staff.tuning.length);
        if (beat.brushType !== BrushType.None) {
            //
            // calculate the number of
            // a mask where the single bits indicate the strings used
            let stringUsed = 0;
            let stringCount = 0;
            for (const n of beat.notes) {
                if (n.isTieDestination) {
                    continue;
                }
                stringUsed |= 0x01 << (n.string - 1);
                stringCount++;
            }
            //
            // calculate time offset for all strings
            if (beat.notes.length > 0) {
                let brushMove = 0;
                const brushIncrement = (beat.brushDuration / (stringCount - 1)) | 0;
                for (let i = 0; i < beat.voice.bar.staff.tuning.length; i++) {
                    let index = beat.brushType === BrushType.ArpeggioDown || beat.brushType === BrushType.BrushDown
                        ? i
                        : brushInfo.length - 1 - i;
                    if ((stringUsed & (0x01 << index)) !== 0) {
                        brushInfo[index] = brushMove;
                        brushMove += brushIncrement;
                    }
                }
            }
        }
        return brushInfo;
    }
    generateAutomation(beat, automation, startMove) {
        switch (automation.type) {
            case AutomationType.Instrument:
                this.addProgramChange(beat.voice.bar.staff.track, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, (automation.value | 0) & 0xff);
                this.addProgramChange(beat.voice.bar.staff.track, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, (automation.value | 0) & 0xff);
                break;
            case AutomationType.Balance:
                let balance = MidiFileGenerator.toChannelShort(automation.value);
                this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.PanCoarse, balance);
                this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.PanCoarse, balance);
                break;
            case AutomationType.Volume:
                let volume = MidiFileGenerator.toChannelShort(automation.value);
                this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volume);
                this._handler.addControlChange(beat.voice.bar.staff.track.index, beat.playbackStart + startMove, beat.voice.bar.staff.track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volume);
                break;
        }
    }
    prepareSingleBeat(beat) {
        // collect tempo and program at given beat
        let tempo = -1;
        let program = -1;
        // traverse to previous beats until we maybe hit the automations needed
        let currentBeat = beat;
        while (currentBeat && (tempo === -1 || program === -1)) {
            for (const automation of beat.automations) {
                switch (automation.type) {
                    case AutomationType.Instrument:
                        program = automation.value;
                        break;
                    case AutomationType.Tempo:
                        tempo = automation.value;
                        break;
                }
            }
            currentBeat = currentBeat.previousBeat;
        }
        const track = beat.voice.bar.staff.track;
        const masterBar = beat.voice.bar.masterBar;
        if (tempo === -1) {
            tempo = masterBar.score.tempo;
        }
        if (program === -1) {
            program = track.playbackInfo.program;
        }
        const volume = track.playbackInfo.volume;
        // setup channel
        this.generateTrack(track);
        this._handler.addTimeSignature(0, masterBar.timeSignatureNumerator, masterBar.timeSignatureDenominator);
        this._handler.addTempo(0, tempo);
        let volumeCoarse = MidiFileGenerator.toChannelShort(volume);
        this._handler.addControlChange(0, 0, track.playbackInfo.primaryChannel, ControllerType.VolumeCoarse, volumeCoarse);
        this._handler.addControlChange(0, 0, track.playbackInfo.secondaryChannel, ControllerType.VolumeCoarse, volumeCoarse);
    }
    generateSingleBeat(beat) {
        this.prepareSingleBeat(beat);
        this.generateBeat(beat, -beat.playbackStart /* to bring it to 0*/, beat.voice.bar);
    }
    generateSingleNote(note) {
        this.prepareSingleBeat(note.beat);
        this.generateNote(note, 0, note.beat.playbackDuration, new Int32Array(note.beat.voice.bar.staff.tuning.length));
    }
}
MidiFileGenerator.DefaultDurationDead = 30;
MidiFileGenerator.DefaultDurationPalmMute = 80;
/**
 * Maximum semitones that are supported in bends in one direction (up or down)
 * GP has 8 full tones on whammys.
 */
MidiFileGenerator.PitchBendRangeInSemitones = 8 * 2;
/**
 * The value on how many pitch-values are used for one semitone
 */
MidiFileGenerator.PitchValuePerSemitone = SynthConstants.DefaultPitchWheel / MidiFileGenerator.PitchBendRangeInSemitones;
/**
 * The minimum number of breakpoints generated per semitone bend.
 */
MidiFileGenerator.MinBreakpointsPerSemitone = 6;
/**
 * How long until a new breakpoint is generated for a bend.
 */
MidiFileGenerator.MillisecondsPerBreakpoint = 150;

/**
 * Represents a range of the song that should be played.
 */
class PlaybackRange {
    constructor() {
        /**
         * The position in midi ticks from where the song should start.
         */
        this.startTick = 0;
        /**
         * The position in midi ticks to where the song should be played.
         */
        this.endTick = 0;
    }
}

/**
 * A glyph is a single symbol which can be added to a GlyphBarRenderer for automated
 * layouting and drawing of stacked symbols.
 */
class Glyph {
    constructor(x, y) {
        this.width = 0;
        this.height = 0;
        this.x = x;
        this.y = y;
    }
    get scale() {
        return this.renderer.scale;
    }
    doLayout() {
        // to be implemented in subclass
    }
    paint(cx, cy, canvas) {
        // to be implemented in subclass
    }
}

/**
 * Effect-Glyphs implementing this public interface get notified
 * as they are expanded over multiple beats.
 */
class EffectGlyph extends Glyph {
    constructor(x = 0, y = 0) {
        super(x, y);
        /**
         * Gets or sets the beat where the glyph belongs to.
         */
        this.beat = null;
        /**
         * Gets or sets the next glyph of the same type in case
         * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
         */
        this.nextGlyph = null;
        /**
         * Gets or sets the previous glyph of the same type in case
         * the effect glyph is expanded when using {@link EffectBarGlyphSizing.groupedOnBeat}.
         */
        this.previousGlyph = null;
    }
}

class MusicFontGlyph extends EffectGlyph {
    constructor(x, y, glyphScale, symbol) {
        super(x, y);
        this.glyphScale = 0;
        this.glyphScale = glyphScale;
        this.symbol = symbol;
    }
    paint(cx, cy, canvas) {
        canvas.fillMusicFontSymbol(cx + this.x, cy + this.y, this.glyphScale * this.scale, this.symbol, false);
    }
}

class NoteHeadGlyph extends MusicFontGlyph {
    constructor(x, y, duration, isGrace) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, NoteHeadGlyph.getSymbol(duration));
        this._isGrace = isGrace;
        this._duration = duration;
    }
    paint(cx, cy, canvas) {
        let offset = this._isGrace ? this.scale : 0;
        canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale * this.scale, this.symbol, false);
    }
    doLayout() {
        let scale = (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        switch (this._duration) {
            case Duration.QuadrupleWhole:
                this.width = 14 * scale;
                break;
            case Duration.DoubleWhole:
                this.width = 14 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                break;
            case Duration.Whole:
                this.width = 14 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                break;
            default:
                this.width = NoteHeadGlyph.QuarterNoteHeadWidth * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
                break;
        }
        this.height = NoteHeadGlyph.NoteHeadHeight * scale;
    }
    static getSymbol(duration) {
        switch (duration) {
            case Duration.QuadrupleWhole:
                return MusicFontSymbol.NoteheadDoubleWholeSquare;
            case Duration.DoubleWhole:
                return MusicFontSymbol.NoteheadDoubleWhole;
            case Duration.Whole:
                return MusicFontSymbol.NoteheadWhole;
            case Duration.Half:
                return MusicFontSymbol.NoteheadHalf;
            default:
                return MusicFontSymbol.NoteheadBlack;
        }
    }
}
NoteHeadGlyph.GraceScale = 0.75;
NoteHeadGlyph.NoteHeadHeight = 8;
NoteHeadGlyph.QuarterNoteHeadWidth = 9;

class FlagGlyph extends MusicFontGlyph {
    constructor(x, y, duration, direction, isGrace) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, FlagGlyph.getSymbol(duration, direction, isGrace));
    }
    doLayout() {
        this.width = 0;
    }
    static getSymbol(duration, direction, isGrace) {
        if (isGrace) {
            duration = Duration.Eighth;
        }
        if (direction === BeamDirection.Up) {
            switch (duration) {
                case Duration.Eighth:
                    return MusicFontSymbol.FlagEighthUp;
                case Duration.Sixteenth:
                    return MusicFontSymbol.FlagSixteenthUp;
                case Duration.ThirtySecond:
                    return MusicFontSymbol.FlagThirtySecondUp;
                case Duration.SixtyFourth:
                    return MusicFontSymbol.FlagSixtyFourthUp;
                case Duration.OneHundredTwentyEighth:
                    return MusicFontSymbol.FlagOneHundredTwentyEighthUp;
                case Duration.TwoHundredFiftySixth:
                    return MusicFontSymbol.FlagTwoHundredFiftySixthUp;
                default:
                    return MusicFontSymbol.FlagEighthUp;
            }
        }
        switch (duration) {
            case Duration.Eighth:
                return MusicFontSymbol.FlagEighthDown;
            case Duration.Sixteenth:
                return MusicFontSymbol.FlagSixteenthDown;
            case Duration.ThirtySecond:
                return MusicFontSymbol.FlagThirtySecondDown;
            case Duration.SixtyFourth:
                return MusicFontSymbol.FlagSixtyFourthDown;
            case Duration.OneHundredTwentyEighth:
                return MusicFontSymbol.FlagOneHundredTwentyEighthDown;
            case Duration.TwoHundredFiftySixth:
                return MusicFontSymbol.FlagOneHundredTwentyEighthDown;
            default:
                return MusicFontSymbol.FlagEighthDown;
        }
    }
}
FlagGlyph.FlagWidth = 11;

class BeatContainerGlyph extends Glyph {
    constructor(beat, voiceContainer) {
        super(0, 0);
        this.ties = [];
        this.minWidth = 0;
        this.beat = beat;
        this.ties = [];
        this.voiceContainer = voiceContainer;
    }
    get onTimeX() {
        return this.onNotes.x + this.onNotes.centerX;
    }
    addTie(tie) {
        tie.renderer = this.renderer;
        this.ties.push(tie);
    }
    registerLayoutingInfo(layoutings) {
        let preBeatStretch = this.preNotes.computedWidth + this.onNotes.centerX;
        if (this.beat.graceGroup && !this.beat.graceGroup.isComplete) {
            preBeatStretch += BeatContainerGlyph.GraceBeatPadding * this.renderer.scale;
        }
        let postBeatStretch = this.onNotes.computedWidth - this.onNotes.centerX;
        // make space for flag
        const helper = this.renderer.helpers.getBeamingHelperForBeat(this.beat);
        if ((helper && helper.hasFlag) || this.beat.graceType !== GraceType.None) {
            postBeatStretch +=
                FlagGlyph.FlagWidth *
                    this.scale *
                    (this.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1);
        }
        for (const tie of this.ties) {
            postBeatStretch += tie.width;
        }
        // Add some further spacing to grace notes
        if (this.beat.graceType !== GraceType.None) {
            postBeatStretch += BeatContainerGlyph.GraceBeatPadding * this.renderer.scale;
        }
        layoutings.addBeatSpring(this.beat, preBeatStretch, postBeatStretch);
        // store sizes for special renderers like the EffectBarRenderer
        layoutings.setPreBeatSize(this.beat, this.preNotes.computedWidth);
        layoutings.setOnBeatSize(this.beat, this.onNotes.computedWidth);
        layoutings.setBeatCenterX(this.beat, this.onNotes.centerX);
    }
    applyLayoutingInfo(info) {
        let offset = info.getBeatCenterX(this.beat) - this.onNotes.centerX;
        if (this.beat.graceGroup && !this.beat.graceGroup.isComplete) {
            offset += BeatContainerGlyph.GraceBeatPadding * this.renderer.scale;
        }
        this.preNotes.x = offset;
        this.preNotes.width = info.getPreBeatSize(this.beat);
        this.onNotes.width = info.getOnBeatSize(this.beat);
        this.onNotes.x = this.preNotes.x + this.preNotes.width;
        this.onNotes.updateBeamingHelper();
        this.updateWidth();
    }
    doLayout() {
        this.preNotes.x = 0;
        this.preNotes.renderer = this.renderer;
        this.preNotes.container = this;
        this.preNotes.doLayout();
        this.onNotes.x = this.preNotes.x + this.preNotes.width;
        this.onNotes.renderer = this.renderer;
        this.onNotes.container = this;
        this.onNotes.doLayout();
        let i = this.beat.notes.length - 1;
        while (i >= 0) {
            this.createTies(this.beat.notes[i--]);
        }
        this.renderer.registerTies(this.ties);
        this.updateWidth();
    }
    updateWidth() {
        this.minWidth = this.preNotes.width + this.onNotes.width;
        if (!this.beat.isRest) {
            if (this.onNotes.beamingHelper.beats.length === 1) {
                // make space for flag
                if (this.beat.duration >= Duration.Eighth) {
                    this.minWidth += 20 * this.scale;
                }
            }
            else {
                // ensure some space for small notes
                switch (this.beat.duration) {
                    case Duration.OneHundredTwentyEighth:
                    case Duration.TwoHundredFiftySixth:
                        this.minWidth += 10 * this.scale;
                        break;
                }
            }
        }
        let tieWidth = 0;
        for (let tie of this.ties) {
            if (tie.width > tieWidth) {
                tieWidth = tie.width;
            }
        }
        this.minWidth += tieWidth;
        this.width = this.minWidth;
    }
    scaleToWidth(beatWidth) {
        this.onNotes.updateBeamingHelper();
        this.width = beatWidth;
    }
    createTies(n) {
        // no default ties
    }
    static getGroupId(beat) {
        return 'b' + beat.id;
    }
    paint(cx, cy, canvas) {
        if (this.beat.voice.isEmpty) {
            return;
        }
        let isEmptyGlyph = this.preNotes.isEmpty && this.onNotes.isEmpty && this.ties.length === 0;
        if (isEmptyGlyph) {
            return;
        }
        canvas.beginGroup(BeatContainerGlyph.getGroupId(this.beat));
        // var c = canvas.color;
        // var ta = canvas.textAlign;
        // canvas.color = new Color(255, 0, 0);
        // canvas.textAlign = TextAlign.Left;
        // canvas.fillText(this.beat.playbackStart.toString(), cx + this.x, cy + this.y - 10);
        // canvas.color = c;
        // canvas.textAlign = ta;
        // canvas.color = Color.random();
        // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.renderer.height);
        // var oldColor = canvas.color;
        // canvas.color = Color.random(100);
        // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.renderer.height);
        // canvas.color = oldColor;
        // canvas.color = new Color(200, 0, 0, 100);
        // canvas.strokeRect(cx + this.x, cy + this.y + 15 * this.beat.voice.index, this.width, 10);
        // canvas.font = new Font("Arial", 10);
        // canvas.color = new Color(0, 0, 0);
        // canvas.fillText(this.beat.voice.index + ":" + this.beat.index, cx + this.x, cy + this.y + 15 * this.beat.voice.index);
        // if (this.beat.voice.index === 0) {
        //     canvas.color = new Color(200, 0, 0, 100);
        //     canvas.strokeRect(cx + this.x, cy + this.y + this.preNotes.y + 30, this.width, 10);
        // }
        this.preNotes.paint(cx + this.x, cy + this.y, canvas);
        // if (this.beat.voice.index === 0) {
        //     canvas.color = new Color(200, 0, 0, 100);
        //     canvas.strokeRect(cx + this.x + this.preNotes.x, cy + this.y + this.preNotes.y, this.preNotes.width, 10);
        // }
        this.onNotes.paint(cx + this.x, cy + this.y, canvas);
        // if (this.beat.voice.index === 0) {
        //     canvas.color = new Color(0, 200, 0, 100);
        //     canvas.strokeRect(cx + this.x + this.onNotes.x, cy + this.y + this.onNotes.y - 10, this.onNotes.width, 10);
        // }
        // paint the ties relative to the whole staff,
        // reason: we have possibly multiple staves involved and need to calculate the correct positions.
        let staffX = cx - this.voiceContainer.x - this.renderer.x;
        let staffY = cy - this.voiceContainer.y - this.renderer.y;
        for (let i = 0, j = this.ties.length; i < j; i++) {
            let t = this.ties[i];
            t.renderer = this.renderer;
            t.paint(staffX, staffY, canvas);
        }
        canvas.endGroup();
    }
    buildBoundingsLookup(barBounds, cx, cy, isEmptyBar) {
        let beatBoundings = new BeatBounds();
        beatBoundings.beat = this.beat;
        beatBoundings.visualBounds = new Bounds();
        beatBoundings.visualBounds.x = cx + this.x + this.onNotes.x;
        beatBoundings.visualBounds.y = barBounds.visualBounds.y;
        beatBoundings.visualBounds.w = this.onNotes.width;
        beatBoundings.visualBounds.h = barBounds.visualBounds.h;
        beatBoundings.realBounds = new Bounds();
        beatBoundings.realBounds.x = cx + this.x;
        beatBoundings.realBounds.y = barBounds.realBounds.y;
        beatBoundings.realBounds.w = this.width;
        beatBoundings.realBounds.h = barBounds.realBounds.h;
        if (isEmptyBar) {
            beatBoundings.visualBounds.x = cx + this.x;
            beatBoundings.realBounds.x = beatBoundings.visualBounds.x;
        }
        barBounds.addBeat(beatBoundings);
        if (this.renderer.settings.core.includeNoteBounds) {
            this.onNotes.buildBoundingsLookup(beatBoundings, cx + this.x, cy + this.y);
        }
    }
}
BeatContainerGlyph.GraceBeatPadding = 3;

/**
 * Represents the information related to a resize event.
 */
class ResizeEventArgs {
    constructor() {
        /**
         * Gets the size before the resizing happened.
         */
        this.oldWidth = 0;
        /**
         * Gets the size after the resize was complete.
         */
        this.newWidth = 0;
        /**
         * Gets the settings currently used for rendering.
         */
        this.settings = null;
    }
    core() {
        if (this.settings && this.causeIssue()) {
            return this.settings.core;
        }
        return new CoreSettings();
    }
    causeIssue() {
        this.settings = null;
        return true;
    }
}

/**
 * Represents the information related to the beats actively being played now.
 */
class ActiveBeatsChangedEventArgs {
    constructor(activeBeats) {
        this.activeBeats = activeBeats;
    }
}

class SelectionInfo {
    constructor(beat) {
        this.bounds = null;
        this.beat = beat;
    }
}
/**
 * This class represents the public API of alphaTab and provides all logic to display
 * a music sheet in any UI using the given {@link IUiFacade}
 * @param <TSettings> The UI object holding the settings.
 * @csharp_public
 */
class AlphaTabApiBase {
    /**
     * Initializes a new instance of the {@link AlphaTabApiBase} class.
     * @param uiFacade The UI facade to use for interacting with the user interface.
     * @param settings The UI settings object to use for loading the settings.
     */
    constructor(uiFacade, settings) {
        this._startTime = 0;
        this._trackIndexes = null;
        this._isDestroyed = false;
        /**
         * Gets the score holding all information about the song being rendered.
         */
        this.score = null;
        /**
         * Gets a list of the tracks that are currently rendered;
         */
        this.tracks = [];
        this._tickCache = null;
        /**
         * Gets the alphaSynth player used for playback. This is the low-level API to the Midi synthesizer used for playback.
         */
        this.player = null;
        this._cursorWrapper = null;
        this._barCursor = null;
        this._beatCursor = null;
        this._selectionWrapper = null;
        this._previousTick = 0;
        this._playerState = PlayerState.Paused;
        this._currentBeat = null;
        this._currentBarBounds = null;
        this._previousStateForCursor = PlayerState.Paused;
        this._previousCursorCache = null;
        this._lastScroll = 0;
        this.playedBeatChanged = new EventEmitterOfT();
        this.activeBeatsChanged = new EventEmitterOfT();
        this._beatMouseDown = false;
        this._noteMouseDown = false;
        this._selectionStart = null;
        this._selectionEnd = null;
        this.beatMouseDown = new EventEmitterOfT();
        this.beatMouseMove = new EventEmitterOfT();
        this.beatMouseUp = new EventEmitterOfT();
        this.noteMouseDown = new EventEmitterOfT();
        this.noteMouseMove = new EventEmitterOfT();
        this.noteMouseUp = new EventEmitterOfT();
        this.scoreLoaded = new EventEmitterOfT();
        this.resize = new EventEmitterOfT();
        this.renderStarted = new EventEmitterOfT();
        this.renderFinished = new EventEmitterOfT();
        this.postRenderFinished = new EventEmitter();
        this.error = new EventEmitterOfT();
        this.playerReady = new EventEmitter();
        this.playerFinished = new EventEmitter();
        this.soundFontLoaded = new EventEmitter();
        this.midiLoad = new EventEmitterOfT();
        this.midiLoaded = new EventEmitterOfT();
        this.playerStateChanged = new EventEmitterOfT();
        this.playerPositionChanged = new EventEmitterOfT();
        this.midiEventsPlayed = new EventEmitterOfT();
        this.playbackRangeChanged = new EventEmitterOfT();
        /**
         * @internal
         */
        this.settingsUpdated = new EventEmitter();
        this.uiFacade = uiFacade;
        this.container = uiFacade.rootContainer;
        uiFacade.initialize(this, settings);
        Logger.logLevel = this.settings.core.logLevel;
        this.canvasElement = uiFacade.createCanvasElement();
        this.container.appendChild(this.canvasElement);
        if (this.settings.core.useWorkers &&
            this.uiFacade.areWorkersSupported &&
            Environment.getRenderEngineFactory(this.settings.core.engine).supportsWorkers) {
            this.renderer = this.uiFacade.createWorkerRenderer();
        }
        else {
            this.renderer = new ScoreRenderer(this.settings);
        }
        this.container.resize.on(Environment.throttle(() => {
            if (this._isDestroyed) {
                return;
            }
            if (this.container.width !== this.renderer.width) {
                this.triggerResize();
            }
        }, uiFacade.resizeThrottle));
        let initialResizeEventInfo = new ResizeEventArgs();
        initialResizeEventInfo.oldWidth = this.renderer.width;
        initialResizeEventInfo.newWidth = this.container.width | 0;
        initialResizeEventInfo.settings = this.settings;
        this.onResize(initialResizeEventInfo);
        this.renderer.preRender.on(this.onRenderStarted.bind(this));
        this.renderer.renderFinished.on(renderingResult => {
            this.onRenderFinished(renderingResult);
        });
        this.renderer.postRenderFinished.on(() => {
            let duration = Date.now() - this._startTime;
            Logger.debug('rendering', 'Rendering completed in ' + duration + 'ms');
            this.onPostRenderFinished();
        });
        this.renderer.preRender.on(_ => {
            this._startTime = Date.now();
        });
        this.renderer.partialLayoutFinished.on(this.appendRenderResult.bind(this));
        this.renderer.partialRenderFinished.on(this.updateRenderResult.bind(this));
        this.renderer.renderFinished.on(r => {
            this.appendRenderResult(r);
            this.appendRenderResult(null); // marks last element
        });
        this.renderer.error.on(this.onError.bind(this));
        if (this.settings.player.enablePlayer) {
            this.setupPlayer();
        }
        this.setupClickHandling();
        // delay rendering to allow ui to hook up with events first.
        this.uiFacade.beginInvoke(() => {
            this.uiFacade.initialRender();
        });
    }
    /**
     * Destroys the alphaTab control and restores the initial state of the UI.
     */
    destroy() {
        this._isDestroyed = true;
        if (this.player) {
            this.player.destroy();
        }
        this.uiFacade.destroy();
        this.renderer.destroy();
    }
    /**
     * Applies any changes that were done to the settings object and informs the {@link renderer} about any new values to consider.
     */
    updateSettings() {
        const score = this.score;
        if (score) {
            ModelUtils.applyPitchOffsets(this.settings, score);
        }
        this.renderer.updateSettings(this.settings);
        // enable/disable player if needed
        if (this.settings.player.enablePlayer) {
            this.setupPlayer();
        }
        else {
            this.destroyPlayer();
        }
        this.onSettingsUpdated();
    }
    /**
     * Attempts a load of the score represented by the given data object.
     * @param scoreData The data container supported by {@link IUiFacade}
     * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
     * song will be shown.
     * @returns true if the data object is supported and a load was initiated, otherwise false
     */
    load(scoreData, trackIndexes) {
        try {
            return this.uiFacade.load(scoreData, score => {
                this.renderScore(score, trackIndexes);
            }, error => {
                this.onError(error);
            });
        }
        catch (e) {
            this.onError(e);
            return false;
        }
    }
    /**
     * Initiates a rendering of the given score.
     * @param score The score containing the tracks to be rendered.
     * @param trackIndexes The indexes of the tracks from the song that should be rendered. If not provided, the first track of the
     * song will be shown.
     */
    renderScore(score, trackIndexes) {
        let tracks = [];
        if (!trackIndexes) {
            if (score.tracks.length > 0) {
                tracks.push(score.tracks[0]);
            }
        }
        else {
            if (trackIndexes.length === 0) {
                if (score.tracks.length > 0) {
                    tracks.push(score.tracks[0]);
                }
            }
            else if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
                for (let track of score.tracks) {
                    tracks.push(track);
                }
            }
            else {
                for (let index of trackIndexes) {
                    if (index >= 0 && index <= score.tracks.length) {
                        tracks.push(score.tracks[index]);
                    }
                }
            }
        }
        this.internalRenderTracks(score, tracks);
    }
    /**
     * Renders the given list of tracks.
     * @param tracks The tracks to render. They must all belong to the same score.
     */
    renderTracks(tracks) {
        if (tracks.length > 0) {
            let score = tracks[0].score;
            for (let track of tracks) {
                if (track.score !== score) {
                    this.onError(new AlphaTabError(AlphaTabErrorType.General, 'All rendered tracks must belong to the same score.'));
                    return;
                }
            }
            this.internalRenderTracks(score, tracks);
        }
    }
    internalRenderTracks(score, tracks) {
        ModelUtils.applyPitchOffsets(this.settings, score);
        if (score !== this.score) {
            this.score = score;
            this.tracks = tracks;
            this._trackIndexes = [];
            for (let track of tracks) {
                this._trackIndexes.push(track.index);
            }
            this.onScoreLoaded(score);
            this.loadMidiForScore();
            this.render();
        }
        else {
            this.tracks = tracks;
            this._trackIndexes = [];
            for (let track of tracks) {
                this._trackIndexes.push(track.index);
            }
            this.render();
        }
    }
    /**
     * @internal
     */
    triggerResize() {
        if (!this.container.isVisible) {
            Logger.warning('Rendering', 'AlphaTab container was invisible while autosizing, waiting for element to become visible', null);
            this.uiFacade.rootContainerBecameVisible.on(() => {
                Logger.debug('Rendering', 'AlphaTab container became visible, doing autosizing', null);
                this.triggerResize();
            });
        }
        else {
            let resizeEventInfo = new ResizeEventArgs();
            resizeEventInfo.oldWidth = this.renderer.width;
            resizeEventInfo.newWidth = this.container.width;
            resizeEventInfo.settings = this.settings;
            this.onResize(resizeEventInfo);
            this.renderer.updateSettings(this.settings);
            this.renderer.width = this.container.width;
            this.renderer.resizeRender();
        }
    }
    appendRenderResult(result) {
        if (result) {
            this.canvasElement.width = result.totalWidth;
            this.canvasElement.height = result.totalHeight;
            if (this._cursorWrapper) {
                this._cursorWrapper.width = result.totalWidth;
                this._cursorWrapper.height = result.totalHeight;
            }
        }
        this.uiFacade.beginAppendRenderResults(result);
    }
    updateRenderResult(result) {
        if (result && result.renderResult) {
            this.uiFacade.beginUpdateRenderResults(result);
        }
    }
    /**
     * Tells alphaTab to render the given alphaTex.
     * @param tex The alphaTex code to render.
     * @param tracks If set, the given tracks will be rendered, otherwise the first track only will be rendered.
     */
    tex(tex, tracks) {
        try {
            let parser = new AlphaTexImporter();
            parser.logErrors = true;
            parser.initFromString(tex, this.settings);
            let score = parser.readScore();
            this.renderScore(score, tracks);
        }
        catch (e) {
            this.onError(e);
        }
    }
    /**
     * Attempts a load of the score represented by the given data object.
     * @param data The data object to decode
     * @param append Whether to fully replace or append the data from the given soundfont.
     * @returns true if the data object is supported and a load was initiated, otherwise false
     */
    loadSoundFont(data, append = false) {
        if (!this.player) {
            return false;
        }
        return this.uiFacade.loadSoundFont(data, append);
    }
    /**
     * Resets all loaded soundfonts as if they were not loaded.
     */
    resetSoundFonts() {
        if (!this.player) {
            return;
        }
        this.player.resetSoundFonts();
    }
    /**
     * Initiates a re-rendering of the current setup. If rendering is not yet possible, it will be deferred until the UI changes to be ready for rendering.
     */
    render() {
        if (!this.renderer) {
            return;
        }
        if (this.uiFacade.canRender) {
            // when font is finally loaded, start rendering
            this.renderer.width = this.container.width;
            this.renderer.renderScore(this.score, this._trackIndexes);
        }
        else {
            this.uiFacade.canRenderChanged.on(() => this.render());
        }
    }
    /**
     * Gets the tick cache related to the current score.
     */
    get tickCache() {
        return this._tickCache;
    }
    get isReadyForPlayback() {
        if (!this.player) {
            return false;
        }
        return this.player.isReadyForPlayback;
    }
    get playerState() {
        if (!this.player) {
            return PlayerState.Paused;
        }
        return this.player.state;
    }
    get masterVolume() {
        if (!this.player) {
            return 0;
        }
        return this.player.masterVolume;
    }
    set masterVolume(value) {
        if (this.player) {
            this.player.masterVolume = value;
        }
    }
    get metronomeVolume() {
        if (!this.player) {
            return 0;
        }
        return this.player.metronomeVolume;
    }
    set metronomeVolume(value) {
        if (this.player) {
            this.player.metronomeVolume = value;
        }
    }
    get countInVolume() {
        if (!this.player) {
            return 0;
        }
        return this.player.countInVolume;
    }
    set countInVolume(value) {
        if (this.player) {
            this.player.countInVolume = value;
        }
    }
    get midiEventsPlayedFilter() {
        if (!this.player) {
            return [];
        }
        return this.player.midiEventsPlayedFilter;
    }
    set midiEventsPlayedFilter(value) {
        if (this.player) {
            this.player.midiEventsPlayedFilter = value;
        }
    }
    get tickPosition() {
        if (!this.player) {
            return 0;
        }
        return this.player.tickPosition;
    }
    set tickPosition(value) {
        if (this.player) {
            this.player.tickPosition = value;
        }
    }
    get timePosition() {
        if (!this.player) {
            return 0;
        }
        return this.player.timePosition;
    }
    set timePosition(value) {
        if (this.player) {
            this.player.timePosition = value;
        }
    }
    get playbackRange() {
        if (!this.player) {
            return null;
        }
        return this.player.playbackRange;
    }
    set playbackRange(value) {
        if (this.player) {
            this.player.playbackRange = value;
            if (this.settings.player.enableCursor) {
                this.updateSelectionCursor(value);
            }
        }
    }
    get playbackSpeed() {
        if (!this.player) {
            return 0;
        }
        return this.player.playbackSpeed;
    }
    set playbackSpeed(value) {
        if (this.player) {
            this.player.playbackSpeed = value;
        }
    }
    get isLooping() {
        if (!this.player) {
            return false;
        }
        return this.player.isLooping;
    }
    set isLooping(value) {
        if (this.player) {
            this.player.isLooping = value;
        }
    }
    destroyPlayer() {
        if (!this.player) {
            return;
        }
        this.player.destroy();
        this.player = null;
        this._previousTick = 0;
        this._playerState = PlayerState.Paused;
        this.destroyCursors();
    }
    setupPlayer() {
        this.updateCursors();
        if (this.player) {
            return;
        }
        this.player = this.uiFacade.createWorkerPlayer();
        if (!this.player) {
            return;
        }
        this.player.ready.on(() => {
            this.loadMidiForScore();
        });
        this.player.readyForPlayback.on(() => {
            this.onPlayerReady();
            if (this.tracks) {
                for (let track of this.tracks) {
                    let volume = track.playbackInfo.volume / 16;
                    this.player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
                    this.player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
                }
            }
        });
        this.player.soundFontLoaded.on(this.onSoundFontLoaded.bind(this));
        this.player.soundFontLoadFailed.on(e => {
            this.onError(e);
        });
        this.player.midiLoaded.on(this.onMidiLoaded.bind(this));
        this.player.midiLoadFailed.on(e => {
            this.onError(e);
        });
        this.player.stateChanged.on(this.onPlayerStateChanged.bind(this));
        this.player.positionChanged.on(this.onPlayerPositionChanged.bind(this));
        this.player.midiEventsPlayed.on(this.onMidiEventsPlayed.bind(this));
        this.player.playbackRangeChanged.on(this.onPlaybackRangeChanged.bind(this));
        this.player.finished.on(this.onPlayerFinished.bind(this));
        this.setupPlayerEvents();
    }
    loadMidiForScore() {
        if (!this.player || !this.score || !this.player.isReady) {
            return;
        }
        Logger.debug('AlphaTab', 'Generating Midi');
        let midiFile = new MidiFile();
        let handler = new AlphaSynthMidiFileHandler(midiFile);
        let generator = new MidiFileGenerator(this.score, this.settings, handler);
        generator.generate();
        this._tickCache = generator.tickLookup;
        this.onMidiLoad(midiFile);
        this.player.loadMidiFile(midiFile);
    }
    /**
     * Changes the volume of the given tracks.
     * @param tracks The tracks for which the volume should be changed.
     * @param volume The volume to set for all tracks in percent (0-1)
     */
    changeTrackVolume(tracks, volume) {
        if (!this.player) {
            return;
        }
        for (let track of tracks) {
            this.player.setChannelVolume(track.playbackInfo.primaryChannel, volume);
            this.player.setChannelVolume(track.playbackInfo.secondaryChannel, volume);
        }
    }
    /**
     * Changes the given tracks to be played solo or not.
     * If one or more tracks are set to solo, only those tracks are hearable.
     * @param tracks The list of tracks to play solo or not.
     * @param solo If set to true, the tracks will be added to the solo list. If false, they are removed.
     */
    changeTrackSolo(tracks, solo) {
        if (!this.player) {
            return;
        }
        for (let track of tracks) {
            this.player.setChannelSolo(track.playbackInfo.primaryChannel, solo);
            this.player.setChannelSolo(track.playbackInfo.secondaryChannel, solo);
        }
    }
    /**
     * Changes the given tracks to be muted or not.
     * @param tracks The list of track to mute or unmute.
     * @param mute If set to true, the tracks will be muted. If false they are unmuted.
     */
    changeTrackMute(tracks, mute) {
        if (!this.player) {
            return;
        }
        for (let track of tracks) {
            this.player.setChannelMute(track.playbackInfo.primaryChannel, mute);
            this.player.setChannelMute(track.playbackInfo.secondaryChannel, mute);
        }
    }
    /**
     * Starts the playback of the current song.
     * @returns true if the playback was started, otherwise false. Reasons for not starting can be that the player is not ready or already playing.
     */
    play() {
        if (!this.player) {
            return false;
        }
        return this.player.play();
    }
    /**
     * Pauses the playback of the current song.
     */
    pause() {
        if (!this.player) {
            return;
        }
        this.player.pause();
    }
    /**
     * Toggles between play/pause depending on the current player state.
     */
    playPause() {
        if (!this.player) {
            return;
        }
        this.player.playPause();
    }
    /**
     * Stops the playback of the current song, and moves the playback position back to the start.
     */
    stop() {
        if (!this.player) {
            return;
        }
        this.player.stop();
    }
    /**
     * Triggers the play of the given beat. This will stop the any other current ongoing playback.
     * @param beat the single beat to play
     */
    playBeat(beat) {
        if (!this.player) {
            return;
        }
        // we generate a new midi file containing only the beat
        let midiFile = new MidiFile();
        let handler = new AlphaSynthMidiFileHandler(midiFile);
        let generator = new MidiFileGenerator(beat.voice.bar.staff.track.score, this.settings, handler);
        generator.generateSingleBeat(beat);
        this.player.playOneTimeMidiFile(midiFile);
    }
    /**
     * Triggers the play of the given note. This will stop the any other current ongoing playback.
     * @param beat the single note to play
     */
    playNote(note) {
        if (!this.player) {
            return;
        }
        // we generate a new midi file containing only the beat
        let midiFile = new MidiFile();
        let handler = new AlphaSynthMidiFileHandler(midiFile);
        let generator = new MidiFileGenerator(note.beat.voice.bar.staff.track.score, this.settings, handler);
        generator.generateSingleNote(note);
        this.player.playOneTimeMidiFile(midiFile);
    }
    destroyCursors() {
        if (!this._cursorWrapper) {
            return;
        }
        this.uiFacade.destroyCursors();
        this._cursorWrapper = null;
        this._barCursor = null;
        this._beatCursor = null;
        this._selectionWrapper = null;
    }
    updateCursors() {
        if (this.settings.player.enableCursor && !this._cursorWrapper) {
            //
            // Create cursors
            let cursors = this.uiFacade.createCursors();
            if (cursors) {
                // store options and created elements for fast access
                this._cursorWrapper = cursors.cursorWrapper;
                this._barCursor = cursors.barCursor;
                this._beatCursor = cursors.beatCursor;
                this._selectionWrapper = cursors.selectionWrapper;
            }
            if (this._currentBeat !== null) {
                this.cursorUpdateBeat(this._currentBeat, false, this._previousTick > 10, true);
            }
        }
        else if (!this.settings.player.enableCursor && this._cursorWrapper) {
            this.destroyCursors();
        }
    }
    setupPlayerEvents() {
        //
        // Hook into events
        this._previousTick = 0;
        this._playerState = PlayerState.Paused;
        // we need to update our position caches if we render a tablature
        this.renderer.postRenderFinished.on(() => {
            this._currentBeat = null;
            this.cursorUpdateTick(this._previousTick, false, this._previousTick > 10);
        });
        if (this.player) {
            this.player.positionChanged.on(e => {
                this._previousTick = e.currentTick;
                this.uiFacade.beginInvoke(() => {
                    this.cursorUpdateTick(e.currentTick, false);
                });
            });
            this.player.stateChanged.on(e => {
                this._playerState = e.state;
                if (!e.stopped && e.state === PlayerState.Paused) {
                    let currentBeat = this._currentBeat;
                    let tickCache = this._tickCache;
                    if (currentBeat && tickCache) {
                        this.player.tickPosition =
                            tickCache.getMasterBarStart(currentBeat.currentBeat.voice.bar.masterBar) +
                                currentBeat.currentBeat.playbackStart;
                    }
                }
            });
        }
    }
    /**
     * updates the cursors to highlight the beat at the specified tick position
     * @param tick
     * @param stop
     * @param shouldScroll whether we should scroll to the bar (if scrolling is active)
     */
    cursorUpdateTick(tick, stop, shouldScroll = false) {
        let cache = this._tickCache;
        if (cache) {
            let tracks = this.tracks;
            if (tracks.length > 0) {
                let beat = cache.findBeat(tracks, tick, this._currentBeat);
                if (beat) {
                    this.cursorUpdateBeat(beat, stop, shouldScroll);
                }
            }
        }
    }
    /**
     * updates the cursors to highlight the specified beat
     */
    cursorUpdateBeat(lookupResult, stop, shouldScroll, forceUpdate = false) {
        const beat = lookupResult.currentBeat;
        const nextBeat = lookupResult.nextBeat;
        const duration = lookupResult.duration;
        const beatsToHighlight = lookupResult.beatsToHighlight;
        if (!beat) {
            return;
        }
        let cache = this.renderer.boundsLookup;
        if (!cache) {
            return;
        }
        let previousBeat = this._currentBeat;
        let previousCache = this._previousCursorCache;
        let previousState = this._previousStateForCursor;
        if (!forceUpdate &&
            beat === (previousBeat === null || previousBeat === void 0 ? void 0 : previousBeat.currentBeat) &&
            cache === previousCache &&
            previousState === this._playerState) {
            return;
        }
        let beatBoundings = cache.findBeat(beat);
        if (!beatBoundings) {
            return;
        }
        // only if we really found some bounds we remember the beat and cache we used to
        // actually show the cursor
        this._currentBeat = lookupResult;
        this._previousCursorCache = cache;
        this._previousStateForCursor = this._playerState;
        this.uiFacade.beginInvoke(() => {
            this.internalCursorUpdateBeat(beat, nextBeat, duration, stop, beatsToHighlight, cache, beatBoundings, shouldScroll);
        });
    }
    /**
     * Initiates a scroll to the cursor
     */
    scrollToCursor() {
        const barBounds = this._currentBarBounds;
        if (barBounds) {
            this.internalScrollToCursor(barBounds);
        }
    }
    internalScrollToCursor(barBoundings) {
        let scrollElement = this.uiFacade.getScrollContainer();
        let isVertical = Environment.getLayoutEngineFactory(this.settings.display.layoutMode).vertical;
        let mode = this.settings.player.scrollMode;
        if (isVertical) {
            // when scrolling on the y-axis, we preliminary check if the new beat/bar have
            // moved on the y-axis
            let y = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
            if (y !== this._lastScroll) {
                this._lastScroll = y;
                switch (mode) {
                    case ScrollMode.Continuous:
                        let elementOffset = this.uiFacade.getOffset(scrollElement, this.container);
                        this.uiFacade.scrollToY(scrollElement, elementOffset.y + y, this.settings.player.scrollSpeed);
                        break;
                    case ScrollMode.OffScreen:
                        let elementBottom = scrollElement.scrollTop + this.uiFacade.getOffset(null, scrollElement).h;
                        if (barBoundings.visualBounds.y + barBoundings.visualBounds.h >= elementBottom ||
                            barBoundings.visualBounds.y < scrollElement.scrollTop) {
                            let scrollTop = barBoundings.realBounds.y + this.settings.player.scrollOffsetY;
                            this.uiFacade.scrollToY(scrollElement, scrollTop, this.settings.player.scrollSpeed);
                        }
                        break;
                }
            }
        }
        else {
            // when scrolling on the x-axis, we preliminary check if the new bar has
            // moved on the x-axis
            let x = barBoundings.visualBounds.x;
            if (x !== this._lastScroll) {
                this._lastScroll = x;
                switch (mode) {
                    case ScrollMode.Continuous:
                        let scrollLeftContinuous = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                        this._lastScroll = barBoundings.visualBounds.x;
                        this.uiFacade.scrollToX(scrollElement, scrollLeftContinuous, this.settings.player.scrollSpeed);
                        break;
                    case ScrollMode.OffScreen:
                        let elementRight = scrollElement.scrollLeft + this.uiFacade.getOffset(null, scrollElement).w;
                        if (barBoundings.visualBounds.x + barBoundings.visualBounds.w >= elementRight ||
                            barBoundings.visualBounds.x < scrollElement.scrollLeft) {
                            let scrollLeftOffScreen = barBoundings.realBounds.x + this.settings.player.scrollOffsetX;
                            this._lastScroll = barBoundings.visualBounds.x;
                            this.uiFacade.scrollToX(scrollElement, scrollLeftOffScreen, this.settings.player.scrollSpeed);
                        }
                        break;
                }
            }
        }
    }
    internalCursorUpdateBeat(beat, nextBeat, duration, stop, beatsToHighlight, cache, beatBoundings, shouldScroll) {
        const barCursor = this._barCursor;
        const beatCursor = this._beatCursor;
        let barBoundings = beatBoundings.barBounds.masterBarBounds;
        let barBounds = barBoundings.visualBounds;
        this._currentBarBounds = barBoundings;
        if (barCursor) {
            barCursor.setBounds(barBounds.x, barBounds.y, barBounds.w, barBounds.h);
        }
        if (beatCursor) {
            // move beat to start position immediately
            if (this.settings.player.enableAnimatedBeatCursor) {
                beatCursor.stopAnimation();
            }
            beatCursor.setBounds(beatBoundings.visualBounds.x, barBounds.y, 1, barBounds.h);
        }
        // if playing, animate the cursor to the next beat
        if (this.settings.player.enableElementHighlighting) {
            this.uiFacade.removeHighlights();
        }
        // actively playing? -> animate cursor and highlight items
        let shouldNotifyBeatChange = false;
        if (this._playerState === PlayerState.Playing && !stop) {
            if (this.settings.player.enableElementHighlighting) {
                for (let highlight of beatsToHighlight) {
                    let className = BeatContainerGlyph.getGroupId(highlight);
                    this.uiFacade.highlightElements(className, beat.voice.bar.index);
                }
            }
            if (this.settings.player.enableAnimatedBeatCursor) {
                let nextBeatX = barBoundings.visualBounds.x + barBoundings.visualBounds.w;
                // get position of next beat on same stavegroup
                if (nextBeat) {
                    // if we are moving within the same bar or to the next bar
                    // transition to the next beat, otherwise transition to the end of the bar.
                    if ((nextBeat.voice.bar.index === beat.voice.bar.index && nextBeat.index > beat.index) ||
                        nextBeat.voice.bar.index === beat.voice.bar.index + 1) {
                        let nextBeatBoundings = cache.findBeat(nextBeat);
                        if (nextBeatBoundings &&
                            nextBeatBoundings.barBounds.masterBarBounds.staveGroupBounds ===
                                barBoundings.staveGroupBounds) {
                            nextBeatX = nextBeatBoundings.visualBounds.x;
                        }
                    }
                }
                // we need to put the transition to an own animation frame
                // otherwise the stop animation above is not applied.
                this.uiFacade.beginInvoke(() => {
                    if (beatCursor) {
                        beatCursor.transitionToX(duration / this.playbackSpeed, nextBeatX);
                    }
                });
            }
            shouldScroll = !stop;
            shouldNotifyBeatChange = true;
        }
        if (shouldScroll && !this._beatMouseDown && this.settings.player.scrollMode !== ScrollMode.Off) {
            this.internalScrollToCursor(barBoundings);
        }
        // trigger an event for others to indicate which beat/bar is played
        if (shouldNotifyBeatChange) {
            this.onPlayedBeatChanged(beat);
            this.onActiveBeatsChanged(new ActiveBeatsChangedEventArgs(beatsToHighlight));
        }
    }
    onPlayedBeatChanged(beat) {
        if (this._isDestroyed) {
            return;
        }
        this.playedBeatChanged.trigger(beat);
        this.uiFacade.triggerEvent(this.container, 'playedBeatChanged', beat);
    }
    onActiveBeatsChanged(e) {
        if (this._isDestroyed) {
            return;
        }
        this.activeBeatsChanged.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'activeBeatsChanged', e);
    }
    onBeatMouseDown(originalEvent, beat) {
        if (this._isDestroyed) {
            return;
        }
        if (this.settings.player.enablePlayer &&
            this.settings.player.enableCursor &&
            this.settings.player.enableUserInteraction) {
            this._selectionStart = new SelectionInfo(beat);
            this._selectionEnd = null;
        }
        this._beatMouseDown = true;
        this.beatMouseDown.trigger(beat);
        this.uiFacade.triggerEvent(this.container, 'beatMouseDown', beat, originalEvent);
    }
    onNoteMouseDown(originalEvent, note) {
        if (this._isDestroyed) {
            return;
        }
        this._noteMouseDown = true;
        this.noteMouseDown.trigger(note);
        this.uiFacade.triggerEvent(this.container, 'noteMouseDown', note, originalEvent);
    }
    onBeatMouseMove(originalEvent, beat) {
        if (this._isDestroyed) {
            return;
        }
        if (this.settings.player.enableUserInteraction) {
            if (!this._selectionEnd || this._selectionEnd.beat !== beat) {
                this._selectionEnd = new SelectionInfo(beat);
                this.cursorSelectRange(this._selectionStart, this._selectionEnd);
            }
        }
        this.beatMouseMove.trigger(beat);
        this.uiFacade.triggerEvent(this.container, 'beatMouseMove', beat, originalEvent);
    }
    onNoteMouseMove(originalEvent, note) {
        if (this._isDestroyed) {
            return;
        }
        this.noteMouseMove.trigger(note);
        this.uiFacade.triggerEvent(this.container, 'noteMouseMove', note, originalEvent);
    }
    onBeatMouseUp(originalEvent, beat) {
        if (this._isDestroyed) {
            return;
        }
        if (this.settings.player.enableUserInteraction) {
            // for the selection ensure start < end
            if (this._selectionEnd) {
                let startTick = this._selectionStart.beat.absolutePlaybackStart;
                let endTick = this._selectionEnd.beat.absolutePlaybackStart;
                if (endTick < startTick) {
                    let t = this._selectionStart;
                    this._selectionStart = this._selectionEnd;
                    this._selectionEnd = t;
                }
            }
            if (this._selectionStart && this._tickCache) {
                // get the start and stop ticks (which consider properly repeats)
                let tickCache = this._tickCache;
                let realMasterBarStart = tickCache.getMasterBarStart(this._selectionStart.beat.voice.bar.masterBar);
                // move to selection start
                this._currentBeat = null; // reset current beat so it is updating the cursor
                if (this._playerState === PlayerState.Paused) {
                    this.cursorUpdateTick(this._selectionStart.beat.absolutePlaybackStart, false);
                }
                this.tickPosition = realMasterBarStart + this._selectionStart.beat.playbackStart;
                // set playback range
                if (this._selectionEnd && this._selectionStart.beat !== this._selectionEnd.beat) {
                    let realMasterBarEnd = tickCache.getMasterBarStart(this._selectionEnd.beat.voice.bar.masterBar);
                    let range = new PlaybackRange();
                    range.startTick = realMasterBarStart + this._selectionStart.beat.playbackStart;
                    range.endTick =
                        realMasterBarEnd +
                            this._selectionEnd.beat.playbackStart +
                            this._selectionEnd.beat.playbackDuration -
                            50;
                    this.playbackRange = range;
                }
                else {
                    this._selectionStart = null;
                    this.playbackRange = null;
                    this.cursorSelectRange(this._selectionStart, this._selectionEnd);
                }
            }
        }
        this.beatMouseUp.trigger(beat);
        this.uiFacade.triggerEvent(this.container, 'beatMouseUp', beat, originalEvent);
        this._beatMouseDown = false;
    }
    onNoteMouseUp(originalEvent, note) {
        if (this._isDestroyed) {
            return;
        }
        this.noteMouseUp.trigger(note);
        this.uiFacade.triggerEvent(this.container, 'noteMouseUp', note, originalEvent);
        this._noteMouseDown = false;
    }
    updateSelectionCursor(range) {
        if (!this._tickCache) {
            return;
        }
        if (range) {
            const startBeat = this._tickCache.findBeat(this.tracks, range.startTick);
            const endBeat = this._tickCache.findBeat(this.tracks, range.endTick);
            if (startBeat && endBeat) {
                const selectionStart = new SelectionInfo(startBeat.currentBeat);
                const selectionEnd = new SelectionInfo(endBeat.currentBeat);
                this.cursorSelectRange(selectionStart, selectionEnd);
            }
        }
        else {
            this.cursorSelectRange(null, null);
        }
    }
    setupClickHandling() {
        this.canvasElement.mouseDown.on(e => {
            var _a, _b, _c;
            if (!e.isLeftMouseButton) {
                return;
            }
            if (this.settings.player.enableUserInteraction) {
                e.preventDefault();
            }
            let relX = e.getX(this.canvasElement);
            let relY = e.getY(this.canvasElement);
            let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
            if (beat) {
                this.onBeatMouseDown(e, beat);
                if (this.settings.core.includeNoteBounds) {
                    const note = (_c = this.renderer.boundsLookup) === null || _c === void 0 ? void 0 : _c.getNoteAtPos(beat, relX, relY);
                    if (note) {
                        this.onNoteMouseDown(e, note);
                    }
                }
            }
        });
        this.canvasElement.mouseMove.on(e => {
            var _a, _b, _c;
            if (!this._beatMouseDown) {
                return;
            }
            let relX = e.getX(this.canvasElement);
            let relY = e.getY(this.canvasElement);
            let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
            if (beat) {
                this.onBeatMouseMove(e, beat);
                if (this._noteMouseDown) {
                    const note = (_c = this.renderer.boundsLookup) === null || _c === void 0 ? void 0 : _c.getNoteAtPos(beat, relX, relY);
                    if (note) {
                        this.onNoteMouseMove(e, note);
                    }
                }
            }
        });
        this.canvasElement.mouseUp.on(e => {
            var _a, _b, _c, _d;
            if (!this._beatMouseDown) {
                return;
            }
            if (this.settings.player.enableUserInteraction) {
                e.preventDefault();
            }
            let relX = e.getX(this.canvasElement);
            let relY = e.getY(this.canvasElement);
            let beat = (_b = (_a = this.renderer.boundsLookup) === null || _a === void 0 ? void 0 : _a.getBeatAtPos(relX, relY)) !== null && _b !== void 0 ? _b : null;
            this.onBeatMouseUp(e, beat);
            if (this._noteMouseDown) {
                if (beat) {
                    const note = (_d = (_c = this.renderer.boundsLookup) === null || _c === void 0 ? void 0 : _c.getNoteAtPos(beat, relX, relY)) !== null && _d !== void 0 ? _d : null;
                    this.onNoteMouseUp(e, note);
                }
                else {
                    this.onNoteMouseUp(e, null);
                }
            }
        });
        this.renderer.postRenderFinished.on(() => {
            if (!this._selectionStart ||
                !this.settings.player.enablePlayer ||
                !this.settings.player.enableCursor ||
                !this.settings.player.enableUserInteraction) {
                return;
            }
            this.cursorSelectRange(this._selectionStart, this._selectionEnd);
        });
    }
    cursorSelectRange(startBeat, endBeat) {
        let cache = this.renderer.boundsLookup;
        if (!cache) {
            return;
        }
        let selectionWrapper = this._selectionWrapper;
        if (!selectionWrapper) {
            return;
        }
        selectionWrapper.clear();
        if (!startBeat || !endBeat || startBeat.beat === endBeat.beat) {
            return;
        }
        if (!startBeat.bounds) {
            startBeat.bounds = cache.findBeat(startBeat.beat);
        }
        if (!endBeat.bounds) {
            endBeat.bounds = cache.findBeat(endBeat.beat);
        }
        let startTick = startBeat.beat.absolutePlaybackStart;
        let endTick = endBeat.beat.absolutePlaybackStart;
        if (endTick < startTick) {
            let t = startBeat;
            startBeat = endBeat;
            endBeat = t;
        }
        let startX = startBeat.bounds.realBounds.x;
        let endX = endBeat.bounds.realBounds.x + endBeat.bounds.realBounds.w;
        if (endBeat.beat.index === endBeat.beat.voice.beats.length - 1) {
            endX =
                endBeat.bounds.barBounds.masterBarBounds.realBounds.x +
                    endBeat.bounds.barBounds.masterBarBounds.realBounds.w;
        }
        // if the selection goes across multiple staves, we need a special selection highlighting
        if (startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds !==
            endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds) {
            // from the startbeat to the end of the staff,
            // then fill all staffs until the end-beat staff
            // then from staff-start to the end beat (or to end of bar if it's the last beat)
            let staffStartX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x;
            let staffEndX = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.x +
                startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.visualBounds.w;
            let startSelection = this.uiFacade.createSelectionElement();
            startSelection.setBounds(startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.y, staffEndX - startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
            selectionWrapper.appendChild(startSelection);
            let staffStartIndex = startBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index + 1;
            let staffEndIndex = endBeat.bounds.barBounds.masterBarBounds.staveGroupBounds.index;
            for (let staffIndex = staffStartIndex; staffIndex < staffEndIndex; staffIndex++) {
                let staffBounds = cache.staveGroups[staffIndex];
                let middleSelection = this.uiFacade.createSelectionElement();
                middleSelection.setBounds(staffStartX, staffBounds.visualBounds.y, staffEndX - staffStartX, staffBounds.visualBounds.h);
                selectionWrapper.appendChild(middleSelection);
            }
            let endSelection = this.uiFacade.createSelectionElement();
            endSelection.setBounds(staffStartX, endBeat.bounds.barBounds.masterBarBounds.visualBounds.y, endX - staffStartX, endBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
            selectionWrapper.appendChild(endSelection);
        }
        else {
            // if the beats are on the same staff, we simply highlight from the startbeat to endbeat
            let selection = this.uiFacade.createSelectionElement();
            selection.setBounds(startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.y, endX - startX, startBeat.bounds.barBounds.masterBarBounds.visualBounds.h);
            selectionWrapper.appendChild(selection);
        }
    }
    onScoreLoaded(score) {
        if (this._isDestroyed) {
            return;
        }
        this.scoreLoaded.trigger(score);
        this.uiFacade.triggerEvent(this.container, 'scoreLoaded', score);
    }
    onResize(e) {
        if (this._isDestroyed) {
            return;
        }
        this.resize.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'resize', e);
    }
    onRenderStarted(resize) {
        if (this._isDestroyed) {
            return;
        }
        this.renderStarted.trigger(resize);
        this.uiFacade.triggerEvent(this.container, 'renderStarted', resize);
    }
    onRenderFinished(renderingResult) {
        if (this._isDestroyed) {
            return;
        }
        this.renderFinished.trigger(renderingResult);
        this.uiFacade.triggerEvent(this.container, 'renderFinished', renderingResult);
    }
    onPostRenderFinished() {
        if (this._isDestroyed) {
            return;
        }
        this.postRenderFinished.trigger();
        this.uiFacade.triggerEvent(this.container, 'postRenderFinished', null);
    }
    onError(error) {
        if (this._isDestroyed) {
            return;
        }
        Logger.error('API', 'An unexpected error occurred', error);
        this.error.trigger(error);
        this.uiFacade.triggerEvent(this.container, 'error', error);
    }
    onPlayerReady() {
        if (this._isDestroyed) {
            return;
        }
        this.playerReady.trigger();
        this.uiFacade.triggerEvent(this.container, 'playerReady', null);
    }
    onPlayerFinished() {
        if (this._isDestroyed) {
            return;
        }
        this.playerFinished.trigger();
        this.uiFacade.triggerEvent(this.container, 'playerFinished', null);
    }
    onSoundFontLoaded() {
        if (this._isDestroyed) {
            return;
        }
        this.soundFontLoaded.trigger();
        this.uiFacade.triggerEvent(this.container, 'soundFontLoaded', null);
    }
    onMidiLoad(e) {
        if (this._isDestroyed) {
            return;
        }
        this.midiLoad.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'midiLoad', e);
    }
    onMidiLoaded(e) {
        if (this._isDestroyed) {
            return;
        }
        this.midiLoaded.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'midiFileLoaded', e);
    }
    onPlayerStateChanged(e) {
        if (this._isDestroyed) {
            return;
        }
        this.playerStateChanged.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'playerStateChanged', e);
    }
    onPlayerPositionChanged(e) {
        if (this._isDestroyed) {
            return;
        }
        if (this.score !== null && this.tracks.length > 0) {
            this.playerPositionChanged.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'playerPositionChanged', e);
        }
    }
    onMidiEventsPlayed(e) {
        if (this._isDestroyed) {
            return;
        }
        this.midiEventsPlayed.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'midiEventsPlayed', e);
    }
    onPlaybackRangeChanged(e) {
        if (this._isDestroyed) {
            return;
        }
        this.playbackRangeChanged.trigger(e);
        this.uiFacade.triggerEvent(this.container, 'playbackRangeChanged', e);
    }
    onSettingsUpdated() {
        if (this._isDestroyed) {
            return;
        }
        this.settingsUpdated.trigger();
        this.uiFacade.triggerEvent(this.container, 'settingsUpdated', null);
    }
}

/**
 * @target web
 */
class FileLoadError extends AlphaTabError {
    constructor(message, xhr) {
        super(AlphaTabErrorType.General, message);
        this.xhr = xhr;
        Object.setPrototypeOf(this, FileLoadError.prototype);
    }
}

/**
 * The ScoreLoader enables you easy loading of Scores using all
 * available importers
 */
class ScoreLoader {
    /**
     * Loads a score asynchronously from the given datasource
     * @param path the source path to load the binary file from
     * @param success this function is called if the Score was successfully loaded from the datasource
     * @param error this function is called if any error during the loading occured.
     * @param settings settings for the score import
     * @target web
     */
    static loadScoreAsync(path, success, error, settings) {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', path, true, null, null);
        xhr.responseType = 'arraybuffer';
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                let response = xhr.response;
                if (xhr.status === 200 || (xhr.status === 0 && response)) {
                    try {
                        let buffer = xhr.response;
                        let reader = new Uint8Array(buffer);
                        let score = ScoreLoader.loadScoreFromBytes(reader, settings);
                        success(score);
                    }
                    catch (e) {
                        error(e);
                    }
                }
                else if (xhr.status === 0) {
                    error(new FileLoadError('You are offline!!\n Please Check Your Network.', xhr));
                }
                else if (xhr.status === 404) {
                    error(new FileLoadError('Requested URL not found.', xhr));
                }
                else if (xhr.status === 500) {
                    error(new FileLoadError('Internel Server Error.', xhr));
                }
                else if (xhr.statusText === 'parsererror') {
                    error(new FileLoadError('Error.\nParsing JSON Request failed.', xhr));
                }
                else if (xhr.statusText === 'timeout') {
                    error(new FileLoadError('Request Time out.', xhr));
                }
                else {
                    error(new FileLoadError('Unknow Error: ' + xhr.responseText, xhr));
                }
            }
        };
        xhr.send();
    }
    /**
     * Loads the score from the given binary data.
     * @param data The binary data containing a score in any known file format.
     * @param settings The settings to use during importing.
     * @returns The loaded score.
     */
    static loadScoreFromBytes(data, settings) {
        if (!settings) {
            settings = new Settings();
        }
        let importers = Environment.buildImporters();
        Logger.debug('ScoreLoader', 'Loading score from ' + data.length + ' bytes using ' + importers.length + ' importers', null);
        let score = null;
        let bb = ByteBuffer.fromBuffer(data);
        for (let importer of importers) {
            bb.reset();
            try {
                Logger.debug('ScoreLoader', 'Importing using importer ' + importer.name);
                importer.init(bb, settings);
                score = importer.readScore();
                Logger.debug('ScoreLoader', 'Score imported using ' + importer.name);
                break;
            }
            catch (e) {
                if (e instanceof UnsupportedFormatError) {
                    Logger.debug('ScoreLoader', importer.name + ' does not support the file');
                }
                else {
                    Logger.error('ScoreLoader', 'Score import failed due to unexpected error: ', e);
                    throw e;
                }
            }
        }
        if (score) {
            return score;
        }
        Logger.error('ScoreLoader', 'No compatible importer found for file');
        throw new UnsupportedFormatError('No compatible importer found for file');
    }
}

/**
 * @target web
 */
class BrowserMouseEventArgs {
    constructor(e) {
        this.mouseEvent = e;
    }
    get isLeftMouseButton() {
        return this.mouseEvent.button === 0;
    }
    getX(relativeTo) {
        let relativeToElement = relativeTo.element;
        let bounds = relativeToElement.getBoundingClientRect();
        let left = bounds.left + relativeToElement.ownerDocument.defaultView.pageXOffset;
        return this.mouseEvent.pageX - left;
    }
    getY(relativeTo) {
        let relativeToElement = relativeTo.element;
        let bounds = relativeToElement.getBoundingClientRect();
        let top = bounds.top + relativeToElement.ownerDocument.defaultView.pageYOffset;
        return this.mouseEvent.pageY - top;
    }
    preventDefault() {
        this.mouseEvent.preventDefault();
    }
}

/**
 * @target web
 */
class HtmlElementContainer {
    constructor(element) {
        this._resizeListeners = 0;
        this.lastBounds = new Bounds();
        this.element = element;
        this.mouseDown = {
            on: (value) => {
                this.element.addEventListener('mousedown', e => {
                    value(new BrowserMouseEventArgs(e));
                }, true);
            },
            off: (value) => {
                // not supported due to wrapping
            }
        };
        this.mouseUp = {
            on: (value) => {
                this.element.addEventListener('mouseup', e => {
                    value(new BrowserMouseEventArgs(e));
                }, true);
            },
            off: (value) => {
                // not supported due to wrapping
            }
        };
        this.mouseMove = {
            on: (value) => {
                this.element.addEventListener('mousemove', e => {
                    value(new BrowserMouseEventArgs(e));
                }, true);
            },
            off: (_) => {
                // not supported due to wrapping
            }
        };
        this.resize = {
            on: (value) => {
                if (this._resizeListeners === 0) {
                    HtmlElementContainer.resizeObserver.value.observe(this.element);
                }
                this.element.addEventListener('resize', value, true);
                this._resizeListeners++;
            },
            off: (value) => {
                this.element.removeEventListener('resize', value, true);
                this._resizeListeners--;
                if (this._resizeListeners <= 0) {
                    this._resizeListeners = 0;
                    HtmlElementContainer.resizeObserver.value.unobserve(this.element);
                }
            }
        };
    }
    get width() {
        return this.element.offsetWidth;
    }
    set width(value) {
        this.element.style.width = value + 'px';
    }
    get scrollLeft() {
        return this.element.scrollLeft;
    }
    set scrollLeft(value) {
        this.element.scrollTop = value;
    }
    get scrollTop() {
        return this.element.scrollLeft;
    }
    set scrollTop(value) {
        this.element.scrollTop = value;
    }
    get height() {
        return this.element.offsetHeight;
    }
    set height(value) {
        if (value >= 0) {
            this.element.style.height = value + 'px';
        }
        else {
            this.element.style.height = '100%';
        }
    }
    get isVisible() {
        return !!this.element.offsetWidth || !!this.element.offsetHeight || !!this.element.getClientRects().length;
    }
    stopAnimation() {
        this.element.style.transition = 'none';
    }
    transitionToX(duration, x) {
        this.element.style.transition = `transform ${duration}ms linear`;
        this.setBounds(x, NaN, NaN, NaN);
    }
    setBounds(x, y, w, h) {
        if (isNaN(x)) {
            x = this.lastBounds.x;
        }
        if (isNaN(y)) {
            y = this.lastBounds.y;
        }
        if (isNaN(w)) {
            w = this.lastBounds.w;
        }
        if (isNaN(h)) {
            h = this.lastBounds.h;
        }
        this.element.style.transform = `translate(${x}px, ${y}px) scale(${w}, ${h})`;
        this.element.style.transformOrigin = 'top left';
        this.lastBounds.x = x;
        this.lastBounds.y = y;
        this.lastBounds.w = w;
        this.lastBounds.h = h;
    }
    appendChild(child) {
        this.element.appendChild(child.element);
    }
    clear() {
        this.element.innerHTML = '';
    }
}
HtmlElementContainer.resizeObserver = new Lazy(() => new ResizeObserver((entries) => {
    for (const e of entries) {
        let evt = new CustomEvent('resize', {
            detail: e
        });
        e.target.dispatchEvent(evt);
    }
}));

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * This small utility helps to detect whether a particular font is already loaded.
 * @target web
 */
class FontLoadingChecker {
    constructor(families) {
        this._isStarted = false;
        this.isFontLoaded = false;
        this.fontLoaded = new EventEmitterOfT();
        this._originalFamilies = families;
        this._families = families;
    }
    checkForFontAvailability() {
        if (Environment.isRunningInWorker) {
            // no web fonts in web worker
            this.isFontLoaded = false;
            return;
        }
        if (this._isStarted) {
            return;
        }
        this._isStarted = true;
        let failCounter = 0;
        let failCounterId = window.setInterval(() => {
            Logger.warning('Rendering', `Could not load font '${this._families[0]}' within ${(failCounter + 1) * 5} seconds`, null);
            // try loading next font if there are more than 1 left
            if (this._families.length > 1) {
                this._families.shift();
                failCounter = 0;
            }
            else {
                failCounter++;
            }
        }, 5000);
        Logger.debug('Font', `Start checking for font availablility: ${this._families.join(', ')}`);
        let errorHandler = (e) => {
            if (this._families.length > 1) {
                Logger.debug('Font', `[${this._families[0]}] Loading Failed, switching to ${this._families[1]}`, e);
                this._families.shift();
                window.setTimeout(() => {
                    // tslint:disable-next-line: no-floating-promises
                    checkFont();
                }, 0);
            }
            else {
                Logger.error('Font', `[${this._originalFamilies.join(',')}] Loading Failed, rendering cannot start`, e);
                window.clearInterval(failCounterId);
                debugger;
            }
        };
        let successHandler = (font) => {
            Logger.debug('Font', `[${font}] Font API signaled available`);
            this.isFontLoaded = true;
            window.clearInterval(failCounterId);
            this.fontLoaded.trigger(this._families[0]);
        };
        let checkFont = () => __awaiter(this, void 0, void 0, function* () {
            // Fast Path: check if one of the specified fonts is already available.
            for (const font of this._families) {
                if (yield this.isFontAvailable(font, false)) {
                    successHandler(font);
                    return;
                }
            }
            // Slow path: Wait for fonts to be loaded sequentially
            try {
                yield document.fonts.load(`1em ${this._families[0]}`);
            }
            catch (e) {
                errorHandler(e);
            }
            Logger.debug('Font', `[${this._families[0]}] Font API signaled loaded`);
            if (yield this.isFontAvailable(this._families[0], true)) {
                successHandler(this._families[0]);
            }
            else {
                errorHandler('Font not available');
            }
            return true;
        });
        document.fonts.ready.then(() => {
            // tslint:disable-next-line: no-floating-promises
            checkFont();
        });
    }
    isFontAvailable(family, advancedCheck) {
        return new Promise(resolve => {
            // In some very rare occasions Chrome reports false for the font.
            // in this case we try to force some refresh and reload by creating an element with this font.
            const fontString = '1em ' + family;
            if (document.fonts.check(fontString)) {
                resolve(true);
            }
            else if (advancedCheck) {
                Logger.debug('Font', `Font ${family} not available, creating test element to trigger load`);
                const testElement = document.createElement('div');
                testElement.style.font = fontString;
                testElement.style.opacity = '0';
                testElement.style.position = 'absolute';
                testElement.style.top = '0';
                testElement.style.left = '0';
                testElement.innerText = `Trigger ${family} load`;
                document.body.appendChild(testElement);
                setTimeout(() => {
                    document.body.removeChild(testElement);
                    if (document.fonts.check(fontString)) {
                        resolve(true);
                    }
                    else {
                        resolve(false);
                    }
                }, 200);
            }
            else {
                resolve(false);
            }
        });
    }
}

/**
 * Represents a fixed size circular sample buffer that can be written to and read from.
 * @csharp_public
 */
class CircularSampleBuffer {
    /**
     * Initializes a new instance of the {@link CircularSampleBuffer} class.
     * @param size The size.
     */
    constructor(size) {
        this._writePosition = 0;
        this._readPosition = 0;
        /**
         * Gets the number of samples written to the buffer.
         */
        this.count = 0;
        this._buffer = new Float32Array(size);
    }
    /**
     * Clears all samples written to this buffer.
     */
    clear() {
        this._readPosition = 0;
        this._writePosition = 0;
        this.count = 0;
        this._buffer = new Float32Array(this._buffer.length);
    }
    /**
     * Writes the given samples to this buffer.
     * @param data The sample array to read from.
     * @param offset
     * @param count
     * @returns
     */
    write(data, offset, count) {
        let samplesWritten = 0;
        if (count > this._buffer.length - this.count) {
            count = this._buffer.length - this.count;
        }
        const writeToEnd = Math.min(this._buffer.length - this._writePosition, count);
        this._buffer.set(data.subarray(offset, offset + writeToEnd), this._writePosition);
        this._writePosition += writeToEnd;
        this._writePosition %= this._buffer.length;
        samplesWritten += writeToEnd;
        if (samplesWritten < count) {
            this._buffer.set(data.subarray(offset + samplesWritten, offset + samplesWritten + count - samplesWritten), this._writePosition);
            this._writePosition += count - samplesWritten;
            samplesWritten = count;
        }
        this.count += samplesWritten;
        return samplesWritten;
    }
    /**
     * Reads the requested amount of samples from the buffer.
     * @param data The sample array to store the read elements.
     * @param offset The offset within the destination buffer to put the items at.
     * @param count The number of items to read from this buffer.
     * @returns The number of items actually read from the buffer.
     */
    read(data, offset, count) {
        if (count > this.count) {
            count = this.count;
        }
        let samplesRead = 0;
        const readToEnd = Math.min(this._buffer.length - this._readPosition, count);
        data.set(this._buffer.subarray(this._readPosition, this._readPosition + readToEnd), offset);
        samplesRead += readToEnd;
        this._readPosition += readToEnd;
        this._readPosition %= this._buffer.length;
        if (samplesRead < count) {
            data.set(this._buffer.subarray(this._readPosition, this._readPosition + count - samplesRead), offset + samplesRead);
            this._readPosition += count - samplesRead;
            samplesRead = count;
        }
        this.count -= samplesRead;
        return samplesRead;
    }
}

/**
 * @target web
 */
class AlphaSynthWebAudioOutputBase {
    constructor() {
        this._context = null;
        this._buffer = null;
        this._source = null;
        this.ready = new EventEmitter();
        this.samplesPlayed = new EventEmitterOfT();
        this.sampleRequest = new EventEmitter();
    }
    get sampleRate() {
        return this._context ? this._context.sampleRate : AlphaSynthWebAudioOutputBase.PreferredSampleRate;
    }
    activate(resumedCallback) {
        if (!this._context) {
            this._context = this.createAudioContext();
        }
        if (this._context.state === 'suspended' || this._context.state === 'interrupted') {
            Logger.debug('WebAudio', 'Audio Context is suspended, trying resume');
            this._context.resume().then(() => {
                var _a, _b;
                Logger.debug('WebAudio', `Audio Context resume success: state=${(_a = this._context) === null || _a === void 0 ? void 0 : _a.state}, sampleRate:${(_b = this._context) === null || _b === void 0 ? void 0 : _b.sampleRate}`);
                if (resumedCallback) {
                    resumedCallback();
                }
            }, reason => {
                var _a, _b;
                Logger.warning('WebAudio', `Audio Context resume failed: state=${(_a = this._context) === null || _a === void 0 ? void 0 : _a.state}, sampleRate:${(_b = this._context) === null || _b === void 0 ? void 0 : _b.sampleRate}, reason=${reason}`);
            });
        }
    }
    patchIosSampleRate() {
        let ua = navigator.userAgent;
        if (ua.indexOf('iPhone') !== -1 || ua.indexOf('iPad') !== -1) {
            let context = this.createAudioContext();
            let buffer = context.createBuffer(1, 1, AlphaSynthWebAudioOutputBase.PreferredSampleRate);
            let dummy = context.createBufferSource();
            dummy.buffer = buffer;
            dummy.connect(context.destination);
            dummy.start(0);
            dummy.disconnect(0);
            // tslint:disable-next-line: no-floating-promises
            context.close();
        }
    }
    createAudioContext() {
        if ('AudioContext' in Environment.globalThis) {
            return new AudioContext();
        }
        else if ('webkitAudioContext' in Environment.globalThis) {
            return new webkitAudioContext();
        }
        throw new AlphaTabError(AlphaTabErrorType.General, 'AudioContext not found');
    }
    open(bufferTimeInMilliseconds) {
        this.patchIosSampleRate();
        this._context = this.createAudioContext();
        let ctx = this._context;
        if (ctx.state === 'suspended') {
            this.registerResumeHandler();
        }
    }
    registerResumeHandler() {
        this._resumeHandler = (() => {
            this.activate(() => {
                this.unregisterResumeHandler();
            });
        }).bind(this);
        document.body.addEventListener('touchend', this._resumeHandler, false);
        document.body.addEventListener('click', this._resumeHandler, false);
    }
    unregisterResumeHandler() {
        const resumeHandler = this._resumeHandler;
        if (resumeHandler) {
            document.body.removeEventListener('touchend', resumeHandler, false);
            document.body.removeEventListener('click', resumeHandler, false);
        }
    }
    play() {
        let ctx = this._context;
        this.activate();
        // create an empty buffer source (silence)
        this._buffer = ctx.createBuffer(2, AlphaSynthWebAudioOutputBase.BufferSize, ctx.sampleRate);
        this._source = ctx.createBufferSource();
        this._source.buffer = this._buffer;
        this._source.loop = true;
    }
    pause() {
        if (this._source) {
            this._source.stop(0);
            this._source.disconnect();
        }
        this._source = null;
    }
    destroy() {
        var _a;
        this.pause();
        (_a = this._context) === null || _a === void 0 ? void 0 : _a.close();
        this._context = null;
        this.unregisterResumeHandler();
    }
    onSamplesPlayed(numberOfSamples) {
        this.samplesPlayed.trigger(numberOfSamples);
    }
    onSampleRequest() {
        this.sampleRequest.trigger();
    }
    onReady() {
        this.ready.trigger();
    }
}
AlphaSynthWebAudioOutputBase.BufferSize = 4096;
AlphaSynthWebAudioOutputBase.PreferredSampleRate = 44100;

// tslint:disable: deprecation
/**
 * This class implements a HTML5 Web Audio API based audio output device
 * for alphaSynth using the legacy ScriptProcessor node.
 * @target web
 */
class AlphaSynthScriptProcessorOutput extends AlphaSynthWebAudioOutputBase {
    constructor() {
        super(...arguments);
        this._audioNode = null;
        this._bufferCount = 0;
        this._requestedBufferCount = 0;
        this._outputBuffer = new Float32Array(0);
    }
    open(bufferTimeInMilliseconds) {
        super.open(bufferTimeInMilliseconds);
        this._bufferCount = Math.floor((bufferTimeInMilliseconds * this.sampleRate) / 1000 / AlphaSynthWebAudioOutputBase.BufferSize);
        this._circularBuffer = new CircularSampleBuffer(AlphaSynthWebAudioOutputBase.BufferSize * this._bufferCount);
        this.onReady();
    }
    play() {
        super.play();
        let ctx = this._context;
        // create a script processor node which will replace the silence with the generated audio
        this._audioNode = ctx.createScriptProcessor(4096, 0, 2);
        this._audioNode.onaudioprocess = this.generateSound.bind(this);
        this._circularBuffer.clear();
        this.requestBuffers();
        this._source = ctx.createBufferSource();
        this._source.buffer = this._buffer;
        this._source.loop = true;
        this._source.connect(this._audioNode, 0, 0);
        this._source.start(0);
        this._audioNode.connect(ctx.destination, 0, 0);
    }
    pause() {
        super.pause();
        if (this._audioNode) {
            this._audioNode.disconnect(0);
        }
        this._audioNode = null;
    }
    addSamples(f) {
        this._circularBuffer.write(f, 0, f.length);
        this._requestedBufferCount--;
    }
    resetSamples() {
        this._circularBuffer.clear();
    }
    requestBuffers() {
        // if we fall under the half of buffers
        // we request one half
        const halfBufferCount = (this._bufferCount / 2) | 0;
        let halfSamples = halfBufferCount * AlphaSynthWebAudioOutputBase.BufferSize;
        // Issue #631: it can happen that requestBuffers is called multiple times
        // before we already get samples via addSamples, therefore we need to
        // remember how many buffers have been requested, and consider them as available.
        let bufferedSamples = this._circularBuffer.count + this._requestedBufferCount * AlphaSynthWebAudioOutputBase.BufferSize;
        if (bufferedSamples < halfSamples) {
            for (let i = 0; i < halfBufferCount; i++) {
                this.onSampleRequest();
            }
            this._requestedBufferCount += halfBufferCount;
        }
    }
    generateSound(e) {
        let left = e.outputBuffer.getChannelData(0);
        let right = e.outputBuffer.getChannelData(1);
        let samples = left.length + right.length;
        let buffer = this._outputBuffer;
        if (buffer.length !== samples) {
            buffer = new Float32Array(samples);
            this._outputBuffer = buffer;
        }
        const samplesFromBuffer = this._circularBuffer.read(buffer, 0, Math.min(buffer.length, this._circularBuffer.count));
        let s = 0;
        for (let i = 0; i < left.length; i++) {
            left[i] = buffer[s++];
            right[i] = buffer[s++];
        }
        this.onSamplesPlayed(samplesFromBuffer / SynthConstants.AudioChannels);
        this.requestBuffers();
    }
}

/**
 * Represents the progress of any data being loaded.
 */
class ProgressEventArgs {
    /**
     * Initializes a new instance of the {@link ProgressEventArgs} class.
     * @param loaded
     * @param total
     */
    constructor(loaded, total) {
        this.loaded = loaded;
        this.total = total;
    }
}

/**
 * a WebWorker based alphaSynth which uses the given player as output.
 * @target web
 */
class AlphaSynthWebWorkerApi {
    constructor(player, alphaSynthScriptFile, logLevel, bufferTimeInMilliseconds) {
        this._workerIsReadyForPlayback = false;
        this._workerIsReady = false;
        this._outputIsReady = false;
        this._state = PlayerState.Paused;
        this._masterVolume = 0;
        this._metronomeVolume = 0;
        this._countInVolume = 0;
        this._playbackSpeed = 0;
        this._tickPosition = 0;
        this._timePosition = 0;
        this._isLooping = false;
        this._playbackRange = null;
        this._midiEventsPlayedFilter = [];
        this.ready = new EventEmitter();
        this.readyForPlayback = new EventEmitter();
        this.finished = new EventEmitter();
        this.soundFontLoaded = new EventEmitter();
        this.soundFontLoadFailed = new EventEmitterOfT();
        this.midiLoaded = new EventEmitterOfT();
        this.midiLoadFailed = new EventEmitterOfT();
        this.stateChanged = new EventEmitterOfT();
        this.positionChanged = new EventEmitterOfT();
        this.midiEventsPlayed = new EventEmitterOfT();
        this.playbackRangeChanged = new EventEmitterOfT();
        this._workerIsReadyForPlayback = false;
        this._workerIsReady = false;
        this._outputIsReady = false;
        this._state = PlayerState.Paused;
        this._masterVolume = 0.0;
        this._metronomeVolume = 0.0;
        this._playbackSpeed = 0.0;
        this._tickPosition = 0;
        this._timePosition = 0.0;
        this._isLooping = false;
        this._playbackRange = null;
        this._output = player;
        this._output.ready.on(this.onOutputReady.bind(this));
        this._output.samplesPlayed.on(this.onOutputSamplesPlayed.bind(this));
        this._output.sampleRequest.on(this.onOutputSampleRequest.bind(this));
        this._output.open(bufferTimeInMilliseconds);
        try {
            this._synth = Environment.createAlphaTabWorker(alphaSynthScriptFile);
        }
        catch (e) {
            Logger.error('AlphaSynth', 'Failed to create WebWorker: ' + e);
        }
        this._synth.addEventListener('message', this.handleWorkerMessage.bind(this), false);
        this._synth.postMessage({
            cmd: 'alphaSynth.initialize',
            sampleRate: this._output.sampleRate,
            logLevel: logLevel,
            bufferTimeInMilliseconds: bufferTimeInMilliseconds
        });
        this.masterVolume = 1;
        this.playbackSpeed = 1;
        this.metronomeVolume = 0;
    }
    get isReady() {
        return this._workerIsReady && this._outputIsReady;
    }
    get isReadyForPlayback() {
        return this._workerIsReadyForPlayback;
    }
    get state() {
        return this._state;
    }
    get logLevel() {
        return Logger.logLevel;
    }
    set logLevel(value) {
        Logger.logLevel = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setLogLevel',
            value: value
        });
    }
    get masterVolume() {
        return this._masterVolume;
    }
    set masterVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._masterVolume = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setMasterVolume',
            value: value
        });
    }
    get metronomeVolume() {
        return this._metronomeVolume;
    }
    set metronomeVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._metronomeVolume = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setMetronomeVolume',
            value: value
        });
    }
    get countInVolume() {
        return this._countInVolume;
    }
    set countInVolume(value) {
        value = Math.max(value, SynthConstants.MinVolume);
        this._countInVolume = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setCountInVolume',
            value: value
        });
    }
    get midiEventsPlayedFilter() {
        return this._midiEventsPlayedFilter;
    }
    set midiEventsPlayedFilter(value) {
        this._midiEventsPlayedFilter = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setMidiEventsPlayedFilter',
            value: value
        });
    }
    get playbackSpeed() {
        return this._playbackSpeed;
    }
    set playbackSpeed(value) {
        value = SynthHelper.clamp(value, SynthConstants.MinPlaybackSpeed, SynthConstants.MaxPlaybackSpeed);
        this._playbackSpeed = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setPlaybackSpeed',
            value: value
        });
    }
    get tickPosition() {
        return this._tickPosition;
    }
    set tickPosition(value) {
        if (value < 0) {
            value = 0;
        }
        this._tickPosition = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setTickPosition',
            value: value
        });
    }
    get timePosition() {
        return this._timePosition;
    }
    set timePosition(value) {
        if (value < 0) {
            value = 0;
        }
        this._timePosition = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setTimePosition',
            value: value
        });
    }
    get isLooping() {
        return this._isLooping;
    }
    set isLooping(value) {
        this._isLooping = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setIsLooping',
            value: value
        });
    }
    get playbackRange() {
        return this._playbackRange;
    }
    set playbackRange(value) {
        if (value) {
            if (value.startTick < 0) {
                value.startTick = 0;
            }
            if (value.endTick < 0) {
                value.endTick = 0;
            }
        }
        this._playbackRange = value;
        this._synth.postMessage({
            cmd: 'alphaSynth.setPlaybackRange',
            value: value
        });
    }
    destroy() {
        this._synth.postMessage({
            cmd: 'alphaSynth.destroy'
        });
    }
    //
    // API communicating with the web worker
    play() {
        this._output.activate();
        this._synth.postMessage({
            cmd: 'alphaSynth.play'
        });
        return true;
    }
    pause() {
        this._synth.postMessage({
            cmd: 'alphaSynth.pause'
        });
    }
    playPause() {
        this._output.activate();
        this._synth.postMessage({
            cmd: 'alphaSynth.playPause'
        });
    }
    stop() {
        this._synth.postMessage({
            cmd: 'alphaSynth.stop'
        });
    }
    playOneTimeMidiFile(midi) {
        this._synth.postMessage({
            cmd: 'alphaSynth.playOneTimeMidiFile',
            midi: JsonConverter.midiFileToJsObject(midi)
        });
    }
    loadSoundFont(data, append) {
        this._synth.postMessage({
            cmd: 'alphaSynth.loadSoundFontBytes',
            data: data,
            append: append
        });
    }
    loadSoundFontFromUrl(url, append, progress) {
        Logger.debug('AlphaSynth', `Start loading Soundfont from url ${url}`);
        let request = new XMLHttpRequest();
        request.open('GET', url, true, null, null);
        request.responseType = 'arraybuffer';
        request.onload = _ => {
            let buffer = new Uint8Array(request.response);
            this.loadSoundFont(buffer, append);
        };
        request.onerror = e => {
            Logger.error('AlphaSynth', 'Loading failed: ' + e.message);
            this.soundFontLoadFailed.trigger(new FileLoadError(e.message, request));
        };
        request.onprogress = e => {
            Logger.debug('AlphaSynth', `Soundfont downloading: ${e.loaded}/${e.total} bytes`);
            progress(new ProgressEventArgs(e.loaded, e.total));
        };
        request.send();
    }
    resetSoundFonts() {
        this._synth.postMessage({
            cmd: 'alphaSynth.resetSoundFonts'
        });
    }
    loadMidiFile(midi) {
        this._synth.postMessage({
            cmd: 'alphaSynth.loadMidi',
            midi: JsonConverter.midiFileToJsObject(midi)
        });
    }
    setChannelMute(channel, mute) {
        this._synth.postMessage({
            cmd: 'alphaSynth.setChannelMute',
            channel: channel,
            mute: mute
        });
    }
    resetChannelStates() {
        this._synth.postMessage({
            cmd: 'alphaSynth.resetChannelStates'
        });
    }
    setChannelSolo(channel, solo) {
        this._synth.postMessage({
            cmd: 'alphaSynth.setChannelSolo',
            channel: channel,
            solo: solo
        });
    }
    setChannelVolume(channel, volume) {
        volume = Math.max(volume, SynthConstants.MinVolume);
        this._synth.postMessage({
            cmd: 'alphaSynth.setChannelVolume',
            channel: channel,
            volume: volume
        });
    }
    handleWorkerMessage(e) {
        let data = e.data;
        let cmd = data.cmd;
        switch (cmd) {
            case 'alphaSynth.ready':
                this._workerIsReady = true;
                this.checkReady();
                break;
            case 'alphaSynth.destroyed':
                this._synth.terminate();
                break;
            case 'alphaSynth.readyForPlayback':
                this._workerIsReadyForPlayback = true;
                this.checkReadyForPlayback();
                break;
            case 'alphaSynth.positionChanged':
                this._timePosition = data.currentTime;
                this._tickPosition = data.currentTick;
                this.positionChanged.trigger(new PositionChangedEventArgs(data.currentTime, data.endTime, data.currentTick, data.endTick, data.isSeek));
                break;
            case 'alphaSynth.midiEventsPlayed':
                this.midiEventsPlayed.trigger(new MidiEventsPlayedEventArgs(data.events.map(JsonConverter.jsObjectToMidiEvent)));
                break;
            case 'alphaSynth.playerStateChanged':
                this._state = data.state;
                this.stateChanged.trigger(new PlayerStateChangedEventArgs(data.state, data.stopped));
                break;
            case 'alphaSynth.playbackRangeChanged':
                this._playbackRange = data.playbackRange;
                this.playbackRangeChanged.trigger(new PlaybackRangeChangedEventArgs(this._playbackRange));
                break;
            case 'alphaSynth.finished':
                this.finished.trigger();
                break;
            case 'alphaSynth.soundFontLoaded':
                this.soundFontLoaded.trigger();
                break;
            case 'alphaSynth.soundFontLoadFailed':
                this.soundFontLoadFailed.trigger(data.error);
                break;
            case 'alphaSynth.midiLoaded':
                this.checkReadyForPlayback();
                this.midiLoaded.trigger(new PositionChangedEventArgs(data.currentTime, data.endTime, data.currentTick, data.endTick, data.isSeek));
                break;
            case 'alphaSynth.midiLoadFailed':
                this.checkReadyForPlayback();
                this.midiLoadFailed.trigger(data.error);
                break;
            case 'alphaSynth.output.addSamples':
                this._output.addSamples(data.samples);
                break;
            case 'alphaSynth.output.play':
                this._output.play();
                break;
            case 'alphaSynth.output.pause':
                this._output.pause();
                break;
            case 'alphaSynth.output.destroy':
                this._output.destroy();
                break;
            case 'alphaSynth.output.resetSamples':
                this._output.resetSamples();
                break;
        }
    }
    checkReady() {
        if (this.isReady) {
            this.ready.trigger();
        }
    }
    checkReadyForPlayback() {
        if (this.isReadyForPlayback) {
            this.readyForPlayback.trigger();
        }
    }
    //
    // output communication ( output -> worker )
    onOutputSampleRequest() {
        this._synth.postMessage({
            cmd: 'alphaSynth.output.sampleRequest'
        });
    }
    onOutputSamplesPlayed(samples) {
        this._synth.postMessage({
            cmd: 'alphaSynth.output.samplesPlayed',
            samples: samples
        });
    }
    onOutputReady() {
        this._outputIsReady = true;
        this.checkReady();
    }
}

/**
 * @target web
 */
class AlphaTabWorkerScoreRenderer {
    constructor(api, settings) {
        this._width = 0;
        this.boundsLookup = null;
        this.preRender = new EventEmitterOfT();
        this.partialRenderFinished = new EventEmitterOfT();
        this.partialLayoutFinished = new EventEmitterOfT();
        this.renderFinished = new EventEmitterOfT();
        this.postRenderFinished = new EventEmitter();
        this.error = new EventEmitterOfT();
        this._api = api;
        // first try blob worker
        try {
            this._worker = Environment.createAlphaTabWorker(settings.core.scriptFile);
        }
        catch (e) {
            Logger.error('Rendering', `Failed to create WebWorker: ${e}`);
            return;
        }
        this._worker.postMessage({
            cmd: 'alphaTab.initialize',
            settings: this.serializeSettingsForWorker(settings)
        });
        this._worker.addEventListener('message', this.handleWorkerMessage.bind(this));
    }
    destroy() {
        this._worker.terminate();
    }
    updateSettings(settings) {
        this._worker.postMessage({
            cmd: 'alphaTab.updateSettings',
            settings: this.serializeSettingsForWorker(settings)
        });
    }
    serializeSettingsForWorker(settings) {
        const jsObject = JsonConverter.settingsToJsObject(settings);
        // cut out player settings, they are only needed on UI thread side
        jsObject.delete('player');
        return jsObject;
    }
    render() {
        this._worker.postMessage({
            cmd: 'alphaTab.render'
        });
    }
    resizeRender() {
        this._worker.postMessage({
            cmd: 'alphaTab.resizeRender'
        });
    }
    renderResult(resultId) {
        this._worker.postMessage({
            cmd: 'alphaTab.renderResult',
            resultId: resultId
        });
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this._width = value;
        this._worker.postMessage({
            cmd: 'alphaTab.setWidth',
            width: value
        });
    }
    handleWorkerMessage(e) {
        let data = e.data;
        let cmd = data.cmd;
        switch (cmd) {
            case 'alphaTab.preRender':
                this.preRender.trigger(data.resize);
                break;
            case 'alphaTab.partialRenderFinished':
                this.partialRenderFinished.trigger(data.result);
                break;
            case 'alphaTab.partialLayoutFinished':
                this.partialLayoutFinished.trigger(data.result);
                break;
            case 'alphaTab.renderFinished':
                this.renderFinished.trigger(data.result);
                break;
            case 'alphaTab.postRenderFinished':
                this.boundsLookup = BoundsLookup.fromJson(data.boundsLookup, this._api.score);
                this.boundsLookup.finish();
                this.postRenderFinished.trigger();
                break;
            case 'alphaTab.error':
                this.error.trigger(data.error);
                break;
        }
    }
    renderScore(score, trackIndexes) {
        let jsObject = score == null ? null : JsonConverter.scoreToJsObject(score);
        this._worker.postMessage({
            cmd: 'alphaTab.renderScore',
            score: jsObject,
            trackIndexes: trackIndexes,
            fontSizes: FontSizes.FontSizeLookupTables
        });
    }
}

/**
 * This wrapper holds all cursor related elements.
 */
class Cursors {
    /**
     * Initializes a new instance of the {@link Cursors} class.
     * @param cursorWrapper
     * @param barCursor
     * @param beatCursor
     * @param selectionWrapper
     */
    constructor(cursorWrapper, barCursor, beatCursor, selectionWrapper) {
        this.cursorWrapper = cursorWrapper;
        this.barCursor = barCursor;
        this.beatCursor = beatCursor;
        this.selectionWrapper = selectionWrapper;
    }
}

/**
 * Lists all web specific platforms alphaTab might run in
 * like browser, nodejs.
 */
var WebPlatform;
(function (WebPlatform) {
    WebPlatform[WebPlatform["Browser"] = 0] = "Browser";
    WebPlatform[WebPlatform["NodeJs"] = 1] = "NodeJs";
    WebPlatform[WebPlatform["BrowserModule"] = 2] = "BrowserModule";
})(WebPlatform || (WebPlatform = {}));

/**
 * This class implements a HTML5 Web Audio API based audio output device
 * for alphaSynth using the modern Audio Worklets.
 * @target web
 */
class AlphaSynthWebWorklet {
    static init() {
        var _a;
        if (AlphaSynthWebWorklet._isRegistered) {
            return;
        }
        AlphaSynthWebWorklet._isRegistered = true;
        registerProcessor('alphatab', (_a = class AlphaSynthWebWorkletProcessor extends AudioWorkletProcessor {
                constructor(options) {
                    super(options);
                    this._outputBuffer = new Float32Array(0);
                    this._bufferCount = 0;
                    this._requestedBufferCount = 0;
                    Logger.debug('WebAudio', 'creating processor');
                    this._bufferCount = Math.floor((options.processorOptions.bufferTimeInMilliseconds * sampleRate) /
                        1000 /
                        AlphaSynthWebWorkletProcessor.BufferSize);
                    this._circularBuffer = new CircularSampleBuffer(AlphaSynthWebWorkletProcessor.BufferSize * this._bufferCount);
                    this.port.onmessage = this.handleMessage.bind(this);
                }
                handleMessage(e) {
                    let data = e.data;
                    let cmd = data.cmd;
                    switch (cmd) {
                        case AlphaSynthWorkerSynthOutput.CmdOutputAddSamples:
                            const f = data.samples;
                            this._circularBuffer.write(f, 0, f.length);
                            this._requestedBufferCount--;
                            break;
                        case AlphaSynthWorkerSynthOutput.CmdOutputResetSamples:
                            this._circularBuffer.clear();
                            break;
                    }
                }
                process(_inputs, outputs, _parameters) {
                    if (outputs.length !== 1 && outputs[0].length !== 2) {
                        return false;
                    }
                    let left = outputs[0][0];
                    let right = outputs[0][1];
                    if (!left || !right) {
                        return true;
                    }
                    let samples = left.length + right.length;
                    let buffer = this._outputBuffer;
                    if (buffer.length !== samples) {
                        buffer = new Float32Array(samples);
                        this._outputBuffer = buffer;
                    }
                    const samplesFromBuffer = this._circularBuffer.read(buffer, 0, Math.min(buffer.length, this._circularBuffer.count));
                    let s = 0;
                    for (let i = 0; i < left.length; i++) {
                        left[i] = buffer[s++];
                        right[i] = buffer[s++];
                    }
                    this.port.postMessage({
                        cmd: AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed,
                        samples: samplesFromBuffer / SynthConstants.AudioChannels
                    });
                    this.requestBuffers();
                    return true;
                }
                requestBuffers() {
                    // if we fall under the half of buffers
                    // we request one half
                    const halfBufferCount = (this._bufferCount / 2) | 0;
                    let halfSamples = halfBufferCount * AlphaSynthWebWorkletProcessor.BufferSize;
                    // Issue #631: it can happen that requestBuffers is called multiple times
                    // before we already get samples via addSamples, therefore we need to
                    // remember how many buffers have been requested, and consider them as available.
                    let bufferedSamples = this._circularBuffer.count +
                        this._requestedBufferCount * AlphaSynthWebWorkletProcessor.BufferSize;
                    if (bufferedSamples < halfSamples) {
                        for (let i = 0; i < halfBufferCount; i++) {
                            this.port.postMessage({
                                cmd: AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest
                            });
                        }
                        this._requestedBufferCount += halfBufferCount;
                    }
                }
            },
            _a.BufferSize = 4096,
            _a));
    }
}
AlphaSynthWebWorklet._isRegistered = false;
/**
 * This class implements a HTML5 Web Audio API based audio output device
 * for alphaSynth. It can be controlled via a JS API.
 * @target web
 */
class AlphaSynthAudioWorkletOutput extends AlphaSynthWebAudioOutputBase {
    constructor() {
        super(...arguments);
        this._worklet = null;
        this._bufferTimeInMilliseconds = 0;
    }
    open(bufferTimeInMilliseconds) {
        super.open(bufferTimeInMilliseconds);
        this._bufferTimeInMilliseconds = bufferTimeInMilliseconds;
        this.onReady();
    }
    play() {
        super.play();
        let ctx = this._context;
        // create a script processor node which will replace the silence with the generated audio
        ctx.audioWorklet.addModule(Environment.scriptFile).then(() => {
            this._worklet = new AudioWorkletNode(ctx, 'alphatab', {
                numberOfOutputs: 1,
                outputChannelCount: [2],
                processorOptions: {
                    bufferTimeInMilliseconds: this._bufferTimeInMilliseconds
                }
            });
            this._worklet.port.onmessage = this.handleMessage.bind(this);
            this._source.connect(this._worklet);
            this._source.start(0);
            this._worklet.connect(ctx.destination);
        }, reason => {
            Logger.error('WebAudio', `Audio Worklet creation failed: reason=${reason}`);
        });
    }
    handleMessage(e) {
        let data = e.data;
        let cmd = data.cmd;
        switch (cmd) {
            case AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed:
                this.onSamplesPlayed(data.samples);
                break;
            case AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest:
                this.onSampleRequest();
                break;
        }
    }
    pause() {
        super.pause();
        if (this._worklet) {
            this._worklet.port.onmessage = null;
            this._worklet.disconnect();
        }
        this._worklet = null;
    }
    addSamples(f) {
        var _a;
        (_a = this._worklet) === null || _a === void 0 ? void 0 : _a.port.postMessage({
            cmd: AlphaSynthWorkerSynthOutput.CmdOutputAddSamples,
            samples: f
        });
    }
    resetSamples() {
        var _a;
        (_a = this._worklet) === null || _a === void 0 ? void 0 : _a.port.postMessage({
            cmd: AlphaSynthWorkerSynthOutput.CmdOutputResetSamples
        });
    }
}

/**
 * An IContainer implementation which can be used for cursors and select ranges
 * where browser scaling is relevant.
 *
 * The problem is that with having 1x1 pixel elements which are sized then to the actual size with a
 * scale transform this cannot be combined properly with a browser zoom.
 *
 * The browser will apply first the browser zoom to the 1x1px element and then apply the scale leaving it always
 * at full scale instead of a 50% browser zoom.
 *
 * This is solved in this container by scaling the element first up to a higher degree (as specified)
 * so that the browser can do a scaling according to typical zoom levels and then the scaling will work.
 * @target web
 */
class ScalableHtmlElementContainer extends HtmlElementContainer {
    constructor(element, xscale, yscale) {
        super(element);
        this._xscale = xscale;
        this._yscale = yscale;
    }
    get width() {
        return this.element.offsetWidth / this._xscale;
    }
    set width(value) {
        this.element.style.width = value * this._xscale + 'px';
    }
    get height() {
        return this.element.offsetHeight / this._yscale;
    }
    set height(value) {
        if (value >= 0) {
            this.element.style.height = value * this._yscale + 'px';
        }
        else {
            this.element.style.height = '100%';
        }
    }
    setBounds(x, y, w, h) {
        if (isNaN(x)) {
            x = this.lastBounds.x;
        }
        if (isNaN(y)) {
            y = this.lastBounds.y;
        }
        if (isNaN(w)) {
            w = this.lastBounds.w;
        }
        else {
            w = w / this._xscale;
        }
        if (isNaN(h)) {
            h = this.lastBounds.h;
        }
        else {
            h = h / this._yscale;
        }
        this.element.style.transform = `translate(${x}px, ${y}px) scale(${w}, ${h})`;
        this.element.style.transformOrigin = 'top left';
        this.lastBounds.x = x;
        this.lastBounds.y = y;
        this.lastBounds.w = w;
        this.lastBounds.h = h;
    }
}

/**
 * @target web
 */
var ResultState;
(function (ResultState) {
    ResultState[ResultState["LayoutDone"] = 0] = "LayoutDone";
    ResultState[ResultState["RenderRequested"] = 1] = "RenderRequested";
    ResultState[ResultState["RenderDone"] = 2] = "RenderDone";
    ResultState[ResultState["Detached"] = 3] = "Detached";
})(ResultState || (ResultState = {}));
/**
 * @target web
 */
class BrowserUiFacade {
    constructor(rootElement) {
        this._fontCheckers = new Map();
        this._contents = null;
        this._file = null;
        this._totalResultCount = 0;
        this._initialTrackIndexes = null;
        this._barToElementLookup = new Map();
        this._resultIdToElementLookup = new Map();
        this.rootContainerBecameVisible = new EventEmitter();
        this.canRenderChanged = new EventEmitter();
        this._highlightedElements = [];
        this._scrollContainer = null;
        if (Environment.webPlatform !== WebPlatform.Browser && Environment.webPlatform !== WebPlatform.BrowserModule) {
            throw new AlphaTabError(AlphaTabErrorType.General, 'Usage of AlphaTabApi is only possible in browser environments. For usage in node use the Low Level APIs');
        }
        rootElement.classList.add('alphaTab');
        this.rootContainer = new HtmlElementContainer(rootElement);
        this.areWorkersSupported = 'Worker' in window;
        Environment.bravuraFontChecker.fontLoaded.on(this.onFontLoaded.bind(this));
        this._intersectionObserver = new IntersectionObserver(this.onElementVisibilityChanged.bind(this), {
            threshold: [0, 0.01, 1]
        });
        this._intersectionObserver.observe(rootElement);
    }
    get resizeThrottle() {
        return 10;
    }
    get canRender() {
        return this.areAllFontsLoaded();
    }
    areAllFontsLoaded() {
        Environment.bravuraFontChecker.checkForFontAvailability();
        if (!Environment.bravuraFontChecker.isFontLoaded) {
            return false;
        }
        let isAnyNotLoaded = false;
        for (const checker of this._fontCheckers.values()) {
            if (!checker.isFontLoaded) {
                isAnyNotLoaded = true;
            }
        }
        if (isAnyNotLoaded) {
            return false;
        }
        Logger.debug('Font', 'All fonts loaded: ' + this._fontCheckers.size);
        return true;
    }
    onFontLoaded(family) {
        FontSizes.generateFontLookup(family);
        if (this.areAllFontsLoaded()) {
            this.canRenderChanged.trigger();
        }
    }
    onElementVisibilityChanged(entries) {
        for (const e of entries) {
            const htmlElement = e.target;
            if (htmlElement === this.rootContainer.element) {
                if (e.isIntersecting) {
                    this.rootContainerBecameVisible.trigger();
                    this._intersectionObserver.unobserve(this.rootContainer.element);
                }
            }
            else if ('layoutResultId' in htmlElement && this._api.settings.core.enableLazyLoading) {
                const placeholder = htmlElement;
                if (e.isIntersecting) {
                    // missing result or result not matching layout -> request render
                    if (placeholder.renderedResultId !== placeholder.layoutResultId) {
                        if (this._resultIdToElementLookup.has(placeholder.layoutResultId)) {
                            this._api.renderer.renderResult(placeholder.layoutResultId);
                        }
                        else {
                            htmlElement.replaceChildren();
                        }
                    }
                    // detached and became visible
                    else if (placeholder.resultState === ResultState.Detached) {
                        htmlElement.replaceChildren(...placeholder.renderedResult);
                        placeholder.resultState = ResultState.RenderDone;
                    }
                }
                else if (placeholder.resultState === ResultState.RenderDone) {
                    placeholder.resultState = ResultState.Detached;
                    placeholder.replaceChildren();
                }
            }
        }
    }
    createWorkerRenderer() {
        return new AlphaTabWorkerScoreRenderer(this._api, this._api.settings);
    }
    initialize(api, raw) {
        this._api = api;
        let settings;
        if (raw instanceof Settings) {
            settings = raw;
        }
        else {
            settings = JsonConverter.jsObjectToSettings(raw);
        }
        let dataAttributes = this.getDataAttributes();
        SettingsSerializer.fromJson(settings, dataAttributes);
        if (settings.notation.notationMode === NotationMode.SongBook) {
            settings.setSongBookModeSettings();
        }
        api.settings = settings;
        this.setupFontCheckers(settings);
        this._initialTrackIndexes = this.parseTracks(settings.core.tracks);
        this._contents = '';
        let element = api.container;
        if (settings.core.tex) {
            this._contents = element.element.innerHTML;
            element.element.innerHTML = '';
        }
        this.createStyleElement(settings);
        this._file = settings.core.file;
    }
    setupFontCheckers(settings) {
        this.registerFontChecker(settings.display.resources.copyrightFont);
        this.registerFontChecker(settings.display.resources.effectFont);
        this.registerFontChecker(settings.display.resources.fingeringFont);
        this.registerFontChecker(settings.display.resources.graceFont);
        this.registerFontChecker(settings.display.resources.markerFont);
        this.registerFontChecker(settings.display.resources.tablatureFont);
        this.registerFontChecker(settings.display.resources.titleFont);
        this.registerFontChecker(settings.display.resources.wordsFont);
        this.registerFontChecker(settings.display.resources.barNumberFont);
        this.registerFontChecker(settings.display.resources.fretboardNumberFont);
        this.registerFontChecker(settings.display.resources.subTitleFont);
    }
    registerFontChecker(font) {
        if (!this._fontCheckers.has(font.families.join(', '))) {
            let checker = new FontLoadingChecker(font.families);
            this._fontCheckers.set(font.families.join(', '), checker);
            checker.fontLoaded.on(this.onFontLoaded.bind(this));
            checker.checkForFontAvailability();
        }
    }
    destroy() {
        this.rootContainer.element.innerHTML = '';
    }
    createCanvasElement() {
        let canvasElement = document.createElement('div');
        canvasElement.className = 'at-surface';
        canvasElement.style.fontSize = '0';
        canvasElement.style.overflow = 'hidden';
        canvasElement.style.lineHeight = '0';
        canvasElement.style.position = 'relative';
        return new HtmlElementContainer(canvasElement);
    }
    triggerEvent(container, name, details = null, originalEvent) {
        let element = container.element;
        name = 'alphaTab.' + name;
        let e = document.createEvent('CustomEvent');
        let originalMouseEvent = originalEvent
            ? originalEvent.mouseEvent
            : null;
        e.initCustomEvent(name, false, false, details);
        if (originalMouseEvent) {
            e.originalEvent = originalMouseEvent;
        }
        element.dispatchEvent(e);
        if (window && 'jQuery' in window) {
            let jquery = window['jQuery'];
            let args = [];
            args.push(details);
            if (originalMouseEvent) {
                args.push(originalMouseEvent);
            }
            jquery(element).trigger(name, args);
        }
    }
    load(data, success, error) {
        if (data instanceof Score) {
            success(data);
            return true;
        }
        if (data instanceof ArrayBuffer) {
            let byteArray = new Uint8Array(data);
            success(ScoreLoader.loadScoreFromBytes(byteArray, this._api.settings));
            return true;
        }
        if (data instanceof Uint8Array) {
            success(ScoreLoader.loadScoreFromBytes(data, this._api.settings));
            return true;
        }
        if (typeof data === 'string') {
            ScoreLoader.loadScoreAsync(data, success, error, this._api.settings);
            return true;
        }
        return false;
    }
    loadSoundFont(data, append) {
        if (!this._api.player) {
            return false;
        }
        if (data instanceof ArrayBuffer) {
            this._api.player.loadSoundFont(new Uint8Array(data), append);
            return true;
        }
        if (data instanceof Uint8Array) {
            this._api.player.loadSoundFont(data, append);
            return true;
        }
        if (typeof data === 'string') {
            this._api.loadSoundFontFromUrl(data, append);
            return true;
        }
        return false;
    }
    initialRender() {
        this._api.renderer.preRender.on((_) => {
            this._totalResultCount = 0;
            this._resultIdToElementLookup.clear();
            this._barToElementLookup.clear();
        });
        const initialRender = () => {
            var _a;
            // rendering was possibly delayed due to invisible element
            // in this case we need the correct width for autosize
            this._api.renderer.width = this.rootContainer.width | 0;
            this._api.renderer.updateSettings(this._api.settings);
            if (this._contents) {
                this._api.tex(this._contents, (_a = this._initialTrackIndexes) !== null && _a !== void 0 ? _a : undefined);
                this._initialTrackIndexes = null;
            }
            else if (this._file) {
                ScoreLoader.loadScoreAsync(this._file, s => {
                    var _a;
                    this._api.renderScore(s, (_a = this._initialTrackIndexes) !== null && _a !== void 0 ? _a : undefined);
                    this._initialTrackIndexes = null;
                }, e => {
                    this._api.onError(e);
                }, this._api.settings);
            }
        };
        if (!this.rootContainer.isVisible) {
            this.rootContainerBecameVisible.on(initialRender);
        }
        else {
            initialRender();
        }
    }
    createStyleElement(settings) {
        let elementDocument = this._api.container.element.ownerDocument;
        Environment.createStyleElement(elementDocument, settings.core.fontDirectory);
    }
    parseTracks(tracksData) {
        if (!tracksData) {
            return [];
        }
        let tracks = [];
        // decode string
        if (typeof tracksData === 'string') {
            try {
                if (tracksData === 'all') {
                    return [-1];
                }
                tracksData = JSON.parse(tracksData);
            }
            catch (e) {
                tracksData = [0];
            }
        }
        // decode array
        if (typeof tracksData === 'number') {
            tracks.push(tracksData);
        }
        else if ('length' in tracksData) {
            let length = tracksData.length;
            let array = tracksData;
            for (let i = 0; i < length; i++) {
                let item = array[i];
                let value = 0;
                if (typeof item === 'number') {
                    value = item;
                }
                else if ('index' in item) {
                    value = item.index;
                }
                else {
                    value = parseInt(item.toString());
                }
                if (value >= 0 || value === -1) {
                    tracks.push(value);
                }
            }
        }
        else if ('index' in tracksData) {
            tracks.push(tracksData.index);
        }
        return tracks;
    }
    getDataAttributes() {
        let dataAttributes = new Map();
        let element = this._api.container.element;
        if (element.dataset) {
            for (let key of Object.keys(element.dataset)) {
                let value = element.dataset[key];
                try {
                    let stringValue = value;
                    value = JSON.parse(stringValue);
                }
                catch (e) {
                    if (value === '') {
                        value = null;
                    }
                }
                dataAttributes.set(key, value);
            }
        }
        else {
            for (let i = 0; i < element.attributes.length; i++) {
                let attr = element.attributes.item(i);
                let nodeName = attr.nodeName;
                if (nodeName.startsWith('data-')) {
                    let keyParts = nodeName.substr(5).split('-');
                    let key = keyParts[0];
                    for (let j = 1; j < keyParts.length; j++) {
                        key += keyParts[j].substr(0, 1).toUpperCase() + keyParts[j].substr(1);
                    }
                    let value = attr.nodeValue;
                    try {
                        value = JSON.parse(value);
                    }
                    catch (e) {
                        if (value === '') {
                            value = null;
                        }
                    }
                    dataAttributes.set(key, value);
                }
            }
        }
        return dataAttributes;
    }
    beginUpdateRenderResults(renderResult) {
        if (!this._resultIdToElementLookup.has(renderResult.id)) {
            return;
        }
        const placeholder = this._resultIdToElementLookup.get(renderResult.id);
        const body = renderResult.renderResult;
        if (typeof body === 'string') {
            placeholder.innerHTML = body;
        }
        else if ('nodeType' in body) {
            placeholder.replaceChildren(body);
        }
        placeholder.resultState = ResultState.RenderDone;
        placeholder.renderedResultId = renderResult.id;
        placeholder.renderedResult = Array.from(placeholder.children);
    }
    beginAppendRenderResults(renderResult) {
        const canvasElement = this._api.canvasElement.element;
        // null result indicates that the rendering finished
        if (!renderResult) {
            // so we remove elements that might be from a previous render session
            while (canvasElement.childElementCount > this._totalResultCount) {
                if (this._api.settings.core.enableLazyLoading) {
                    this._intersectionObserver.unobserve(canvasElement.lastChild);
                }
                canvasElement.removeChild(canvasElement.lastElementChild);
            }
        }
        else {
            let placeholder;
            if (this._totalResultCount < canvasElement.childElementCount) {
                placeholder = canvasElement.childNodes.item(this._totalResultCount);
            }
            else {
                placeholder = document.createElement('div');
                canvasElement.appendChild(placeholder);
            }
            placeholder.style.zIndex = '1';
            placeholder.style.position = 'absolute';
            placeholder.style.left = renderResult.x + 'px';
            placeholder.style.top = renderResult.y + 'px';
            placeholder.style.width = renderResult.width + 'px';
            placeholder.style.height = renderResult.height + 'px';
            placeholder.style.display = 'inline-block';
            placeholder.layoutResultId = renderResult.id;
            placeholder.resultState = ResultState.LayoutDone;
            delete placeholder.renderedResultId;
            delete placeholder.renderedResult;
            this._resultIdToElementLookup.set(renderResult.id, placeholder);
            // remember which bar is contained in which node for faster lookup
            // on highlight/unhighlight
            for (let i = renderResult.firstMasterBarIndex; i <= renderResult.lastMasterBarIndex; i++) {
                if (i >= 0) {
                    this._barToElementLookup.set(i, placeholder);
                }
            }
            if (this._api.settings.core.enableLazyLoading) {
                // re-observe to fire event
                this._intersectionObserver.unobserve(placeholder);
                this._intersectionObserver.observe(placeholder);
            }
            this._totalResultCount++;
        }
    }
    /**
     * This method creates the player. It detects browser compatibility and
     * initializes a alphaSynth version for the client.
     */
    createWorkerPlayer() {
        let alphaSynthScriptFile = Environment.scriptFile;
        if (!alphaSynthScriptFile) {
            Logger.error('Player', 'alphaTab script file could not be detected, player cannot initialize');
            return null;
        }
        let player = null;
        let supportsScriptProcessor = 'ScriptProcessorNode' in window;
        // Once https://github.com/webpack/webpack/issues/11543 is decided
        // we can support audio worklets together with WebPack
        let supportsAudioWorklets = window.isSecureContext && 'AudioWorkletNode' in window && !Environment.isWebPackBundled;
        if (supportsAudioWorklets) {
            Logger.debug('Player', 'Will use webworkers for synthesizing and web audio api with worklets for playback');
            player = new AlphaSynthWebWorkerApi(new AlphaSynthAudioWorkletOutput(), alphaSynthScriptFile, this._api.settings.core.logLevel, this._api.settings.player.bufferTimeInMilliseconds);
        }
        else if (supportsScriptProcessor) {
            Logger.debug('Player', 'Will use webworkers for synthesizing and web audio api for playback');
            player = new AlphaSynthWebWorkerApi(new AlphaSynthScriptProcessorOutput(), alphaSynthScriptFile, this._api.settings.core.logLevel, this._api.settings.player.bufferTimeInMilliseconds);
        }
        if (!player) {
            Logger.error('Player', 'Player requires webworkers and web audio api, browser unsupported', null);
        }
        else {
            player.ready.on(() => {
                if (this._api.settings.player.soundFont) {
                    this._api.loadSoundFontFromUrl(this._api.settings.player.soundFont, false);
                }
            });
        }
        return player;
    }
    beginInvoke(action) {
        window.requestAnimationFrame(() => {
            action();
        });
    }
    highlightElements(groupId, masterBarIndex) {
        const element = this._barToElementLookup.get(masterBarIndex);
        if (element) {
            let elementsToHighlight = element.getElementsByClassName(groupId);
            for (let i = 0; i < elementsToHighlight.length; i++) {
                elementsToHighlight.item(i).classList.add('at-highlight');
                this._highlightedElements.push(elementsToHighlight.item(i));
            }
        }
    }
    removeHighlights() {
        const highlightedElements = this._highlightedElements;
        if (!highlightedElements) {
            return;
        }
        for (const element of highlightedElements) {
            element.classList.remove('at-highlight');
        }
        this._highlightedElements = [];
    }
    destroyCursors() {
        let element = this._api.container.element;
        let cursorWrapper = element.querySelector('.at-cursors');
        element.removeChild(cursorWrapper);
    }
    createCursors() {
        let element = this._api.container.element;
        let cursorWrapper = document.createElement('div');
        cursorWrapper.classList.add('at-cursors');
        let selectionWrapper = document.createElement('div');
        selectionWrapper.classList.add('at-selection');
        const barCursorContainer = this.createScalingElement();
        const beatCursorContainer = this.createScalingElement();
        let barCursor = barCursorContainer.element;
        barCursor.classList.add('at-cursor-bar');
        let beatCursor = beatCursorContainer.element;
        beatCursor.classList.add('at-cursor-beat');
        // required css styles
        element.style.position = 'relative';
        element.style.textAlign = 'left';
        cursorWrapper.style.position = 'absolute';
        cursorWrapper.style.zIndex = '1000';
        cursorWrapper.style.display = 'inline';
        cursorWrapper.style.pointerEvents = 'none';
        selectionWrapper.style.position = 'absolute';
        barCursor.style.position = 'absolute';
        barCursor.style.left = '0';
        barCursor.style.top = '0';
        barCursor.style.willChange = 'transform';
        barCursorContainer.width = 1;
        barCursorContainer.height = 1;
        barCursorContainer.setBounds(0, 0, 1, 1);
        beatCursor.style.position = 'absolute';
        beatCursor.style.transition = 'all 0s linear';
        beatCursor.style.left = '0';
        beatCursor.style.top = '0';
        beatCursor.style.willChange = 'transform';
        beatCursorContainer.width = 3;
        beatCursorContainer.height = 1;
        beatCursorContainer.setBounds(0, 0, 1, 1);
        // add cursors to UI
        element.insertBefore(cursorWrapper, element.firstChild);
        cursorWrapper.appendChild(selectionWrapper);
        cursorWrapper.appendChild(barCursor);
        cursorWrapper.appendChild(beatCursor);
        return new Cursors(new HtmlElementContainer(cursorWrapper), barCursorContainer, beatCursorContainer, new HtmlElementContainer(selectionWrapper));
    }
    getOffset(scrollContainer, container) {
        let element = container.element;
        let bounds = element.getBoundingClientRect();
        let top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
        let left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
        if (scrollContainer) {
            let scrollElement = scrollContainer.element;
            let nodeName = scrollElement.nodeName.toLowerCase();
            if (nodeName !== 'html' && nodeName !== 'body') {
                let scrollElementOffset = this.getOffset(null, scrollContainer);
                top = top + scrollElement.scrollTop - scrollElementOffset.y;
                left = left + scrollElement.scrollLeft - scrollElementOffset.x;
            }
        }
        let b = new Bounds();
        b.x = left;
        b.y = top;
        b.w = bounds.width;
        b.h = bounds.height;
        return b;
    }
    getScrollContainer() {
        if (this._scrollContainer) {
            return this._scrollContainer;
        }
        let scrollElement = 
        // tslint:disable-next-line: strict-type-predicates
        typeof this._api.settings.player.scrollElement === 'string'
            ? document.querySelector(this._api.settings.player.scrollElement)
            : this._api.settings.player.scrollElement;
        let nodeName = scrollElement.nodeName.toLowerCase();
        if (nodeName === 'html' || nodeName === 'body') {
            // https://github.com/CoderLine/alphaTab/issues/205
            // https://github.com/CoderLine/alphaTab/issues/354
            // https://dev.opera.com/articles/fixing-the-scrolltop-bug/
            if ('scrollingElement' in document) {
                scrollElement = document.scrollingElement;
            }
            else {
                const userAgent = navigator.userAgent;
                if (userAgent.indexOf('WebKit') !== -1) {
                    scrollElement = document.body;
                }
                else {
                    scrollElement = document.documentElement;
                }
            }
        }
        this._scrollContainer = new HtmlElementContainer(scrollElement);
        return this._scrollContainer;
    }
    createSelectionElement() {
        return this.createScalingElement();
    }
    createScalingElement() {
        const element = document.createElement('div');
        element.style.position = 'absolute';
        // to typical browser zoom levels are:
        // Chromium: 25,33,50,67,75,80,90, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500
        // Firefox: 30, 50, 67, 80, 90, 100, 110, 120, 133, 150, 170, 200, 240, 300, 400, 500
        // with having a 100x100 scaling container we should be able to provide appropriate scaling
        const container = new ScalableHtmlElementContainer(element, 100, 100);
        container.width = 1;
        container.height = 1;
        container.setBounds(0, 0, 1, 1);
        return container;
    }
    scrollToY(element, scrollTargetY, speed) {
        this.internalScrollToY(element.element, scrollTargetY, speed);
    }
    scrollToX(element, scrollTargetY, speed) {
        this.internalScrollToX(element.element, scrollTargetY, speed);
    }
    internalScrollToY(element, scrollTargetY, speed) {
        if (this._api.settings.player.nativeBrowserSmoothScroll) {
            element.scrollTo({
                top: scrollTargetY,
                behavior: 'smooth'
            });
        }
        else {
            let startY = element.scrollTop;
            let diff = scrollTargetY - startY;
            let start = 0;
            let step = (x) => {
                if (start === 0) {
                    start = x;
                }
                let time = x - start;
                let percent = Math.min(time / speed, 1);
                element.scrollTop = (startY + diff * percent) | 0;
                if (time < speed) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }
    }
    internalScrollToX(element, scrollTargetX, speed) {
        if (this._api.settings.player.nativeBrowserSmoothScroll) {
            element.scrollTo({
                left: scrollTargetX,
                behavior: 'smooth'
            });
        }
        else {
            let startX = element.scrollLeft;
            let diff = scrollTargetX - startX;
            let start = 0;
            let step = (t) => {
                if (start === 0) {
                    start = t;
                }
                let time = t - start;
                let percent = Math.min(time / speed, 1);
                element.scrollLeft = (startX + diff * percent) | 0;
                if (time < speed) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }
    }
}

/**
 * @target web
 */
class AlphaTabApi extends AlphaTabApiBase {
    constructor(element, options) {
        super(new BrowserUiFacade(element), options);
        this.soundFontLoad = new EventEmitterOfT();
    }
    tex(tex, tracks) {
        let browser = this.uiFacade;
        super.tex(tex, browser.parseTracks(tracks));
    }
    print(width, additionalSettings = null) {
        // prepare a popup window for printing (a4 width, window height, centered)
        let preview = window.open('', '', 'width=0,height=0');
        let a4 = preview.document.createElement('div');
        if (width) {
            a4.style.width = width;
        }
        else {
            if (this.settings.display.layoutMode === LayoutMode.Horizontal) {
                a4.style.width = '297mm';
            }
            else {
                a4.style.width = '210mm';
            }
        }
        // the style is a workaround for browser having problems with printing using absolute positions. 
        preview.document.write(`
        <!DOCTYPE html>
        <html>
          <head>
            <style>
            .at-surface {
                width: auto !important;
                height: auto !important;
            }
            .at-surface > div {
                position: relative!important;
                left: auto !important;
                top: auto !important;
                break-inside: avoid;
            }
            </style>
          </head>
          <body></body>
        </html>
        `);
        const score = this.score;
        if (score) {
            if (score.artist && score.title) {
                preview.document.title = `${score.title} - ${score.artist}`;
            }
            else if (score.title) {
                preview.document.title = `${score.title}`;
            }
        }
        preview.document.body.appendChild(a4);
        let dualScreenLeft = typeof window['screenLeft'] !== 'undefined'
            ? window['screenLeft']
            : window['left'];
        let dualScreenTop = typeof window['screenTop'] !== 'undefined' ? window['screenTop'] : window['top'];
        let screenWidth = "innerWidth" in window
            ? window.innerWidth
            : "clientWidth" in document.documentElement
                ? document.documentElement.clientWidth
                : window.screen.width;
        let screenHeight = "innerHeight" in window
            ? window.innerHeight
            : "clientHeight" in document.documentElement
                ? document.documentElement.clientHeight
                : window.screen.height;
        let w = a4.offsetWidth + 50;
        let h = window.innerHeight;
        let left = ((screenWidth / 2) | 0) - ((w / 2) | 0) + dualScreenLeft;
        let top = ((screenHeight / 2) | 0) - ((h / 2) | 0) + dualScreenTop;
        preview.resizeTo(w, h);
        preview.moveTo(left, top);
        preview.focus();
        // render alphaTab
        let settings = JsonConverter.jsObjectToSettings(JsonConverter.settingsToJsObject(this.settings));
        settings.core.enableLazyLoading = false;
        settings.core.useWorkers = true;
        settings.core.file = null;
        settings.core.tracks = null;
        settings.player.enableCursor = false;
        settings.player.enablePlayer = false;
        settings.player.enableElementHighlighting = false;
        settings.player.enableUserInteraction = false;
        settings.player.soundFont = null;
        settings.display.scale = 0.8;
        settings.display.stretchForce = 0.8;
        SettingsSerializer.fromJson(settings, additionalSettings);
        let alphaTab = new AlphaTabApi(a4, settings);
        preview.onunload = () => {
            alphaTab.destroy();
        };
        alphaTab.renderer.postRenderFinished.on(() => {
            preview.print();
        });
        alphaTab.renderTracks(this.tracks);
    }
    downloadMidi() {
        if (!this.score) {
            return;
        }
        let midiFile = new MidiFile();
        let handler = new AlphaSynthMidiFileHandler(midiFile);
        let generator = new MidiFileGenerator(this.score, this.settings, handler);
        generator.generate();
        let binary = midiFile.toBinary();
        let fileName = !this.score.title ? 'File.mid' : `${this.score.title}.mid`;
        let dlLink = document.createElement('a');
        dlLink.download = fileName;
        let blob = new Blob([binary], {
            type: 'audio/midi'
        });
        let url = URL.createObjectURL(blob);
        dlLink.href = url;
        dlLink.style.display = 'none';
        document.body.appendChild(dlLink);
        dlLink.click();
        document.body.removeChild(dlLink);
    }
    changeTrackMute(tracks, mute) {
        let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
        super.changeTrackMute(trackList, mute);
    }
    changeTrackSolo(tracks, solo) {
        let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
        super.changeTrackSolo(trackList, solo);
    }
    changeTrackVolume(tracks, volume) {
        let trackList = this.trackIndexesToTracks(this.uiFacade.parseTracks(tracks));
        super.changeTrackVolume(trackList, volume);
    }
    trackIndexesToTracks(trackIndexes) {
        if (!this.score) {
            return [];
        }
        let tracks = [];
        if (trackIndexes.length === 1 && trackIndexes[0] === -1) {
            for (let track of this.score.tracks) {
                tracks.push(track);
            }
        }
        else {
            for (let index of trackIndexes) {
                if (index >= 0 && index < this.score.tracks.length) {
                    tracks.push(this.score.tracks[index]);
                }
            }
        }
        return tracks;
    }
    loadSoundFontFromUrl(url, append) {
        if (!this.player) {
            return;
        }
        this.player.loadSoundFontFromUrl(url, append, e => {
            this.soundFontLoad.trigger(e);
            this.uiFacade.triggerEvent(this.container, 'soundFontLoad', e);
        });
    }
}

/**
 * @target web
 */
class JQueryAlphaTab {
    constructor() {
        this._initListeners = [];
    }
    exec(element, method, args) {
        if (typeof method !== 'string') {
            args = [method];
            method = 'init';
        }
        if (method.charCodeAt(0) === 95 || method === 'exec') {
            return null;
        }
        let jElement = new jQuery(element);
        let context = jElement.data('alphaTab');
        if (method === 'destroy' && !context) {
            return null;
        }
        if (method !== 'init' && !context) {
            throw new Error('alphaTab not initialized');
        }
        let apiMethod = this[method];
        if (apiMethod) {
            let realArgs = [jElement, context].concat(args);
            return apiMethod.apply(this, realArgs);
        }
        else {
            Logger.error('Api', "Method '" + method + "' does not exist on jQuery.alphaTab");
            return null;
        }
    }
    init(element, context, options) {
        if (!context) {
            context = new AlphaTabApi(element[0], options);
            element.data('alphaTab', context);
            for (let listener of this._initListeners) {
                listener(element, context, options);
            }
        }
    }
    destroy(element, context) {
        element.removeData('alphaTab');
        context.destroy();
    }
    print(element, context, width, additionalSettings) {
        context.print(width, additionalSettings);
    }
    load(element, context, data, tracks) {
        return context.load(data, tracks);
    }
    render(element, context) {
        context.render();
    }
    renderScore(element, context, score, tracks) {
        context.renderScore(score, tracks);
    }
    renderTracks(element, context, tracks) {
        context.renderTracks(tracks);
    }
    invalidate(element, context) {
        context.render();
    }
    tex(element, context, tex, tracks) {
        context.tex(tex, tracks);
    }
    muteTrack(element, context, tracks, mute) {
        context.changeTrackMute(tracks, mute);
    }
    soloTrack(element, context, tracks, solo) {
        context.changeTrackSolo(tracks, solo);
    }
    trackVolume(element, context, tracks, volume) {
        context.changeTrackVolume(tracks, volume);
    }
    loadSoundFont(element, context, value, append) {
        context.loadSoundFont(value, append);
    }
    resetSoundFonts(element, context) {
        context.resetSoundFonts();
    }
    pause(element, context) {
        context.pause();
    }
    play(element, context) {
        return context.play();
    }
    playPause(element, context) {
        context.playPause();
    }
    stop(element, context) {
        context.stop();
    }
    api(element, context) {
        return context;
    }
    player(element, context) {
        return context.player;
    }
    isReadyForPlayback(element, context) {
        return context.isReadyForPlayback;
    }
    playerState(element, context) {
        return context.playerState;
    }
    masterVolume(element, context, masterVolume) {
        if (typeof masterVolume === 'number') {
            context.masterVolume = masterVolume;
        }
        return context.masterVolume;
    }
    metronomeVolume(element, context, metronomeVolume) {
        if (typeof metronomeVolume === 'number') {
            context.metronomeVolume = metronomeVolume;
        }
        return context.metronomeVolume;
    }
    countInVolume(element, context, countInVolume) {
        if (typeof countInVolume === 'number') {
            context.countInVolume = countInVolume;
        }
        return context.countInVolume;
    }
    midiEventsPlayedFilter(element, context, midiEventsPlayedFilter) {
        if (Array.isArray(midiEventsPlayedFilter)) {
            context.midiEventsPlayedFilter = midiEventsPlayedFilter;
        }
        return context.midiEventsPlayedFilter;
    }
    playbackSpeed(element, context, playbackSpeed) {
        if (typeof playbackSpeed === 'number') {
            context.playbackSpeed = playbackSpeed;
        }
        return context.playbackSpeed;
    }
    tickPosition(element, context, tickPosition) {
        if (typeof tickPosition === 'number') {
            context.tickPosition = tickPosition;
        }
        return context.tickPosition;
    }
    timePosition(element, context, timePosition) {
        if (typeof timePosition === 'number') {
            context.timePosition = timePosition;
        }
        return context.timePosition;
    }
    loop(element, context, loop) {
        if (typeof loop === 'boolean') {
            context.isLooping = loop;
        }
        return context.isLooping;
    }
    renderer(element, context) {
        return context.renderer;
    }
    score(element, context) {
        return context.score;
    }
    settings(element, context) {
        return context.settings;
    }
    tracks(element, context) {
        return context.tracks;
    }
    _oninit(listener) {
        this._initListeners.push(listener);
    }
    static restore(selector) {
        new jQuery(selector).empty().removeData('alphaTab');
    }
}

/**
 * A canvas implementation storing SVG data
 */
class SvgCanvas {
    constructor() {
        this.buffer = '';
        this._currentPath = '';
        this._currentPathIsEmpty = true;
        this.color = new Color(255, 255, 255, 0xff);
        this.lineWidth = 1;
        this.font = new Font('Arial', 10, FontStyle.Plain);
        this.textAlign = TextAlign.Left;
        this.textBaseline = TextBaseline.Top;
    }
    beginRender(width, height) {
        this.buffer = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="${width | 0}px" height="${height | 0}px" class="at-surface-svg">\n`;
        this._currentPath = '';
        this._currentPathIsEmpty = true;
        this.textBaseline = TextBaseline.Top;
    }
    beginGroup(identifier) {
        this.buffer += `<g class="${identifier}">`;
    }
    endGroup() {
        this.buffer += '</g>';
    }
    endRender() {
        this.buffer += '</svg>';
        return this.buffer;
    }
    fillRect(x, y, w, h) {
        if (w > 0) {
            this.buffer += `<rect x="${x | 0}" y="${y | 0}" width="${w}" height="${h}" fill="${this.color.rgba}" />\n`;
        }
    }
    strokeRect(x, y, w, h) {
        this.buffer += `<rect x="${x | 0}" y="${y | 0}" width="${w}" height="${h}" stroke="${this.color.rgba}"`;
        if (this.lineWidth !== 1) {
            this.buffer += ` stroke-width="${this.lineWidth}"`;
        }
        this.buffer += ' fill="transparent" />\n';
    }
    beginPath() {
        // nothing to do
    }
    closePath() {
        this._currentPath += ' z';
    }
    moveTo(x, y) {
        this._currentPath += ` M${x},${y}`;
    }
    lineTo(x, y) {
        this._currentPathIsEmpty = false;
        this._currentPath += ` L${x},${y}`;
    }
    quadraticCurveTo(cpx, cpy, x, y) {
        this._currentPathIsEmpty = false;
        this._currentPath += ` Q${cpx},${cpy},${x},${y}`;
    }
    bezierCurveTo(cp1X, cp1Y, cp2X, cp2Y, x, y) {
        this._currentPathIsEmpty = false;
        this._currentPath += ` C${cp1X},${cp1Y},${cp2X},${cp2Y},${x},${y}`;
    }
    fillCircle(x, y, radius) {
        this._currentPathIsEmpty = false;
        //
        // M0,250 A1,1 0 0,0 500,250 A1,1 0 0,0 0,250 z
        this._currentPath += ` M${x - radius},${y} A1,1 0 0,0 ${x + radius},${y} A1,1 0 0,0 ${x - radius},${y} z`;
        this.fill();
    }
    strokeCircle(x, y, radius) {
        this._currentPathIsEmpty = false;
        //
        // M0,250 A1,1 0 0,0 500,250 A1,1 0 0,0 0,250 z
        this._currentPath += ` M${x - radius},${y} A1,1 0 0,0 ${x + radius},${y} A1,1 0 0,0 ${x - radius},${y} z`;
        this.stroke();
    }
    fill() {
        if (!this._currentPathIsEmpty) {
            this.buffer += `<path d="${this._currentPath}"`;
            if (this.color.rgba !== '#000000') {
                this.buffer += ` fill="${this.color.rgba}"`;
            }
            this.buffer += ' style="stroke: none"/>';
        }
        this._currentPath = '';
        this._currentPathIsEmpty = true;
    }
    stroke() {
        if (!this._currentPathIsEmpty) {
            let s = `<path d="${this._currentPath}" stroke="${this.color.rgba}"`;
            if (this.lineWidth !== 1) {
                s += ` stroke-width="${this.lineWidth}"`;
            }
            s += ' style="fill: none" />';
            this.buffer += s;
        }
        this._currentPath = '';
        this._currentPathIsEmpty = true;
    }
    fillText(text, x, y) {
        if (text === '') {
            return;
        }
        let s = `<text x="${x | 0}" y="${y | 0}" style="stroke: none; font:${this.font.toCssString(this.settings.display.scale)}" ${this.getSvgBaseLine()}`;
        if (this.color.rgba !== '#000000') {
            s += ` fill="${this.color.rgba}"`;
        }
        if (this.textAlign !== TextAlign.Left) {
            s += ` text-anchor="${this.getSvgTextAlignment(this.textAlign)}"`;
        }
        s += `>${SvgCanvas.escapeText(text)}</text>`;
        this.buffer += s;
    }
    static escapeText(text) {
        return text
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
    getSvgTextAlignment(textAlign) {
        switch (textAlign) {
            case TextAlign.Left:
                return 'start';
            case TextAlign.Center:
                return 'middle';
            case TextAlign.Right:
                return 'end';
        }
        return '';
    }
    getSvgBaseLine() {
        switch (this.textBaseline) {
            case TextBaseline.Top:
                return `dominant-baseline="hanging"`;
            case TextBaseline.Bottom:
                return `dominant-baseline="bottom"`;
            // case TextBaseline.Middle:
            default:
                // middle is set as default on the SVG tag via css
                return '';
        }
    }
    measureText(text) {
        if (!text) {
            return 0;
        }
        return FontSizes.measureString(text, this.font.families, this.font.size, this.font.style, this.font.weight);
    }
    onRenderFinished() {
        // nothing to do
        return null;
    }
    beginRotate(centerX, centerY, angle) {
        this.buffer += '<g transform="translate(' + centerX + ' ,' + centerY + ') rotate( ' + angle + ')">';
    }
    endRotate() {
        this.buffer += '</g>';
    }
}

/**
 * This SVG canvas renders the music symbols by adding a CSS class 'at' to all elements.
 */
class CssFontSvgCanvas extends SvgCanvas {
    constructor() {
        super();
    }
    fillMusicFontSymbol(x, y, scale, symbol, centerAtPosition) {
        if (symbol === MusicFontSymbol.None) {
            return;
        }
        this.fillMusicFontSymbolText(x, y, scale, `&#${symbol};`, centerAtPosition);
    }
    fillMusicFontSymbols(x, y, scale, symbols, centerAtPosition) {
        let s = '';
        for (let symbol of symbols) {
            if (symbol !== MusicFontSymbol.None) {
                s += `&#${symbol};`;
            }
        }
        this.fillMusicFontSymbolText(x, y, scale, s, centerAtPosition);
    }
    fillMusicFontSymbolText(x, y, scale, symbols, centerAtPosition) {
        this.buffer += `<g transform="translate(${x} ${y})" class="at" ><text`;
        if (scale !== 1) {
            this.buffer += ` style="font-size: ${scale * 100}%; stroke:none"`;
        }
        else {
            this.buffer += ' style="stroke:none"';
        }
        if (this.color.rgba !== '#000000') {
            this.buffer += ` fill="${this.color.rgba}"`;
        }
        if (centerAtPosition) {
            this.buffer += ' text-anchor="' + this.getSvgTextAlignment(TextAlign.Center) + '"';
        }
        this.buffer += `>${symbols}</text></g>`;
    }
}

/**
 * This is the base public class for creating factories providing BarRenderers
 */
class BarRendererFactory {
    constructor() {
        this.isInAccolade = true;
        this.isRelevantForBoundsLookup = true;
        this.hideOnMultiTrack = false;
        this.hideOnPercussionTrack = false;
    }
    canCreate(track, staff) {
        return !this.hideOnPercussionTrack || !staff.isPercussion;
    }
}

/**
 * Lists the different position modes for {@link BarRendererBase.getBeatX}
 */
var BeatXPosition;
(function (BeatXPosition) {
    /**
     * Gets the pre-notes position which is located before the accidentals
     */
    BeatXPosition[BeatXPosition["PreNotes"] = 0] = "PreNotes";
    /**
     * Gets the on-notes position which is located after the accidentals but before the note heads.
     */
    BeatXPosition[BeatXPosition["OnNotes"] = 1] = "OnNotes";
    /**
     * Gets the middle-notes position which is located after in the middle the note heads.
     */
    BeatXPosition[BeatXPosition["MiddleNotes"] = 2] = "MiddleNotes";
    /**
     * Gets position of the stem for this beat
     */
    BeatXPosition[BeatXPosition["Stem"] = 3] = "Stem";
    /**
     * Get the post-notes position which is located at after the note heads.
     */
    BeatXPosition[BeatXPosition["PostNotes"] = 4] = "PostNotes";
    /**
     * Get the end-beat position which is located at the end of the beat. This position is almost
     * equal to the pre-notes position of the next beat.
     */
    BeatXPosition[BeatXPosition["EndBeat"] = 5] = "EndBeat";
})(BeatXPosition || (BeatXPosition = {}));

/**
 * This glyph allows to group several other glyphs to be
 * drawn at the same x position
 */
class GlyphGroup extends Glyph {
    constructor(x, y) {
        super(x, y);
        this.glyphs = null;
    }
    get isEmpty() {
        return !this.glyphs || this.glyphs.length === 0;
    }
    doLayout() {
        if (!this.glyphs || this.glyphs.length === 0) {
            this.width = 0;
            return;
        }
        let w = 0;
        for (let i = 0, j = this.glyphs.length; i < j; i++) {
            let g = this.glyphs[i];
            g.renderer = this.renderer;
            g.doLayout();
            w = Math.max(w, g.width);
        }
        this.width = w;
    }
    addGlyph(g) {
        if (!this.glyphs) {
            this.glyphs = [];
        }
        if (this.renderer) {
            g.renderer = this.renderer;
        }
        this.glyphs.push(g);
    }
    paint(cx, cy, canvas) {
        let glyphs = this.glyphs;
        if (!glyphs || glyphs.length === 0) {
            return;
        }
        for (let g of glyphs) {
            g.paint(cx + this.x, cy + this.y, canvas);
        }
    }
}

class LeftToRightLayoutingGlyphGroup extends GlyphGroup {
    constructor() {
        super(0, 0);
        this.glyphs = [];
    }
    addGlyph(g) {
        g.x =
            this.glyphs.length === 0
                ? 0
                : this.glyphs[this.glyphs.length - 1].x + this.glyphs[this.glyphs.length - 1].width;
        g.renderer = this.renderer;
        g.doLayout();
        this.width = g.x + g.width;
        super.addGlyph(g);
    }
}

/**
 * This glyph acts as container for handling
 * multiple voice rendering
 */
class VoiceContainerGlyph extends GlyphGroup {
    constructor(x, y, voice) {
        super(x, y);
        this.voice = voice;
        this.beatGlyphs = [];
        this.tupletGroups = [];
    }
    scaleToWidth(width) {
        const scale = this.renderer.scale;
        let force = this.renderer.layoutingInfo.spaceToForce(width / scale);
        this.scaleToForce(force);
    }
    scaleToForce(force) {
        const scale = this.renderer.scale;
        this.width = this.renderer.layoutingInfo.calculateVoiceWidth(force) * scale;
        let positions = this.renderer.layoutingInfo.buildOnTimePositions(force);
        let beatGlyphs = this.beatGlyphs;
        for (let i = 0, j = beatGlyphs.length; i < j; i++) {
            let currentBeatGlyph = beatGlyphs[i];
            switch (currentBeatGlyph.beat.graceType) {
                case GraceType.None:
                    currentBeatGlyph.x = positions.get(currentBeatGlyph.beat.absoluteDisplayStart) * scale - currentBeatGlyph.onTimeX;
                    break;
                default:
                    const graceDisplayStart = currentBeatGlyph.beat.graceGroup.beats[0].absoluteDisplayStart;
                    const graceGroupId = currentBeatGlyph.beat.graceGroup.id;
                    // placement for proper grace notes which have a following note
                    if (currentBeatGlyph.beat.graceGroup.isComplete && positions.has(graceDisplayStart)) {
                        currentBeatGlyph.x = positions.get(graceDisplayStart) * scale - currentBeatGlyph.onTimeX;
                        let graceSprings = this.renderer.layoutingInfo.allGraceRods.get(graceGroupId);
                        let graceTargetPreBeat = this.renderer.layoutingInfo.springs.get(graceDisplayStart).preBeatWidth;
                        // move right in front to the note
                        currentBeatGlyph.x -= graceTargetPreBeat;
                        // respect the post beat width of the grace note
                        currentBeatGlyph.x -= graceSprings[currentBeatGlyph.beat.graceIndex].postSpringWidth;
                        // shift to right position of the particular grace note
                        currentBeatGlyph.x += graceSprings[currentBeatGlyph.beat.graceIndex].graceBeatWidth;
                        // move the whole group again forward for cases where another track has e.g. 3 beats and here we have only 2. 
                        // so we shift the whole group of this voice to stick to the end of the group.
                        const lastGraceSpring = graceSprings[currentBeatGlyph.beat.graceGroup.beats.length - 1];
                        currentBeatGlyph.x -= lastGraceSpring.graceBeatWidth;
                    }
                    else {
                        // placement for improper grace beats where no beat in the same bar follows
                        let graceSpring = this.renderer.layoutingInfo.incompleteGraceRods.get(graceGroupId);
                        const relativeOffset = graceSpring[currentBeatGlyph.beat.graceIndex].postSpringWidth
                            - graceSpring[currentBeatGlyph.beat.graceIndex].preSpringWidth;
                        if (i > 0) {
                            if (currentBeatGlyph.beat.graceIndex === 0) {
                                // we place the grace beat directly after the previous one
                                // otherwise this causes flickers on resizing 
                                currentBeatGlyph.x = beatGlyphs[i - 1].x + beatGlyphs[i - 1].width;
                            }
                            else {
                                // for the multiple grace glyphs we take the width of the grace rod
                                // this width setting is aligned with the positioning logic below
                                currentBeatGlyph.x = beatGlyphs[i - 1].x
                                    + graceSpring[currentBeatGlyph.beat.graceIndex - 1].postSpringWidth
                                    - graceSpring[currentBeatGlyph.beat.graceIndex - 1].preSpringWidth
                                    - relativeOffset;
                            }
                        }
                        else {
                            currentBeatGlyph.x = -relativeOffset;
                        }
                    }
                    break;
            }
            // size always previous glyph after we know the position
            // of the next glyph
            if (i > 0) {
                let beatWidth = currentBeatGlyph.x - beatGlyphs[i - 1].x;
                beatGlyphs[i - 1].scaleToWidth(beatWidth);
            }
            // for the last glyph size based on the full width
            if (i === j - 1) {
                let beatWidth = this.width - beatGlyphs[beatGlyphs.length - 1].x;
                currentBeatGlyph.scaleToWidth(beatWidth);
            }
        }
    }
    registerLayoutingInfo(info) {
        info.updateVoiceSize(this.width);
        let beatGlyphs = this.beatGlyphs;
        for (let b of beatGlyphs) {
            b.registerLayoutingInfo(info);
        }
    }
    applyLayoutingInfo(info) {
        let beatGlyphs = this.beatGlyphs;
        for (let b of beatGlyphs) {
            b.applyLayoutingInfo(info);
        }
        this.scaleToForce(Math.max(this.renderer.settings.display.stretchForce, info.minStretchForce));
    }
    addGlyph(g) {
        let bg = g;
        g.x =
            this.beatGlyphs.length === 0
                ? 0
                : this.beatGlyphs[this.beatGlyphs.length - 1].x + this.beatGlyphs[this.beatGlyphs.length - 1].width;
        g.renderer = this.renderer;
        g.doLayout();
        this.beatGlyphs.push(bg);
        this.width = g.x + g.width;
        if (bg.beat.hasTuplet && bg.beat.tupletGroup.beats[0].id === bg.beat.id) {
            this.tupletGroups.push(bg.beat.tupletGroup);
        }
    }
    doLayout() {
    }
    paint(cx, cy, canvas) {
        // canvas.color = Color.random();
        // canvas.strokeRect(cx + this.x, cy + this.y, this.width, this.renderer.height);
        canvas.color =
            this.voice.index === 0
                ? this.renderer.resources.mainGlyphColor
                : this.renderer.resources.secondaryGlyphColor;
        for (let i = 0, j = this.beatGlyphs.length; i < j; i++) {
            this.beatGlyphs[i].paint(cx + this.x, cy + this.y, canvas);
        }
    }
}
VoiceContainerGlyph.KeySizeBeat = 'Beat';

/**
 * Defines all possible accidentals for notes.
 */
var AccidentalType;
(function (AccidentalType) {
    /**
     * No accidental
     */
    AccidentalType[AccidentalType["None"] = 0] = "None";
    /**
     * Naturalize
     */
    AccidentalType[AccidentalType["Natural"] = 1] = "Natural";
    /**
     * Sharp
     */
    AccidentalType[AccidentalType["Sharp"] = 2] = "Sharp";
    /**
     * Flat
     */
    AccidentalType[AccidentalType["Flat"] = 3] = "Flat";
    /**
     * Natural for smear bends
     */
    AccidentalType[AccidentalType["NaturalQuarterNoteUp"] = 4] = "NaturalQuarterNoteUp";
    /**
     * Sharp for smear bends
     */
    AccidentalType[AccidentalType["SharpQuarterNoteUp"] = 5] = "SharpQuarterNoteUp";
    /**
     * Flat for smear bends
     */
    AccidentalType[AccidentalType["FlatQuarterNoteUp"] = 6] = "FlatQuarterNoteUp";
    /**
     * Double Sharp, indicated by an 'x'
     */
    AccidentalType[AccidentalType["DoubleSharp"] = 7] = "DoubleSharp";
    /**
     * Double Flat, indicated by 'bb'
     */
    AccidentalType[AccidentalType["DoubleFlat"] = 8] = "DoubleFlat";
})(AccidentalType || (AccidentalType = {}));

class BeatLines {
    constructor() {
        this.maxLine = -1000;
        this.minLine = -1000;
    }
}
/**
 * This small utilty public class allows the assignment of accidentals within a
 * desired scope.
 */
class AccidentalHelper {
    constructor(barRenderer) {
        this._registeredAccidentals = new Map();
        this._appliedScoreLines = new Map();
        this._appliedScoreLinesByValue = new Map();
        this._notesByValue = new Map();
        this._beatLines = new Map();
        /**
         * The beat on which the highest note of this helper was added.
         * Used together with beaming helper to calculate overflow.
         */
        this.maxLineBeat = null;
        /**
         * The beat on which the lowest note of this helper was added.
         * Used together with beaming helper to calculate overflow.
         */
        this.minLineBeat = null;
        /**
         * The line of the highest note added to this helper.
         */
        this.maxLine = -1000;
        /**
         * The line of the lowest note added to this helper.
         */
        this.minLine = -1000;
        this._barRenderer = barRenderer;
        this._bar = barRenderer.bar;
    }
    static getPercussionLine(bar, noteValue) {
        var _a, _b;
        if (noteValue < bar.staff.track.percussionArticulations.length) {
            return bar.staff.track.percussionArticulations[noteValue].staffLine;
        }
        else {
            return (_b = (_a = PercussionMapper.getArticulationByValue(noteValue)) === null || _a === void 0 ? void 0 : _a.staffLine) !== null && _b !== void 0 ? _b : 0;
        }
    }
    static getNoteValue(note) {
        if (note.isPercussion) {
            return note.percussionArticulation;
        }
        let noteValue = note.displayValue;
        // adjust note height according to accidentals enforced
        switch (note.accidentalMode) {
            case NoteAccidentalMode.ForceDoubleFlat:
                noteValue += 2;
                break;
            case NoteAccidentalMode.ForceDoubleSharp:
                noteValue -= 2;
                break;
            case NoteAccidentalMode.ForceFlat:
                noteValue += 1;
                break;
            case NoteAccidentalMode.ForceSharp:
                noteValue -= 1;
                break;
        }
        return noteValue;
    }
    /**
     * Calculates the accidental for the given note and assignes the value to it.
     * The new accidental type is also registered within the current scope
     * @param note
     * @returns
     */
    applyAccidental(note) {
        const noteValue = AccidentalHelper.getNoteValue(note);
        let quarterBend = note.hasQuarterToneOffset;
        return this.getAccidental(noteValue, quarterBend, note.beat, false, note);
    }
    /**
     * Calculates the accidental for the given note value and assignes the value to it.
     * The new accidental type is also registered within the current scope
     * @param relatedBeat
     * @param noteValue
     * @param quarterBend
     * @param isHelperNote true if the note registered via this call, is a small helper note (e.g. for bends) or false if it is a main note head (e.g. for harmonics)
     * @returns
     */
    applyAccidentalForValue(relatedBeat, noteValue, quarterBend, isHelperNote) {
        return this.getAccidental(noteValue, quarterBend, relatedBeat, isHelperNote, null);
    }
    static computeLineWithoutAccidentals(bar, note) {
        let line = 0;
        const noteValue = AccidentalHelper.getNoteValue(note);
        if (bar.staff.isPercussion) {
            line = AccidentalHelper.getPercussionLine(bar, noteValue);
        }
        else {
            const accidentalMode = note ? note.accidentalMode : NoteAccidentalMode.Default;
            line = AccidentalHelper.calculateNoteLine(bar, noteValue, accidentalMode);
        }
        return line;
    }
    getAccidental(noteValue, quarterBend, relatedBeat, isHelperNote, note = null) {
        let accidentalToSet = AccidentalType.None;
        let line = 0;
        if (this._bar.staff.isPercussion) {
            line = AccidentalHelper.getPercussionLine(this._bar, noteValue);
        }
        else {
            const accidentalMode = note ? note.accidentalMode : NoteAccidentalMode.Default;
            line = AccidentalHelper.calculateNoteLine(this._bar, noteValue, accidentalMode);
            let ks = this._bar.masterBar.keySignature;
            let ksi = ks + 7;
            let index = noteValue % 12;
            let accidentalForKeySignature = ksi < 7 ? AccidentalType.Flat : AccidentalType.Sharp;
            let hasKeySignatureAccidentalSetForNote = AccidentalHelper.KeySignatureLookup[ksi][index];
            let hasNoteAccidentalWithinOctave = AccidentalHelper.AccidentalNotes[index];
            // the general logic is like this:
            // - we check if the key signature has an accidental defined
            // - we calculate which accidental a note needs according to its index in the octave
            // - if the accidental is already placed at this line, nothing needs to be done, otherwise we place it
            // - if there should not be an accidental, but there is one in the key signature, we clear it.
            // the exceptions are:
            // - for quarter bends we just place the corresponding accidental
            // - the accidental mode can enforce the accidentals for the note
            if (quarterBend) {
                accidentalToSet = hasNoteAccidentalWithinOctave ? accidentalForKeySignature : AccidentalType.Natural;
                switch (accidentalToSet) {
                    case AccidentalType.Natural:
                        accidentalToSet = AccidentalType.NaturalQuarterNoteUp;
                        break;
                    case AccidentalType.Sharp:
                        accidentalToSet = AccidentalType.SharpQuarterNoteUp;
                        break;
                    case AccidentalType.Flat:
                        accidentalToSet = AccidentalType.FlatQuarterNoteUp;
                        break;
                }
            }
            else {
                // define which accidental should be shown ignoring what might be set on the KS already
                switch (accidentalMode) {
                    case NoteAccidentalMode.ForceSharp:
                        accidentalToSet = AccidentalType.Sharp;
                        break;
                    case NoteAccidentalMode.ForceDoubleSharp:
                        accidentalToSet = AccidentalType.DoubleSharp;
                        break;
                    case NoteAccidentalMode.ForceFlat:
                        accidentalToSet = AccidentalType.Flat;
                        break;
                    case NoteAccidentalMode.ForceDoubleFlat:
                        accidentalToSet = AccidentalType.DoubleFlat;
                        break;
                    default:
                        // if note has an accidental in the octave, we place a symbol
                        // according to the Key Signature
                        if (hasNoteAccidentalWithinOctave) {
                            accidentalToSet = accidentalForKeySignature;
                        }
                        else if (hasKeySignatureAccidentalSetForNote) {
                            // note does not get an accidental, but KS defines one -> Naturalize
                            accidentalToSet = AccidentalType.Natural;
                        }
                        break;
                }
                // Issue #472: Tied notes across bars do not show the accidentals but also 
                // do not register them. 
                // https://ultimatemusictheory.com/tied-notes-with-accidentals/
                let skipAccidental = false;
                if (note && note.isTieDestination && note.beat.index === 0) {
                    // candidate for skip, check further if start note is on the same line
                    const previousRenderer = this._barRenderer.previousRenderer;
                    if (previousRenderer) {
                        const tieOriginLine = previousRenderer.accidentalHelper.getNoteLine(note.tieOrigin);
                        if (tieOriginLine === line) {
                            skipAccidental = true;
                        }
                    }
                }
                if (skipAccidental) {
                    accidentalToSet = AccidentalType.None;
                }
                else {
                    // do we need an accidental on the note?
                    if (accidentalToSet !== AccidentalType.None) {
                        // if we already have an accidental on this line we will reset it if it's the same
                        if (this._registeredAccidentals.has(line)) {
                            if (this._registeredAccidentals.get(line) === accidentalToSet) {
                                accidentalToSet = AccidentalType.None;
                            }
                        }
                        // if there is no accidental on the line, and the key signature has it set already, we clear it on the note
                        else if (hasKeySignatureAccidentalSetForNote && accidentalToSet === accidentalForKeySignature) {
                            accidentalToSet = AccidentalType.None;
                        }
                        // register the new accidental on the line if any.
                        if (accidentalToSet !== AccidentalType.None) {
                            this._registeredAccidentals.set(line, accidentalToSet);
                        }
                    }
                    else {
                        // if we don't want an accidental, but there is already one applied, we place a naturalize accidental
                        // and clear the registration
                        if (this._registeredAccidentals.has(line)) {
                            // if there is already a naturalize symbol on the line, we don't care.
                            if (this._registeredAccidentals.get(line) === AccidentalType.Natural) {
                                accidentalToSet = AccidentalType.None;
                            }
                            else {
                                accidentalToSet = AccidentalType.Natural;
                                this._registeredAccidentals.set(line, accidentalToSet);
                            }
                        }
                        else {
                            this._registeredAccidentals.delete(line);
                        }
                    }
                }
            }
        }
        if (note) {
            this._appliedScoreLines.set(note.id, line);
            this._notesByValue.set(noteValue, note);
        }
        else {
            this._appliedScoreLinesByValue.set(noteValue, line);
        }
        if (this.minLine === -1000 || this.minLine < line) {
            this.minLine = line;
            this.minLineBeat = relatedBeat;
        }
        if (this.maxLine === -1000 || this.maxLine > line) {
            this.maxLine = line;
            this.maxLineBeat = relatedBeat;
        }
        if (!isHelperNote) {
            this.registerLine(relatedBeat, line);
        }
        return accidentalToSet;
    }
    registerLine(relatedBeat, line) {
        let lines;
        if (this._beatLines.has(relatedBeat.id)) {
            lines = this._beatLines.get(relatedBeat.id);
        }
        else {
            lines = new BeatLines();
            this._beatLines.set(relatedBeat.id, lines);
        }
        if (lines.minLine === -1000 || line < lines.minLine) {
            lines.minLine = line;
        }
        if (lines.minLine === -1000 || line > lines.maxLine) {
            lines.maxLine = line;
        }
    }
    getMaxLine(b) {
        return this._beatLines.has(b.id)
            ? this._beatLines.get(b.id).maxLine
            : 0;
    }
    getMinLine(b) {
        return this._beatLines.has(b.id)
            ? this._beatLines.get(b.id).minLine
            : 0;
    }
    static calculateNoteLine(bar, noteValue, mode) {
        let value = noteValue;
        let ks = bar.masterBar.keySignature;
        let clef = bar.clef;
        let index = value % 12;
        let octave = ((value / 12) | 0) - 1;
        // Initial Position
        let steps = AccidentalHelper.OctaveSteps[clef];
        // Move to Octave
        steps -= octave * AccidentalHelper.StepsPerOctave;
        // get the step list for the current keySignature
        let stepList = ModelUtils.keySignatureIsSharp(ks) || ModelUtils.keySignatureIsNatural(ks)
            ? AccidentalHelper.SharpNoteSteps
            : AccidentalHelper.FlatNoteSteps;
        // Add offset for note itself
        // switch (mode) {
        //     default:
        //         // normal behavior: simply use the position where
        //         // the keysignature defines the position
        //         break;
        // }
        steps -= stepList[index];
        return steps;
    }
    getNoteLine(n) {
        return this._appliedScoreLines.get(n.id);
    }
    getNoteLineForValue(rawValue, searchForNote = false) {
        if (this._appliedScoreLinesByValue.has(rawValue)) {
            return this._appliedScoreLinesByValue.get(rawValue);
        }
        if (searchForNote && this._notesByValue.has(rawValue)) {
            return this.getNoteLine(this._notesByValue.get(rawValue));
        }
        return 0;
    }
}
/**
 * a lookup list containing an info whether the notes within an octave
 * need an accidental rendered. the accidental symbol is determined based on the type of key signature.
 */
AccidentalHelper.KeySignatureLookup = [
    // Flats (where the value is true, a flat accidental is required for the notes)
    [true, true, true, true, true, true, true, true, true, true, true, true],
    [true, true, true, true, true, false, true, true, true, true, true, true],
    [false, true, true, true, true, false, true, true, true, true, true, true],
    [false, true, true, true, true, false, false, false, true, true, true, true],
    [false, false, false, true, true, false, false, false, true, true, true, true],
    [false, false, false, true, true, false, false, false, false, false, true, true],
    [false, false, false, false, false, false, false, false, false, false, true, true],
    // natural
    [false, false, false, false, false, false, false, false, false, false, false, false],
    // sharps  (where the value is true, a flat accidental is required for the notes)
    [false, false, false, false, false, true, true, false, false, false, false, false],
    [true, true, false, false, false, true, true, false, false, false, false, false],
    [true, true, false, false, false, true, true, true, true, false, false, false],
    [true, true, true, true, false, true, true, true, true, false, false, false],
    [true, true, true, true, false, true, true, true, true, true, true, false],
    [true, true, true, true, true, true, true, true, true, true, true, false],
    [true, true, true, true, true, true, true, true, true, true, true, true]
];
/**
 * Contains the list of notes within an octave have accidentals set.
 */
// prettier-ignore
AccidentalHelper.AccidentalNotes = [
    false, true, false, true, false, false, true, false, true, false, true, false
];
/**
 * We always have 7 steps per octave.
 * (by a step the offsets inbetween score lines is meant,
 *      0 steps is on the first line (counting from top)
 *      1 steps is on the space inbetween the first and the second line
 */
AccidentalHelper.StepsPerOctave = 7;
/**
 * Those are the amount of steps for the different clefs in case of a note value 0
 * [Neutral, C3, C4, F4, G2]
 */
AccidentalHelper.OctaveSteps = [38, 32, 30, 26, 38];
/**
 * The step offsets of the notes within an octave in case of for sharp keysignatures
 */
AccidentalHelper.SharpNoteSteps = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];
/**
 * The step offsets of the notes within an octave in case of for flat keysignatures
 */
AccidentalHelper.FlatNoteSteps = [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6];

class BeatLinePositions {
    constructor() {
        this.staffId = '';
        this.up = 0;
        this.down = 0;
    }
}
class BeamingHelperDrawInfo {
    constructor() {
        this.startBeat = null;
        this.startX = 0;
        this.startY = 0;
        this.endBeat = null;
        this.endX = 0;
        this.endY = 0;
    }
    // 
    /**
     * calculates the Y-position given a X-pos using the current start end point
     * @param x
     */
    calcY(x) {
        // get the y position of the given beat on this curve
        if (this.startX === this.endX) {
            return this.startY;
        }
        // y(x)  = ( (y2 - y1) / (x2 - x1) )  * (x - x1) + y1;
        return ((this.endY - this.startY) / (this.endX - this.startX)) * (x - this.startX) + this.startY;
    }
}
/**
 * This public class helps drawing beams and bars for notes.
 */
class BeamingHelper {
    constructor(staff, renderer) {
        this._beatLineXPositions = new Map();
        this._firstNonRestBeat = null;
        this._lastNonRestBeat = null;
        this.voice = null;
        this.beats = [];
        this.shortestDuration = Duration.QuadrupleWhole;
        /**
         * the number of fingering indicators that will be drawn
         */
        this.fingeringCount = 0;
        /**
         * an indicator whether any beat has a tuplet on it.
         */
        this.hasTuplet = false;
        this._firstBeatLowestNoteCompareValue = -1;
        this._firstBeatHighestNoteCompareValue = -1;
        this._lastBeatLowestNoteCompareValue = -1;
        this._lastBeatHighestNoteCompareValue = -1;
        this.lowestNoteInHelper = null;
        this._lowestNoteCompareValueInHelper = -1;
        this.highestNoteInHelper = null;
        this._highestNoteCompareValueInHelper = -1;
        this.invertBeamDirection = false;
        this.preferredBeamDirection = null;
        this.isGrace = false;
        this.minRestLine = null;
        this.beatOfMinRestLine = null;
        this.maxRestLine = null;
        this.beatOfMaxRestLine = null;
        this.direction = BeamDirection.Up;
        this.drawingInfos = new Map();
        this._staff = staff;
        this._renderer = renderer;
        this.beats = [];
    }
    get isRestBeamHelper() {
        return this.beats.length === 1 && this.beats[0].isRest;
    }
    get hasLine() {
        return this.beats.length === 1 && this.beats[0].duration > Duration.Whole;
    }
    get hasFlag() {
        return (this.beats.length === 1 &&
            !this.beats[0].isRest &&
            (this.beats[0].duration > Duration.Quarter || this.beats[0].graceType !== GraceType.None));
    }
    getBeatLineX(beat) {
        if (this.hasBeatLineX(beat)) {
            if (this.direction === BeamDirection.Up) {
                return this._beatLineXPositions.get(beat.index).up;
            }
            return this._beatLineXPositions.get(beat.index).down;
        }
        return 0;
    }
    hasBeatLineX(beat) {
        return this._beatLineXPositions.has(beat.index);
    }
    registerBeatLineX(staffId, beat, up, down) {
        let positions = this.getOrCreateBeatPositions(beat);
        positions.staffId = staffId;
        positions.up = up;
        positions.down = down;
        for (const v of this.drawingInfos.values()) {
            if (v.startBeat == beat) {
                v.startX = this.getBeatLineX(beat);
            }
            else if (v.endBeat == beat) {
                v.endX = this.getBeatLineX(beat);
            }
        }
    }
    getOrCreateBeatPositions(beat) {
        if (!this._beatLineXPositions.has(beat.index)) {
            this._beatLineXPositions.set(beat.index, new BeatLinePositions());
        }
        return this._beatLineXPositions.get(beat.index);
    }
    finish() {
        this.direction = this.calculateDirection();
    }
    calculateDirection() {
        let direction = null;
        if (!this.voice) {
            // no proper voice (should not happen usually)
            direction = BeamDirection.Up;
        }
        else if (this.preferredBeamDirection !== null) {
            // we have a preferred direction
            direction = this.preferredBeamDirection;
        }
        else if (this.voice.index > 0) {
            // on multi-voice setups secondary voices are always down
            direction = this.invert(BeamDirection.Down);
        }
        else if (this.voice.bar.isMultiVoice) {
            // on multi-voice setups primary voices are always up
            direction = this.invert(BeamDirection.Up);
        }
        else if (this.beats[0].graceType !== GraceType.None) {
            // grace notes are always up
            direction = this.invert(BeamDirection.Up);
        }
        // the average line is used for determination
        //      key lowerequal than middle line -> up
        //      key higher than middle line -> down
        if (this.highestNoteInHelper && this.lowestNoteInHelper) {
            let highestNotePosition = this._renderer.getNoteY(this.highestNoteInHelper, NoteYPosition.Center);
            let lowestNotePosition = this._renderer.getNoteY(this.lowestNoteInHelper, NoteYPosition.Center);
            if (direction === null) {
                const avg = (highestNotePosition + lowestNotePosition) / 2;
                direction = this.invert(this._renderer.middleYPosition < avg ? BeamDirection.Up : BeamDirection.Down);
            }
            this._renderer.completeBeamingHelper(this);
        }
        else {
            direction = this.invert(BeamDirection.Up);
            this._renderer.completeBeamingHelper(this);
        }
        return direction;
    }
    static computeLineHeightsForRest(duration) {
        switch (duration) {
            case Duration.QuadrupleWhole:
                return [2, 2];
            case Duration.DoubleWhole:
                return [2, 2];
            case Duration.Whole:
                return [0, 1];
            case Duration.Half:
                return [1, 0];
            case Duration.Quarter:
                return [3, 3];
            case Duration.Eighth:
                return [2, 2];
            case Duration.Sixteenth:
                return [2, 4];
            case Duration.ThirtySecond:
                return [4, 4];
            case Duration.SixtyFourth:
                return [4, 6];
            case Duration.OneHundredTwentyEighth:
                return [6, 6];
            case Duration.TwoHundredFiftySixth:
                return [6, 8];
        }
        return [0, 0];
    }
    /**
     * Registers a rest beat within the accidental helper so the rest
     * symbol is considered properly during beaming.
     * @param beat The rest beat.
     * @param line The line on which the rest symbol is placed
     */
    applyRest(beat, line) {
        // do not accept rests after the last beat which has notes
        if (this._lastNonRestBeat && beat.index >= this._lastNonRestBeat.index ||
            this._firstNonRestBeat && beat.index <= this._firstNonRestBeat.index) {
            return;
        }
        // correct the line of the glyph to a note which would
        // be placed at the upper / lower end of the glyph.
        let aboveRest = line;
        let belowRest = line;
        const offsets = BeamingHelper.computeLineHeightsForRest(beat.duration);
        aboveRest -= offsets[0];
        belowRest += offsets[1];
        const minRestLine = this.minRestLine;
        const maxRestLine = this.maxRestLine;
        if (minRestLine === null || minRestLine > aboveRest) {
            this.minRestLine = aboveRest;
            this.beatOfMinRestLine = beat;
        }
        if (maxRestLine === null || maxRestLine < belowRest) {
            this.maxRestLine = belowRest;
            this.beatOfMaxRestLine = beat;
        }
    }
    invert(direction) {
        if (!this.invertBeamDirection) {
            return direction;
        }
        switch (direction) {
            case BeamDirection.Down:
                return BeamDirection.Up;
            // case BeamDirection.Up:
            default:
                return BeamDirection.Down;
        }
    }
    checkBeat(beat) {
        if (beat.invertBeamDirection) {
            this.invertBeamDirection = true;
        }
        if (!this.voice) {
            this.voice = beat.voice;
        }
        // allow adding if there are no beats yet
        let add = false;
        if (this.beats.length === 0) {
            add = true;
        }
        else {
            switch (this.beats[this.beats.length - 1].beamingMode) {
                case BeatBeamingMode.Auto:
                    add = BeamingHelper.canJoin(this.beats[this.beats.length - 1], beat);
                    break;
                case BeatBeamingMode.ForceSplitToNext:
                    add = false;
                    break;
                case BeatBeamingMode.ForceMergeWithNext:
                    add = true;
                    break;
            }
        }
        if (add) {
            if (beat.preferredBeamDirection !== null) {
                this.preferredBeamDirection = beat.preferredBeamDirection;
            }
            if (!beat.isRest) {
                if (this.isRestBeamHelper) {
                    this.beats = [];
                }
                this.beats.push(beat);
                if (beat.graceType !== GraceType.None) {
                    this.isGrace = true;
                }
                if (beat.hasTuplet) {
                    this.hasTuplet = true;
                }
                let fingeringCount = 0;
                for (let n = 0; n < beat.notes.length; n++) {
                    let note = beat.notes[n];
                    if (note.leftHandFinger !== Fingers.Unknown || note.rightHandFinger !== Fingers.Unknown) {
                        fingeringCount++;
                    }
                }
                if (fingeringCount > this.fingeringCount) {
                    this.fingeringCount = fingeringCount;
                }
                this.checkNote(beat.minNote);
                this.checkNote(beat.maxNote);
                if (this.shortestDuration < beat.duration) {
                    this.shortestDuration = beat.duration;
                }
                if (!this._firstNonRestBeat) {
                    this._firstNonRestBeat = beat;
                }
                this._lastNonRestBeat = beat;
            }
            else if (this.beats.length === 0) {
                this.beats.push(beat);
            }
            if (beat.hasTuplet) {
                this.hasTuplet = true;
            }
        }
        return add;
    }
    checkNote(note) {
        if (!note) {
            return;
        }
        // a note can expand to 2 note heads if it has a harmonic
        let lowestValueForNote;
        let highestValueForNote;
        // For percussion we use the line as value to compare whether it is
        // higher or lower.
        if (this.voice && note.isPercussion) {
            lowestValueForNote = -AccidentalHelper.getPercussionLine(this.voice.bar, AccidentalHelper.getNoteValue(note));
            highestValueForNote = lowestValueForNote;
        }
        else {
            lowestValueForNote = AccidentalHelper.getNoteValue(note);
            highestValueForNote = lowestValueForNote;
            if (note.harmonicType !== HarmonicType.None && note.harmonicType !== HarmonicType.Natural) {
                highestValueForNote = note.realValue - this._staff.displayTranspositionPitch;
            }
        }
        if (this.beats.length === 1 && this.beats[0] === note.beat) {
            if (this._firstBeatLowestNoteCompareValue === -1 || lowestValueForNote < this._firstBeatLowestNoteCompareValue) {
                this._firstBeatLowestNoteCompareValue = lowestValueForNote;
            }
            if (this._firstBeatHighestNoteCompareValue === -1 || highestValueForNote > this._firstBeatHighestNoteCompareValue) {
                this._firstBeatHighestNoteCompareValue = highestValueForNote;
            }
        }
        if (this._lastBeatLowestNoteCompareValue === -1 || lowestValueForNote < this._lastBeatLowestNoteCompareValue) {
            this._lastBeatLowestNoteCompareValue = lowestValueForNote;
        }
        if (this._lastBeatHighestNoteCompareValue === -1 || highestValueForNote > this._lastBeatHighestNoteCompareValue) {
            this._lastBeatHighestNoteCompareValue = highestValueForNote;
        }
        if (!this.lowestNoteInHelper || lowestValueForNote < this._lowestNoteCompareValueInHelper) {
            this.lowestNoteInHelper = note;
            this._lowestNoteCompareValueInHelper = lowestValueForNote;
        }
        if (!this.highestNoteInHelper || highestValueForNote > this._highestNoteCompareValueInHelper) {
            this.highestNoteInHelper = note;
            this._highestNoteCompareValueInHelper = highestValueForNote;
        }
    }
    // TODO: Check if this beaming is really correct, I'm not sure if we are connecting beats correctly
    static canJoin(b1, b2) {
        // is this a voice we can join with?
        if (!b1 ||
            !b2 ||
            b1.graceType !== b2.graceType ||
            b1.graceType === GraceType.BendGrace ||
            b2.graceType === GraceType.BendGrace) {
            return false;
        }
        if (b1.graceType !== GraceType.None && b2.graceType !== GraceType.None) {
            return true;
        }
        let m1 = b1.voice.bar;
        let m2 = b2.voice.bar;
        // only join on same measure
        if (m1 !== m2) {
            return false;
        }
        // get times of those voices and check if the times
        // are in the same division
        let start1 = b1.playbackStart;
        let start2 = b2.playbackStart;
        // we can only join 8th, 16th, 32th and 64th voices
        if (!BeamingHelper.canJoinDuration(b1.duration) || !BeamingHelper.canJoinDuration(b2.duration)) {
            return start1 === start2;
        }
        // break between different tuplet groups
        if (b1.tupletGroup !== b2.tupletGroup) {
            return false;
        }
        if (b1.hasTuplet && b2.hasTuplet) {
            // force joining for full tuplet groups
            if (b1.tupletGroup === b2.tupletGroup && b1.tupletGroup.isFull) {
                return true;
            }
        }
        // TODO: create more rules for automatic beaming
        let divisionLength = MidiUtils.QuarterTime;
        switch (m1.masterBar.timeSignatureDenominator) {
            case 8:
                if (m1.masterBar.timeSignatureNumerator % 3 === 0) {
                    divisionLength += (MidiUtils.QuarterTime / 2) | 0;
                }
                break;
        }
        // check if they are on the same division
        let division1 = ((divisionLength + start1) / divisionLength) | 0 | 0;
        let division2 = ((divisionLength + start2) / divisionLength) | 0 | 0;
        return division1 === division2;
    }
    static canJoinDuration(d) {
        switch (d) {
            case Duration.Whole:
            case Duration.Half:
            case Duration.Quarter:
                return false;
            default:
                return true;
        }
    }
    static isFullBarJoin(a, b, barIndex) {
        // TODO: this getindex call seems expensive since we call this method very often.
        return ModelUtils.getIndex(a.duration) - 2 - barIndex > 0 && ModelUtils.getIndex(b.duration) - 2 - barIndex > 0;
    }
    get beatOfLowestNote() {
        return this.lowestNoteInHelper.beat;
    }
    get beatOfHighestNote() {
        return this.highestNoteInHelper.beat;
    }
    /**
     * Returns whether the the position of the given beat, was registered by the staff of the given ID
     * @param staffId
     * @param beat
     * @returns
     */
    isPositionFrom(staffId, beat) {
        if (!this._beatLineXPositions.has(beat.index)) {
            return true;
        }
        return (this._beatLineXPositions.get(beat.index).staffId === staffId ||
            !this._beatLineXPositions.get(beat.index).staffId);
    }
}

class ReservedLayoutAreaSlot {
    constructor(topY, bottomY) {
        this.topY = 0;
        this.bottomY = 0;
        this.topY = topY;
        this.bottomY = bottomY;
    }
}
class ReservedLayoutArea {
    constructor(beat) {
        this.topY = -1000;
        this.bottomY = -1000;
        this.slots = [];
        this.beat = beat;
    }
    addSlot(topY, bottomY) {
        this.slots.push(new ReservedLayoutAreaSlot(topY, bottomY));
        if (this.topY === -1000) {
            this.topY = topY;
            this.bottomY = bottomY;
        }
        else {
            const min = Math.min(topY, bottomY);
            const max = Math.max(topY, bottomY);
            if (min < this.topY) {
                this.topY = min;
            }
            if (max > this.bottomY) {
                this.bottomY = max;
            }
        }
    }
}
class BarCollisionHelper {
    constructor() {
        this.reservedLayoutAreasByDisplayTime = new Map();
        this.restDurationsByDisplayTime = new Map();
    }
    getBeatMinMaxY() {
        let minY = -1000;
        let maxY = -1000;
        for (const v of this.reservedLayoutAreasByDisplayTime.values()) {
            if (minY === -1000) {
                minY = v.topY;
                maxY = v.bottomY;
            }
            else {
                if (minY > v.topY) {
                    minY = v.topY;
                }
                if (maxY < v.bottomY) {
                    maxY = v.bottomY;
                }
            }
        }
        if (minY === -1000) {
            return [0, 0];
        }
        return [minY, maxY];
    }
    reserveBeatSlot(beat, topY, bottomY) {
        if (topY == bottomY) {
            return;
        }
        if (!this.reservedLayoutAreasByDisplayTime.has(beat.displayStart)) {
            this.reservedLayoutAreasByDisplayTime.set(beat.displayStart, new ReservedLayoutArea(beat));
        }
        this.reservedLayoutAreasByDisplayTime.get(beat.displayStart).addSlot(topY, bottomY);
        if (beat.isRest) {
            this.registerRest(beat);
        }
    }
    registerRest(beat) {
        if (!this.restDurationsByDisplayTime.has(beat.displayStart)) {
            this.restDurationsByDisplayTime.set(beat.displayStart, new Map());
        }
        if (!this.restDurationsByDisplayTime.get(beat.displayStart).has(beat.playbackDuration)) {
            this.restDurationsByDisplayTime.get(beat.displayStart).set(beat.playbackDuration, beat.id);
        }
    }
    applyRestCollisionOffset(beat, currentY, linesToPixel) {
        // for the first voice we do not need collision detection on rests
        // we just place it normally
        if (beat.voice.index > 0) {
            // From the Spring-Rod poisitioning we have the guarantee
            // that 2 timewise subsequent elements can never collide 
            // on the horizontal axis. So we only need to check for collisions
            // of elements at the current time position
            // if there are none, we can just use the line
            if (this.reservedLayoutAreasByDisplayTime.has(beat.playbackStart)) {
                // do check for collisions we need to obtain the range on which the 
                // restglyph is placed
                // rest glyphs have their ancor 
                const restSizes = BeamingHelper.computeLineHeightsForRest(beat.duration).map(i => i * linesToPixel);
                let oldRestTopY = currentY - restSizes[0];
                let oldRestBottomY = currentY + restSizes[1];
                let newRestTopY = oldRestTopY;
                const reservedSlots = this.reservedLayoutAreasByDisplayTime.get(beat.playbackStart);
                let hasCollision = false;
                for (const slot of reservedSlots.slots) {
                    if ((oldRestTopY >= slot.topY && oldRestTopY <= slot.bottomY) ||
                        (oldRestBottomY >= slot.topY && oldRestBottomY <= slot.bottomY)) {
                        hasCollision = true;
                        break;
                    }
                }
                if (hasCollision) {
                    // second voice above, the others below
                    if (beat.voice.index == 1) {
                        // move rest above top position
                        // TODO: rest must align with note lines
                        newRestTopY = reservedSlots.topY - restSizes[1] - restSizes[0];
                    }
                    else {
                        // move rest above top position
                        // TODO: rest must align with note lines
                        newRestTopY = reservedSlots.bottomY;
                    }
                    let newRestBottomY = newRestTopY + restSizes[0] + restSizes[1];
                    // moving always happens in full stave spaces
                    const staveSpace = linesToPixel * 2;
                    let distanceInLines = Math.ceil(Math.abs(newRestTopY - oldRestTopY) / staveSpace);
                    // register new min/max offsets
                    reservedSlots.addSlot(newRestTopY, newRestBottomY);
                    if (newRestTopY < oldRestTopY) {
                        return distanceInLines * -staveSpace;
                    }
                    else {
                        return distanceInLines * staveSpace;
                    }
                }
            }
        }
        return 0;
    }
}

class BarHelpers {
    constructor(renderer) {
        this.beamHelpers = [];
        this.beamHelperLookup = [];
        this._renderer = renderer;
        this.collisionHelper = new BarCollisionHelper();
    }
    initialize() {
        var barRenderer = this._renderer;
        var bar = this._renderer.bar;
        let currentBeamHelper = null;
        let currentGraceBeamHelper = null;
        for (let i = 0, j = bar.voices.length; i < j; i++) {
            let v = bar.voices[i];
            this.beamHelpers.push([]);
            this.beamHelperLookup.push(new Map());
            for (let k = 0, l = v.beats.length; k < l; k++) {
                let b = v.beats[k];
                let helperForBeat;
                if (b.graceType !== GraceType.None) {
                    helperForBeat = currentGraceBeamHelper;
                }
                else {
                    helperForBeat = currentBeamHelper;
                    currentGraceBeamHelper = null;
                }
                // if a new beaming helper was started, we close our tuplet grouping as well
                // try to fit beam to current beamhelper
                if (!helperForBeat || !helperForBeat.checkBeat(b)) {
                    if (helperForBeat) {
                        helperForBeat.finish();
                    }
                    // if not possible, create the next beaming helper
                    helperForBeat = new BeamingHelper(bar.staff, barRenderer);
                    helperForBeat.checkBeat(b);
                    if (b.graceType !== GraceType.None) {
                        currentGraceBeamHelper = helperForBeat;
                    }
                    else {
                        currentBeamHelper = helperForBeat;
                    }
                    this.beamHelpers[v.index].push(helperForBeat);
                }
                this.beamHelperLookup[v.index].set(b.index, helperForBeat);
            }
            if (currentBeamHelper) {
                currentBeamHelper.finish();
            }
            if (currentGraceBeamHelper) {
                currentGraceBeamHelper.finish();
            }
            currentBeamHelper = null;
            currentGraceBeamHelper = null;
        }
    }
    getBeamingHelperForBeat(beat) {
        return this.beamHelperLookup[beat.voice.index].get(beat.index);
    }
}

/**
 * Lists the different position modes for {@link BarRendererBase.getNoteY}
 */
var NoteYPosition;
(function (NoteYPosition) {
    /**
     * Gets the note y-position on top of the note stem or tab number.
     */
    NoteYPosition[NoteYPosition["TopWithStem"] = 0] = "TopWithStem";
    /**
     * Gets the note y-position on top of the note head or tab number.
     */
    NoteYPosition[NoteYPosition["Top"] = 1] = "Top";
    /**
     * Gets the note y-position on the center of the note head or tab number.
     */
    NoteYPosition[NoteYPosition["Center"] = 2] = "Center";
    /**
     * Gets the note y-position on the bottom of the note head or tab number.
     */
    NoteYPosition[NoteYPosition["Bottom"] = 3] = "Bottom";
    /**
     * Gets the note y-position on the bottom of the note stem or tab number.
     */
    NoteYPosition[NoteYPosition["BottomWithStem"] = 4] = "BottomWithStem";
})(NoteYPosition || (NoteYPosition = {}));
/**
 * Lists the different position modes for {@link BarRendererBase.getNoteX}
 */
var NoteXPosition;
(function (NoteXPosition) {
    /**
     * Gets the note x-position on left of the note head or tab number.
     */
    NoteXPosition[NoteXPosition["Left"] = 0] = "Left";
    /**
     * Gets the note x-position on the center of the note head or tab number.
     */
    NoteXPosition[NoteXPosition["Center"] = 1] = "Center";
    /**
     * Gets the note x-position on the right of the note head or tab number.
     */
    NoteXPosition[NoteXPosition["Right"] = 2] = "Right";
})(NoteXPosition || (NoteXPosition = {}));
/**
 * This is the base public class for creating blocks which can render bars.
 */
class BarRendererBase {
    constructor(renderer, bar) {
        this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
        this._voiceContainers = new Map();
        this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
        this._ties = [];
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.index = 0;
        this.topOverflow = 0;
        this.bottomOverflow = 0;
        /**
         * Gets or sets whether this renderer is linked to the next one
         * by some glyphs like a vibrato effect
         */
        this.isLinkedToPrevious = false;
        /**
         * Gets or sets whether this renderer can wrap to the next line
         * or it needs to stay connected to the previous one.
         * (e.g. when having double bar repeats we must not separate the 2 bars)
         */
        this.canWrap = true;
        this._wasFirstOfLine = false;
        this._appliedLayoutingInfo = 0;
        this.isFinalized = false;
        /**
         * Gets the top padding for the main content of the renderer.
         * Can be used to specify where i.E. the score lines of the notation start.
         * @returns
         */
        this.topPadding = 0;
        /**
         * Gets the bottom padding for the main content of the renderer.
         * Can be used to specify where i.E. the score lines of the notation end.
         */
        this.bottomPadding = 0;
        this.scoreRenderer = renderer;
        this.bar = bar;
        if (bar) {
            this.helpers = new BarHelpers(this);
        }
    }
    get nextRenderer() {
        if (!this.bar || !this.bar.nextBar) {
            return null;
        }
        return this.scoreRenderer.layout.getRendererForBar(this.staff.staveId, this.bar.nextBar);
    }
    get previousRenderer() {
        if (!this.bar || !this.bar.previousBar) {
            return null;
        }
        return this.scoreRenderer.layout.getRendererForBar(this.staff.staveId, this.bar.previousBar);
    }
    registerTies(ties) {
        this._ties.push(...ties);
    }
    get middleYPosition() {
        return 0;
    }
    registerOverflowTop(topOverflow) {
        if (topOverflow > this.topOverflow) {
            this.topOverflow = topOverflow;
            return true;
        }
        return false;
    }
    registerOverflowBottom(bottomOverflow) {
        if (bottomOverflow > this.bottomOverflow) {
            this.bottomOverflow = bottomOverflow;
            return true;
        }
        return false;
    }
    scaleToWidth(width) {
        // preBeat and postBeat glyphs do not get resized
        let containerWidth = width - this._preBeatGlyphs.width - this._postBeatGlyphs.width;
        for (const container of this._voiceContainers.values()) {
            container.scaleToWidth(containerWidth);
        }
        this._postBeatGlyphs.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width + containerWidth;
        this.width = width;
    }
    get resources() {
        return this.settings.display.resources;
    }
    get settings() {
        return this.scoreRenderer.settings;
    }
    get scale() {
        return this.settings.display.scale;
    }
    get isFirstOfLine() {
        return this.index === 0;
    }
    get isLast() {
        return !this.bar || this.bar.index === this.scoreRenderer.layout.lastBarIndex;
    }
    registerLayoutingInfo() {
        let info = this.layoutingInfo;
        let preSize = this._preBeatGlyphs.width;
        if (info.preBeatSize < preSize) {
            info.preBeatSize = preSize;
        }
        for (const container of this._voiceContainers.values()) {
            container.registerLayoutingInfo(info);
        }
        let postSize = this._postBeatGlyphs.width;
        if (info.postBeatSize < postSize) {
            info.postBeatSize = postSize;
        }
    }
    applyLayoutingInfo() {
        if (this._appliedLayoutingInfo >= this.layoutingInfo.version) {
            return false;
        }
        this._appliedLayoutingInfo = this.layoutingInfo.version;
        // if we need additional space in the preBeat group we simply
        // add a new spacer
        this._preBeatGlyphs.width = this.layoutingInfo.preBeatSize;
        // on beat glyphs we apply the glyph spacing
        let voiceEnd = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
        for (const c of this._voiceContainers.values()) {
            c.x = this._preBeatGlyphs.x + this._preBeatGlyphs.width;
            c.applyLayoutingInfo(this.layoutingInfo);
            let newEnd = c.x + c.width;
            if (voiceEnd < newEnd) {
                voiceEnd = newEnd;
            }
        }
        // on the post glyphs we add the spacing before all other glyphs
        this._postBeatGlyphs.x = Math.floor(voiceEnd);
        this._postBeatGlyphs.width = this.layoutingInfo.postBeatSize;
        this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
        return true;
    }
    finalizeRenderer() {
        this.isFinalized = true;
        let didChangeOverflows = false;
        // allow spacing to be used for tie overflows
        const barTop = this.y - this.staff.topSpacing;
        const barBottom = this.y + this.height + this.staff.bottomSpacing;
        for (const tie of this._ties) {
            tie.doLayout();
            if (tie.height > 0) {
                const bottomOverflow = tie.y + tie.height - barBottom;
                if (bottomOverflow > 0) {
                    if (this.registerOverflowBottom(bottomOverflow)) {
                        didChangeOverflows = true;
                    }
                }
                const topOverflow = tie.y - barTop;
                if (topOverflow < 0) {
                    if (this.registerOverflowTop(topOverflow * -1)) {
                        didChangeOverflows = true;
                    }
                }
            }
        }
        return didChangeOverflows;
    }
    doLayout() {
        if (!this.bar) {
            return;
        }
        this.helpers.initialize();
        this._ties = [];
        this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
        this._preBeatGlyphs.renderer = this;
        this._voiceContainers.clear();
        this._postBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
        this._postBeatGlyphs.renderer = this;
        for (let i = 0; i < this.bar.voices.length; i++) {
            let voice = this.bar.voices[i];
            if (this.hasVoiceContainer(voice)) {
                let c = new VoiceContainerGlyph(0, 0, voice);
                c.renderer = this;
                this._voiceContainers.set(this.bar.voices[i].index, c);
            }
        }
        if (this.bar.simileMark === SimileMark.SecondOfDouble) {
            this.canWrap = false;
        }
        this.createPreBeatGlyphs();
        this.createBeatGlyphs();
        this.createPostBeatGlyphs();
        this.updateSizes();
        // finish up all helpers
        for (const v of this.helpers.beamHelpers) {
            for (const h of v) {
                h.finish();
            }
        }
    }
    hasVoiceContainer(voice) {
        return !voice.isEmpty || voice.index === 0;
    }
    updateSizes() {
        this.staff.registerStaffTop(this.topPadding);
        this.staff.registerStaffBottom(this.height - this.bottomPadding);
        let voiceContainers = this._voiceContainers;
        let beatGlyphsStart = this.beatGlyphsStart;
        let postBeatStart = beatGlyphsStart;
        for (const c of voiceContainers.values()) {
            c.x = beatGlyphsStart;
            c.doLayout();
            let x = c.x + c.width;
            if (postBeatStart < x) {
                postBeatStart = x;
            }
        }
        this._postBeatGlyphs.x = Math.floor(postBeatStart);
        this.width = Math.ceil(this._postBeatGlyphs.x + this._postBeatGlyphs.width);
        this.height += this.layoutingInfo.height * this.scale;
    }
    addPreBeatGlyph(g) {
        g.renderer = this;
        this._preBeatGlyphs.addGlyph(g);
    }
    addBeatGlyph(g) {
        g.renderer = this;
        g.preNotes.renderer = this;
        g.onNotes.renderer = this;
        g.onNotes.beamingHelper = this.helpers.beamHelperLookup[g.beat.voice.index].get(g.beat.index);
        this.getVoiceContainer(g.beat.voice).addGlyph(g);
    }
    getVoiceContainer(voice) {
        return this._voiceContainers.has(voice.index) ? this._voiceContainers.get(voice.index) : undefined;
    }
    getBeatContainer(beat) {
        var _a, _b;
        return (_b = (_a = this.getVoiceContainer(beat.voice)) === null || _a === void 0 ? void 0 : _a.beatGlyphs) === null || _b === void 0 ? void 0 : _b[beat.index];
    }
    getPreNotesGlyphForBeat(beat) {
        var _a;
        return (_a = this.getBeatContainer(beat)) === null || _a === void 0 ? void 0 : _a.preNotes;
    }
    getOnNotesGlyphForBeat(beat) {
        var _a;
        return (_a = this.getBeatContainer(beat)) === null || _a === void 0 ? void 0 : _a.onNotes;
    }
    paint(cx, cy, canvas) {
        this.paintBackground(cx, cy, canvas);
        canvas.color = this.resources.mainGlyphColor;
        this._preBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
        for (const c of this._voiceContainers.values()) {
            canvas.color = c.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            c.paint(cx + this.x, cy + this.y, canvas);
        }
        canvas.color = this.resources.mainGlyphColor;
        this._postBeatGlyphs.paint(cx + this.x, cy + this.y, canvas);
    }
    paintBackground(cx, cy, canvas) {
        this.layoutingInfo.paint(cx + this.x + this._preBeatGlyphs.x + this._preBeatGlyphs.width, cy + this.y + this.height, canvas);
        // canvas.color = Color.random();
        // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.height);
    }
    buildBoundingsLookup(masterBarBounds, cx, cy) {
        let barBounds = new BarBounds();
        barBounds.bar = this.bar;
        barBounds.visualBounds = new Bounds();
        barBounds.visualBounds.x = cx + this.x;
        barBounds.visualBounds.y = cy + this.y + this.topPadding;
        barBounds.visualBounds.w = this.width;
        barBounds.visualBounds.h = this.height - this.topPadding - this.bottomPadding;
        barBounds.realBounds = new Bounds();
        barBounds.realBounds.x = cx + this.x;
        barBounds.realBounds.y = cy + this.y;
        barBounds.realBounds.w = this.width;
        barBounds.realBounds.h = this.height;
        masterBarBounds.addBar(barBounds);
        for (const [index, c] of this._voiceContainers) {
            let isEmptyBar = this.bar.isEmpty && index === 0;
            if (!c.voice.isEmpty || isEmptyBar) {
                for (let i = 0, j = c.beatGlyphs.length; i < j; i++) {
                    let bc = c.beatGlyphs[i];
                    bc.buildBoundingsLookup(barBounds, cx + this.x + c.x, cy + this.y + c.y, isEmptyBar);
                }
            }
        }
    }
    addPostBeatGlyph(g) {
        this._postBeatGlyphs.addGlyph(g);
    }
    createPreBeatGlyphs() {
        this._wasFirstOfLine = this.isFirstOfLine;
    }
    createBeatGlyphs() {
        for (let v = 0; v < this.bar.voices.length; v++) {
            let voice = this.bar.voices[v];
            if (this.hasVoiceContainer(voice)) {
                this.createVoiceGlyphs(this.bar.voices[v]);
            }
        }
    }
    createVoiceGlyphs(v) {
        // filled in subclasses
    }
    createPostBeatGlyphs() {
        // filled in subclasses
    }
    get beatGlyphsStart() {
        return this._preBeatGlyphs.x + this._preBeatGlyphs.width;
    }
    get postBeatGlyphsStart() {
        return this._postBeatGlyphs.x;
    }
    getBeatX(beat, requestedPosition = BeatXPosition.PreNotes) {
        let container = this.getBeatContainer(beat);
        if (container) {
            switch (requestedPosition) {
                case BeatXPosition.PreNotes:
                    return container.voiceContainer.x + container.x;
                case BeatXPosition.OnNotes:
                    return container.voiceContainer.x + container.x + container.onNotes.x;
                case BeatXPosition.MiddleNotes:
                    return container.voiceContainer.x + container.x + container.onTimeX;
                case BeatXPosition.Stem:
                    const offset = container.onNotes.beamingHelper
                        ? container.onNotes.beamingHelper.getBeatLineX(beat)
                        : container.onNotes.x + container.onNotes.width / 2;
                    return container.voiceContainer.x + offset;
                case BeatXPosition.PostNotes:
                    return container.voiceContainer.x + container.x + container.onNotes.x + container.onNotes.width;
                case BeatXPosition.EndBeat:
                    return container.voiceContainer.x + container.x + container.width;
            }
        }
        return 0;
    }
    getNoteX(note, requestedPosition) {
        let container = this.getBeatContainer(note.beat);
        if (container) {
            return (container.voiceContainer.x +
                container.x +
                container.onNotes.x +
                container.onNotes.getNoteX(note, requestedPosition));
        }
        return 0;
    }
    getNoteY(note, requestedPosition) {
        let beat = this.getOnNotesGlyphForBeat(note.beat);
        if (beat) {
            return beat.getNoteY(note, requestedPosition);
        }
        return NaN;
    }
    reLayout() {
        // there are some glyphs which are shown only for renderers at the line start, so we simply recreate them
        // but we only need to recreate them for the renderers that were the first of the line or are now the first of the line
        if ((this._wasFirstOfLine && !this.isFirstOfLine) || (!this._wasFirstOfLine && this.isFirstOfLine)) {
            this._preBeatGlyphs = new LeftToRightLayoutingGlyphGroup();
            this._preBeatGlyphs.renderer = this;
            this.createPreBeatGlyphs();
        }
        this.updateSizes();
        this.registerLayoutingInfo();
    }
    paintSimileMark(cx, cy, canvas) {
        switch (this.bar.simileMark) {
            case SimileMark.Simple:
                canvas.fillMusicFontSymbol(cx + this.x + (this.width - 20 * this.scale) / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.Repeat1Bar, false);
                break;
            case SimileMark.SecondOfDouble:
                canvas.fillMusicFontSymbol(cx + this.x - (28 * this.scale) / 2, cy + this.y + this.height / 2, 1, MusicFontSymbol.Repeat2Bars, false);
                break;
        }
    }
    completeBeamingHelper(helper) {
        // nothing by default
    }
}
BarRendererBase.LineSpacing = 8;
BarRendererBase.StemWidth = 0.12 /*bravura stemThickness */ * BarRendererBase.LineSpacing;
BarRendererBase.StaffLineThickness = 0.13 /*bravura staffLineThickness */ * BarRendererBase.LineSpacing;
BarRendererBase.BeamThickness = 0.5 /*bravura beamThickness */ * BarRendererBase.LineSpacing;
BarRendererBase.BeamSpacing = 0.25 /*bravura beamSpacing */ * BarRendererBase.LineSpacing;

/**
 * Lists all sizing types of the effect bar glyphs
 */
var EffectBarGlyphSizing;
(function (EffectBarGlyphSizing) {
    /**
     * The effect glyph is placed above the pre-beat glyph which is before
     * the actual note in the area where also accidentals are renderered.
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["SinglePreBeat"] = 0] = "SinglePreBeat";
    /**
     * The effect glyph is placed above the on-beat glyph which is where
     * the actual note head glyphs are placed.
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeat"] = 1] = "SingleOnBeat";
    /**
     * The effect glyph is placed above the on-beat glyph which is where
     * the actual note head glyphs are placed. The glyph will size to the end of
     * the applied beat.
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["SingleOnBeatToEnd"] = 2] = "SingleOnBeatToEnd";
    /**
     * The effect glyph is placed above the on-beat glyph and expaded to the
     * on-beat position of the next beat.
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeat"] = 3] = "GroupedOnBeat";
    /**
     * The effect glyph is placed above the on-beat glyph and expaded to the
     * on-beat position of the next beat. The glyph will size to the end of
     * the applied beat.
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["GroupedOnBeatToEnd"] = 4] = "GroupedOnBeatToEnd";
    /**
     * The effect glyph is placed on the whole bar covering the whole width
     */
    EffectBarGlyphSizing[EffectBarGlyphSizing["FullBar"] = 5] = "FullBar";
})(EffectBarGlyphSizing || (EffectBarGlyphSizing = {}));

class EffectBand extends Glyph {
    constructor(voice, info) {
        super(0, 0);
        this._uniqueEffectGlyphs = [];
        this._effectGlyphs = [];
        this.isEmpty = true;
        this.previousBand = null;
        this.isLinkedToPrevious = false;
        this.firstBeat = null;
        this.lastBeat = null;
        this.height = 0;
        this.slot = null;
        this.voice = voice;
        this.info = info;
    }
    doLayout() {
        super.doLayout();
        for (let i = 0; i < this.renderer.bar.voices.length; i++) {
            this._effectGlyphs.push(new Map());
            this._uniqueEffectGlyphs.push([]);
        }
    }
    createGlyph(beat) {
        if (beat.voice !== this.voice) {
            return;
        }
        // NOTE: the track order will never change. even if the staff behind the renderer changes, the trackIndex will not.
        // so it's okay to access the staff here while creating the glyphs.
        if (this.info.shouldCreateGlyph(this.renderer.settings, beat) &&
            (!this.info.hideOnMultiTrack || this.renderer.staff.trackIndex === 0)) {
            this.isEmpty = false;
            if (!this.firstBeat || beat.isBefore(this.firstBeat)) {
                this.firstBeat = beat;
            }
            if (!this.lastBeat || beat.isAfter(this.lastBeat)) {
                this.lastBeat = beat;
                // for "toEnd" sizing occupy until next follow-up-beat
                switch (this.info.sizingMode) {
                    case EffectBarGlyphSizing.SingleOnBeatToEnd:
                    case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                        if (this.lastBeat.nextBeat) {
                            this.lastBeat = this.lastBeat.nextBeat;
                        }
                        break;
                }
            }
            let glyph = this.createOrResizeGlyph(this.info.sizingMode, beat);
            if (glyph.height > this.height) {
                this.height = glyph.height;
            }
        }
    }
    createOrResizeGlyph(sizing, b) {
        let g;
        switch (sizing) {
            case EffectBarGlyphSizing.FullBar:
                g = this.info.createNewGlyph(this.renderer, b);
                g.renderer = this.renderer;
                g.beat = b;
                g.doLayout();
                this._effectGlyphs[b.voice.index].set(b.index, g);
                this._uniqueEffectGlyphs[b.voice.index].push(g);
                return g;
            case EffectBarGlyphSizing.SinglePreBeat:
            case EffectBarGlyphSizing.SingleOnBeat:
            case EffectBarGlyphSizing.SingleOnBeatToEnd:
                g = this.info.createNewGlyph(this.renderer, b);
                g.renderer = this.renderer;
                g.beat = b;
                g.doLayout();
                this._effectGlyphs[b.voice.index].set(b.index, g);
                this._uniqueEffectGlyphs[b.voice.index].push(g);
                return g;
            case EffectBarGlyphSizing.GroupedOnBeat:
            case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                let singleSizing = sizing === EffectBarGlyphSizing.GroupedOnBeat
                    ? EffectBarGlyphSizing.SingleOnBeat
                    : EffectBarGlyphSizing.SingleOnBeatToEnd;
                if (b.index > 0 || this.renderer.index > 0) {
                    // check if the previous beat also had this effect
                    let prevBeat = b.previousBeat;
                    if (this.info.shouldCreateGlyph(this.renderer.settings, prevBeat)) {
                        // first load the effect bar renderer and glyph
                        let prevEffect = null;
                        if (b.index > 0 && this._effectGlyphs[b.voice.index].has(prevBeat.index)) {
                            // load effect from previous beat in the same renderer
                            prevEffect = this._effectGlyphs[b.voice.index].get(prevBeat.index);
                        }
                        else if (this.renderer.index > 0) {
                            // load the effect from the previous renderer if possible.
                            let previousRenderer = this.renderer
                                .previousRenderer;
                            let previousBand = previousRenderer.getBand(this.voice, this.info.effectId);
                            let voiceGlyphs = previousBand._effectGlyphs[b.voice.index];
                            if (voiceGlyphs.has(prevBeat.index)) {
                                prevEffect = voiceGlyphs.get(prevBeat.index);
                            }
                        }
                        // if the effect cannot be expanded, create a new glyph
                        // in case of expansion also create a new glyph, but also link the glyphs together
                        // so for rendering it might be expanded.
                        let newGlyph = this.createOrResizeGlyph(singleSizing, b);
                        if (prevEffect && this.info.canExpand(prevBeat, b)) {
                            // link glyphs
                            prevEffect.nextGlyph = newGlyph;
                            newGlyph.previousGlyph = prevEffect;
                            // mark renderers as linked for consideration when layouting the renderers (line breaking, partial breaking)
                            this.isLinkedToPrevious = true;
                        }
                        return newGlyph;
                    }
                    // in case the previous beat did not have the same effect, we simply create a new glyph
                    return this.createOrResizeGlyph(singleSizing, b);
                }
                // in case of the very first beat, we simply create the glyph.
                return this.createOrResizeGlyph(singleSizing, b);
            default:
                return this.createOrResizeGlyph(EffectBarGlyphSizing.SingleOnBeat, b);
        }
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        // canvas.LineWidth = 1;
        // canvas.StrokeRect(cx + X, cy + Y, Renderer.Width, Slot.Shared.Height);
        // canvas.LineWidth = 1.5f;
        for (let i = 0, j = this._uniqueEffectGlyphs.length; i < j; i++) {
            let v = this._uniqueEffectGlyphs[i];
            for (let k = 0, l = v.length; k < l; k++) {
                let g = v[k];
                g.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }
    alignGlyphs() {
        for (let v = 0; v < this._effectGlyphs.length; v++) {
            for (const beatIndex of this._effectGlyphs[v].keys()) {
                this.alignGlyph(this.info.sizingMode, this.renderer.bar.voices[v].beats[beatIndex]);
            }
        }
    }
    alignGlyph(sizing, beat) {
        let g = this._effectGlyphs[beat.voice.index].get(beat.index);
        let pos;
        let container = this.renderer.getBeatContainer(beat);
        switch (sizing) {
            case EffectBarGlyphSizing.SinglePreBeat:
                pos = container.preNotes;
                g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                g.width = pos.width;
                break;
            case EffectBarGlyphSizing.SingleOnBeat:
            case EffectBarGlyphSizing.GroupedOnBeat:
                pos = container.onNotes;
                g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                g.width = pos.width;
                break;
            case EffectBarGlyphSizing.SingleOnBeatToEnd:
            case EffectBarGlyphSizing.GroupedOnBeatToEnd:
                pos = container.onNotes;
                g.x = this.renderer.beatGlyphsStart + pos.x + container.x;
                if (container.beat.isLastOfVoice) {
                    g.width = this.renderer.width - g.x;
                }
                else {
                    g.width = container.width - container.preNotes.width - container.preNotes.x;
                }
                break;
            case EffectBarGlyphSizing.FullBar:
                g.width = this.renderer.width;
                break;
        }
    }
}

class EffectBandSlotShared {
    constructor() {
        this.uniqueEffectId = null;
        this.y = 0;
        this.height = 0;
        this.firstBeat = null;
        this.lastBeat = null;
    }
}
class EffectBandSlot {
    constructor() {
        this.bands = [];
        this.shared = new EffectBandSlotShared();
    }
    update(effectBand) {
        // lock band to particular effect if needed
        if (!effectBand.info.canShareBand) {
            this.shared.uniqueEffectId = effectBand.info.effectId;
        }
        effectBand.slot = this;
        this.bands.push(effectBand);
        if (effectBand.height > this.shared.height) {
            this.shared.height = effectBand.height;
        }
        if (!this.shared.firstBeat || effectBand.firstBeat.isBefore(this.shared.firstBeat)) {
            this.shared.firstBeat = effectBand.firstBeat;
        }
        if (!this.shared.lastBeat || effectBand.lastBeat.isAfter(this.shared.lastBeat)) {
            this.shared.lastBeat = effectBand.lastBeat;
        }
    }
    canBeUsed(band) {
        return (((!this.shared.uniqueEffectId && band.info.canShareBand) ||
            band.info.effectId === this.shared.uniqueEffectId) &&
            (!this.shared.firstBeat ||
                this.shared.lastBeat.isBefore(band.firstBeat) ||
                this.shared.lastBeat.isBefore(this.shared.firstBeat)));
    }
}

class EffectBandSizingInfo {
    constructor() {
        this.slots = [];
        this._effectSlot = new Map();
    }
    getOrCreateSlot(band) {
        // first check preferrable slot depending on type
        if (this._effectSlot.has(band.info.effectId)) {
            let slot = this._effectSlot.get(band.info.effectId);
            if (slot.canBeUsed(band)) {
                return slot;
            }
        }
        // find any slot that can be used
        for (let slot of this.slots) {
            if (slot.canBeUsed(band)) {
                return slot;
            }
        }
        // create a new slot if required
        let newSlot = new EffectBandSlot();
        this.slots.push(newSlot);
        return newSlot;
    }
    register(effectBand) {
        let freeSlot = this.getOrCreateSlot(effectBand);
        freeSlot.update(effectBand);
        this._effectSlot.set(effectBand.info.effectId, freeSlot);
    }
}

class BeatGlyphBase extends GlyphGroup {
    constructor() {
        super(0, 0);
        this.computedWidth = 0;
    }
    doLayout() {
        // left to right layout
        let w = 0;
        if (this.glyphs) {
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.x = w;
                g.renderer = this.renderer;
                g.doLayout();
                w += g.width;
            }
        }
        this.width = w;
        this.computedWidth = w;
    }
    noteLoop(action) {
        for (let i = this.container.beat.notes.length - 1; i >= 0; i--) {
            action(this.container.beat.notes[i]);
        }
    }
}

class BeatOnNoteGlyphBase extends BeatGlyphBase {
    constructor() {
        super(...arguments);
        this.centerX = 0;
    }
    updateBeamingHelper() {
        //
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        // implemented in subclasses
    }
    getNoteX(note, requestedPosition) {
        return 0;
    }
    getNoteY(note, requestedPosition) {
        return 0;
    }
}

/**
 * This renderer is responsible for displaying effects above or below the other staves
 * like the vibrato.
 */
class EffectBarRenderer extends BarRendererBase {
    constructor(renderer, bar, infos) {
        super(renderer, bar);
        this._bands = [];
        this._bandLookup = new Map();
        this.sizingInfo = null;
        this._infos = infos;
    }
    updateSizes() {
        this.topOverflow = 0;
        this.bottomOverflow = 0;
        this.topPadding = 0;
        this.bottomPadding = 0;
        this.updateHeight();
        super.updateSizes();
    }
    finalizeRenderer() {
        let didChange = super.finalizeRenderer();
        if (this.updateHeight()) {
            didChange = true;
        }
        return didChange;
    }
    updateHeight() {
        if (!this.sizingInfo) {
            return false;
        }
        let y = 0;
        for (let slot of this.sizingInfo.slots) {
            slot.shared.y = y;
            for (let band of slot.bands) {
                band.y = y;
                band.height = slot.shared.height;
            }
            y += slot.shared.height;
        }
        if (y !== this.height) {
            this.height = y;
            return true;
        }
        return false;
    }
    applyLayoutingInfo() {
        if (!super.applyLayoutingInfo()) {
            return false;
        }
        // we create empty slots for the same group
        if (this.index > 0) {
            let previousRenderer = this.previousRenderer;
            this.sizingInfo = previousRenderer.sizingInfo;
        }
        else {
            this.sizingInfo = new EffectBandSizingInfo();
        }
        for (let effectBand of this._bands) {
            effectBand.alignGlyphs();
            if (!effectBand.isEmpty) {
                // find a slot that ended before the start of the band
                this.sizingInfo.register(effectBand);
            }
        }
        this.updateHeight();
        return true;
    }
    scaleToWidth(width) {
        super.scaleToWidth(width);
        for (let effectBand of this._bands) {
            effectBand.alignGlyphs();
        }
    }
    createBeatGlyphs() {
        this._bands = [];
        this._bandLookup = new Map();
        for (let voice of this.bar.voices) {
            if (this.hasVoiceContainer(voice)) {
                for (let info of this._infos) {
                    let band = new EffectBand(voice, info);
                    band.renderer = this;
                    band.doLayout();
                    this._bands.push(band);
                    this._bandLookup.set(voice.index + '.' + info.effectId, band);
                }
            }
        }
        for (let voice of this.bar.voices) {
            if (this.hasVoiceContainer(voice)) {
                this.createVoiceGlyphs(voice);
            }
        }
        for (let effectBand of this._bands) {
            if (effectBand.isLinkedToPrevious) {
                this.isLinkedToPrevious = true;
            }
        }
    }
    createVoiceGlyphs(v) {
        for (let b of v.beats) {
            // we create empty glyphs as alignment references and to get the
            // effect bar sized
            let container = new BeatContainerGlyph(b, this.getVoiceContainer(v));
            container.preNotes = new BeatGlyphBase();
            container.onNotes = new BeatOnNoteGlyphBase();
            this.addBeatGlyph(container);
            for (let effectBand of this._bands) {
                effectBand.createGlyph(b);
            }
        }
    }
    paint(cx, cy, canvas) {
        this.paintBackground(cx, cy, canvas);
        // canvas.color = new Color(255, 0, 0, 100);
        // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.height);
        for (let effectBand of this._bands) {
            canvas.color =
                effectBand.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
            if (!effectBand.isEmpty) {
                effectBand.paint(cx + this.x, cy + this.y, canvas);
            }
        }
    }
    getBand(voice, effectId) {
        let id = voice.index + '.' + effectId;
        if (this._bandLookup.has(id)) {
            return this._bandLookup.get(id);
        }
        return null;
    }
}

class EffectBarRendererFactory extends BarRendererFactory {
    constructor(staffId, infos) {
        super();
        this._infos = infos;
        this._staffId = staffId;
        this.isInAccolade = false;
        this.isRelevantForBoundsLookup = false;
    }
    get staffId() {
        return this._staffId;
    }
    create(renderer, bar) {
        return new EffectBarRenderer(renderer, bar, this._infos.filter(i => renderer.settings.notation.isNotationElementVisible(i.notationElement)));
    }
}

class AlternateEndingsGlyph extends EffectGlyph {
    constructor(x, y, alternateEndings) {
        super(x, y);
        this._endingsString = "";
        this._endings = [];
        for (let i = 0; i < MasterBar.MaxAlternateEndings; i++) {
            if ((alternateEndings & (0x01 << i)) !== 0) {
                this._endings.push(i);
            }
        }
    }
    doLayout() {
        super.doLayout();
        this.height = this.renderer.resources.wordsFont.size + (AlternateEndingsGlyph.Padding * this.scale + 2);
        let endingsStrings = '';
        for (let i = 0, j = this._endings.length; i < j; i++) {
            endingsStrings += this._endings[i] + 1;
            endingsStrings += '. ';
        }
        this._endingsString = endingsStrings;
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        let baseline = canvas.textBaseline;
        canvas.textBaseline = TextBaseline.Top;
        if (this._endings.length > 0) {
            let res = this.renderer.resources;
            canvas.font = res.wordsFont;
            canvas.moveTo(cx + this.x, cy + this.y + this.height);
            canvas.lineTo(cx + this.x, cy + this.y);
            canvas.lineTo(cx + this.x + this.width, cy + this.y);
            canvas.stroke();
            canvas.fillText(this._endingsString, cx + this.x + AlternateEndingsGlyph.Padding * this.scale, cy + this.y * this.scale);
        }
        canvas.textBaseline = baseline;
    }
}
AlternateEndingsGlyph.Padding = 3;

/**
 * A classes inheriting from this base can provide the
 * data needed by a EffectBarRenderer to create effect glyphs dynamically.
 */
class EffectBarRendererInfo {
    /**
     * Gets the unique effect name for this effect. (Used for grouping)
     */
    get effectId() {
        return this.notationElement.toString();
    }
}

class AlternateEndingsEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectAlternateEndings;
    }
    get hideOnMultiTrack() {
        return true;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.FullBar;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.voice.index === 0 && beat.index === 0 && beat.voice.bar.masterBar.alternateEndings !== 0;
    }
    createNewGlyph(renderer, beat) {
        return new AlternateEndingsGlyph(0, 0, beat.voice.bar.masterBar.alternateEndings);
    }
    canExpand(from, to) {
        return true;
    }
}

class TextGlyph extends EffectGlyph {
    constructor(x, y, text, font, textAlign = TextAlign.Left) {
        super(x, y);
        this._lines = text.split('\n');
        this.font = font;
        this.textAlign = textAlign;
    }
    doLayout() {
        super.doLayout();
        this.height = this.font.size * this._lines.length;
    }
    paint(cx, cy, canvas) {
        let color = canvas.color;
        canvas.color = color;
        canvas.font = this.font;
        let old = canvas.textAlign;
        canvas.textAlign = this.textAlign;
        let y = cy + this.y;
        for (let line of this._lines) {
            canvas.fillText(line, cx + this.x, y);
            y += this.font.size;
        }
        canvas.textAlign = old;
    }
}

class CapoEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectCapo;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.index === 0 && beat.voice.bar.index === 0 && beat.voice.bar.staff.capo !== 0;
    }
    createNewGlyph(renderer, beat) {
        return new TextGlyph(0, 0, 'Capo. fret ' + beat.voice.bar.staff.capo, renderer.resources.effectFont, TextAlign.Left);
    }
    canExpand(from, to) {
        return false;
    }
}

class ChordsEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectChordNames;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.hasChord;
    }
    createNewGlyph(renderer, beat) {
        return new TextGlyph(0, 0, beat.chord.name, renderer.resources.effectFont, TextAlign.Center);
    }
    canExpand(from, to) {
        return false;
    }
}

class GroupedEffectGlyph extends EffectGlyph {
    constructor(endPosition) {
        super();
        this.forceGroupedRendering = false;
        this.endOnBarLine = false;
        this.endPosition = endPosition;
    }
    get isLinkedWithPrevious() {
        return !!this.previousGlyph && this.previousGlyph.renderer.staff.staveGroup === this.renderer.staff.staveGroup;
    }
    get isLinkedWithNext() {
        return (!!this.nextGlyph &&
            this.nextGlyph.renderer.isFinalized &&
            this.nextGlyph.renderer.staff.staveGroup === this.renderer.staff.staveGroup);
    }
    paint(cx, cy, canvas) {
        // if we are linked with the previous, the first glyph of the group will also render this one.
        if (this.isLinkedWithPrevious) {
            return;
        }
        // we are not linked with any glyph therefore no expansion is required, we render a simple glyph.
        if (!this.isLinkedWithNext && !this.forceGroupedRendering) {
            this.paintNonGrouped(cx, cy, canvas);
            return;
        }
        // find last linked glyph that can be
        let lastLinkedGlyph;
        if (!this.isLinkedWithNext && this.forceGroupedRendering) {
            lastLinkedGlyph = this;
        }
        else {
            lastLinkedGlyph = this.nextGlyph;
            while (lastLinkedGlyph.isLinkedWithNext) {
                lastLinkedGlyph = lastLinkedGlyph.nextGlyph;
            }
        }
        // use start position of next beat when possible
        let endBeatRenderer = lastLinkedGlyph.renderer;
        let endBeat = lastLinkedGlyph.beat;
        let position = this.endPosition;
        // calculate end X-position
        let cxRenderer = cx - this.renderer.x;
        let endX = this.calculateEndX(endBeatRenderer, endBeat, cxRenderer, position);
        this.paintGrouped(cx, cy, endX, canvas);
    }
    calculateEndX(endBeatRenderer, endBeat, cx, endPosition) {
        if (!endBeat) {
            return cx + endBeatRenderer.x + this.x + this.width;
        }
        return cx + endBeatRenderer.x + endBeatRenderer.getBeatX(endBeat, endPosition);
    }
    paintNonGrouped(cx, cy, canvas) {
        let cxRenderer = cx - this.renderer.x;
        let endX = this.calculateEndX(this.renderer, this.beat, cxRenderer, this.endPosition);
        this.paintGrouped(cx, cy, endX, canvas);
    }
}

class CrescendoGlyph extends GroupedEffectGlyph {
    constructor(x, y, crescendo) {
        super(BeatXPosition.EndBeat);
        this._crescendo = CrescendoType.None;
        this._crescendo = crescendo;
        this.x = x;
        this.y = y;
    }
    doLayout() {
        super.doLayout();
        this.height = 17 * this.scale;
    }
    paintGrouped(cx, cy, endX, canvas) {
        let startX = cx + this.x;
        let height = this.height * this.scale;
        canvas.beginPath();
        if (this._crescendo === CrescendoType.Crescendo) {
            endX -= CrescendoGlyph.Padding * this.scale;
            canvas.moveTo(endX, cy + this.y);
            canvas.lineTo(startX, cy + this.y + height / 2);
            canvas.lineTo(endX, cy + this.y + height);
        }
        else {
            endX -= CrescendoGlyph.Padding * this.scale;
            canvas.moveTo(startX, cy + this.y);
            canvas.lineTo(endX, cy + this.y + height / 2);
            canvas.lineTo(startX, cy + this.y + height);
        }
        canvas.stroke();
    }
}
CrescendoGlyph.Padding = (NoteHeadGlyph.QuarterNoteHeadWidth / 2) | 0;

class CrescendoEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectCrescendo;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeatToEnd;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.crescendo !== CrescendoType.None;
    }
    createNewGlyph(renderer, beat) {
        return new CrescendoGlyph(0, 0, beat.crescendo);
    }
    canExpand(from, to) {
        return from.crescendo === to.crescendo;
    }
}

class DynamicsGlyph extends MusicFontGlyph {
    constructor(x, y, dynamics) {
        super(x, y, 0.6, DynamicsGlyph.getSymbol(dynamics));
    }
    doLayout() {
        super.doLayout();
        this.height = 17 * this.scale;
        this.y += this.height / 2;
    }
    static getSymbol(dynamics) {
        switch (dynamics) {
            case DynamicValue.PPP:
                return MusicFontSymbol.DynamicPPP;
            case DynamicValue.PP:
                return MusicFontSymbol.DynamicPP;
            case DynamicValue.P:
                return MusicFontSymbol.DynamicPiano;
            case DynamicValue.MP:
                return MusicFontSymbol.DynamicMP;
            case DynamicValue.MF:
                return MusicFontSymbol.DynamicMF;
            case DynamicValue.F:
                return MusicFontSymbol.DynamicForte;
            case DynamicValue.FF:
                return MusicFontSymbol.DynamicFF;
            case DynamicValue.FFF:
                return MusicFontSymbol.DynamicFFF;
            default:
                return MusicFontSymbol.None;
        }
    }
}

class DynamicsEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectDynamics;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return this.internalShouldCreateGlyph(beat);
    }
    internalShouldCreateGlyph(beat) {
        if (beat.voice.bar.staff.track.score.stylesheet.hideDynamics || beat.isEmpty || beat.voice.isEmpty || beat.isRest || beat.graceType !== GraceType.None) {
            return false;
        }
        let previousBeat = this.getPreviousDynamicsBeat(beat);
        let show = (beat.voice.index === 0 && !previousBeat) ||
            (beat.dynamics !== (previousBeat === null || previousBeat === void 0 ? void 0 : previousBeat.dynamics));
        // ensure we do not show duplicate dynamics
        if (show && beat.voice.index > 0) {
            for (let voice of beat.voice.bar.voices) {
                if (voice.index < beat.voice.index) {
                    let beatAtSamePos = voice.getBeatAtPlaybackStart(beat.playbackStart);
                    if (beatAtSamePos &&
                        beat.dynamics === beatAtSamePos.dynamics &&
                        this.internalShouldCreateGlyph(beatAtSamePos)) {
                        show = false;
                    }
                }
            }
        }
        return show;
    }
    getPreviousDynamicsBeat(beat) {
        let previousBeat = beat.previousBeat;
        while (previousBeat != null) {
            if (!previousBeat.isRest && previousBeat.graceType === GraceType.None) {
                return previousBeat;
            }
            previousBeat = previousBeat.previousBeat;
        }
        return null;
    }
    createNewGlyph(renderer, beat) {
        return new DynamicsGlyph(0, 0, beat.dynamics);
    }
    canExpand(from, to) {
        return true;
    }
}

class FadeInGlyph extends EffectGlyph {
    doLayout() {
        super.doLayout();
        this.height = 17 * this.scale;
    }
    paint(cx, cy, canvas) {
        let size = 6 * this.scale;
        let width = Math.max(this.width, 14 * this.scale);
        let offset = this.height / 2;
        canvas.beginPath();
        canvas.moveTo(cx + this.x, cy + this.y + offset);
        canvas.quadraticCurveTo(cx + this.x + width / 2, cy + this.y + offset, cx + this.x + width, cy + this.y + offset - size);
        canvas.moveTo(cx + this.x, cy + this.y + offset);
        canvas.quadraticCurveTo(cx + this.x + width / 2, cy + this.y + offset, cx + this.x + width, cy + this.y + offset + size);
        canvas.stroke();
    }
}

class FadeInEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectFadeIn;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.fadeIn;
    }
    createNewGlyph(renderer, beat) {
        return new FadeInGlyph();
    }
    canExpand(from, to) {
        return true;
    }
}

class FermataGlyph extends MusicFontGlyph {
    constructor(x, y, fermata) {
        super(x, y, 1, FermataGlyph.getSymbol(fermata));
    }
    static getSymbol(accentuation) {
        switch (accentuation) {
            case FermataType.Short:
                return MusicFontSymbol.FermataShortAbove;
            case FermataType.Medium:
                return MusicFontSymbol.FermataAbove;
            case FermataType.Long:
                return MusicFontSymbol.FermataLongAbove;
            default:
                return MusicFontSymbol.None;
        }
    }
    doLayout() {
        this.width = 23 * this.scale;
        this.height = 12 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx - this.width / 2, cy + this.height, canvas);
    }
}

class FermataEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectFermata;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.voice.index === 0 && !!beat.fermata;
    }
    createNewGlyph(renderer, beat) {
        return new FermataGlyph(0, 0, beat.fermata.type);
    }
    canExpand(from, to) {
        return true;
    }
}

class FingeringEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectFingering;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        if (beat.voice.index !== 0 ||
            beat.isRest ||
            (settings.notation.fingeringMode !== FingeringMode.SingleNoteEffectBand &&
                settings.notation.fingeringMode !== FingeringMode.SingleNoteEffectBandForcePiano)) {
            return false;
        }
        if (beat.notes.length !== 1) {
            return false;
        }
        return beat.notes[0].isFingering;
    }
    createNewGlyph(renderer, beat) {
        var _a;
        let finger = Fingers.Unknown;
        let isLeft = false;
        let note = beat.notes[0];
        if (note.leftHandFinger !== Fingers.Unknown) {
            finger = note.leftHandFinger;
            isLeft = true;
        }
        else if (note.rightHandFinger !== Fingers.Unknown) {
            finger = note.rightHandFinger;
        }
        let s = (_a = ModelUtils.fingerToString(renderer.settings, beat, finger, isLeft)) !== null && _a !== void 0 ? _a : "";
        return new TextGlyph(0, 0, s, renderer.resources.fingeringFont, TextAlign.Left);
    }
    canExpand(from, to) {
        return true;
    }
}

class NoteEffectInfoBase extends EffectBarRendererInfo {
    constructor() {
        super(...arguments);
        this.lastCreateInfo = null;
    }
    shouldCreateGlyph(settings, beat) {
        this.lastCreateInfo = [];
        for (let i = 0, j = beat.notes.length; i < j; i++) {
            let n = beat.notes[i];
            if (this.shouldCreateGlyphForNote(n)) {
                this.lastCreateInfo.push(n);
            }
        }
        return this.lastCreateInfo.length > 0;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    canExpand(from, to) {
        return true;
    }
}

class LineRangedGlyph extends GroupedEffectGlyph {
    constructor(label) {
        super(BeatXPosition.OnNotes);
        this._label = label;
    }
    doLayout() {
        if (this.renderer.settings.notation.extendLineEffectsToBeatEnd) {
            this.endPosition = BeatXPosition.EndBeat;
            this.forceGroupedRendering = true;
        }
        super.doLayout();
        this.height = this.renderer.resources.effectFont.size;
    }
    paintNonGrouped(cx, cy, canvas) {
        let res = this.renderer.resources;
        canvas.font = res.effectFont;
        let x = canvas.textAlign;
        canvas.textAlign = TextAlign.Center;
        canvas.fillText(this._label, cx + this.x, cy + this.y);
        canvas.textAlign = x;
    }
    paintGrouped(cx, cy, endX, canvas) {
        this.paintNonGrouped(cx, cy, canvas);
        let lineSpacing = 3 * this.scale;
        let textWidth = canvas.measureText(this._label);
        let startX = cx + this.x + textWidth / 2 + lineSpacing;
        let lineY = cy + this.y + 4 * this.scale;
        let lineSize = 8 * this.scale;
        if (endX > startX) {
            let lineX = startX;
            while (lineX < endX) {
                canvas.beginPath();
                canvas.moveTo(lineX, lineY | 0);
                canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                lineX += lineSize + lineSpacing;
                canvas.stroke();
            }
            canvas.beginPath();
            canvas.moveTo(endX, (lineY - 5 * this.scale) | 0);
            canvas.lineTo(endX, (lineY + 5 * this.scale) | 0);
            canvas.stroke();
        }
    }
}
LineRangedGlyph.LineSpacing = 3;
LineRangedGlyph.LineTopPadding = 4;
LineRangedGlyph.LineTopOffset = 5;
LineRangedGlyph.LineSize = 8;

class HarmonicsEffectInfo extends NoteEffectInfoBase {
    constructor(harmonicType) {
        super();
        this._beat = null;
        this._harmonicType = harmonicType;
        switch (harmonicType) {
            case HarmonicType.None:
                this._effectId = 'harmonics-none';
                break;
            case HarmonicType.Natural:
                this._effectId = 'harmonics-natural';
                break;
            case HarmonicType.Artificial:
                this._effectId = 'harmonics-artificial';
                break;
            case HarmonicType.Pinch:
                this._effectId = 'harmonics-pinch';
                break;
            case HarmonicType.Tap:
                this._effectId = 'harmonics-tap';
                break;
            case HarmonicType.Semi:
                this._effectId = 'harmonics-semi';
                break;
            case HarmonicType.Feedback:
                this._effectId = 'harmonics-feedback';
                break;
            default:
                this._effectId = '';
                break;
        }
    }
    get effectId() {
        return this._effectId;
    }
    get notationElement() {
        return NotationElement.EffectHarmonics;
    }
    shouldCreateGlyphForNote(note) {
        if (!note.isHarmonic || note.harmonicType !== this._harmonicType) {
            return false;
        }
        if (note.beat !== this._beat) {
            this._beat = note.beat;
        }
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    createNewGlyph(renderer, beat) {
        return new LineRangedGlyph(HarmonicsEffectInfo.harmonicToString(this._harmonicType));
    }
    static harmonicToString(type) {
        switch (type) {
            case HarmonicType.Natural:
                return 'N.H.';
            case HarmonicType.Artificial:
                return 'A.H.';
            case HarmonicType.Pinch:
                return 'P.H.';
            case HarmonicType.Tap:
                return 'T.H.';
            case HarmonicType.Semi:
                return 'S.H.';
            case HarmonicType.Feedback:
                return 'Fdbk.';
        }
        return '';
    }
}

class LetRingEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectLetRing;
    }
    get canShareBand() {
        return false;
    }
    get hideOnMultiTrack() {
        return false;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.isLetRing;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    createNewGlyph(renderer, beat) {
        return new LineRangedGlyph('LetRing');
    }
    canExpand(from, to) {
        return true;
    }
}

class LyricsGlyph extends EffectGlyph {
    constructor(x, y, lines, font, textAlign = TextAlign.Center) {
        super(x, y);
        this._lines = lines;
        this.font = font;
        this.textAlign = textAlign;
    }
    doLayout() {
        super.doLayout();
        this.height = this.font.size * this._lines.length;
    }
    paint(cx, cy, canvas) {
        canvas.font = this.font;
        let old = canvas.textAlign;
        canvas.textAlign = this.textAlign;
        for (let i = 0; i < this._lines.length; i++) {
            if (this._lines[i]) {
                canvas.fillText(this._lines[i], cx + this.x, cy + this.y + i * this.font.size);
            }
        }
        canvas.textAlign = old;
    }
}

class LyricsEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectLyrics;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return !!beat.lyrics;
    }
    createNewGlyph(renderer, beat) {
        return new LyricsGlyph(0, 0, beat.lyrics, renderer.resources.effectFont, TextAlign.Center);
    }
    canExpand(from, to) {
        return true;
    }
}

class MarkerEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectMarker;
    }
    get hideOnMultiTrack() {
        return true;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SinglePreBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return (beat.voice.bar.staff.index === 0 &&
            beat.voice.index === 0 &&
            beat.index === 0 &&
            beat.voice.bar.masterBar.isSectionStart);
    }
    createNewGlyph(renderer, beat) {
        return new TextGlyph(0, 0, !beat.voice.bar.masterBar.section.marker
            ? beat.voice.bar.masterBar.section.text
            : '[' + beat.voice.bar.masterBar.section.marker + '] ' + beat.voice.bar.masterBar.section.text, renderer.resources.markerFont, TextAlign.Left);
    }
    canExpand(from, to) {
        return true;
    }
}

class OttavaGlyph extends GroupedEffectGlyph {
    constructor(ottava, aboveStaff) {
        super(BeatXPosition.PostNotes);
        this._ottava = ottava;
        this._aboveStaff = aboveStaff;
    }
    doLayout() {
        super.doLayout();
        this.height = 13 * this.scale;
    }
    paintNonGrouped(cx, cy, canvas) {
        this.paintOttava(cx, cy, canvas);
    }
    paintOttava(cx, cy, canvas) {
        let size = 0;
        switch (this._ottava) {
            case Ottavia._15ma:
                size = 37 * this.scale;
                canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.QuindicesimaAlta, false);
                break;
            case Ottavia._8va:
                size = 26 * this.scale;
                canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.OttavaAlta, false);
                break;
            case Ottavia._8vb:
                size = 23 * this.scale;
                canvas.fillMusicFontSymbol(cx + this.x - size / 2, cy + this.y + this.height, 0.8, MusicFontSymbol.OttavaBassaVb, false);
                break;
            case Ottavia._15mb:
                size = 36 * this.scale;
                // NOTE: SMUFL does not have a glyph for 15mb so we build it
                canvas.fillMusicFontSymbols(cx + this.x - size / 2, cy + this.y + this.height, 0.8, [MusicFontSymbol.Quindicesima, MusicFontSymbol.OctaveBaselineM, MusicFontSymbol.OctaveBaselineB], false);
                break;
        }
        return size / 2;
    }
    paintGrouped(cx, cy, endX, canvas) {
        let size = this.paintOttava(cx, cy, canvas);
        let lineSpacing = 3 * this.scale;
        let startX = cx + this.x + size + lineSpacing;
        let lineY = cy + this.y;
        lineY += this._aboveStaff ? 2 * this.scale : this.height - 2 * this.scale;
        let lineSize = 8 * this.scale;
        if (endX > startX) {
            let lineX = startX;
            while (lineX < endX) {
                canvas.beginPath();
                canvas.moveTo(lineX, lineY | 0);
                canvas.lineTo(Math.min(lineX + lineSize, endX), lineY | 0);
                lineX += lineSize + lineSpacing;
                canvas.stroke();
            }
            canvas.beginPath();
            if (this._aboveStaff) {
                canvas.moveTo(endX, lineY);
                canvas.lineTo(endX, cy + this.y + this.height);
            }
            else {
                canvas.moveTo(endX, lineY);
                canvas.lineTo(endX, cy + this.y);
            }
            canvas.stroke();
        }
    }
}

class OttaviaEffectInfo extends EffectBarRendererInfo {
    constructor(aboveStaff) {
        super();
        this._aboveStaff = aboveStaff;
    }
    get effectId() {
        return 'ottavia-' + (this._aboveStaff ? 'above' : 'below');
    }
    get notationElement() {
        return NotationElement.EffectOttavia;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        switch (beat.ottava) {
            case Ottavia._15ma:
                return this._aboveStaff;
            case Ottavia._8va:
                return this._aboveStaff;
            case Ottavia._8vb:
                return !this._aboveStaff;
            case Ottavia._15mb:
                return !this._aboveStaff;
        }
        return false;
    }
    createNewGlyph(renderer, beat) {
        return new OttavaGlyph(beat.ottava, this._aboveStaff);
    }
    canExpand(from, to) {
        return from.ottava === to.ottava;
    }
}

class PalmMuteEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectPalmMute;
    }
    shouldCreateGlyphForNote(note) {
        return note.isPalmMute;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    createNewGlyph(renderer, beat) {
        return new LineRangedGlyph('P.M.');
    }
    constructor() {
        super();
    }
}

class PickSlideEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectPickSlide;
    }
    shouldCreateGlyphForNote(note) {
        return note.slideOutType === SlideOutType.PickSlideDown || note.slideOutType === SlideOutType.PickSlideUp;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    createNewGlyph(renderer, beat) {
        return new LineRangedGlyph('P.S.');
    }
    constructor() {
        super();
    }
}

class PickStrokeGlyph extends MusicFontGlyph {
    constructor(x, y, pickStroke) {
        super(x, y, NoteHeadGlyph.GraceScale, PickStrokeGlyph.getSymbol(pickStroke));
    }
    doLayout() {
        this.width = 9 * this.scale;
        this.height = 13 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy + this.height, canvas);
    }
    static getSymbol(pickStroke) {
        switch (pickStroke) {
            case PickStroke.Up:
                return MusicFontSymbol.StringsUpBow;
            case PickStroke.Down:
                return MusicFontSymbol.StringsDownBow;
            default:
                return MusicFontSymbol.None;
        }
    }
}

class PickStrokeEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectPickStroke;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.pickStroke !== PickStroke.None;
    }
    createNewGlyph(renderer, beat) {
        return new PickStrokeGlyph(0, 0, beat.pickStroke);
    }
    canExpand(from, to) {
        return true;
    }
}

class BeatVibratoGlyph extends GroupedEffectGlyph {
    constructor(type) {
        super(BeatXPosition.EndBeat);
        this._stepSize = 0;
        this._type = type;
    }
    doLayout() {
        super.doLayout();
        switch (this._type) {
            case VibratoType.Slight:
                this._stepSize = 12 * this.scale;
                break;
            case VibratoType.Wide:
                this._stepSize = 23 * this.scale;
                break;
        }
        this.height = 18 * this.scale;
    }
    paintGrouped(cx, cy, endX, canvas) {
        let startX = cx + this.x;
        let width = endX - startX;
        let loops = Math.max(1, width / this._stepSize);
        canvas.beginPath();
        canvas.moveTo(startX, cy + this.y);
        for (let i = 0; i < loops; i++) {
            canvas.lineTo(startX + this._stepSize / 2, cy + this.y + this.height);
            canvas.lineTo(startX + this._stepSize, cy + this.y);
            startX += this._stepSize;
        }
        canvas.stroke();
    }
}

class SlightBeatVibratoEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectSlightBeatVibrato;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeatToEnd;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.vibrato === VibratoType.Slight;
    }
    createNewGlyph(renderer, beat) {
        return new BeatVibratoGlyph(VibratoType.Slight);
    }
    canExpand(from, to) {
        return true;
    }
}

class NoteVibratoGlyph extends GroupedEffectGlyph {
    constructor(x, y, type, scale = 1.2, partialWaves = false) {
        super(BeatXPosition.EndBeat);
        this._scale = 0;
        this._symbol = MusicFontSymbol.None;
        this._symbolSize = 0;
        this._type = type;
        this._scale = scale;
        this.x = x;
        this.y = y;
        this._partialWaves = partialWaves;
    }
    doLayout() {
        super.doLayout();
        let symbolHeight = 0;
        switch (this._type) {
            case VibratoType.Slight:
                this._symbol = MusicFontSymbol.WiggleTrill;
                this._symbolSize = 9 * this._scale;
                symbolHeight = 6 * this._scale;
                break;
            case VibratoType.Wide:
                this._symbol = MusicFontSymbol.WiggleVibratoMediumFast;
                this._symbolSize = 10 * this._scale;
                symbolHeight = 10 * this._scale;
                break;
        }
        this.height = symbolHeight * this.scale;
    }
    paintGrouped(cx, cy, endX, canvas) {
        let startX = cx + this.x;
        let width = endX - startX;
        let step = this._symbolSize * this.scale;
        let loops = width / step;
        if (!this._partialWaves) {
            loops = Math.floor(loops);
        }
        if (loops < 1) {
            loops = 1;
        }
        let loopX = 0;
        for (let i = 0; i < loops; i++) {
            canvas.fillMusicFontSymbol(cx + this.x + loopX, cy + this.y + this.height * 2, this._scale * this.scale, this._symbol, false);
            loopX += step;
        }
    }
}

class SlightNoteVibratoEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectSlightNoteVibrato;
    }
    shouldCreateGlyphForNote(note) {
        return (note.vibrato === VibratoType.Slight ||
            (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Slight));
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeatToEnd;
    }
    createNewGlyph(renderer, beat) {
        return new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
    }
    constructor() {
        super();
    }
}

class TapEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectTap;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.slap || beat.pop || beat.tap;
    }
    createNewGlyph(renderer, beat) {
        let res = renderer.resources;
        if (beat.slap) {
            return new TextGlyph(0, 0, 'S', res.effectFont, TextAlign.Left);
        }
        if (beat.pop) {
            return new TextGlyph(0, 0, 'P', res.effectFont, TextAlign.Left);
        }
        return new TextGlyph(0, 0, 'T', res.effectFont, TextAlign.Left);
    }
    canExpand(from, to) {
        return true;
    }
}

class TempoGlyph extends EffectGlyph {
    constructor(x, y, tempo) {
        super(x, y);
        this._tempo = 0;
        this._tempo = tempo;
    }
    doLayout() {
        super.doLayout();
        this.height = 25 * this.scale;
    }
    paint(cx, cy, canvas) {
        let res = this.renderer.resources;
        canvas.font = res.markerFont;
        canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + this.height * 0.8, this.scale * NoteHeadGlyph.GraceScale, MusicFontSymbol.NoteQuarterUp, false);
        canvas.fillText('= ' + this._tempo.toString(), cx + this.x + this.height / 2, cy + this.y + canvas.font.size / 2);
    }
}

class TempoEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectTempo;
    }
    get hideOnMultiTrack() {
        return true;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SinglePreBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return (beat.voice.bar.staff.index === 0 &&
            beat.voice.index === 0 &&
            beat.index === 0 &&
            (!!beat.voice.bar.masterBar.tempoAutomation || beat.voice.bar.index === 0));
    }
    createNewGlyph(renderer, beat) {
        let tempo = 0;
        if (beat.voice.bar.masterBar.tempoAutomation) {
            tempo = beat.voice.bar.masterBar.tempoAutomation.value;
        }
        else {
            tempo = beat.voice.bar.staff.track.score.tempo;
        }
        return new TempoGlyph(0, 0, tempo);
    }
    canExpand(from, to) {
        return true;
    }
}

class TextEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectText;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return !!beat.text;
    }
    createNewGlyph(renderer, beat) {
        return new TextGlyph(0, 0, beat.text, renderer.resources.effectFont, TextAlign.Left);
    }
    canExpand(from, to) {
        return true;
    }
}

class TrillGlyph extends EffectGlyph {
    constructor(x, y) {
        super(x, y);
    }
    doLayout() {
        super.doLayout();
        this.height = this.renderer.resources.markerFont.size * this.scale;
    }
    paint(cx, cy, canvas) {
        let res = this.renderer.resources;
        canvas.font = res.markerFont;
        let textw = canvas.measureText('tr');
        canvas.fillText('tr', cx + this.x, cy + this.y);
        let startX = textw + 3 * this.scale;
        let endX = this.width - startX;
        let waveScale = 1.2;
        let step = 11 * this.scale * waveScale;
        let loops = Math.max(1, (endX - startX) / step);
        let loopX = startX;
        let loopY = cy + this.y + this.height * 1.2;
        for (let i = 0; i < loops; i++) {
            canvas.fillMusicFontSymbol(cx + this.x + loopX, loopY, waveScale, MusicFontSymbol.WiggleTrill, false);
            loopX += step;
        }
    }
}

class TrillEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectTrill;
    }
    shouldCreateGlyphForNote(note) {
        return note.isTrill;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    createNewGlyph(renderer, beat) {
        return new TrillGlyph(0, 0);
    }
}

var TripletFeelGlyphBarType;
(function (TripletFeelGlyphBarType) {
    TripletFeelGlyphBarType[TripletFeelGlyphBarType["Full"] = 0] = "Full";
    TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialLeft"] = 1] = "PartialLeft";
    TripletFeelGlyphBarType[TripletFeelGlyphBarType["PartialRight"] = 2] = "PartialRight";
})(TripletFeelGlyphBarType || (TripletFeelGlyphBarType = {}));
class TripletFeelGlyph extends EffectGlyph {
    constructor(tripletFeel) {
        super(0, 0);
        this._tripletFeel = tripletFeel;
    }
    doLayout() {
        super.doLayout();
        this.height = 25 * this.scale;
    }
    paint(cx, cy, canvas) {
        cx += this.x;
        cy += this.y;
        let noteY = cy + this.height * NoteHeadGlyph.GraceScale;
        canvas.font = this.renderer.resources.effectFont;
        canvas.fillText('(', cx, cy + this.height * 0.3);
        let leftNoteX = cx + 10 * this.scale;
        let rightNoteX = cx + 40 * this.scale;
        switch (this._tripletFeel) {
            case TripletFeel.NoTripletFeel:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                break;
            case TripletFeel.Triplet8th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                canvas.fillMusicFontSymbol(rightNoteX, noteY, TripletFeelGlyph.NoteScale, MusicFontSymbol.NoteQuarterUp, false);
                canvas.fillMusicFontSymbol(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale, noteY, TripletFeelGlyph.NoteScale, MusicFontSymbol.NoteEighthUp, false);
                this.renderTriplet(rightNoteX, cy, canvas);
                break;
            case TripletFeel.Triplet16th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.Full
                ]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.PartialRight
                ]);
                this.renderTriplet(rightNoteX, cy, canvas);
                break;
            case TripletFeel.Dotted8th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.PartialRight
                ]);
                canvas.fillCircle(rightNoteX + 9 * this.scale, noteY, this.scale);
                break;
            case TripletFeel.Dotted16th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.Full
                ]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.PartialRight
                ]);
                canvas.fillCircle(rightNoteX + 9 * this.scale, noteY, this.scale);
                break;
            case TripletFeel.Scottish8th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [TripletFeelGlyphBarType.Full]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.PartialLeft
                ]);
                canvas.fillCircle(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale + 8 * this.scale, noteY, this.scale);
                break;
            case TripletFeel.Scottish16th:
                this.renderBarNote(leftNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.Full
                ]);
                this.renderBarNote(rightNoteX, noteY, TripletFeelGlyph.NoteScale, canvas, [
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.Full,
                    TripletFeelGlyphBarType.PartialLeft
                ]);
                canvas.fillCircle(rightNoteX + TripletFeelGlyph.NoteSeparation * this.scale + 8 * this.scale, noteY, this.scale);
                break;
        }
        canvas.fillText('=', cx + 30 * this.scale, cy + 5 * this.scale);
        canvas.fillText(')', cx + 65 * this.scale, cy + this.height * 0.3);
    }
    renderBarNote(cx, noteY, noteScale, canvas, bars) {
        canvas.fillMusicFontSymbol(cx, noteY, noteScale, MusicFontSymbol.NoteQuarterUp, false);
        let partialBarWidth = (TripletFeelGlyph.NoteSeparation / 2) * this.scale;
        for (let i = 0; i < bars.length; i++) {
            switch (bars[i]) {
                case TripletFeelGlyphBarType.Full:
                    canvas.fillRect(cx + 4 * this.scale, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, TripletFeelGlyph.NoteSeparation * this.scale, TripletFeelGlyph.BarHeight * this.scale);
                    break;
                case TripletFeelGlyphBarType.PartialLeft:
                    canvas.fillRect(cx + 4 * this.scale, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, partialBarWidth, TripletFeelGlyph.BarHeight * this.scale);
                    break;
                case TripletFeelGlyphBarType.PartialRight:
                    canvas.fillRect(cx + 4 * this.scale + partialBarWidth, noteY - TripletFeelGlyph.NoteHeight * this.scale + TripletFeelGlyph.BarSeparation * this.scale * i, partialBarWidth, TripletFeelGlyph.BarHeight * this.scale);
                    break;
            }
        }
        canvas.fillMusicFontSymbol(cx + TripletFeelGlyph.NoteSeparation * this.scale, noteY, noteScale, MusicFontSymbol.NoteQuarterUp, false);
    }
    renderTriplet(cx, cy, canvas) {
        cy += 2 * this.scale;
        let font = this.renderer.resources.effectFont;
        canvas.font = Font.withFamilyList(font.families, font.size * 0.8, font.style);
        let rightX = cx + TripletFeelGlyph.NoteSeparation * this.scale + 3 * this.scale;
        canvas.beginPath();
        canvas.moveTo(cx, cy + 3 * this.scale);
        canvas.lineTo(cx, cy);
        canvas.lineTo(cx + 5 * this.scale, cy);
        canvas.moveTo(rightX + 5 * this.scale, cy + 3 * this.scale);
        canvas.lineTo(rightX + 5 * this.scale, cy);
        canvas.lineTo(rightX, cy);
        canvas.stroke();
        canvas.fillText('3', cx + 7 * this.scale, cy - 10 * this.scale);
        canvas.font = font;
    }
}
TripletFeelGlyph.NoteScale = 0.4;
TripletFeelGlyph.NoteHeight = 12;
TripletFeelGlyph.NoteSeparation = 12;
TripletFeelGlyph.BarHeight = 2;
TripletFeelGlyph.BarSeparation = 3;

class TripletFeelEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectTripletFeel;
    }
    get hideOnMultiTrack() {
        return true;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SinglePreBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return (beat.index === 0 &&
            ((beat.voice.bar.masterBar.index === 0 &&
                beat.voice.bar.masterBar.tripletFeel !== TripletFeel.NoTripletFeel) ||
                (beat.voice.bar.masterBar.index > 0 &&
                    beat.voice.bar.masterBar.tripletFeel !== beat.voice.bar.masterBar.previousMasterBar.tripletFeel)));
    }
    createNewGlyph(renderer, beat) {
        return new TripletFeelGlyph(beat.voice.bar.masterBar.tripletFeel);
    }
    canExpand(from, to) {
        return true;
    }
}

class WhammyBarEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectWhammyBar;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return false;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeat;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.hasWhammyBar;
    }
    createNewGlyph(renderer, beat) {
        return new LineRangedGlyph('w/bar');
    }
    canExpand(from, to) {
        return true;
    }
}

class WideBeatVibratoEffectInfo extends EffectBarRendererInfo {
    get notationElement() {
        return NotationElement.EffectWideBeatVibrato;
    }
    get hideOnMultiTrack() {
        return false;
    }
    get canShareBand() {
        return true;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeatToEnd;
    }
    shouldCreateGlyph(settings, beat) {
        return beat.vibrato === VibratoType.Wide;
    }
    createNewGlyph(renderer, beat) {
        return new BeatVibratoGlyph(VibratoType.Wide);
    }
    canExpand(from, to) {
        return true;
    }
}

class WideNoteVibratoEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectWideNoteVibrato;
    }
    shouldCreateGlyphForNote(note) {
        return (note.vibrato === VibratoType.Wide || (note.isTieDestination && note.tieOrigin.vibrato === VibratoType.Wide));
    }
    get sizingMode() {
        return EffectBarGlyphSizing.GroupedOnBeatToEnd;
    }
    createNewGlyph(renderer, beat) {
        return new NoteVibratoGlyph(0, 0, VibratoType.Wide, 1.2);
    }
}

class ChordDiagramGlyph extends EffectGlyph {
    constructor(x, y, chord) {
        super(x, y);
        this._textRow = 0;
        this._fretRow = 0;
        this._firstFretSpacing = 0;
        this._chord = chord;
    }
    doLayout() {
        super.doLayout();
        const scale = this.scale;
        let res = this.renderer.resources;
        this._textRow = res.effectFont.size * 1.5 * scale;
        this._fretRow = res.effectFont.size * 1.5 * scale;
        if (this._chord.firstFret > 1) {
            this._firstFretSpacing = ChordDiagramGlyph.FretSpacing * scale;
        }
        else {
            this._firstFretSpacing = 0;
        }
        this.height =
            this._textRow +
                this._fretRow +
                (ChordDiagramGlyph.Frets - 1) * ChordDiagramGlyph.FretSpacing * scale +
                2 * ChordDiagramGlyph.Padding * scale;
        this.width =
            this._firstFretSpacing +
                (this._chord.staff.tuning.length - 1) * ChordDiagramGlyph.StringSpacing * scale +
                2 * ChordDiagramGlyph.Padding * scale;
    }
    paint(cx, cy, canvas) {
        cx += this.x + ChordDiagramGlyph.Padding * this.scale + this._firstFretSpacing;
        cy += this.y;
        let w = this.width - 2 * ChordDiagramGlyph.Padding * this.scale + this.scale - this._firstFretSpacing;
        let stringSpacing = ChordDiagramGlyph.StringSpacing * this.scale;
        let fretSpacing = ChordDiagramGlyph.FretSpacing * this.scale;
        let res = this.renderer.resources;
        let circleRadius = ChordDiagramGlyph.CircleRadius * this.scale;
        let align = canvas.textAlign;
        let baseline = canvas.textBaseline;
        canvas.font = res.effectFont;
        canvas.textAlign = TextAlign.Center;
        canvas.textBaseline = TextBaseline.Top;
        if (this._chord.showName) {
            canvas.fillText(this._chord.name, cx + this.width / 2, cy + res.effectFont.size / 2);
        }
        cy += this._textRow;
        cx += stringSpacing / 2;
        canvas.font = res.fretboardNumberFont;
        canvas.textBaseline = TextBaseline.Middle;
        for (let i = 0; i < this._chord.staff.tuning.length; i++) {
            let x = cx + i * stringSpacing;
            let y = cy + this._fretRow / 2;
            let fret = this._chord.strings[this._chord.staff.tuning.length - i - 1];
            if (fret < 0) {
                canvas.fillMusicFontSymbol(x, y, this.scale, MusicFontSymbol.FretboardX, true);
            }
            else if (fret === 0) {
                canvas.fillMusicFontSymbol(x, y, this.scale, MusicFontSymbol.FretboardO, true);
            }
            else {
                fret -= this._chord.firstFret - 1;
                canvas.fillText(fret.toString(), x, y);
            }
        }
        cy += this._fretRow;
        for (let i = 0; i < this._chord.staff.tuning.length; i++) {
            let x = cx + i * stringSpacing;
            canvas.fillRect(x, cy, 1, fretSpacing * ChordDiagramGlyph.Frets + this.scale);
        }
        if (this._chord.firstFret > 1) {
            canvas.textAlign = TextAlign.Left;
            canvas.fillText(this._chord.firstFret.toString(), cx - this._firstFretSpacing, cy + fretSpacing / 2);
        }
        canvas.fillRect(cx, cy - this.scale, w, 2 * this.scale);
        for (let i = 0; i <= ChordDiagramGlyph.Frets; i++) {
            let y = cy + i * fretSpacing;
            canvas.fillRect(cx, y, w, this.scale);
        }
        let barreLookup = new Map();
        for (let barreFret of this._chord.barreFrets) {
            let strings = [-1, -1];
            barreLookup.set(barreFret - this._chord.firstFret, strings);
        }
        for (let guitarString = 0; guitarString < this._chord.strings.length; guitarString++) {
            let fret = this._chord.strings[guitarString];
            if (fret > 0) {
                fret -= this._chord.firstFret;
                if (barreLookup.has(fret)) {
                    let info = barreLookup.get(fret);
                    if (info[0] === -1 || guitarString < info[0]) {
                        info[0] = guitarString;
                    }
                    if (info[1] === -1 || guitarString > info[1]) {
                        info[1] = guitarString;
                    }
                }
                let y = cy + fret * fretSpacing + fretSpacing / 2 + 0.5 * this.scale;
                let x = cx + (this._chord.strings.length - guitarString - 1) * stringSpacing;
                canvas.fillCircle(x, y, circleRadius);
            }
        }
        for (const [fret, strings] of barreLookup) {
            let y = cy + fret * fretSpacing + fretSpacing / 2 + 0.5 * this.scale;
            let xLeft = cx + (this._chord.strings.length - strings[1] - 1) * stringSpacing;
            let xRight = cx + (this._chord.strings.length - strings[0] - 1) * stringSpacing;
            canvas.fillRect(xLeft, y - circleRadius, xRight - xLeft, circleRadius * 2);
        }
        canvas.textAlign = align;
        canvas.textBaseline = baseline;
    }
}
ChordDiagramGlyph.Padding = 5;
ChordDiagramGlyph.Frets = 5;
ChordDiagramGlyph.CircleRadius = 2.5;
ChordDiagramGlyph.StringSpacing = 10;
ChordDiagramGlyph.FretSpacing = 12;

class RowGlyphContainer extends GlyphGroup {
    constructor(x, y, align = TextAlign.Center) {
        super(x, y);
        this._glyphWidth = 0;
        this.glyphs = [];
        this._align = align;
    }
    doLayout() {
        let x = 0;
        switch (this._align) {
            case TextAlign.Left:
                x = 0;
                break;
            case TextAlign.Center:
                x = (this.width - this._glyphWidth) / 2;
                break;
            case TextAlign.Right:
                x = this.width - this._glyphWidth;
                break;
        }
        for (let glyph of this.glyphs) {
            glyph.x = x;
            x += glyph.width;
        }
    }
    addGlyphToRow(glyph) {
        this.glyphs.push(glyph);
        this._glyphWidth += glyph.width;
        if (glyph.height > this.height) {
            this.height = glyph.height;
        }
    }
}

class RowContainerGlyph extends GlyphGroup {
    constructor(x, y, align = TextAlign.Center) {
        super(x, y);
        this._rows = [];
        this.height = 0.0;
        this.glyphs = [];
        this._align = align;
    }
    doLayout() {
        let x = 0;
        let y = 0;
        let padding = 2 * RowContainerGlyph.Padding * this.scale;
        this._rows = [];
        let row = new RowGlyphContainer(x, y, this._align);
        row.width = this.width;
        for (let g of this.glyphs) {
            if (x + g.width < this.width) {
                row.addGlyphToRow(g);
                x += g.width;
            }
            else {
                if (!row.isEmpty) {
                    row.doLayout();
                    this._rows.push(row);
                    y += row.height + padding;
                }
                x = 0;
                row = new RowGlyphContainer(x, y, this._align);
                row.width = this.width;
                row.addGlyphToRow(g);
                x += g.width;
            }
        }
        if (!row.isEmpty) {
            row.doLayout();
            this._rows.push(row);
            y += row.height + padding;
        }
        this.height = y + padding;
    }
    paint(cx, cy, canvas) {
        for (let row of this._rows) {
            row.paint(cx + this.x, cy + this.y + RowContainerGlyph.Padding * this.scale, canvas);
        }
    }
}
RowContainerGlyph.Padding = 3;

class ChordDiagramContainerGlyph extends RowContainerGlyph {
    constructor(x, y) {
        super(x, y);
    }
    addChord(chord) {
        if (chord.strings.length > 0) {
            let chordDiagram = new ChordDiagramGlyph(0, 0, chord);
            chordDiagram.renderer = this.renderer;
            chordDiagram.doLayout();
            this.glyphs.push(chordDiagram);
        }
    }
}

/**
 * A Staff represents a single line within a StaveGroup.
 * It stores BarRenderer instances created from a given factory.
 */
class RenderStaff {
    constructor(trackIndex, staff, factory) {
        this._sharedLayoutData = new Map();
        this.barRenderers = [];
        this.x = 0;
        this.y = 0;
        this.height = 0;
        this.index = 0;
        this.staffIndex = 0;
        /**
         * This is the index of the track being rendered. This is not the index of the track within the model,
         * but the n-th track being rendered. It is the index of the {@link ScoreRenderer.tracks} array defining
         * which tracks should be rendered.
         * For single-track rendering this will always be zero.
         */
        this.trackIndex = 0;
        /**
         * This is the visual offset from top where the
         * Staff contents actually start. Used for grouping
         * using a accolade
         */
        this.staveTop = 0;
        this.topSpacing = 20;
        this.bottomSpacing = 5;
        /**
         * This is the visual offset from top where the
         * Staff contents actually ends. Used for grouping
         * using a accolade
         */
        this.staveBottom = 0;
        this.isFirstInAccolade = false;
        this.isLastInAccolade = false;
        this._factory = factory;
        this.trackIndex = trackIndex;
        this.modelStaff = staff;
    }
    get staveId() {
        return this._factory.staffId;
    }
    getSharedLayoutData(key, def) {
        if (this._sharedLayoutData.has(key)) {
            return this._sharedLayoutData.get(key);
        }
        return def;
    }
    setSharedLayoutData(key, def) {
        this._sharedLayoutData.set(key, def);
    }
    get isInAccolade() {
        return this._factory.isInAccolade;
    }
    get isRelevantForBoundsLookup() {
        return this._factory.isRelevantForBoundsLookup;
    }
    registerStaffTop(offset) {
        this.staveTop = offset;
    }
    registerStaffBottom(offset) {
        this.staveBottom = offset;
    }
    addBarRenderer(renderer) {
        renderer.staff = this;
        renderer.index = this.barRenderers.length;
        renderer.reLayout();
        this.barRenderers.push(renderer);
        this.staveGroup.layout.registerBarRenderer(this.staveId, renderer);
    }
    addBar(bar, layoutingInfo) {
        let renderer;
        if (!bar) {
            renderer = new BarRendererBase(this.staveGroup.layout.renderer, bar);
        }
        else {
            renderer = this._factory.create(this.staveGroup.layout.renderer, bar);
        }
        renderer.staff = this;
        renderer.index = this.barRenderers.length;
        renderer.layoutingInfo = layoutingInfo;
        renderer.doLayout();
        renderer.registerLayoutingInfo();
        this.barRenderers.push(renderer);
        if (bar) {
            this.staveGroup.layout.registerBarRenderer(this.staveId, renderer);
        }
    }
    revertLastBar() {
        let lastBar = this.barRenderers[this.barRenderers.length - 1];
        this.barRenderers.splice(this.barRenderers.length - 1, 1);
        this.staveGroup.layout.unregisterBarRenderer(this.staveId, lastBar);
        return lastBar;
    }
    scaleToWidth(width) {
        this._sharedLayoutData = new Map();
        // Note: here we could do some "intelligent" distribution of
        // the space over the bar renderers, for now we evenly apply the space to all bars
        let difference = width - this.staveGroup.width;
        let spacePerBar = difference / this.barRenderers.length;
        let x = 0;
        let topOverflow = this.topOverflow;
        for (let i = 0, j = this.barRenderers.length; i < j; i++) {
            this.barRenderers[i].x = x;
            this.barRenderers[i].y = this.topSpacing + topOverflow;
            if (difference !== 0) {
                this.barRenderers[i].scaleToWidth(this.barRenderers[i].width + spacePerBar);
            }
            x += this.barRenderers[i].width;
        }
    }
    get topOverflow() {
        let m = 0;
        for (let i = 0, j = this.barRenderers.length; i < j; i++) {
            let r = this.barRenderers[i];
            if (r.topOverflow > m) {
                m = r.topOverflow;
            }
        }
        return m;
    }
    get bottomOverflow() {
        let m = 0;
        for (let i = 0, j = this.barRenderers.length; i < j; i++) {
            let r = this.barRenderers[i];
            if (r.bottomOverflow > m) {
                m = r.bottomOverflow;
            }
        }
        return m;
    }
    finalizeStaff() {
        this.height = 0;
        // 1st pass: let all renderers finalize themselves, this might cause
        // changes in the overflows
        let needsSecondPass = false;
        let topOverflow = this.topOverflow;
        for (let i = 0; i < this.barRenderers.length; i++) {
            this.barRenderers[i].y = this.topSpacing + topOverflow;
            this.height = Math.max(this.height, this.barRenderers[i].height);
            if (this.barRenderers[i].finalizeRenderer()) {
                needsSecondPass = true;
            }
        }
        // 2nd pass: move renderers to correct position respecting the new overflows
        if (needsSecondPass) {
            topOverflow = this.topOverflow;
            for (let i = 0; i < this.barRenderers.length; i++) {
                this.barRenderers[i].y = this.topSpacing + topOverflow;
                this.height = Math.max(this.height, this.barRenderers[i].height);
                this.barRenderers[i].finalizeRenderer();
            }
        }
        if (this.height > 0) {
            this.height += this.topSpacing + topOverflow + this.bottomOverflow + this.bottomSpacing;
        }
    }
    paint(cx, cy, canvas, startIndex, count) {
        if (this.height === 0 || count === 0) {
            return;
        }
        for (let i = startIndex, j = Math.min(startIndex + count, this.barRenderers.length); i < j; i++) {
            this.barRenderers[i].paint(cx + this.x, cy + this.y, canvas);
        }
    }
}

class Spring {
    constructor() {
        this.timePosition = 0;
        this.longestDuration = 0;
        this.smallestDuration = 0;
        this.force = 0;
        this.springConstant = 0;
        this.preBeatWidth = 0;
        this.graceBeatWidth = 0;
        this.postSpringWidth = 0;
        this.allDurations = new Set();
    }
    get springWidth() {
        return this.preSpringWidth + this.postSpringWidth;
    }
    get preSpringWidth() {
        return this.preBeatWidth + this.graceBeatWidth;
    }
}

/**
 * This public class stores size information about a stave.
 * It is used by the layout engine to collect the sizes of score parts
 * to align the parts across multiple staves.
 */
class BarLayoutingInfo {
    constructor() {
        this._timeSortedSprings = [];
        this._xMin = 0;
        this._minTime = -1;
        this._onTimePositionsForce = 0;
        this._onTimePositions = new Map();
        this._incompleteGraceRodsWidth = 0;
        /**
         * an internal version number that increments whenever a change was made.
         */
        this.version = 0;
        this.preBeatSizes = new Map();
        this.onBeatSizes = new Map();
        this.onBeatCenterX = new Map();
        this.preBeatSize = 0;
        this.postBeatSize = 0;
        this.voiceSize = 0;
        this.minStretchForce = 0;
        this.totalSpringConstant = 0;
        this.incompleteGraceRods = new Map();
        this.allGraceRods = new Map();
        this.springs = new Map();
        this.height = 0;
    }
    updateVoiceSize(size) {
        if (size > this.voiceSize) {
            this.voiceSize = size;
            this.version++;
        }
    }
    setPreBeatSize(beat, size) {
        if (!this.preBeatSizes.has(beat.index) || this.preBeatSizes.get(beat.index) < size) {
            this.preBeatSizes.set(beat.index, size);
            this.version++;
        }
    }
    getPreBeatSize(beat) {
        if (this.preBeatSizes.has(beat.index)) {
            return this.preBeatSizes.get(beat.index);
        }
        return 0;
    }
    setOnBeatSize(beat, size) {
        if (!this.onBeatSizes.has(beat.index) || this.onBeatSizes.get(beat.index) < size) {
            this.onBeatSizes.set(beat.index, size);
            this.version++;
        }
    }
    getOnBeatSize(beat) {
        if (this.onBeatSizes.has(beat.index)) {
            return this.onBeatSizes.get(beat.index);
        }
        return 0;
    }
    getBeatCenterX(beat) {
        if (this.onBeatCenterX.has(beat.index)) {
            return this.onBeatCenterX.get(beat.index);
        }
        return 0;
    }
    setBeatCenterX(beat, x) {
        if (!this.onBeatCenterX.has(beat.index) || this.onBeatCenterX.get(beat.index) < x) {
            this.onBeatCenterX.set(beat.index, x);
            this.version++;
        }
    }
    updateMinStretchForce(force) {
        if (this.minStretchForce < force) {
            this.minStretchForce = force;
        }
    }
    addSpring(start, duration, graceBeatWidth, preBeatWidth, postSpringSize) {
        this.version++;
        let spring;
        if (!this.springs.has(start)) {
            spring = new Spring();
            spring.timePosition = start;
            spring.allDurations.add(duration);
            // check in the previous spring for the shortest duration that overlaps with this spring
            // Gourlay defines that we need the smallest note duration that either starts **or continues** on the current spring.
            if (this._timeSortedSprings.length > 0) {
                let previousSpring = this._timeSortedSprings[this._timeSortedSprings.length - 1];
                for (const prevDuration of previousSpring.allDurations) {
                    previousSpring.timePosition + prevDuration;
                }
            }
            spring.longestDuration = duration;
            spring.postSpringWidth = postSpringSize;
            spring.graceBeatWidth = graceBeatWidth;
            spring.preBeatWidth = preBeatWidth;
            this.springs.set(start, spring);
            let timeSorted = this._timeSortedSprings;
            let insertPos = timeSorted.length - 1;
            while (insertPos > 0 && timeSorted[insertPos].timePosition > start) {
                insertPos--;
            }
            this._timeSortedSprings.splice(insertPos + 1, 0, spring);
        }
        else {
            spring = this.springs.get(start);
            if (spring.postSpringWidth < postSpringSize) {
                spring.postSpringWidth = postSpringSize;
            }
            if (spring.graceBeatWidth < graceBeatWidth) {
                spring.graceBeatWidth = graceBeatWidth;
            }
            if (spring.preBeatWidth < preBeatWidth) {
                spring.preBeatWidth = preBeatWidth;
            }
            if (duration < spring.smallestDuration) {
                spring.smallestDuration = duration;
            }
            if (duration > spring.longestDuration) {
                spring.longestDuration = duration;
            }
            spring.allDurations.add(duration);
        }
        if (this._minTime === -1 || this._minTime > start) {
            this._minTime = start;
        }
        return spring;
    }
    addBeatSpring(beat, preBeatSize, postBeatSize) {
        let start = beat.absoluteDisplayStart;
        if (beat.graceType !== GraceType.None) {
            // For grace beats we just remember the the sizes required for them
            // these sizes are then considered when the target beat is added. 
            const groupId = beat.graceGroup.id;
            if (!this.allGraceRods.has(groupId)) {
                this.allGraceRods.set(groupId, new Array(beat.graceGroup.beats.length));
            }
            if (!beat.graceGroup.isComplete && !this.incompleteGraceRods.has(groupId)) {
                this.incompleteGraceRods.set(groupId, new Array(beat.graceGroup.beats.length));
            }
            let existingSpring = this.allGraceRods.get(groupId)[beat.graceIndex];
            if (existingSpring) {
                if (existingSpring.postSpringWidth < postBeatSize) {
                    existingSpring.postSpringWidth = postBeatSize;
                }
                if (existingSpring.preBeatWidth < preBeatSize) {
                    existingSpring.preBeatWidth = preBeatSize;
                }
            }
            else {
                const graceSpring = new Spring();
                graceSpring.timePosition = start;
                graceSpring.postSpringWidth = postBeatSize;
                graceSpring.preBeatWidth = preBeatSize;
                if (!beat.graceGroup.isComplete) {
                    this.incompleteGraceRods.get(groupId)[beat.graceIndex] = graceSpring;
                }
                this.allGraceRods.get(groupId)[beat.graceIndex] = graceSpring;
            }
        }
        else {
            let graceBeatSize = 0;
            if (beat.graceGroup && this.allGraceRods.has(beat.graceGroup.id)) {
                for (const graceBeat of this.allGraceRods.get(beat.graceGroup.id)) {
                    graceBeatSize += graceBeat.springWidth;
                }
            }
            this.addSpring(start, beat.displayDuration, graceBeatSize, preBeatSize, postBeatSize);
        }
    }
    finish() {
        for (const [k, s] of this.allGraceRods) {
            let offset = 0;
            if (this.incompleteGraceRods.has(k)) {
                for (const sp of s) {
                    offset += sp.preBeatWidth;
                    sp.graceBeatWidth = offset;
                    offset += sp.postSpringWidth;
                }
            }
            else {
                for (let i = s.length - 1; i >= 0; i--) {
                    // for grace beats we store the offset 
                    // in the 'graceBeatWidth' for later use during applying
                    // beat positions
                    s[i].graceBeatWidth = offset;
                    offset -= (s[i].preBeatWidth + s[i].postSpringWidth);
                }
            }
        }
        this._incompleteGraceRodsWidth = 0;
        for (const s of this.incompleteGraceRods.values()) {
            for (const sp of s) {
                this._incompleteGraceRodsWidth += sp.preBeatWidth + sp.postSpringWidth;
            }
        }
        this.calculateSpringConstants();
        this.version++;
    }
    calculateSpringConstants() {
        this._xMin = 0;
        let springs = this.springs;
        for (const spring of springs.values()) {
            if (spring.springWidth < this._xMin) {
                this._xMin = spring.springWidth;
            }
        }
        let totalSpringConstant = 0;
        let sortedSprings = this._timeSortedSprings;
        if (sortedSprings.length === 0) {
            this.totalSpringConstant = -1;
            this.minStretchForce = -1;
            return;
        }
        for (let i = 0; i < sortedSprings.length; i++) {
            let currentSpring = sortedSprings[i];
            let duration = 0;
            if (i === sortedSprings.length - 1) {
                duration = currentSpring.longestDuration;
            }
            else {
                let nextSpring = sortedSprings[i + 1];
                duration = Math.abs(nextSpring.timePosition - currentSpring.timePosition);
            }
            currentSpring.springConstant = this.calculateSpringConstant(currentSpring, duration);
            totalSpringConstant += 1 / currentSpring.springConstant;
        }
        this.totalSpringConstant = 1 / totalSpringConstant;
        // calculate the force required to have at least the minimum size.
        this.minStretchForce = 0;
        // We take the space required between current and next spring
        // and calculate the force needed so that the current spring
        // reserves enough space
        for (let i = 0; i < sortedSprings.length; i++) {
            let currentSpring = sortedSprings[i];
            let requiredSpace = 0;
            if (i === sortedSprings.length - 1) {
                requiredSpace = currentSpring.postSpringWidth;
            }
            else {
                let nextSpring = sortedSprings[i + 1];
                requiredSpace = currentSpring.postSpringWidth + nextSpring.preSpringWidth;
            }
            // for the first spring we need to ensure we take the initial 
            // pre-spring width into account
            if (i === 0) {
                requiredSpace += currentSpring.preSpringWidth;
            }
            let requiredSpaceForce = requiredSpace * currentSpring.springConstant;
            this.updateMinStretchForce(requiredSpaceForce);
        }
    }
    paint(_cx, _cy, _canvas) { }
    // public height: number = 30;
    // public paint(cx: number, cy: number, canvas: ICanvas) {
    //     let sortedSprings: Spring[] = this._timeSortedSprings;
    //     if (sortedSprings.length === 0) {
    //         return;
    //     }
    //     const settings = canvas.settings;
    //     const force = Math.max(settings.display.stretchForce, this.minStretchForce);
    //     const height = this.height * settings.display.scale;
    //     cy -= height;
    //     canvas.color = settings.display.resources.mainGlyphColor;
    //     const font = settings.display.resources.effectFont.clone();
    //     font.size *= 0.8;
    //     canvas.font = font;
    //     canvas.fillText(force.toFixed(2), cx, cy);
    //     cy += settings.display.resources.effectFont.size * 1.5;
    //     let springX: number = sortedSprings[0].preSpringWidth;
    //     for (let i: number = 0; i < sortedSprings.length; i++) {
    //         const spring = sortedSprings[i];
    //         canvas.color = new Color(0, 0, 255, 100);
    //         canvas.fillRect(cx + springX - spring.preSpringWidth, cy, spring.preSpringWidth, height / 2);
    //         canvas.color = new Color(0, 255, 0, 100);
    //         canvas.fillRect(cx + springX, cy, spring.postSpringWidth, height / 2);
    //         canvas.color = settings.display.resources.mainGlyphColor;
    //         canvas.moveTo(cx + springX, cy);
    //         canvas.lineTo(cx + springX, cy + height / 2);
    //         canvas.stroke();
    //         springX += this.calculateWidth(force, spring.springConstant);
    //     }
    // }
    calculateSpringConstant(spring, duration) {
        if (duration <= 0) {
            duration = MidiUtils.toTicks(Duration.SixtyFourth);
        }
        if (spring.smallestDuration === 0) {
            spring.smallestDuration = duration;
        }
        let minDuration = spring.smallestDuration;
        let phi = 1 + 0.85 * Math.log2(duration / BarLayoutingInfo.MinDuration);
        return (minDuration / duration) * (1 / (phi * BarLayoutingInfo.MinDurationWidth));
    }
    spaceToForce(space) {
        if (this.totalSpringConstant !== -1) {
            if (this._timeSortedSprings.length > 0) {
                space -= this._timeSortedSprings[0].preSpringWidth;
            }
            space -= this._incompleteGraceRodsWidth;
            return Math.max(space, 0) * this.totalSpringConstant;
        }
        return -1;
    }
    calculateVoiceWidth(force) {
        let width = 0;
        if (this.totalSpringConstant !== -1) {
            width = this.calculateWidth(force, this.totalSpringConstant);
        }
        if (this._timeSortedSprings.length > 0) {
            width += this._timeSortedSprings[0].preSpringWidth;
        }
        width += this._incompleteGraceRodsWidth;
        return width;
    }
    calculateWidth(force, springConstant) {
        return force / springConstant;
    }
    buildOnTimePositions(force) {
        if (this.totalSpringConstant === -1) {
            return new Map();
        }
        if (ModelUtils.isAlmostEqualTo(this._onTimePositionsForce, force) && this._onTimePositions) {
            return this._onTimePositions;
        }
        this._onTimePositionsForce = force;
        let positions = new Map();
        this._onTimePositions = positions;
        let sortedSprings = this._timeSortedSprings;
        if (sortedSprings.length === 0) {
            return positions;
        }
        let springX = sortedSprings[0].preSpringWidth;
        for (let i = 0; i < sortedSprings.length; i++) {
            positions.set(sortedSprings[i].timePosition, springX);
            springX += this.calculateWidth(force, sortedSprings[i].springConstant);
        }
        return positions;
    }
}
BarLayoutingInfo.MinDuration = 30;
BarLayoutingInfo.MinDurationWidth = 7;

/**
 * This container represents a single column of bar renderers independent from any staves.
 * This container can be used to reorganize renderers into a new staves.
 */
class MasterBarsRenderers {
    constructor() {
        this.width = 0;
        this.isLinkedToPrevious = false;
        this.canWrap = true;
        this.renderers = [];
    }
}

class StaveTrackGroup {
    constructor(staveGroup, track) {
        this.staves = [];
        this.stavesRelevantForBoundsLookup = [];
        this.firstStaffInAccolade = null;
        this.lastStaffInAccolade = null;
        this.staveGroup = staveGroup;
        this.track = track;
    }
    addStaff(staff) {
        this.staves.push(staff);
        if (staff.isRelevantForBoundsLookup) {
            this.stavesRelevantForBoundsLookup.push(staff);
        }
    }
}

/**
 * A Staff consists of a list of different staves and groups
 * them using an accolade.
 */
class StaveGroup {
    constructor() {
        this._allStaves = [];
        this._firstStaffInAccolade = null;
        this._lastStaffInAccolade = null;
        this._accoladeSpacingCalculated = false;
        this.x = 0;
        this.y = 0;
        this.index = 0;
        this.accoladeSpacing = 0;
        /**
         * Indicates whether this line is full or not. If the line is full the
         * bars can be aligned to the maximum width. If the line is not full
         * the bars will not get stretched.
         */
        this.isFull = false;
        /**
         * The width that the content bars actually need
         */
        this.width = 0;
        this.isLast = false;
        this.masterBarsRenderers = [];
        this.staves = [];
    }
    get firstBarIndex() {
        return this.masterBarsRenderers[0].masterBar.index;
    }
    get lastBarIndex() {
        return this.masterBarsRenderers[this.masterBarsRenderers.length - 1].masterBar.index;
    }
    addMasterBarRenderers(tracks, renderers) {
        if (tracks.length === 0) {
            return null;
        }
        this.masterBarsRenderers.push(renderers);
        this.calculateAccoladeSpacing(tracks);
        renderers.layoutingInfo.preBeatSize = 0;
        let src = 0;
        for (let i = 0, j = this.staves.length; i < j; i++) {
            let g = this.staves[i];
            for (let k = 0, l = g.staves.length; k < l; k++) {
                let s = g.staves[k];
                let renderer = renderers.renderers[src++];
                s.addBarRenderer(renderer);
            }
        }
        // Width += renderers.Width;
        this.updateWidth();
        return renderers;
    }
    addBars(tracks, barIndex) {
        if (tracks.length === 0) {
            return null;
        }
        let result = new MasterBarsRenderers();
        result.layoutingInfo = new BarLayoutingInfo();
        result.masterBar = tracks[0].score.masterBars[barIndex];
        this.masterBarsRenderers.push(result);
        this.calculateAccoladeSpacing(tracks);
        // add renderers
        let barLayoutingInfo = result.layoutingInfo;
        for (let g of this.staves) {
            for (let s of g.staves) {
                let bar = g.track.staves[s.modelStaff.index].bars[barIndex];
                s.addBar(bar, barLayoutingInfo);
                let renderer = s.barRenderers[s.barRenderers.length - 1];
                result.renderers.push(renderer);
                if (renderer.isLinkedToPrevious) {
                    result.isLinkedToPrevious = true;
                }
                if (!renderer.canWrap) {
                    result.canWrap = false;
                }
            }
        }
        barLayoutingInfo.finish();
        // ensure same widths of new renderer
        result.width = this.updateWidth();
        return result;
    }
    revertLastBar() {
        if (this.masterBarsRenderers.length > 1) {
            let toRemove = this.masterBarsRenderers[this.masterBarsRenderers.length - 1];
            this.masterBarsRenderers.splice(this.masterBarsRenderers.length - 1, 1);
            let w = 0;
            for (let i = 0, j = this._allStaves.length; i < j; i++) {
                let s = this._allStaves[i];
                let lastBar = s.revertLastBar();
                w = Math.max(w, lastBar.width);
            }
            this.width -= w;
            return toRemove;
        }
        return null;
    }
    updateWidth() {
        let realWidth = 0;
        for (let i = 0, j = this._allStaves.length; i < j; i++) {
            let s = this._allStaves[i];
            s.barRenderers[s.barRenderers.length - 1].applyLayoutingInfo();
            if (s.barRenderers[s.barRenderers.length - 1].width > realWidth) {
                realWidth = s.barRenderers[s.barRenderers.length - 1].width;
            }
        }
        this.width += realWidth;
        return realWidth;
    }
    calculateAccoladeSpacing(tracks) {
        if (!this._accoladeSpacingCalculated && this.index === 0) {
            this._accoladeSpacingCalculated = true;
            if (!this.layout.renderer.settings.notation.isNotationElementVisible(NotationElement.TrackNames)) {
                this.accoladeSpacing = 0;
            }
            else {
                let canvas = this.layout.renderer.canvas;
                let res = this.layout.renderer.settings.display.resources.effectFont;
                canvas.font = res;
                for (let t of tracks) {
                    this.accoladeSpacing = Math.ceil(Math.max(this.accoladeSpacing, canvas.measureText(t.shortName)));
                }
                this.accoladeSpacing *= this.layout.scale;
                this.accoladeSpacing += 2 * StaveGroup.AccoladeLabelSpacing * this.layout.scale;
                this.width += this.accoladeSpacing;
            }
        }
    }
    getStaveTrackGroup(track) {
        for (let i = 0, j = this.staves.length; i < j; i++) {
            let g = this.staves[i];
            if (g.track === track) {
                return g;
            }
        }
        return null;
    }
    addStaff(track, staff) {
        let group = this.getStaveTrackGroup(track);
        if (!group) {
            group = new StaveTrackGroup(this, track);
            this.staves.push(group);
        }
        staff.staveTrackGroup = group;
        staff.staveGroup = this;
        staff.index = this._allStaves.length;
        this._allStaves.push(staff);
        group.addStaff(staff);
        if (staff.isInAccolade) {
            if (!this._firstStaffInAccolade) {
                this._firstStaffInAccolade = staff;
                staff.isFirstInAccolade = true;
            }
            if (!group.firstStaffInAccolade) {
                group.firstStaffInAccolade = staff;
            }
            if (!this._lastStaffInAccolade) {
                this._lastStaffInAccolade = staff;
                staff.isLastInAccolade = true;
            }
            if (this._lastStaffInAccolade) {
                this._lastStaffInAccolade.isLastInAccolade = false;
            }
            this._lastStaffInAccolade = staff;
            this._lastStaffInAccolade.isLastInAccolade = true;
            group.lastStaffInAccolade = staff;
        }
    }
    get height() {
        return this._allStaves[this._allStaves.length - 1].y + this._allStaves[this._allStaves.length - 1].height;
    }
    scaleToWidth(width) {
        for (let i = 0, j = this._allStaves.length; i < j; i++) {
            this._allStaves[i].scaleToWidth(width);
        }
        this.width = width;
    }
    paint(cx, cy, canvas) {
        this.paintPartial(cx + this.x, cy + this.y, canvas, 0, this.masterBarsRenderers.length);
    }
    paintPartial(cx, cy, canvas, startIndex, count) {
        for (let i = 0, j = this._allStaves.length; i < j; i++) {
            this._allStaves[i].paint(cx, cy, canvas, startIndex, count);
        }
        let res = this.layout.renderer.settings.display.resources;
        if (this.staves.length > 0 && startIndex === 0) {
            //
            // Draw start grouping
            //
            canvas.color = res.barSeparatorColor;
            if (this._firstStaffInAccolade && this._lastStaffInAccolade) {
                //
                // draw grouping line for all staves
                //
                let firstStart = cy +
                    this._firstStaffInAccolade.y +
                    this._firstStaffInAccolade.staveTop +
                    this._firstStaffInAccolade.topSpacing +
                    this._firstStaffInAccolade.topOverflow;
                let lastEnd = cy +
                    this._lastStaffInAccolade.y +
                    this._lastStaffInAccolade.topSpacing +
                    this._lastStaffInAccolade.topOverflow +
                    this._lastStaffInAccolade.staveBottom;
                let acooladeX = cx + this._firstStaffInAccolade.x;
                canvas.beginPath();
                canvas.moveTo(acooladeX, firstStart);
                canvas.lineTo(acooladeX, lastEnd);
                canvas.stroke();
            }
            //
            // Draw accolade for each track group
            //
            canvas.font = res.effectFont;
            for (let i = 0, j = this.staves.length; i < j; i++) {
                let g = this.staves[i];
                if (g.firstStaffInAccolade && g.lastStaffInAccolade) {
                    let firstStart = cy +
                        g.firstStaffInAccolade.y +
                        g.firstStaffInAccolade.staveTop +
                        g.firstStaffInAccolade.topSpacing +
                        g.firstStaffInAccolade.topOverflow;
                    let lastEnd = cy +
                        g.lastStaffInAccolade.y +
                        g.lastStaffInAccolade.topSpacing +
                        g.lastStaffInAccolade.topOverflow +
                        g.lastStaffInAccolade.staveBottom;
                    let acooladeX = cx + g.firstStaffInAccolade.x;
                    let barSize = 3 * this.layout.renderer.settings.display.scale;
                    let barOffset = barSize;
                    let accoladeStart = firstStart - barSize * 4;
                    let accoladeEnd = lastEnd + barSize * 4;
                    // text
                    if (this.index === 0 && this.layout.renderer.settings.notation.isNotationElementVisible(NotationElement.TrackNames)) {
                        canvas.fillText(g.track.shortName, cx + StaveGroup.AccoladeLabelSpacing * this.layout.scale, firstStart);
                    }
                    // rect
                    canvas.fillRect(acooladeX - barOffset - barSize, accoladeStart, barSize, accoladeEnd - accoladeStart);
                    let spikeStartX = acooladeX - barOffset - barSize;
                    let spikeEndX = acooladeX + barSize * 2;
                    // top spike
                    canvas.beginPath();
                    canvas.moveTo(spikeStartX, accoladeStart);
                    canvas.bezierCurveTo(spikeStartX, accoladeStart, spikeStartX, accoladeStart, spikeEndX, accoladeStart - barSize);
                    canvas.bezierCurveTo(acooladeX, accoladeStart + barSize, spikeStartX, accoladeStart + barSize, spikeStartX, accoladeStart + barSize);
                    canvas.closePath();
                    canvas.fill();
                    // bottom spike
                    canvas.beginPath();
                    canvas.moveTo(spikeStartX, accoladeEnd);
                    canvas.bezierCurveTo(spikeStartX, accoladeEnd, acooladeX, accoladeEnd, spikeEndX, accoladeEnd + barSize);
                    canvas.bezierCurveTo(acooladeX, accoladeEnd - barSize, spikeStartX, accoladeEnd - barSize, spikeStartX, accoladeEnd - barSize);
                    canvas.closePath();
                    canvas.fill();
                }
            }
        }
    }
    finalizeGroup() {
        let currentY = 0;
        for (let staff of this._allStaves) {
            staff.x = this.accoladeSpacing;
            staff.y = currentY;
            staff.finalizeStaff();
            currentY += staff.height;
        }
    }
    buildBoundingsLookup(cx, cy) {
        if (this.layout.renderer.boundsLookup.isFinished) {
            return;
        }
        if (!this._firstStaffInAccolade || !this._lastStaffInAccolade) {
            return;
        }
        let lastStaff = this._allStaves[this._allStaves.length - 1];
        let visualTop = cy + this.y + this._firstStaffInAccolade.y;
        let visualBottom = cy + this.y + this._lastStaffInAccolade.y + this._lastStaffInAccolade.height;
        let realTop = cy + this.y + this._allStaves[0].y;
        let realBottom = cy + this.y + lastStaff.y + lastStaff.height;
        let lineTop = cy +
            this.y +
            this._firstStaffInAccolade.y +
            this._firstStaffInAccolade.topSpacing +
            this._firstStaffInAccolade.topOverflow +
            (this._firstStaffInAccolade.barRenderers.length > 0
                ? this._firstStaffInAccolade.barRenderers[0].topPadding
                : 0);
        let lineBottom = cy +
            this.y +
            lastStaff.y +
            lastStaff.height -
            lastStaff.bottomSpacing -
            lastStaff.bottomOverflow -
            (lastStaff.barRenderers.length > 0 ? lastStaff.barRenderers[0].bottomPadding : 0);
        let visualHeight = visualBottom - visualTop;
        let lineHeight = lineBottom - lineTop;
        let realHeight = realBottom - realTop;
        let x = this.x + this._firstStaffInAccolade.x;
        let staveGroupBounds = new StaveGroupBounds();
        staveGroupBounds.visualBounds = new Bounds();
        staveGroupBounds.visualBounds.x = cx;
        staveGroupBounds.visualBounds.y = cy + this.y;
        staveGroupBounds.visualBounds.w = this.width;
        staveGroupBounds.visualBounds.h = this.height;
        staveGroupBounds.realBounds = new Bounds();
        staveGroupBounds.realBounds.x = cx;
        staveGroupBounds.realBounds.y = cy + this.y;
        staveGroupBounds.realBounds.w = this.width;
        staveGroupBounds.realBounds.h = this.height;
        this.layout.renderer.boundsLookup.addStaveGroup(staveGroupBounds);
        let masterBarBoundsLookup = new Map();
        for (let i = 0; i < this.staves.length; i++) {
            for (let staff of this.staves[i].stavesRelevantForBoundsLookup) {
                for (let renderer of staff.barRenderers) {
                    let masterBarBounds;
                    if (!masterBarBoundsLookup.has(renderer.bar.masterBar.index)) {
                        masterBarBounds = new MasterBarBounds();
                        masterBarBounds.index = renderer.bar.masterBar.index;
                        masterBarBounds.isFirstOfLine = renderer.isFirstOfLine;
                        masterBarBounds.realBounds = new Bounds();
                        masterBarBounds.realBounds.x = x + renderer.x;
                        masterBarBounds.realBounds.y = realTop;
                        masterBarBounds.realBounds.w = renderer.width;
                        masterBarBounds.realBounds.h = realHeight;
                        masterBarBounds.visualBounds = new Bounds();
                        masterBarBounds.visualBounds.x = x + renderer.x;
                        masterBarBounds.visualBounds.y = visualTop;
                        masterBarBounds.visualBounds.w = renderer.width;
                        masterBarBounds.visualBounds.h = visualHeight;
                        masterBarBounds.lineAlignedBounds = new Bounds();
                        masterBarBounds.lineAlignedBounds.x = x + renderer.x;
                        masterBarBounds.lineAlignedBounds.y = lineTop;
                        masterBarBounds.lineAlignedBounds.w = renderer.width;
                        masterBarBounds.lineAlignedBounds.h = lineHeight;
                        this.layout.renderer.boundsLookup.addMasterBar(masterBarBounds);
                        masterBarBoundsLookup.set(masterBarBounds.index, masterBarBounds);
                    }
                    else {
                        masterBarBounds = masterBarBoundsLookup.get(renderer.bar.masterBar.index);
                    }
                    renderer.buildBoundingsLookup(masterBarBounds, x, cy + this.y + staff.y);
                }
            }
        }
    }
    getBarX(index) {
        if (!this._firstStaffInAccolade || this.layout.renderer.tracks.length === 0) {
            return 0;
        }
        let bar = this.layout.renderer.tracks[0].staves[0].bars[index];
        let renderer = this.layout.getRendererForBar(this._firstStaffInAccolade.staveId, bar);
        return renderer.x;
    }
}
StaveGroup.AccoladeLabelSpacing = 10;

class TuningGlyph extends GlyphGroup {
    constructor(x, y, tuning, trackLabel) {
        super(x, y);
        this._tuning = tuning;
        this._trackLabel = trackLabel;
        this.glyphs = [];
    }
    doLayout() {
        if (this.glyphs.length > 0) {
            return;
        }
        this.createGlyphs(this._tuning);
        for (const g of this.glyphs) {
            g.renderer = this.renderer;
            g.doLayout();
        }
    }
    createGlyphs(tuning) {
        const scale = this.renderer.scale;
        const res = this.renderer.resources;
        this.height = 0;
        const rowHeight = 15 * scale;
        // Track name
        if (this._trackLabel.length > 0) {
            this.addGlyph(new TextGlyph(0, this.height, this._trackLabel, res.effectFont, TextAlign.Left));
            this.height += rowHeight;
        }
        // Name
        this.addGlyph(new TextGlyph(0, this.height, tuning.name, res.effectFont, TextAlign.Left));
        const stringColumnWidth = 64 * scale;
        this.renderer.scoreRenderer.canvas.font = res.effectFont;
        this.width = Math.max(this.renderer.scoreRenderer.canvas.measureText(this._trackLabel) * scale, Math.max(this.renderer.scoreRenderer.canvas.measureText(tuning.name) * scale, 2 * stringColumnWidth));
        this.height += rowHeight;
        if (!tuning.isStandard) {
            const circleScale = 0.7;
            const circleHeight = TuningGlyph.CircleNumberHeight * circleScale * scale;
            // Strings
            let stringsPerColumn = Math.ceil(tuning.tunings.length / 2.0) | 0;
            let currentX = 0;
            let currentY = this.height;
            for (let i = 0, j = tuning.tunings.length; i < j; i++) {
                const symbol = (MusicFontSymbol.GuitarString0 + (i + 1));
                this.addGlyph(new MusicFontGlyph(currentX, currentY + circleHeight / 1.2, circleScale, symbol));
                const str = '= ' + Tuning.getTextForTuning(tuning.tunings[i], false);
                this.addGlyph(new TextGlyph(currentX + circleHeight + 1 * scale, currentY, str, res.effectFont, TextAlign.Left));
                currentY += rowHeight;
                if (i === stringsPerColumn - 1) {
                    currentY = this.height;
                    currentX += stringColumnWidth;
                }
            }
            this.height += stringsPerColumn * rowHeight;
        }
        this.width += 15 * scale;
    }
}
/**
 * The height of the GuitarString# glyphs at scale 1
 */
TuningGlyph.CircleNumberHeight = 20;

class TuningContainerGlyph extends RowContainerGlyph {
    constructor(x, y) {
        super(x, y, TextAlign.Left);
    }
    addTuning(tuning, trackLabel) {
        if (tuning.tunings.length > 0) {
            let tuningGlyph = new TuningGlyph(0, 0, tuning, trackLabel);
            tuningGlyph.renderer = this.renderer;
            tuningGlyph.doLayout();
            this.glyphs.push(tuningGlyph);
        }
    }
}

class LazyPartial {
    constructor(args, renderCallback) {
        this.args = args;
        this.renderCallback = renderCallback;
    }
}
/**
 * This is the base class for creating new layouting engines for the score renderer.
 */
class ScoreLayout {
    constructor(renderer) {
        this._barRendererLookup = new Map();
        this.width = 0;
        this.height = 0;
        this.scoreInfoGlyphs = new Map();
        this.chordDiagrams = null;
        this.tuningGlyph = null;
        this._lazyPartials = new Map();
        this.firstBarIndex = 0;
        this.lastBarIndex = 0;
        this.renderer = renderer;
    }
    resize() {
        this._lazyPartials.clear();
        this.doResize();
    }
    layoutAndRender() {
        this._lazyPartials.clear();
        let score = this.renderer.score;
        let startIndex = this.renderer.settings.display.startBar;
        startIndex--; // map to array index
        startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
        this.firstBarIndex = startIndex;
        let endBarIndex = this.renderer.settings.display.barCount;
        if (endBarIndex < 0) {
            endBarIndex = score.masterBars.length;
        }
        endBarIndex = startIndex + endBarIndex - 1; // map count to array index
        endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
        this.lastBarIndex = endBarIndex;
        this.createScoreInfoGlyphs();
        this.doLayoutAndRender();
    }
    registerPartial(args, callback) {
        this.renderer.partialLayoutFinished.trigger(args);
        if (!this.renderer.settings.core.enableLazyLoading) {
            this.internalRenderLazyPartial(args, callback);
        }
        else {
            this._lazyPartials.set(args.id, new LazyPartial(args, callback));
        }
    }
    internalRenderLazyPartial(args, callback) {
        const canvas = this.renderer.canvas;
        canvas.beginRender(args.width, args.height);
        callback(canvas);
        args.renderResult = canvas.endRender();
        this.renderer.partialRenderFinished.trigger(args);
    }
    renderLazyPartial(resultId) {
        if (this._lazyPartials.has(resultId)) {
            const lazyPartial = this._lazyPartials.get(resultId);
            this.internalRenderLazyPartial(lazyPartial.args, lazyPartial.renderCallback);
        }
    }
    createScoreInfoGlyphs() {
        Logger.debug('ScoreLayout', 'Creating score info glyphs');
        let notation = this.renderer.settings.notation;
        let score = this.renderer.score;
        let res = this.renderer.settings.display.resources;
        this.scoreInfoGlyphs = new Map();
        if (score.title && notation.isNotationElementVisible(NotationElement.ScoreTitle)) {
            this.scoreInfoGlyphs.set(NotationElement.ScoreTitle, new TextGlyph(0, 0, score.title, res.titleFont, TextAlign.Center));
        }
        if (score.subTitle && notation.isNotationElementVisible(NotationElement.ScoreSubTitle)) {
            this.scoreInfoGlyphs.set(NotationElement.ScoreSubTitle, new TextGlyph(0, 0, score.subTitle, res.subTitleFont, TextAlign.Center));
        }
        if (score.artist && notation.isNotationElementVisible(NotationElement.ScoreArtist)) {
            this.scoreInfoGlyphs.set(NotationElement.ScoreArtist, new TextGlyph(0, 0, score.artist, res.subTitleFont, TextAlign.Center));
        }
        if (score.album && notation.isNotationElementVisible(NotationElement.ScoreAlbum)) {
            this.scoreInfoGlyphs.set(NotationElement.ScoreAlbum, new TextGlyph(0, 0, score.album, res.subTitleFont, TextAlign.Center));
        }
        if (score.music &&
            score.music === score.words &&
            notation.isNotationElementVisible(NotationElement.ScoreWordsAndMusic)) {
            this.scoreInfoGlyphs.set(NotationElement.ScoreWordsAndMusic, new TextGlyph(0, 0, 'Music and Words by ' + score.words, res.wordsFont, TextAlign.Center));
        }
        else {
            if (score.music && notation.isNotationElementVisible(NotationElement.ScoreMusic)) {
                this.scoreInfoGlyphs.set(NotationElement.ScoreMusic, new TextGlyph(0, 0, 'Music by ' + score.music, res.wordsFont, TextAlign.Right));
            }
            if (score.words && notation.isNotationElementVisible(NotationElement.ScoreWords)) {
                this.scoreInfoGlyphs.set(NotationElement.ScoreWords, new TextGlyph(0, 0, 'Words by ' + score.words, res.wordsFont, TextAlign.Left));
            }
        }
        const fakeBarRenderer = new BarRendererBase(this.renderer, this.renderer.tracks[0].staves[0].bars[0]);
        if (notation.isNotationElementVisible(NotationElement.GuitarTuning)) {
            let tunings = [];
            for (let track of this.renderer.tracks) {
                for (let staff of track.staves) {
                    if (!staff.isPercussion && staff.isStringed && staff.tuning.length > 0 && staff.showTablature) {
                        tunings.push(staff);
                        break;
                    }
                }
            }
            // tuning info
            if (tunings.length > 0) {
                this.tuningGlyph = new TuningContainerGlyph(0, 0);
                this.tuningGlyph.renderer = fakeBarRenderer;
                for (const t of tunings) {
                    this.tuningGlyph.addTuning(t.stringTuning, tunings.length > 1 ? t.track.name : '');
                }
            }
        }
        // chord diagram glyphs
        if (notation.isNotationElementVisible(NotationElement.ChordDiagrams)) {
            this.chordDiagrams = new ChordDiagramContainerGlyph(0, 0);
            this.chordDiagrams.renderer = fakeBarRenderer;
            let chords = new Map();
            for (let track of this.renderer.tracks) {
                for (let staff of track.staves) {
                    const sc = staff.chords;
                    for (const [chordId, chord] of sc) {
                        if (!chords.has(chordId)) {
                            if (chord.showDiagram) {
                                chords.set(chordId, chord);
                                this.chordDiagrams.addChord(chord);
                            }
                        }
                    }
                }
            }
        }
    }
    get scale() {
        return this.renderer.settings.display.scale;
    }
    createEmptyStaveGroup() {
        let group = new StaveGroup();
        group.layout = this;
        for (let trackIndex = 0; trackIndex < this.renderer.tracks.length; trackIndex++) {
            let track = this.renderer.tracks[trackIndex];
            let hasScore = false;
            for (let staff of track.staves) {
                if (staff.showStandardNotation) {
                    hasScore = true;
                    break;
                }
            }
            for (let staffIndex = 0; staffIndex < track.staves.length; staffIndex++) {
                let staff = track.staves[staffIndex];
                // use optimal profile for track
                let staveProfile;
                if (staff.isPercussion) {
                    staveProfile = StaveProfile.Score;
                }
                else if (this.renderer.settings.display.staveProfile !== StaveProfile.Default) {
                    staveProfile = this.renderer.settings.display.staveProfile;
                }
                else if (staff.showTablature && staff.showStandardNotation) {
                    staveProfile = StaveProfile.ScoreTab;
                }
                else if (staff.showTablature) {
                    staveProfile = hasScore ? StaveProfile.TabMixed : StaveProfile.Tab;
                }
                else if (staff.showStandardNotation) {
                    staveProfile = StaveProfile.Score;
                }
                else {
                    continue;
                }
                let profile = Environment.staveProfiles.get(staveProfile);
                for (let factory of profile) {
                    if (factory.canCreate(track, staff)) {
                        group.addStaff(track, new RenderStaff(trackIndex, staff, factory));
                    }
                }
            }
        }
        return group;
    }
    registerBarRenderer(key, renderer) {
        if (!this._barRendererLookup.has(key)) {
            this._barRendererLookup.set(key, new Map());
        }
        this._barRendererLookup.get(key).set(renderer.bar.id, renderer);
    }
    unregisterBarRenderer(key, renderer) {
        if (this._barRendererLookup.has(key)) {
            let lookup = this._barRendererLookup.get(key);
            lookup.delete(renderer.bar.id);
        }
    }
    getRendererForBar(key, bar) {
        let barRendererId = bar.id;
        if (this._barRendererLookup.has(key) && this._barRendererLookup.get(key).has(barRendererId)) {
            return this._barRendererLookup.get(key).get(barRendererId);
        }
        return null;
    }
    layoutAndRenderAnnotation(y) {
        // attention, you are not allowed to remove change this notice within any version of this library without permission!
        let msg = 'rendered by alphaTab';
        let resources = this.renderer.settings.display.resources;
        let size = 12 * this.renderer.settings.display.scale;
        let height = Math.floor(size * 2);
        const e = new RenderFinishedEventArgs();
        const font = Font.withFamilyList(resources.copyrightFont.families, size, FontStyle.Plain, FontWeight.Bold);
        this.renderer.canvas.font = font;
        const centered = Environment.getLayoutEngineFactory(this.renderer.settings.display.layoutMode).vertical;
        e.width = this.renderer.canvas.measureText(msg);
        e.height = height;
        e.x = centered
            ? (this.width - e.width) / 2
            : this.firstBarX;
        e.y = y;
        e.totalWidth = this.width;
        e.totalHeight = y + height;
        e.firstMasterBarIndex = -1;
        e.lastMasterBarIndex = -1;
        this.registerPartial(e, canvas => {
            canvas.color = resources.mainGlyphColor;
            canvas.font = font;
            canvas.textAlign = TextAlign.Left;
            canvas.fillText(msg, 0, size);
        });
        return y + height;
    }
}

class HorizontalScreenLayoutPartialInfo {
    constructor() {
        this.x = 0;
        this.width = 0;
        this.masterBars = [];
    }
}
/**
 * This layout arranges the bars all horizontally
 */
class HorizontalScreenLayout extends ScoreLayout {
    constructor(renderer) {
        super(renderer);
        this._group = null;
        this._pagePadding = null;
    }
    get name() {
        return 'HorizontalScreen';
    }
    get supportsResize() {
        return false;
    }
    get firstBarX() {
        let x = this._pagePadding[0];
        if (this._group) {
            x += this._group.accoladeSpacing;
        }
        return x;
    }
    doResize() {
        // not supported
    }
    doLayoutAndRender() {
        this._pagePadding = this.renderer.settings.display.padding;
        if (!this._pagePadding) {
            this._pagePadding = HorizontalScreenLayout.PagePadding;
        }
        if (this._pagePadding.length === 1) {
            this._pagePadding = [
                this._pagePadding[0],
                this._pagePadding[0],
                this._pagePadding[0],
                this._pagePadding[0]
            ];
        }
        else if (this._pagePadding.length === 2) {
            this._pagePadding = [
                this._pagePadding[0],
                this._pagePadding[1],
                this._pagePadding[0],
                this._pagePadding[1]
            ];
        }
        let score = this.renderer.score;
        let startIndex = this.renderer.settings.display.startBar;
        startIndex--; // map to array index
        startIndex = Math.min(score.masterBars.length - 1, Math.max(0, startIndex));
        let currentBarIndex = startIndex;
        let endBarIndex = this.renderer.settings.display.barCount;
        if (endBarIndex <= 0) {
            endBarIndex = score.masterBars.length;
        }
        endBarIndex = startIndex + endBarIndex - 1; // map count to array index
        endBarIndex = Math.min(score.masterBars.length - 1, Math.max(0, endBarIndex));
        this._group = this.createEmptyStaveGroup();
        this._group.isLast = true;
        this._group.x = this._pagePadding[0];
        this._group.y = this._pagePadding[1];
        let countPerPartial = this.renderer.settings.display.barCountPerPartial;
        let partials = [];
        let currentPartial = new HorizontalScreenLayoutPartialInfo();
        let renderX = 0;
        while (currentBarIndex <= endBarIndex) {
            let result = this._group.addBars(this.renderer.tracks, currentBarIndex);
            if (result) {
                // if we detect that the new renderer is linked to the previous
                // renderer, we need to put it into the previous partial
                if (currentPartial.masterBars.length === 0 && result.isLinkedToPrevious && partials.length > 0) {
                    let previousPartial = partials[partials.length - 1];
                    previousPartial.masterBars.push(score.masterBars[currentBarIndex]);
                    previousPartial.width += result.width;
                    renderX += result.width;
                    currentPartial.x += renderX;
                }
                else {
                    currentPartial.masterBars.push(score.masterBars[currentBarIndex]);
                    currentPartial.width += result.width;
                    // no targetPartial here because previous partials already handled this code
                    if (currentPartial.masterBars.length >= countPerPartial) {
                        if (partials.length === 0) {
                            // respect accolade and on first partial
                            currentPartial.width += this._group.accoladeSpacing + this._pagePadding[0];
                        }
                        renderX += currentPartial.width;
                        partials.push(currentPartial);
                        Logger.debug(this.name, 'Finished partial from bar ' +
                            currentPartial.masterBars[0].index +
                            ' to ' +
                            currentPartial.masterBars[currentPartial.masterBars.length - 1].index, null);
                        currentPartial = new HorizontalScreenLayoutPartialInfo();
                        currentPartial.x = renderX;
                    }
                }
            }
            currentBarIndex++;
        }
        // don't miss the last partial if not empty
        if (currentPartial.masterBars.length > 0) {
            if (partials.length === 0) {
                currentPartial.width += this._group.accoladeSpacing + this._pagePadding[0];
            }
            partials.push(currentPartial);
            Logger.debug(this.name, 'Finished partial from bar ' +
                currentPartial.masterBars[0].index +
                ' to ' +
                currentPartial.masterBars[currentPartial.masterBars.length - 1].index, null);
        }
        this.finalizeGroup();
        this.height = Math.floor(this._group.y + this._group.height);
        this.width = this._group.x + this._group.width + this._pagePadding[2];
        currentBarIndex = 0;
        let x = 0;
        for (let i = 0; i < partials.length; i++) {
            const partial = partials[i];
            const e = new RenderFinishedEventArgs();
            e.x = x;
            e.y = 0;
            e.totalWidth = this.width;
            e.totalHeight = this.height;
            e.width = partial.width;
            e.height = this.height;
            e.firstMasterBarIndex = partial.masterBars[0].index;
            e.lastMasterBarIndex = partial.masterBars[partial.masterBars.length - 1].index;
            x += partial.width;
            // pull to local scope for lambda
            const partialBarIndex = currentBarIndex;
            const partialIndex = i;
            this._group.buildBoundingsLookup(this._group.x, this._group.y);
            this.registerPartial(e, canvas => {
                let renderX = this._group.getBarX(partial.masterBars[0].index) + this._group.accoladeSpacing;
                if (partialIndex === 0) {
                    renderX -= this._group.x + this._group.accoladeSpacing;
                }
                canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
                canvas.textAlign = TextAlign.Left;
                Logger.debug(this.name, 'Rendering partial from bar ' +
                    partial.masterBars[0].index +
                    ' to ' +
                    partial.masterBars[partial.masterBars.length - 1].index, null);
                this._group.paintPartial(-renderX, this._group.y, canvas, partialBarIndex, partial.masterBars.length);
            });
            currentBarIndex += partial.masterBars.length;
        }
        this.height = this.layoutAndRenderAnnotation(this.height) + this._pagePadding[3];
    }
    finalizeGroup() {
        this._group.scaleToWidth(this._group.width);
        this._group.finalizeGroup();
    }
}
HorizontalScreenLayout.PagePadding = [20, 20, 20, 20];
HorizontalScreenLayout.GroupSpacing = 20;

/**
 * This layout arranges the bars into a fixed width and dynamic height region.
 */
class PageViewLayout extends ScoreLayout {
    constructor(renderer) {
        super(renderer);
        this._groups = [];
        this._allMasterBarRenderers = [];
        this._barsFromPreviousGroup = [];
        this._pagePadding = null;
    }
    get name() {
        return 'PageView';
    }
    doLayoutAndRender() {
        this._pagePadding = this.renderer.settings.display.padding;
        if (!this._pagePadding) {
            this._pagePadding = PageViewLayout.PagePadding;
        }
        if (this._pagePadding.length === 1) {
            this._pagePadding = [
                this._pagePadding[0],
                this._pagePadding[0],
                this._pagePadding[0],
                this._pagePadding[0]
            ];
        }
        else if (this._pagePadding.length === 2) {
            this._pagePadding = [
                this._pagePadding[0],
                this._pagePadding[1],
                this._pagePadding[0],
                this._pagePadding[1]
            ];
        }
        let y = 0;
        this.width = this.renderer.width;
        this._allMasterBarRenderers = [];
        //
        // 1. Score Info
        y = this.layoutAndRenderScoreInfo(y, -1);
        //
        // 2. Tunings
        y = this.layoutAndRenderTunings(y, -1);
        //
        // 3. Chord Diagrms
        y = this.layoutAndRenderChordDiagrams(y, -1);
        //
        // 4. One result per StaveGroup
        y = this.layoutAndRenderScore(y);
        y = this.layoutAndRenderAnnotation(y);
        this.height = y + this._pagePadding[3];
    }
    get supportsResize() {
        return true;
    }
    get firstBarX() {
        let x = this._pagePadding[0];
        if (this._groups.length > 0) {
            x += this._groups[0].accoladeSpacing;
        }
        return x;
    }
    doResize() {
        let y = 0;
        this.width = this.renderer.width;
        let oldHeight = this.height;
        //
        // 1. Score Info
        y = this.layoutAndRenderScoreInfo(y, oldHeight);
        //
        // 2. Tunings
        y = this.layoutAndRenderTunings(y, oldHeight);
        //
        // 3. Chord Digrams
        y = this.layoutAndRenderChordDiagrams(y, oldHeight);
        //
        // 4. One result per StaveGroup
        y = this.resizeAndRenderScore(y, oldHeight);
        y = this.layoutAndRenderAnnotation(y);
        this.height = y + this._pagePadding[3];
    }
    layoutAndRenderTunings(y, totalHeight = -1) {
        if (!this.tuningGlyph) {
            return y;
        }
        let res = this.renderer.settings.display.resources;
        this.tuningGlyph.x = this._pagePadding[0];
        this.tuningGlyph.width = this.width;
        this.tuningGlyph.doLayout();
        let tuningHeight = this.tuningGlyph.height + 11 * this.scale;
        const e = new RenderFinishedEventArgs();
        e.x = 0;
        e.y = y;
        e.width = this.width;
        e.height = tuningHeight;
        e.totalWidth = this.width;
        e.totalHeight = totalHeight < 0 ? y + e.height : totalHeight;
        this.registerPartial(e, (canvas) => {
            canvas.color = res.scoreInfoColor;
            canvas.textAlign = TextAlign.Center;
            this.tuningGlyph.paint(0, 0, canvas);
        });
        return y + tuningHeight;
    }
    layoutAndRenderChordDiagrams(y, totalHeight = -1) {
        if (!this.chordDiagrams) {
            return y;
        }
        const res = this.renderer.settings.display.resources;
        this.chordDiagrams.width = this.width;
        this.chordDiagrams.doLayout();
        const diagramHeight = Math.floor(this.chordDiagrams.height);
        const e = new RenderFinishedEventArgs();
        e.x = 0;
        e.y = y;
        e.width = this.width;
        e.height = diagramHeight;
        e.totalWidth = this.width;
        e.totalHeight = totalHeight < 0 ? y + diagramHeight : totalHeight;
        this.registerPartial(e, (canvas) => {
            canvas.color = res.scoreInfoColor;
            canvas.textAlign = TextAlign.Center;
            this.chordDiagrams.paint(0, 0, canvas);
        });
        return y + diagramHeight;
    }
    layoutAndRenderScoreInfo(y, totalHeight = -1) {
        Logger.debug(this.name, 'Layouting score info');
        const e = new RenderFinishedEventArgs();
        e.x = 0;
        e.y = y;
        let infoHeight = this._pagePadding[1];
        let scale = this.scale;
        let res = this.renderer.settings.display.resources;
        let centeredGlyphs = [
            NotationElement.ScoreTitle,
            NotationElement.ScoreSubTitle,
            NotationElement.ScoreArtist,
            NotationElement.ScoreAlbum,
            NotationElement.ScoreWordsAndMusic
        ];
        for (let i = 0; i < centeredGlyphs.length; i++) {
            if (this.scoreInfoGlyphs.has(centeredGlyphs[i])) {
                let glyph = this.scoreInfoGlyphs.get(centeredGlyphs[i]);
                glyph.x = this.width / 2;
                glyph.y = infoHeight;
                glyph.textAlign = TextAlign.Center;
                infoHeight += glyph.font.size * scale;
            }
        }
        let musicOrWords = false;
        let musicOrWordsHeight = 0;
        if (this.scoreInfoGlyphs.has(NotationElement.ScoreMusic)) {
            let glyph = this.scoreInfoGlyphs.get(NotationElement.ScoreMusic);
            glyph.x = this.width - this._pagePadding[2];
            glyph.y = infoHeight;
            glyph.textAlign = TextAlign.Right;
            musicOrWords = true;
            musicOrWordsHeight = glyph.font.size * scale;
        }
        if (this.scoreInfoGlyphs.has(NotationElement.ScoreWords)) {
            let glyph = this.scoreInfoGlyphs.get(NotationElement.ScoreWords);
            glyph.x = this._pagePadding[0];
            glyph.y = infoHeight;
            glyph.textAlign = TextAlign.Left;
            musicOrWords = true;
            musicOrWordsHeight = glyph.font.size * scale;
        }
        if (musicOrWords) {
            infoHeight += musicOrWordsHeight;
        }
        infoHeight = Math.floor(infoHeight + 17 * this.scale);
        e.width = this.width;
        e.height = infoHeight;
        e.totalWidth = this.width;
        e.totalHeight = totalHeight < 0 ? y + e.height : totalHeight;
        this.registerPartial(e, (canvas) => {
            canvas.color = res.scoreInfoColor;
            canvas.textAlign = TextAlign.Center;
            for (const g of this.scoreInfoGlyphs.values()) {
                g.paint(0, 0, canvas);
            }
        });
        return y + infoHeight;
    }
    resizeAndRenderScore(y, oldHeight) {
        // if we have a fixed number of bars per row, we only need to refit them.
        if (this.renderer.settings.display.barsPerRow !== -1) {
            for (let i = 0; i < this._groups.length; i++) {
                let group = this._groups[i];
                this.fitGroup(group);
                y += this.paintGroup(group, oldHeight);
            }
        }
        else {
            this._groups = [];
            let currentIndex = 0;
            let maxWidth = this.maxWidth;
            let group = this.createEmptyStaveGroup();
            group.index = this._groups.length;
            group.x = this._pagePadding[0];
            group.y = y;
            while (currentIndex < this._allMasterBarRenderers.length) {
                // if the current renderer still has space in the current group add it
                // also force adding in case the group is empty
                let renderers = this._allMasterBarRenderers[currentIndex];
                if (group.width + renderers.width <= maxWidth || group.masterBarsRenderers.length === 0) {
                    group.addMasterBarRenderers(this.renderer.tracks, renderers);
                    // move to next group
                    currentIndex++;
                }
                else {
                    // if we cannot wrap on the current bar, we remove the last bar
                    // (this might even remove multiple ones until we reach a bar that can wrap);
                    while (renderers && !renderers.canWrap && group.masterBarsRenderers.length > 1) {
                        renderers = group.revertLastBar();
                        currentIndex--;
                    }
                    // in case we do not have space, we create a new group
                    group.isFull = true;
                    group.isLast = this.lastBarIndex === group.lastBarIndex;
                    this._groups.push(group);
                    this.fitGroup(group);
                    y += this.paintGroup(group, oldHeight);
                    // note: we do not increase currentIndex here to have it added to the next group
                    group = this.createEmptyStaveGroup();
                    group.index = this._groups.length;
                    group.x = this._pagePadding[0];
                    group.y = y;
                }
            }
            group.isLast = this.lastBarIndex === group.lastBarIndex;
            // don't forget to finish the last group
            this.fitGroup(group);
            y += this.paintGroup(group, oldHeight);
        }
        return y;
    }
    layoutAndRenderScore(y) {
        let startIndex = this.firstBarIndex;
        let currentBarIndex = startIndex;
        let endBarIndex = this.lastBarIndex;
        this._groups = [];
        while (currentBarIndex <= endBarIndex) {
            // create group and align set proper coordinates
            let group = this.createStaveGroup(currentBarIndex, endBarIndex);
            this._groups.push(group);
            group.x = this._pagePadding[0];
            group.y = y;
            currentBarIndex = group.lastBarIndex + 1;
            // finalize group (sizing etc).
            this.fitGroup(group);
            Logger.debug(this.name, 'Rendering partial from bar ' + group.firstBarIndex + ' to ' + group.lastBarIndex, null);
            y += this.paintGroup(group, y);
        }
        return y;
    }
    paintGroup(group, totalHeight) {
        // paint into canvas
        let height = Math.floor(group.height + 20 * this.scale);
        const args = new RenderFinishedEventArgs();
        args.x = 0;
        args.y = group.y;
        args.totalWidth = this.width;
        args.totalHeight = totalHeight;
        args.width = this.width;
        args.height = height;
        args.firstMasterBarIndex = group.firstBarIndex;
        args.lastMasterBarIndex = group.lastBarIndex;
        group.buildBoundingsLookup(0, 0);
        this.registerPartial(args, canvas => {
            this.renderer.canvas.color = this.renderer.settings.display.resources.mainGlyphColor;
            this.renderer.canvas.textAlign = TextAlign.Left;
            // NOTE: we use this negation trick to make the group paint itself to 0/0 coordinates
            // since we use partial drawing
            group.paint(0, -args.y, canvas);
        });
        // calculate coordinates for next group
        totalHeight += height;
        return height;
    }
    /**
     * Realignes the bars in this line according to the available space
     */
    fitGroup(group) {
        if (group.isFull || group.width > this.maxWidth) {
            group.scaleToWidth(this.maxWidth);
        }
        else {
            group.scaleToWidth(group.width);
        }
        group.finalizeGroup();
    }
    createStaveGroup(currentBarIndex, endIndex) {
        let group = this.createEmptyStaveGroup();
        group.index = this._groups.length;
        let barsPerRow = this.renderer.settings.display.barsPerRow;
        let maxWidth = this.maxWidth;
        let end = endIndex + 1;
        let barIndex = currentBarIndex;
        while (barIndex < end) {
            if (this._barsFromPreviousGroup.length > 0) {
                for (let renderer of this._barsFromPreviousGroup) {
                    group.addMasterBarRenderers(this.renderer.tracks, renderer);
                    barIndex = renderer.masterBar.index;
                }
            }
            else {
                let renderers = group.addBars(this.renderer.tracks, barIndex);
                if (renderers) {
                    this._allMasterBarRenderers.push(renderers);
                }
            }
            this._barsFromPreviousGroup = [];
            let groupIsFull = false;
            // can bar placed in this line?
            if (barsPerRow === -1 && group.width >= maxWidth && group.masterBarsRenderers.length !== 0) {
                groupIsFull = true;
            }
            else if (group.masterBarsRenderers.length === barsPerRow + 1) {
                groupIsFull = true;
            }
            if (groupIsFull) {
                let reverted = group.revertLastBar();
                if (reverted) {
                    this._barsFromPreviousGroup.push(reverted);
                    while (reverted && !reverted.canWrap && group.masterBarsRenderers.length > 1) {
                        reverted = group.revertLastBar();
                        if (reverted) {
                            this._barsFromPreviousGroup.push(reverted);
                        }
                    }
                }
                group.isFull = true;
                group.isLast = false;
                this._barsFromPreviousGroup.reverse();
                return group;
            }
            group.x = 0;
            barIndex++;
        }
        group.isLast = endIndex === group.lastBarIndex;
        return group;
    }
    get maxWidth() {
        return this.renderer.width - this._pagePadding[0] - this._pagePadding[2];
    }
}
PageViewLayout.PagePadding = [40, 40, 40, 40];
PageViewLayout.GroupSpacing = 20;

class AccidentalGlyph extends MusicFontGlyph {
    constructor(x, y, accidentalType, isGrace = false) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, AccidentalGlyph.getMusicSymbol(accidentalType));
        this._isGrace = isGrace;
        this._accidentalType = accidentalType;
    }
    static getMusicSymbol(accidentalType) {
        switch (accidentalType) {
            case AccidentalType.Natural:
                return MusicFontSymbol.AccidentalNatural;
            case AccidentalType.Sharp:
                return MusicFontSymbol.AccidentalSharp;
            case AccidentalType.Flat:
                return MusicFontSymbol.AccidentalFlat;
            case AccidentalType.NaturalQuarterNoteUp:
                return MusicFontSymbol.AccidentalQuarterToneNaturalArrowUp;
            case AccidentalType.SharpQuarterNoteUp:
                return MusicFontSymbol.AccidentalQuarterToneSharpArrowUp;
            case AccidentalType.FlatQuarterNoteUp:
                return MusicFontSymbol.AccidentalQuarterToneFlatArrowUp;
            case AccidentalType.DoubleSharp:
                return MusicFontSymbol.AccidentalDoubleSharp;
            case AccidentalType.DoubleFlat:
                return MusicFontSymbol.AccidentalDoubleFlat;
        }
        return MusicFontSymbol.None;
    }
    doLayout() {
        switch (this._accidentalType) {
            case AccidentalType.DoubleFlat:
                this.width = 18;
                break;
            default:
                this.width = 8;
                break;
        }
        this.width = this.width * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
    }
}

class BarNumberGlyph extends Glyph {
    constructor(x, y, num) {
        super(x, y);
        this._number = 0;
        this._number = num;
    }
    doLayout() {
        this.renderer.scoreRenderer.canvas.font = this.renderer.resources.barNumberFont;
        this.width = this.renderer.scoreRenderer.canvas.measureText(this._number.toString()) + 5 * this.scale;
    }
    paint(cx, cy, canvas) {
        if (!this.renderer.staff.isFirstInAccolade) {
            return;
        }
        let res = this.renderer.resources;
        let c = canvas.color;
        canvas.color = res.barNumberColor;
        canvas.font = res.barNumberFont;
        canvas.fillText(this._number.toString(), cx + this.x, cy + this.y);
        canvas.color = c;
    }
}

class BarSeperatorGlyph extends Glyph {
    constructor(x, y) {
        super(x, y);
    }
    doLayout() {
        if (this.renderer.isLast) {
            this.width = 15 * this.scale;
        }
        else if (!this.renderer.nextRenderer ||
            this.renderer.nextRenderer.staff !== this.renderer.staff ||
            !this.renderer.nextRenderer.bar.masterBar.isRepeatStart) {
            this.width = 2 * this.scale;
            if (this.renderer.bar.masterBar.isDoubleBar) {
                this.width += 2 * this.scale;
            }
        }
        else {
            this.width = 2 * this.scale;
        }
    }
    paint(cx, cy, canvas) {
        let blockWidth = 4 * this.scale;
        let top = cy + this.y + this.renderer.topPadding;
        let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
        let left = cx + this.x;
        let h = bottom - top;
        if (this.renderer.isLast) {
            // small bar
            canvas.fillRect(left + this.width - blockWidth - blockWidth, top, this.scale, h);
            // big bar
            canvas.fillRect(left + this.width - blockWidth, top, blockWidth, h);
        }
        else if (!this.renderer.nextRenderer ||
            this.renderer.nextRenderer.staff !== this.renderer.staff ||
            !this.renderer.nextRenderer.bar.masterBar.isRepeatStart) {
            // small bar
            canvas.fillRect(left + this.width - this.scale, top, this.scale, h);
            if (this.renderer.bar.masterBar.isDoubleBar) {
                canvas.fillRect(left + this.width - 5 * this.scale, top, this.scale, h);
            }
        }
    }
}

class ClefGlyph extends MusicFontGlyph {
    constructor(x, y, clef, clefOttava) {
        super(x, y, 1, ClefGlyph.getSymbol(clef));
        this._clef = clef;
        this._clefOttava = clefOttava;
    }
    doLayout() {
        switch (this._clef) {
            case Clef.Neutral:
                this.width = 15 * this.scale;
                break;
            case Clef.C3:
            case Clef.C4:
            case Clef.F4:
            case Clef.G2:
                this.width = 28 * this.scale;
                break;
        }
    }
    static getSymbol(clef) {
        switch (clef) {
            case Clef.Neutral:
                return MusicFontSymbol.UnpitchedPercussionClef1;
            case Clef.C3:
                return MusicFontSymbol.CClef;
            case Clef.C4:
                return MusicFontSymbol.CClef;
            case Clef.F4:
                return MusicFontSymbol.FClef;
            case Clef.G2:
                return MusicFontSymbol.GClef;
            default:
                return MusicFontSymbol.None;
        }
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        let numberGlyph;
        let top = false;
        switch (this._clefOttava) {
            case Ottavia._15ma:
                numberGlyph = new MusicFontGlyph(-4 * this.scale, 0, 0.5, MusicFontSymbol.Quindicesima);
                top = true;
                break;
            case Ottavia._8va:
                numberGlyph = new MusicFontGlyph(-2 * this.scale, 0, 0.5, MusicFontSymbol.Ottava);
                top = true;
                break;
            case Ottavia._8vb:
                numberGlyph = new MusicFontGlyph(-6 * this.scale, 0, 0.5, MusicFontSymbol.Ottava);
                break;
            case Ottavia._15mb:
                numberGlyph = new MusicFontGlyph(-8 * this.scale, 0, 0.5, MusicFontSymbol.Quindicesima);
                break;
            default:
                return;
        }
        let offsetY = 0;
        let offsetX = 0;
        switch (this._clef) {
            case Clef.Neutral:
                offsetY = top ? -12 : 15;
                offsetX = 0;
                break;
            case Clef.C3:
                offsetY = top ? -19 : 27;
                offsetX = 0;
                break;
            case Clef.C4:
                offsetY = top ? -19 : 27;
                offsetX = 0;
                break;
            case Clef.F4:
                offsetY = top ? -9 : 27;
                offsetX = -4;
                break;
            case Clef.G2:
                offsetY = top ? -37 : 30;
                offsetX = 0;
                break;
            default:
                return;
        }
        numberGlyph.renderer = this.renderer;
        numberGlyph.doLayout();
        let x = this.width / 2;
        numberGlyph.paint(cx + this.x + x + offsetX * this.scale, cy + this.y + offsetY * this.scale, canvas);
    }
}

class RepeatCloseGlyph extends Glyph {
    constructor(x, y) {
        super(x, y);
    }
    doLayout() {
        this.width = 11 * this.scale;
    }
    paint(cx, cy, canvas) {
        let blockWidth = 4 * this.scale;
        let top = cy + this.y + this.renderer.topPadding;
        let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
        let left = cx + this.x;
        let h = bottom - top;
        // circles
        let circleSize = 1.5 * this.scale;
        let middle = (top + bottom) / 2;
        let dotOffset = 3;
        canvas.fillCircle(left, middle - circleSize * dotOffset, circleSize);
        canvas.fillCircle(left, middle + circleSize * dotOffset, circleSize);
        // line
        left += 4 * this.scale;
        canvas.beginPath();
        canvas.moveTo(left, top);
        canvas.lineTo(left, bottom);
        canvas.stroke();
        // big bar
        left += 3 * this.scale + 0.5;
        canvas.fillRect(left, top, blockWidth, h);
    }
}

class RepeatCountGlyph extends Glyph {
    constructor(x, y, count) {
        super(x, y);
        this._count = 0;
        this._count = 0;
        this._count = count;
    }
    doLayout() {
        this.width = 0;
    }
    paint(cx, cy, canvas) {
        let res = this.renderer.resources;
        let oldAlign = canvas.textAlign;
        canvas.font = res.barNumberFont;
        canvas.textAlign = TextAlign.Right;
        let s = 'x' + this._count;
        let w = canvas.measureText(s) / 1.5;
        canvas.fillText(s, cx + this.x - w, cy + this.y);
        canvas.textAlign = oldAlign;
    }
}

class RepeatOpenGlyph extends Glyph {
    constructor(x, y, circleSize, dotOffset) {
        super(x, y);
        this._dotOffset = 0;
        this._circleSize = 0;
        this._dotOffset = 0.0;
        this._circleSize = 0.0;
        this._dotOffset = dotOffset;
        this._circleSize = circleSize;
    }
    doLayout() {
        this.width = 13 * this.scale;
    }
    paint(cx, cy, canvas) {
        let blockWidth = 4 * this.scale;
        let top = cy + this.y + this.renderer.topPadding;
        let bottom = cy + this.y + this.renderer.height - this.renderer.bottomPadding;
        let left = cx + this.x + 0.5;
        // big bar
        let h = bottom - top;
        canvas.fillRect(left, top, blockWidth, h);
        // line
        left += blockWidth * 2 - 0.5;
        canvas.beginPath();
        canvas.moveTo(left, top);
        canvas.lineTo(left, bottom);
        canvas.stroke();
        // circles
        left += 3 * this.scale;
        let circleSize = this._circleSize * this.scale;
        let middle = (top + bottom) / 2;
        canvas.fillCircle(left, middle - circleSize * this._dotOffset, circleSize);
        canvas.fillCircle(left, middle + circleSize * this._dotOffset, circleSize);
    }
}

class AccentuationGlyph extends MusicFontGlyph {
    constructor(x, y, accentuation) {
        super(x, y, 1, AccentuationGlyph.getSymbol(accentuation));
    }
    static getSymbol(accentuation) {
        switch (accentuation) {
            case AccentuationType.None:
                return MusicFontSymbol.None;
            case AccentuationType.Normal:
                return MusicFontSymbol.ArticAccentAbove;
            case AccentuationType.Heavy:
                return MusicFontSymbol.ArticMarcatoAbove;
            default:
                return MusicFontSymbol.None;
        }
    }
    doLayout() {
        this.width = 9 * this.scale;
        this.height = 9 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx - 2 * this.scale, cy + this.height, canvas);
    }
}

class CircleGlyph extends Glyph {
    constructor(x, y, size) {
        super(x, y);
        this._size = 0;
        this._size = size;
    }
    doLayout() {
        this.width = this._size + 3 * this.scale;
    }
    paint(cx, cy, canvas) {
        canvas.fillCircle(cx + this.x, cy + this.y, this._size);
    }
}

class DeadNoteHeadGlyph extends MusicFontGlyph {
    constructor(x, y, isGrace) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, MusicFontSymbol.NoteheadXOrnate);
        this._isGrace = isGrace;
    }
    doLayout() {
        this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        this.height = NoteHeadGlyph.NoteHeadHeight * this.scale;
    }
}

class DiamondNoteHeadGlyph extends MusicFontGlyph {
    constructor(x, y, duration, isGrace) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, DiamondNoteHeadGlyph.getSymbol(duration));
        this._isGrace = isGrace;
    }
    static getSymbol(duration) {
        switch (duration) {
            case Duration.QuadrupleWhole:
            case Duration.DoubleWhole:
            case Duration.Whole:
            case Duration.Half:
                return MusicFontSymbol.NoteheadDiamondWhiteWide;
            default:
                return MusicFontSymbol.NoteheadDiamondBlackWide;
        }
    }
    doLayout() {
        this.width = 9 * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        this.height = NoteHeadGlyph.NoteHeadHeight * this.scale;
    }
}

class TieGlyph extends Glyph {
    constructor(startBeat, endBeat, forEnd) {
        super(0, 0);
        this.yOffset = 0;
        this.startNoteRenderer = null;
        this.endNoteRenderer = null;
        this.tieDirection = BeamDirection.Up;
        this._startX = 0;
        this._startY = 0;
        this._endX = 0;
        this._endY = 0;
        this._tieHeight = 0;
        this._shouldDraw = false;
        this.startBeat = startBeat;
        this.endBeat = endBeat;
        this.forEnd = forEnd;
    }
    doLayout() {
        this.width = 0;
        // TODO fix nullability of start/end beat,
        if (!this.endBeat) {
            this._shouldDraw = false;
            return;
        }
        let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.startBeat.voice.bar);
        this.startNoteRenderer = startNoteRenderer;
        let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.endBeat.voice.bar);
        this.endNoteRenderer = endNoteRenderer;
        this._startX = 0;
        this._endX = 0;
        this._startY = 0;
        this._endY = 0;
        this.height = 0;
        this._shouldDraw = false;
        // if we are on the tie start, we check if we
        // either can draw till the end note, or we just can draw till the bar end
        this.tieDirection = !startNoteRenderer
            ? this.getBeamDirection(this.endBeat, endNoteRenderer)
            : this.getBeamDirection(this.startBeat, startNoteRenderer);
        if (!this.forEnd && startNoteRenderer) {
            // line break or bar break
            if (startNoteRenderer !== endNoteRenderer) {
                this._startX = startNoteRenderer.x + this.getStartX();
                this._startY = startNoteRenderer.y + this.getStartY() + this.yOffset;
                // line break: to bar end
                if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                    this._endX = startNoteRenderer.x + startNoteRenderer.width;
                    this._endY = this._startY;
                }
                else {
                    this._endX = endNoteRenderer.x + this.getEndX();
                    this._endY = endNoteRenderer.y + this.getEndY() + this.yOffset;
                }
            }
            else {
                this._startX = startNoteRenderer.x + this.getStartX();
                this._endX = endNoteRenderer.x + this.getEndX();
                this._startY = startNoteRenderer.y + this.getStartY() + this.yOffset;
                this._endY = endNoteRenderer.y + this.getEndY() + this.yOffset;
            }
            this._shouldDraw = true;
        }
        else if (!startNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
            this._startX = endNoteRenderer.x;
            this._endX = endNoteRenderer.x + this.getEndX();
            this._startY = endNoteRenderer.y + this.getEndY() + this.yOffset;
            this._endY = this._startY;
            this._shouldDraw = true;
        }
        if (this._shouldDraw) {
            this.y = Math.min(this._startY, this._endY);
            if (this.shouldDrawBendSlur()) {
                this._tieHeight = 0; // TODO: Bend slur height to be considered?
            }
            else {
                this._tieHeight = this.getTieHeight(this._startX, this._startY, this._endX, this._endY);
                this.height = TieGlyph.calculateActualTieHeight(this.renderer.scale, this._startX, this._startY, this._endX, this._endY, this.tieDirection === BeamDirection.Down, this._tieHeight, 4).h;
            }
            if (this.tieDirection === BeamDirection.Up) {
                this.y -= this.height;
            }
        }
    }
    paint(cx, cy, canvas) {
        if (this._shouldDraw) {
            if (this.shouldDrawBendSlur()) {
                TieGlyph.drawBendSlur(canvas, cx + this._startX, cy + this._startY, cx + this._endX, cy + this._endY, this.tieDirection === BeamDirection.Down, this.scale);
            }
            else {
                TieGlyph.paintTie(canvas, this.scale, cx + this._startX, cy + this._startY, cx + this._endX, cy + this._endY, this.tieDirection === BeamDirection.Down, this._tieHeight, 4);
            }
        }
    }
    shouldDrawBendSlur() {
        return false;
    }
    getTieHeight(startX, startY, endX, endY) {
        return 22;
    }
    getBeamDirection(beat, noteRenderer) {
        return BeamDirection.Down;
    }
    getStartY() {
        return 0;
    }
    getEndY() {
        return 0;
    }
    getStartX() {
        return 0;
    }
    getEndX() {
        return 0;
    }
    static calculateActualTieHeight(scale, x1, y1, x2, y2, down, offset, size) {
        const cp = TieGlyph.computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size);
        x1 = cp[0];
        y1 = cp[1];
        const cpx = cp[2];
        const cpy = cp[3];
        x2 = cp[6];
        y2 = cp[7];
        const tx = (x1 - cpx) / (x1 - 2 * cpx + x2);
        const ex = TieGlyph.calculateExtrema(x1, y1, cpx, cpy, x2, y2, tx);
        const xMin = ex.length > 0 ? Math.min(x1, x2, ex[0]) : Math.min(x1, x2);
        const xMax = ex.length > 0 ? Math.max(x1, x2, ex[0]) : Math.max(x1, x2);
        const ty = (y1 - cpy) / (y1 - 2 * cpy + y2);
        const ey = TieGlyph.calculateExtrema(x1, y1, cpx, cpy, x2, y2, ty);
        const yMin = ey.length > 0 ? Math.min(y1, y2, ey[1]) : Math.min(y1, y2);
        const yMax = ey.length > 0 ? Math.max(y1, y2, ey[1]) : Math.max(y1, y2);
        const b = new Bounds();
        b.x = xMin;
        b.y = yMin;
        b.w = xMax - xMin;
        b.h = yMax - yMin;
        return b;
    }
    static calculateExtrema(x1, y1, cpx, cpy, x2, y2, t) {
        if (t <= 0 || 1 <= t) {
            return [];
        }
        const c1x = x1 + (cpx - x1) * t;
        const c1y = y1 + (cpy - y1) * t;
        const c2x = cpx + (x2 - cpx) * t;
        const c2y = cpy + (y2 - cpy) * t;
        return [c1x + (c2x - c1x) * t, c1y + (c2y - c1y) * t];
    }
    static computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size) {
        if (x1 === x2 && y1 === y2) {
            return [];
        }
        // ensure endX > startX
        if (x2 < x1) {
            let t = x1;
            x1 = x2;
            x2 = t;
            t = y1;
            y1 = y2;
            y2 = t;
        }
        //
        // calculate control points
        //
        offset *= scale;
        size *= scale;
        // normal vector
        let normalVectorX = y2 - y1;
        let normalVectorY = x2 - x1;
        let length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
        if (down) {
            normalVectorX *= -1;
        }
        else {
            normalVectorY *= -1;
        }
        // make to unit vector
        normalVectorX /= length;
        normalVectorY /= length;
        // center of connection
        let centerX = (x2 + x1) / 2;
        let centerY = (y2 + y1) / 2;
        // control points
        let cp1X = centerX + offset * normalVectorX;
        let cp1Y = centerY + offset * normalVectorY;
        let cp2X = centerX + (offset - size) * normalVectorX;
        let cp2Y = centerY + (offset - size) * normalVectorY;
        return [x1, y1, cp1X, cp1Y, cp2X, cp2Y, x2, y2];
    }
    static paintTie(canvas, scale, x1, y1, x2, y2, down = false, offset = 22, size = 4) {
        const cps = TieGlyph.computeBezierControlPoints(scale, x1, y1, x2, y2, down, offset, size);
        canvas.beginPath();
        canvas.moveTo(cps[0], cps[1]);
        canvas.quadraticCurveTo(cps[2], cps[3], cps[6], cps[7]);
        canvas.quadraticCurveTo(cps[4], cps[5], cps[0], cps[1]);
        canvas.closePath();
        canvas.fill();
        // const c = canvas.color;
        // canvas.color = Color.random(100);
        // canvas.fillCircle(cps[0], cps[1], 4);
        // canvas.fillCircle(cps[2], cps[3], 4);
        // canvas.fillCircle(cps[4], cps[5], 4);
        // canvas.fillCircle(cps[7], cps[6], 4);
        // canvas.color = Color.random(100);
        // const bbox = TieGlyph.calculateActualTieHeight(scale, x1, y1, x2, y2, down, offset, size);
        // canvas.fillRect(bbox.x, bbox.y, bbox.w, bbox.h);
        // canvas.color = c;
    }
    static drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText) {
        let normalVectorX = y2 - y1;
        let normalVectorY = x2 - x1;
        let length = Math.sqrt(normalVectorX * normalVectorX + normalVectorY * normalVectorY);
        if (down) {
            normalVectorX *= -1;
        }
        else {
            normalVectorY *= -1;
        }
        // make to unit vector
        normalVectorX /= length;
        normalVectorY /= length;
        // center of connection
        // TODO: should be 1/3
        let centerX = (x2 + x1) / 2;
        let centerY = (y2 + y1) / 2;
        let offset = TieGlyph.BendSlurHeight * scale;
        if (x2 - x1 < 20) {
            offset /= 2;
        }
        let cp1X = centerX + offset * normalVectorX;
        let cp1Y = centerY + offset * normalVectorY;
        canvas.beginPath();
        canvas.moveTo(x1, y1);
        canvas.lineTo(cp1X, cp1Y);
        canvas.lineTo(x2, y2);
        canvas.stroke();
        if (slurText) {
            let w = canvas.measureText(slurText);
            let textOffset = down ? 0 : -canvas.font.size;
            canvas.fillText(slurText, cp1X - w / 2, cp1Y + textOffset);
        }
    }
}
TieGlyph.BendSlurHeight = 11;

class GhostParenthesisGlyph extends Glyph {
    constructor(isOpen) {
        super(0, 0);
        this._isOpen = isOpen;
    }
    doLayout() {
        super.doLayout();
        this.width = GhostParenthesisGlyph.Size * this.scale;
    }
    paint(cx, cy, canvas) {
        if (this._isOpen) {
            TieGlyph.paintTie(canvas, this.scale, cx + this.x + this.width, cy + this.y + this.height, cx + this.x + this.width, cy + this.y, false, 6, 3);
        }
        else {
            TieGlyph.paintTie(canvas, this.scale, cx + this.x, cy + this.y, cx + this.x, cy + this.y + this.height, false, 6, 3);
        }
    }
}
GhostParenthesisGlyph.Size = 6;

class GhostNoteInfo {
    constructor(line, isGhost) {
        this.line = 0;
        this.line = line;
        this.isGhost = isGhost;
    }
}
class GhostNoteContainerGlyph extends Glyph {
    constructor(isOpen) {
        super(0, 0);
        this._infos = [];
        this._glyphs = [];
        this.isEmpty = true;
        this._isOpen = isOpen;
    }
    addParenthesis(n) {
        let sr = this.renderer;
        let line = sr.getNoteLine(n);
        let hasParenthesis = n.isGhost || (this.isTiedBend(n) && sr.settings.notation.isNotationElementVisible(NotationElement.ParenthesisOnTiedBends));
        this.addParenthesisOnLine(line, hasParenthesis);
    }
    addParenthesisOnLine(line, hasParenthesis) {
        let info = new GhostNoteInfo(line, hasParenthesis);
        this._infos.push(info);
        if (hasParenthesis) {
            this.isEmpty = false;
        }
    }
    isTiedBend(note) {
        if (note.isTieDestination) {
            if (note.tieOrigin.hasBend) {
                return true;
            }
            return this.isTiedBend(note.tieOrigin);
        }
        return false;
    }
    doLayout() {
        let sr = this.renderer;
        this._infos.sort((a, b) => {
            return a.line - b.line;
        });
        let previousGlyph = null;
        let sizePerLine = sr.getScoreHeight(1);
        for (let i = 0, j = this._infos.length; i < j; i++) {
            let g;
            if (!this._infos[i].isGhost) {
                previousGlyph = null;
            }
            else if (!previousGlyph) {
                g = new GhostParenthesisGlyph(this._isOpen);
                g.renderer = this.renderer;
                g.y = sr.getScoreY(this._infos[i].line) - sizePerLine;
                g.height = sizePerLine * 2;
                g.doLayout();
                this._glyphs.push(g);
                previousGlyph = g;
            }
            else {
                let y = sr.getScoreY(this._infos[i].line) + sizePerLine;
                previousGlyph.height = y - previousGlyph.y;
            }
        }
        this.width = this._glyphs.length > 0 ? this._glyphs[0].width : 0;
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        for (let g of this._glyphs) {
            g.paint(cx + this.x, cy + this.y, canvas);
        }
    }
}

class ScoreNoteGlyphInfo {
    constructor(glyph, line) {
        this.line = 0;
        this.glyph = glyph;
        this.line = line;
    }
}

class ScoreNoteChordGlyphBase extends Glyph {
    constructor() {
        super(0, 0);
        this._infos = [];
        this._noteHeadPadding = 0;
        this.minNote = null;
        this.maxNote = null;
        this.spacingChanged = new EventEmitter();
        this.upLineX = 0;
        this.downLineX = 0;
        this.displacedX = 0;
        this.noteStartX = 0;
    }
    add(noteGlyph, noteLine) {
        let info = new ScoreNoteGlyphInfo(noteGlyph, noteLine);
        this._infos.push(info);
        if (!this.minNote || this.minNote.line > info.line) {
            this.minNote = info;
        }
        if (!this.maxNote || this.maxNote.line < info.line) {
            this.maxNote = info;
        }
    }
    get hasTopOverflow() {
        return !!this.minNote && this.minNote.line <= 0;
    }
    get hasBottomOverflow() {
        return !!this.maxNote && this.maxNote.line > 8;
    }
    doLayout() {
        this._infos.sort((a, b) => {
            return b.line - a.line;
        });
        let displacedX = 0;
        let lastDisplaced = false;
        let lastLine = 0;
        let anyDisplaced = false;
        let direction = this.direction;
        let w = 0;
        for (let i = 0, j = this._infos.length; i < j; i++) {
            let g = this._infos[i].glyph;
            g.renderer = this.renderer;
            g.doLayout();
            let displace = false;
            if (i === 0) {
                displacedX = g.width;
            }
            else {
                // check if note needs to be repositioned
                if (Math.abs(lastLine - this._infos[i].line) <= 1) {
                    // reposition if needed
                    if (!lastDisplaced) {
                        displace = true;
                        g.x = displacedX;
                        anyDisplaced = true;
                        lastDisplaced = true; // let next iteration know we are displace now
                    }
                    else {
                        lastDisplaced = false; // let next iteration know that we weren't displaced now
                    }
                }
                else {
                    lastDisplaced = false;
                }
            }
            // for beat direction down we invert the displacement.
            // this means: displaced is on the left side of the stem and not displaced is right
            if (direction === BeamDirection.Down) {
                g.x = displace ? 0 : displacedX;
            }
            else {
                g.x = displace ? displacedX : 0;
            }
            g.x += this.noteStartX;
            lastLine = this._infos[i].line;
            w = Math.max(w, g.x + g.width);
        }
        if (anyDisplaced) {
            this._noteHeadPadding = 0;
            this.upLineX = displacedX;
            this.downLineX = displacedX;
        }
        else {
            this._noteHeadPadding = direction === BeamDirection.Down ? -displacedX : 0;
            w += this._noteHeadPadding;
            this.upLineX = w;
            this.downLineX = 0;
        }
        this.displacedX = displacedX;
        this.width = w;
    }
    paint(cx, cy, canvas) {
        cx += this.x;
        cy += this.y;
        // TODO: this method seems to be quite heavy according to the profiler, why?
        let scoreRenderer = this.renderer;
        // TODO: Take care of beateffects in overflow
        let linePadding = 3 * this.scale;
        let lineWidth = this.width - this.noteStartX + linePadding * 2;
        if (this.hasTopOverflow) {
            let color = canvas.color;
            canvas.color = scoreRenderer.resources.staffLineColor;
            let l = -2;
            while (l >= this.minNote.line) {
                // + 1 Because we want to place the line in the center of the note, not at the top
                let lY = cy + scoreRenderer.getScoreY(l);
                canvas.fillRect(cx - linePadding + this.noteStartX, lY, lineWidth, this.scale);
                l -= 2;
            }
            canvas.color = color;
        }
        if (this.hasBottomOverflow) {
            let color = canvas.color;
            canvas.color = scoreRenderer.resources.staffLineColor;
            let l = 10;
            while (l <= this.maxNote.line) {
                let lY = cy + scoreRenderer.getScoreY(l);
                canvas.fillRect(cx - linePadding + this.noteStartX, lY, lineWidth, this.scale);
                l += 2;
            }
            canvas.color = color;
        }
        let infos = this._infos;
        let x = cx + this._noteHeadPadding;
        for (let g of infos) {
            g.glyph.renderer = this.renderer;
            g.glyph.paint(x, cy, canvas);
        }
    }
}

class TremoloPickingGlyph extends MusicFontGlyph {
    constructor(x, y, duration) {
        super(x, y, 1, TremoloPickingGlyph.getSymbol(duration));
    }
    doLayout() {
        this.width = 12 * this.scale;
    }
    static getSymbol(duration) {
        switch (duration) {
            case Duration.ThirtySecond:
                return MusicFontSymbol.Tremolo3;
            case Duration.Sixteenth:
                return MusicFontSymbol.Tremolo2;
            case Duration.Eighth:
                return MusicFontSymbol.Tremolo1;
            default:
                return MusicFontSymbol.None;
        }
    }
}

class ScoreNoteChordGlyph extends ScoreNoteChordGlyphBase {
    constructor() {
        super();
        this._noteGlyphLookup = new Map();
        this._notes = [];
        this._tremoloPicking = null;
        this.aboveBeatEffects = new Map();
        this.belowBeatEffects = new Map();
    }
    get direction() {
        return this.beamingHelper.direction;
    }
    getNoteX(note, requestedPosition) {
        if (this._noteGlyphLookup.has(note.id)) {
            let n = this._noteGlyphLookup.get(note.id);
            let pos = this.x + n.x + this._noteHeadPadding;
            switch (requestedPosition) {
                case NoteXPosition.Left:
                    break;
                case NoteXPosition.Center:
                    pos += n.width / 2;
                    break;
                case NoteXPosition.Right:
                    pos += n.width;
                    break;
            }
            return pos;
        }
        return 0;
    }
    getNoteY(note, requestedPosition) {
        if (this._noteGlyphLookup.has(note.id)) {
            const n = this._noteGlyphLookup.get(note.id);
            let pos = this.y + n.y;
            switch (requestedPosition) {
                case NoteYPosition.TopWithStem:
                    pos -= this.renderer.getStemSize(this.beamingHelper);
                    break;
                case NoteYPosition.Top:
                    pos -= n.height / 2;
                    break;
                case NoteYPosition.Center:
                    break;
                case NoteYPosition.Bottom:
                    pos += n.height / 2;
                    break;
                case NoteYPosition.BottomWithStem:
                    pos += this.renderer.getStemSize(this.beamingHelper);
                    break;
            }
            return pos;
        }
        return 0;
    }
    addNoteGlyph(noteGlyph, note, noteLine) {
        super.add(noteGlyph, noteLine);
        this._noteGlyphLookup.set(note.id, noteGlyph);
        this._notes.push(note);
    }
    updateBeamingHelper(cx) {
        if (this.beamingHelper) {
            this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.upLineX, cx + this.x + this.downLineX);
        }
    }
    doLayout() {
        super.doLayout();
        let direction = this.direction;
        for (const effect of this.aboveBeatEffects.values()) {
            effect.renderer = this.renderer;
            effect.doLayout();
        }
        for (const effect of this.belowBeatEffects.values()) {
            effect.renderer = this.renderer;
            effect.doLayout();
        }
        if (this.beat.isTremolo) {
            let offset = 0;
            let baseNote = direction === BeamDirection.Up ? this.minNote : this.maxNote;
            let tremoloX = direction === BeamDirection.Up ? this.displacedX : 0;
            let speed = this.beat.tremoloSpeed;
            switch (speed) {
                case Duration.ThirtySecond:
                    offset = direction === BeamDirection.Up ? -15 : 15;
                    break;
                case Duration.Sixteenth:
                    offset = direction === BeamDirection.Up ? -12 : 15;
                    break;
                case Duration.Eighth:
                    offset = direction === BeamDirection.Up ? -10 : 10;
                    break;
                default:
                    offset = direction === BeamDirection.Up ? -10 : 15;
                    break;
            }
            this._tremoloPicking = new TremoloPickingGlyph(tremoloX, baseNote.glyph.y + offset * this.scale, speed);
            this._tremoloPicking.renderer = this.renderer;
            this._tremoloPicking.doLayout();
        }
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        for (let note of this._notes) {
            if (this._noteGlyphLookup.has(note.id)) {
                let glyph = this._noteGlyphLookup.get(note.id);
                let noteBounds = new NoteBounds();
                noteBounds.note = note;
                noteBounds.noteHeadBounds = new Bounds();
                noteBounds.noteHeadBounds.x = cx + this.x + this._noteHeadPadding + glyph.x;
                noteBounds.noteHeadBounds.y = cy + this.y + glyph.y - glyph.height / 2;
                noteBounds.noteHeadBounds.w = glyph.width;
                noteBounds.noteHeadBounds.h = glyph.height;
                beatBounds.addNote(noteBounds);
            }
        }
    }
    paint(cx, cy, canvas) {
        // TODO: this method seems to be quite heavy according to the profiler, why?
        let scoreRenderer = this.renderer;
        //
        // Note Effects only painted once
        //
        let aboveBeatEffectsY = 0;
        let belowBeatEffectsY = 0;
        let belowEffectSpacing = 1;
        let aboveEffectSpacing = -belowEffectSpacing;
        if (this.beamingHelper.direction === BeamDirection.Up) {
            belowBeatEffectsY = scoreRenderer.getScoreY(this.minNote.line);
            aboveBeatEffectsY = scoreRenderer.getScoreY(this.maxNote.line - 2);
        }
        else {
            belowBeatEffectsY = scoreRenderer.getScoreY(this.maxNote.line - 1);
            aboveBeatEffectsY = scoreRenderer.getScoreY(this.minNote.line + 1);
            aboveEffectSpacing *= -1;
            belowEffectSpacing *= -1;
        }
        for (const g of this.aboveBeatEffects.values()) {
            aboveBeatEffectsY += aboveEffectSpacing * g.height;
            g.paint(cx + this.x + 2 * this.scale, cy + this.y + aboveBeatEffectsY, canvas);
        }
        for (const g of this.belowBeatEffects.values()) {
            belowBeatEffectsY += belowEffectSpacing * g.height;
            g.paint(cx + this.x + 2 * this.scale, cy + this.y + belowBeatEffectsY, canvas);
        }
        super.paint(cx, cy, canvas);
        if (this._tremoloPicking) {
            this._tremoloPicking.paint(cx, cy, canvas);
        }
    }
}

class ScoreRestGlyph extends MusicFontGlyph {
    constructor(x, y, duration) {
        super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
        this._duration = duration;
    }
    static getSymbol(duration) {
        switch (duration) {
            case Duration.QuadrupleWhole:
                return MusicFontSymbol.RestLonga;
            case Duration.DoubleWhole:
                return MusicFontSymbol.RestDoubleWhole;
            case Duration.Whole:
                return MusicFontSymbol.RestWhole;
            case Duration.Half:
                return MusicFontSymbol.RestHalf;
            case Duration.Quarter:
                return MusicFontSymbol.RestQuarter;
            case Duration.Eighth:
                return MusicFontSymbol.RestEighth;
            case Duration.Sixteenth:
                return MusicFontSymbol.RestSixteenth;
            case Duration.ThirtySecond:
                return MusicFontSymbol.RestThirtySecond;
            case Duration.SixtyFourth:
                return MusicFontSymbol.RestSixtyFourth;
            case Duration.OneHundredTwentyEighth:
                return MusicFontSymbol.RestOneHundredTwentyEighth;
            case Duration.TwoHundredFiftySixth:
                return MusicFontSymbol.RestTwoHundredFiftySixth;
            default:
                return MusicFontSymbol.None;
        }
    }
    static getSize(duration) {
        switch (duration) {
            case Duration.QuadrupleWhole:
            case Duration.DoubleWhole:
            case Duration.Whole:
            case Duration.Half:
            case Duration.Quarter:
            case Duration.Eighth:
            case Duration.Sixteenth:
                return 9;
            case Duration.ThirtySecond:
                return 12;
            case Duration.SixtyFourth:
                return 14;
            case Duration.OneHundredTwentyEighth:
            case Duration.TwoHundredFiftySixth:
                return 20;
        }
        return 10;
    }
    doLayout() {
        this.width = ScoreRestGlyph.getSize(this._duration) * this.scale;
    }
    updateBeamingHelper(cx) {
        if (this.beamingHelper) {
            this.beamingHelper.registerBeatLineX('score', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
        }
    }
}

class AccidentalColumnInfo {
    constructor() {
        this.x = 0;
        this.y = -3000;
        this.width = 0;
    }
}
class AccidentalGroupGlyph extends GlyphGroup {
    constructor() {
        super(0, 0);
    }
    doLayout() {
        if (!this.glyphs || this.glyphs.length === 0) {
            this.width = 0;
            return;
        }
        //
        // Determine Columns for accidentals
        //
        this.glyphs.sort((a, b) => {
            if (a.y < b.y) {
                return -1;
            }
            if (a.y > b.y) {
                return 1;
            }
            return 0;
        });
        // defines the reserved y position of the columns
        let columns = [];
        columns.push(new AccidentalColumnInfo());
        let accidentalHeight = 21 * this.scale;
        for (let i = 0, j = this.glyphs.length; i < j; i++) {
            let g = this.glyphs[i];
            g.renderer = this.renderer;
            g.doLayout();
            // find column where glyph fits into
            // as long the glyph does not fit into the current column
            let gColumn = 0;
            while (columns[gColumn].y > g.y) {
                // move to next column
                gColumn++;
                // and create the new column if needed
                if (gColumn === columns.length) {
                    columns.push(new AccidentalColumnInfo());
                }
            }
            // temporary save column as X
            g.x = gColumn;
            columns[gColumn].y = g.y + accidentalHeight;
            if (columns[gColumn].width < g.width) {
                columns[gColumn].width = g.width;
            }
        }
        //
        // Place accidentals in columns
        //
        this.width = 0;
        for (const column of columns) {
            this.width += column.width;
            column.x = this.width;
        }
        for (let i = 0, j = this.glyphs.length; i < j; i++) {
            let g = this.glyphs[i];
            const column = columns[g.x];
            g.x = (this.width - column.x);
        }
    }
}

class BendNoteHeadGroupGlyph extends ScoreNoteChordGlyphBase {
    constructor(beat, showParenthesis = false) {
        super();
        this._showParenthesis = false;
        this._noteValueLookup = new Map();
        this._accidentals = new AccidentalGroupGlyph();
        this._preNoteParenthesis = null;
        this._postNoteParenthesis = null;
        this.isEmpty = true;
        this.noteHeadOffset = 0;
        this._beat = beat;
        this._showParenthesis = showParenthesis;
        if (showParenthesis) {
            this._preNoteParenthesis = new GhostNoteContainerGlyph(true);
            this._postNoteParenthesis = new GhostNoteContainerGlyph(false);
        }
    }
    get direction() {
        return BeamDirection.Up;
    }
    containsNoteValue(noteValue) {
        return this._noteValueLookup.has(noteValue);
    }
    getNoteValueY(noteValue) {
        if (this._noteValueLookup.has(noteValue)) {
            return this.y + this._noteValueLookup.get(noteValue).y;
        }
        return 0;
    }
    addGlyph(noteValue, quarterBend = false) {
        let sr = this.renderer;
        let noteHeadGlyph = new NoteHeadGlyph(0, 0, Duration.Quarter, true);
        let accidental = sr.accidentalHelper.applyAccidentalForValue(this._beat, noteValue, quarterBend, true);
        let line = sr.accidentalHelper.getNoteLineForValue(noteValue, false);
        noteHeadGlyph.y = sr.getScoreY(line);
        if (this._showParenthesis) {
            this._preNoteParenthesis.renderer = this.renderer;
            this._postNoteParenthesis.renderer = this.renderer;
            this._preNoteParenthesis.addParenthesisOnLine(line, true);
            this._postNoteParenthesis.addParenthesisOnLine(line, true);
        }
        if (accidental !== AccidentalType.None) {
            let g = new AccidentalGlyph(0, noteHeadGlyph.y, accidental, true);
            g.renderer = this.renderer;
            this._accidentals.renderer = this.renderer;
            this._accidentals.addGlyph(g);
        }
        this._noteValueLookup.set(noteValue, noteHeadGlyph);
        this.add(noteHeadGlyph, line);
        this.isEmpty = false;
    }
    doLayout() {
        let x = 0;
        if (this._showParenthesis) {
            this._preNoteParenthesis.x = x;
            this._preNoteParenthesis.renderer = this.renderer;
            this._preNoteParenthesis.doLayout();
            x += this._preNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
        }
        if (!this._accidentals.isEmpty) {
            x += this._accidentals.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
            this._accidentals.x = x;
            this._accidentals.renderer = this.renderer;
            this._accidentals.doLayout();
            x += this._accidentals.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
        }
        this.noteStartX = x;
        super.doLayout();
        this.noteHeadOffset = this.noteStartX + (this.width - this.noteStartX) / 2;
        if (this._showParenthesis) {
            this._postNoteParenthesis.x = this.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
            this._postNoteParenthesis.renderer = this.renderer;
            this._postNoteParenthesis.doLayout();
            this.width += this._postNoteParenthesis.width + BendNoteHeadGroupGlyph.ElementPadding * this.scale;
        }
    }
    paint(cx, cy, canvas) {
        // canvas.Color = Color.Random();
        // canvas.FillRect(cx + X, cy + Y, Width, 10);
        // canvas.Color = Renderer.Resources.MainGlyphColor;
        if (!this._accidentals.isEmpty) {
            this._accidentals.paint(cx + this.x, cy + this.y, canvas);
        }
        if (this._showParenthesis) {
            this._preNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
            this._postNoteParenthesis.paint(cx + this.x, cy + this.y, canvas);
        }
        super.paint(cx, cy, canvas);
    }
}
BendNoteHeadGroupGlyph.ElementPadding = 2;

class ScoreHelperNotesBaseGlyph extends Glyph {
    constructor() {
        super(...arguments);
        this.BendNoteHeads = [];
    }
    drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText) {
        TieGlyph.drawBendSlur(canvas, x1, y1, x2, y2, down, scale, slurText);
    }
    doLayout() {
        super.doLayout();
        this.width = 0;
        for (let noteHeads of this.BendNoteHeads) {
            noteHeads.doLayout();
            this.width += noteHeads.width + 10 * this.scale;
        }
    }
    getTieDirection(beat, noteRenderer) {
        // invert direction (if stems go up, ties go down to not cross them)
        switch (noteRenderer.getBeatDirection(beat)) {
            case BeamDirection.Up:
                return BeamDirection.Down;
            default:
                return BeamDirection.Up;
        }
    }
}
ScoreHelperNotesBaseGlyph.EndPadding = ((10 / 2) | 0) + 3;

class TabBendRenderPoint extends BendPoint {
    constructor(offset = 0, value = 0) {
        super(offset, value);
        this.lineValue = 0;
        this.lineValue = value;
    }
}

class TabBendGlyph extends Glyph {
    constructor() {
        super(0, 0);
        this._notes = [];
        this._renderPoints = new Map();
        this._preBendMinValue = -1;
        this._bendMiddleMinValue = -1;
        this._bendEndMinValue = -1;
        this._bendEndContinuedMinValue = -1;
        this._releaseMinValue = -1;
        this._releaseContinuedMinValue = -1;
        this._maxBendValue = -1;
    }
    addBends(note) {
        this._notes.push(note);
        let renderPoints = this.createRenderingPoints(note);
        this._renderPoints.set(note.id, renderPoints);
        if (this._maxBendValue === -1 || this._maxBendValue < note.maxBendPoint.value) {
            this._maxBendValue = note.maxBendPoint.value;
        }
        // compute arrow end values for common bend types
        let value = 0;
        switch (note.bendType) {
            case BendType.Bend:
                value = renderPoints[1].value;
                if (note.isTieOrigin) {
                    if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                        this._bendEndContinuedMinValue = value;
                    }
                }
                else {
                    if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                        this._bendEndMinValue = value;
                    }
                }
                break;
            case BendType.Release:
                value = renderPoints[1].value;
                if (note.isTieOrigin) {
                    if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                        this._releaseContinuedMinValue = value;
                    }
                }
                else {
                    if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                        this._releaseMinValue = value;
                    }
                }
                break;
            case BendType.BendRelease:
                value = renderPoints[1].value;
                if (this._bendMiddleMinValue === -1 || value < this._bendMiddleMinValue) {
                    this._bendMiddleMinValue = value;
                }
                value = renderPoints[2].value;
                if (note.isTieOrigin) {
                    if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                        this._releaseContinuedMinValue = value;
                    }
                }
                else {
                    if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                        this._releaseMinValue = value;
                    }
                }
                break;
            case BendType.Prebend:
                value = renderPoints[0].value;
                if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                    this._preBendMinValue = value;
                }
                break;
            case BendType.PrebendBend:
                value = renderPoints[0].value;
                if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                    this._preBendMinValue = value;
                }
                value = renderPoints[1].value;
                if (note.isTieOrigin) {
                    if (this._bendEndContinuedMinValue === -1 || value < this._bendEndContinuedMinValue) {
                        this._bendEndContinuedMinValue = value;
                    }
                }
                else {
                    if (this._bendEndMinValue === -1 || value < this._bendEndMinValue) {
                        this._bendEndMinValue = value;
                    }
                }
                break;
            case BendType.PrebendRelease:
                value = renderPoints[0].value;
                if (this._preBendMinValue === -1 || value < this._preBendMinValue) {
                    this._preBendMinValue = value;
                }
                value = renderPoints[1].value;
                if (note.isTieOrigin) {
                    if (this._releaseContinuedMinValue === -1 || value < this._releaseContinuedMinValue) {
                        this._releaseContinuedMinValue = value;
                    }
                }
                else {
                    if (value > 0 && (this._releaseMinValue === -1 || value < this._releaseMinValue)) {
                        this._releaseMinValue = value;
                    }
                }
                break;
        }
    }
    doLayout() {
        super.doLayout();
        let bendHeight = this._maxBendValue * TabBendGlyph.BendValueHeight * this.scale;
        this.renderer.registerOverflowTop(bendHeight);
        let value = 0;
        for (let note of this._notes) {
            let renderPoints = this._renderPoints.get(note.id);
            switch (note.bendType) {
                case BendType.Bend:
                    renderPoints[1].lineValue = note.isTieOrigin
                        ? this._bendEndContinuedMinValue
                        : this._bendEndMinValue;
                    break;
                case BendType.Release:
                    value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                    if (value >= 0) {
                        renderPoints[1].lineValue = value;
                    }
                    break;
                case BendType.BendRelease:
                    renderPoints[1].lineValue = this._bendMiddleMinValue;
                    value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                    if (value >= 0) {
                        renderPoints[2].lineValue = value;
                    }
                    break;
                case BendType.Prebend:
                    renderPoints[0].lineValue = this._preBendMinValue;
                    break;
                case BendType.PrebendBend:
                    renderPoints[0].lineValue = this._preBendMinValue;
                    renderPoints[1].lineValue = note.isTieOrigin
                        ? this._bendEndContinuedMinValue
                        : this._bendEndMinValue;
                    break;
                case BendType.PrebendRelease:
                    renderPoints[0].lineValue = this._preBendMinValue;
                    value = note.isTieOrigin ? this._releaseContinuedMinValue : this._releaseMinValue;
                    if (value >= 0) {
                        renderPoints[1].lineValue = value;
                    }
                    break;
            }
        }
        this.width = 0;
        this._notes.sort((a, b) => {
            if (a.isStringed) {
                return a.string - b.string;
            }
            return a.realValue - b.realValue;
        });
    }
    createRenderingPoints(note) {
        let renderingPoints = [];
        // Guitar Pro Rendering Note:
        // Last point of bend is always at end of the note even
        // though it might not be 100% correct from timing perspective.
        switch (note.bendType) {
            case BendType.Custom:
                for (let bendPoint of note.bendPoints) {
                    renderingPoints.push(new TabBendRenderPoint(bendPoint.offset, bendPoint.value));
                }
                break;
            case BendType.BendRelease:
                renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                renderingPoints.push(new TabBendRenderPoint((BendPoint.MaxPosition / 2) | 0, note.bendPoints[1].value));
                renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[3].value));
                break;
            case BendType.Bend:
            case BendType.Hold:
            case BendType.Prebend:
            case BendType.PrebendBend:
            case BendType.PrebendRelease:
            case BendType.Release:
                renderingPoints.push(new TabBendRenderPoint(0, note.bendPoints[0].value));
                renderingPoints.push(new TabBendRenderPoint(BendPoint.MaxPosition, note.bendPoints[1].value));
                break;
        }
        return renderingPoints;
    }
    paint(cx, cy, canvas) {
        let color = canvas.color;
        if (this._notes.length > 1) {
            canvas.color = this.renderer.resources.secondaryGlyphColor;
        }
        for (let note of this._notes) {
            let renderPoints = this._renderPoints.get(note.id);
            let startNoteRenderer = this.renderer;
            let endNote = note;
            let isMultiBeatBend = false;
            let endNoteRenderer = null;
            let endNoteHasBend = false;
            let slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
            let endBeat = null;
            while (endNote.isTieOrigin) {
                let nextNote = endNote.tieDestination;
                endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, nextNote.beat.voice.bar);
                if (!endNoteRenderer || startNoteRenderer.staff !== endNoteRenderer.staff) {
                    break;
                }
                endNote = nextNote;
                isMultiBeatBend = true;
                if (endNote.hasBend || !this.renderer.settings.notation.extendBendArrowsOnTiedNotes) {
                    endNoteHasBend = true;
                    break;
                }
            }
            endBeat = endNote.beat;
            endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endBeat.voice.bar);
            if (endBeat.isLastOfVoice &&
                !endNote.hasBend &&
                this.renderer.settings.notation.extendBendArrowsOnTiedNotes) {
                endBeat = null;
            }
            let startX = 0;
            let endX = 0;
            let topY = cy + startNoteRenderer.y;
            // float bottomY = cy + startNoteRenderer.Y + startNoteRenderer.GetNoteY(note);
            startX = cx + startNoteRenderer.x;
            if (renderPoints[0].value > 0 || note.isContinuedBend) {
                startX += startNoteRenderer.getBeatX(note.beat, BeatXPosition.MiddleNotes);
            }
            else {
                startX += startNoteRenderer.getNoteX(note, NoteXPosition.Right);
            }
            // canvas.Color = Color.Random();
            // canvas.FillRect(
            //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.MiddleNotes),
            //    cy + startNoteRenderer.Y, 10, 10);
            // canvas.FillRect(
            //    cx + startNoteRenderer.X + startNoteRenderer.GetBeatX(_note.Beat, BeatXPosition.EndBeat),
            //    cy + startNoteRenderer.Y + 10, 10, 10);
            if (!endBeat || (endBeat.isLastOfVoice && !endNoteHasBend)) {
                endX = cx + endNoteRenderer.x + endNoteRenderer.postBeatGlyphsStart;
            }
            else if (endNoteHasBend || !endBeat.nextBeat) {
                endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, BeatXPosition.MiddleNotes);
            }
            else if (note.bendType === BendType.Hold) {
                endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.OnNotes);
            }
            else {
                endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat.nextBeat, BeatXPosition.PreNotes);
            }
            if (!isMultiBeatBend) {
                endX -= TabBendGlyph.ArrowSize * this.scale;
            }
            // we need some pixels for the arrow. otherwise we might draw into the next
            // note
            let width = endX - startX;
            // calculate offsets per step
            let dX = width / BendPoint.MaxPosition;
            canvas.beginPath();
            for (let i = 0, j = renderPoints.length - 1; i < j; i++) {
                let firstPt = renderPoints[i];
                let secondPt = renderPoints[i + 1];
                // draw pre-bend if previous
                if (i === 0 && firstPt.value !== 0 && !note.isTieDestination) {
                    this.paintBend(note, new TabBendRenderPoint(0, 0), firstPt, startX, topY, dX, slurText, canvas);
                }
                if (note.bendType !== BendType.Prebend) {
                    if (i === 0) {
                        startX += 2 * this.scale;
                    }
                    this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                }
                else if (note.isTieOrigin && note.tieDestination.hasBend) {
                    secondPt = new TabBendRenderPoint(BendPoint.MaxPosition, firstPt.value);
                    secondPt.lineValue = firstPt.lineValue;
                    this.paintBend(note, firstPt, secondPt, startX, topY, dX, slurText, canvas);
                }
            }
            canvas.color = color;
        }
    }
    paintBend(note, firstPt, secondPt, cx, cy, dX, slurText, canvas) {
        let r = this.renderer;
        let res = this.renderer.resources;
        let overflowOffset = r.lineOffset / 2;
        let x1 = cx + dX * firstPt.offset;
        let bendValueHeight = TabBendGlyph.BendValueHeight * this.scale;
        let y1 = cy - bendValueHeight * firstPt.lineValue;
        if (firstPt.value === 0) {
            if (secondPt.offset === firstPt.offset) {
                y1 += r.getNoteY(note.beat.maxStringNote, NoteYPosition.Top);
            }
            else {
                y1 += r.getNoteY(note, NoteYPosition.Center);
            }
        }
        else {
            y1 += overflowOffset;
        }
        let x2 = cx + dX * secondPt.offset;
        let y2 = cy - bendValueHeight * secondPt.lineValue;
        if (secondPt.lineValue === 0) {
            y2 += r.getNoteY(note, NoteYPosition.Center);
        }
        else {
            y2 += overflowOffset;
        }
        // what type of arrow? (up/down)
        let arrowOffset = 0;
        let arrowSize = TabBendGlyph.ArrowSize * this.scale;
        if (secondPt.value > firstPt.value) {
            if (y2 + arrowSize > y1) {
                y2 = y1 - arrowSize;
            }
            canvas.beginPath();
            canvas.moveTo(x2, y2);
            canvas.lineTo(x2 - arrowSize * 0.5, y2 + arrowSize);
            canvas.lineTo(x2 + arrowSize * 0.5, y2 + arrowSize);
            canvas.closePath();
            canvas.fill();
            arrowOffset = arrowSize;
        }
        else if (secondPt.value !== firstPt.value) {
            if (y2 < y1) {
                y2 = y1 + arrowSize;
            }
            canvas.beginPath();
            canvas.moveTo(x2, y2);
            canvas.lineTo(x2 - arrowSize * 0.5, y2 - arrowSize);
            canvas.lineTo(x2 + arrowSize * 0.5, y2 - arrowSize);
            canvas.closePath();
            canvas.fill();
            arrowOffset = -arrowSize;
        }
        canvas.stroke();
        if (firstPt.value === secondPt.value) {
            // draw horizontal dashed line
            // to really have the line ending at the right position
            // we draw from right to left. it's okay if the space is at the beginning
            if (firstPt.lineValue > 0) {
                let dashX = x2;
                let dashSize = TabBendGlyph.DashSize * this.scale;
                let end = x1 + dashSize;
                let dashes = (dashX - x1) / (dashSize * 2);
                if (dashes < 1) {
                    canvas.moveTo(dashX, y1);
                    canvas.lineTo(x1, y1);
                }
                else {
                    while (dashX > end) {
                        canvas.moveTo(dashX, y1);
                        canvas.lineTo(dashX - dashSize, y1);
                        dashX -= dashSize * 2;
                    }
                }
                canvas.stroke();
            }
        }
        else {
            if (x2 > x1) {
                // draw bezier lien from first to second point
                canvas.moveTo(x1, y1);
                canvas.bezierCurveTo((x1 + x2) / 2, y1, x2, y1, x2, y2 + arrowOffset);
                canvas.stroke();
            }
            else {
                canvas.moveTo(x1, y1);
                canvas.lineTo(x2, y2);
                canvas.stroke();
            }
        }
        if (slurText && firstPt.offset < secondPt.offset) {
            canvas.font = res.graceFont;
            let size = canvas.measureText(slurText);
            let y = 0;
            let x = 0;
            if (y1 > y2) {
                let h = Math.abs(y1 - y2);
                y = h > canvas.font.size * 1.3 ? y1 - h / 2 : y1;
                x = (x1 + x2 - size) / 2;
            }
            else {
                y = y1;
                x = x2 - size;
            }
            canvas.fillText(slurText, x, y);
        }
        if (secondPt.value !== 0 && firstPt.value !== secondPt.value) {
            let dV = secondPt.value;
            let up = secondPt.value > firstPt.value;
            dV = Math.abs(dV);
            // calculate label
            let s = '';
            // Full Steps
            if (dV === 4) {
                s = 'full';
                dV -= 4;
            }
            else if (dV >= 4 || dV <= -4) {
                let steps = (dV / 4) | 0;
                s += steps;
                // Quaters
                dV -= steps * 4;
            }
            if (dV > 0) {
                s += TabBendGlyph.getFractionSign(dV);
            }
            if (s !== '') {
                y2 = cy - bendValueHeight * secondPt.value;
                let startY = y2;
                if (!up) {
                    startY = y1 + (Math.abs(y2 - y1) * 1) / 3;
                }
                // draw label
                canvas.font = res.tablatureFont;
                let size = canvas.measureText(s);
                let y = startY - res.tablatureFont.size * 0.5 - 2 * this.scale;
                let x = x2 - size / 2;
                canvas.fillText(s, x, y);
            }
        }
    }
    static getFractionSign(steps) {
        switch (steps) {
            case 1:
                return 'Â¼';
            case 2:
                return 'Â½';
            case 3:
                return 'Â¾';
            default:
                return steps + '/ 4';
        }
    }
}
TabBendGlyph.ArrowSize = 6;
TabBendGlyph.DashSize = 3;
TabBendGlyph.BendValueHeight = 6;

class TabWhammyBarGlyph extends Glyph {
    constructor(beat) {
        super(0, 0);
        this._isSimpleDip = false;
        this._beat = beat;
        this._renderPoints = this.createRenderingPoints(beat);
    }
    createRenderingPoints(beat) {
        // advanced rendering
        if (beat.whammyBarType === WhammyType.Custom) {
            return beat.whammyBarPoints;
        }
        let renderingPoints = [];
        // Guitar Pro Rendering Note:
        // Last point of bend is always at end of the beat even
        // though it might not be 100% correct from timing perspective.
        switch (beat.whammyBarType) {
            case WhammyType.Dive:
            case WhammyType.Hold:
            case WhammyType.PrediveDive:
            case WhammyType.Predive:
                renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[1].value));
                break;
            case WhammyType.Dip:
                renderingPoints.push(new BendPoint(0, beat.whammyBarPoints[0].value));
                renderingPoints.push(new BendPoint((BendPoint.MaxPosition / 2) | 0, beat.whammyBarPoints[1].value));
                renderingPoints.push(new BendPoint(BendPoint.MaxPosition, beat.whammyBarPoints[beat.whammyBarPoints.length - 1].value));
                break;
        }
        return renderingPoints;
    }
    doLayout() {
        super.doLayout();
        this._isSimpleDip =
            this.renderer.settings.notation.notationMode === NotationMode.SongBook &&
                this._beat.whammyBarType === WhammyType.Dip;
        //
        // Get the min and max values for all combined whammys
        let minValue = null;
        let maxValue = null;
        let beat = this._beat;
        while (beat && beat.hasWhammyBar) {
            if (!minValue || minValue.value > beat.minWhammyPoint.value) {
                minValue = beat.minWhammyPoint;
            }
            if (!maxValue || maxValue.value < beat.maxWhammyPoint.value) {
                maxValue = beat.maxWhammyPoint;
            }
            beat = beat.nextBeat;
        }
        let topOffset = maxValue.value > 0 ? Math.abs(this.getOffset(maxValue.value)) : 0;
        if (topOffset > 0 ||
            this._beat.whammyBarPoints[0].value !== 0 ||
            this.renderer.settings.notation.isNotationElementVisible(NotationElement.ZerosOnDiveWhammys)) {
            topOffset += this.renderer.resources.tablatureFont.size * 2;
        }
        let bottomOffset = minValue.value < 0 ? Math.abs(this.getOffset(minValue.value)) : 0;
        this.renderer.registerOverflowTop(topOffset + bottomOffset);
        let currentOffset = this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, -1);
        if (topOffset > currentOffset) {
            this.renderer.staff.setSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, topOffset);
        }
    }
    getOffset(value) {
        if (value === 0) {
            return 0;
        }
        let offset = TabWhammyBarGlyph.PerHalfSize * this.scale +
            Math.log2(Math.abs(value) / 2) * TabWhammyBarGlyph.PerHalfSize * this.scale;
        if (value < 0) {
            offset = -offset;
        }
        return offset;
    }
    paint(cx, cy, canvas) {
        let startNoteRenderer = this.renderer;
        let endBeat = this._beat.nextBeat;
        let endNoteRenderer = null;
        let endXPositionType = BeatXPosition.PreNotes;
        if (endBeat) {
            endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endBeat.voice.bar);
            if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                endBeat = null;
                endNoteRenderer = null;
            }
            else if (endNoteRenderer !== startNoteRenderer && !endBeat.hasWhammyBar) {
                endBeat = null;
                endNoteRenderer = null;
            }
            else {
                endXPositionType =
                    endBeat.hasWhammyBar &&
                        (startNoteRenderer.settings.notation.notationMode !== NotationMode.SongBook ||
                            endBeat.whammyBarType !== WhammyType.Dip)
                        ? BeatXPosition.MiddleNotes
                        : BeatXPosition.PreNotes;
            }
        }
        let startX = 0;
        let endX = 0;
        if (this._isSimpleDip) {
            startX =
                cx +
                    startNoteRenderer.x +
                    startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) -
                    2 * this.scale;
            endX =
                cx +
                    startNoteRenderer.x +
                    startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) +
                    2 * this.scale;
        }
        else {
            startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
            endX = !endNoteRenderer
                ? cx + startNoteRenderer.x + startNoteRenderer.width - 2 * this.scale
                : cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endBeat, endXPositionType);
        }
        let old = canvas.textAlign;
        canvas.textAlign = TextAlign.Center;
        if (this._renderPoints.length >= 2) {
            let dx = (endX - startX) / BendPoint.MaxPosition;
            canvas.beginPath();
            let zeroY = cy + this.renderer.staff.getSharedLayoutData(TabWhammyBarGlyph.TopOffsetSharedDataKey, 0);
            let slurText = this._beat.whammyStyle === BendStyle.Gradual ? 'grad.' : '';
            for (let i = 0, j = this._renderPoints.length - 1; i < j; i++) {
                let firstPt = this._renderPoints[i];
                let secondPt = this._renderPoints[i + 1];
                let nextPt = i < j - 2 ? this._renderPoints[i + 2] : null;
                let isFirst = i === 0;
                // draw pre-bend if previous
                if (i === 0 && firstPt.value !== 0 && !this._beat.isContinuedWhammy) {
                    this.paintWhammy(false, new BendPoint(0, 0), firstPt, secondPt, startX, zeroY, dx, canvas);
                    isFirst = false;
                }
                this.paintWhammy(isFirst, firstPt, secondPt, nextPt, startX, zeroY, dx, canvas, slurText);
                slurText = '';
            }
            canvas.stroke();
        }
        canvas.textAlign = old;
    }
    paintWhammy(isFirst, firstPt, secondPt, nextPt, cx, cy, dx, canvas, slurText) {
        let x1 = cx + dx * firstPt.offset;
        let x2 = cx + dx * secondPt.offset;
        let y1 = cy - this.getOffset(firstPt.value);
        let y2 = cy - this.getOffset(secondPt.value);
        if (firstPt.offset === secondPt.offset) {
            let dashSize = TabWhammyBarGlyph.DashSize * this.scale;
            let dashes = Math.abs(y2 - y1) / (dashSize * 2);
            if (dashes < 1) {
                canvas.moveTo(x1, y1);
                canvas.lineTo(x2, y2);
            }
            else {
                let dashEndY = Math.max(y1, y2);
                let dashStartY = Math.min(y1, y2);
                while (dashEndY > dashStartY) {
                    canvas.moveTo(x1, dashStartY);
                    canvas.lineTo(x1, dashStartY + dashSize);
                    dashStartY += dashSize * 2;
                }
            }
            canvas.stroke();
        }
        else if (firstPt.value === secondPt.value) {
            let dashSize = TabWhammyBarGlyph.DashSize * this.scale;
            let dashes = Math.abs(x2 - x1) / (dashSize * 2);
            if (dashes < 1) {
                canvas.moveTo(x1, y1);
                canvas.lineTo(x2, y2);
            }
            else {
                let dashEndX = Math.max(x1, x2);
                let dashStartX = Math.min(x1, x2);
                while (dashEndX > dashStartX) {
                    canvas.moveTo(dashEndX, y1);
                    canvas.lineTo(dashEndX - dashSize, y1);
                    dashEndX -= dashSize * 2;
                }
            }
            canvas.stroke();
        }
        else {
            canvas.moveTo(x1, y1);
            canvas.lineTo(x2, y2);
        }
        let res = this.renderer.resources;
        if (isFirst && !this._beat.isContinuedWhammy && !this._isSimpleDip) {
            let y = y1;
            y -= res.tablatureFont.size + 2 * this.scale;
            if (this.renderer.settings.notation.isNotationElementVisible(NotationElement.ZerosOnDiveWhammys)) {
                canvas.fillText('0', x1, y);
            }
            if (slurText) {
                y -= res.tablatureFont.size + 2 * this.scale;
                canvas.fillText(slurText, x1, y);
            }
        }
        let dV = Math.abs(secondPt.value);
        if ((dV !== 0 || (this.renderer.settings.notation.isNotationElementVisible(NotationElement.ZerosOnDiveWhammys) && !this._isSimpleDip)) &&
            firstPt.value !== secondPt.value) {
            let s = '';
            if (secondPt.value < 0) {
                s += '-';
            }
            if (dV >= 4) {
                let steps = (dV / 4) | 0;
                s += steps;
                // Quaters
                dV -= steps * 4;
            }
            else if (dV === 0) {
                s += '0';
            }
            if (dV > 0) {
                s += TabBendGlyph.getFractionSign(dV);
            }
            let y = 0;
            if (this._isSimpleDip) {
                y = Math.min(y1, y2) - res.tablatureFont.size - 2 * this.scale;
            }
            else {
                y = firstPt.offset === secondPt.offset ? Math.min(y1, y2) : y2;
                y -= res.tablatureFont.size + 2 * this.scale;
                if (nextPt && nextPt.value > secondPt.value) {
                    y -= 2 * this.scale;
                }
            }
            let x = x2;
            canvas.fillText(s, x, y);
        }
    }
}
TabWhammyBarGlyph.TopOffsetSharedDataKey = 'tab.whammy.topoffset';
TabWhammyBarGlyph.PerHalfSize = 6;
TabWhammyBarGlyph.DashSize = 3;

class ScoreWhammyBarGlyph extends ScoreHelperNotesBaseGlyph {
    constructor(beat) {
        super(0, 0);
        this._beat = beat;
    }
    doLayout() {
        let whammyMode = this.renderer.settings.notation.notationMode;
        switch (this._beat.whammyBarType) {
            case WhammyType.None:
            case WhammyType.Custom:
            case WhammyType.Hold:
                return;
            case WhammyType.Dive:
            case WhammyType.PrediveDive:
                {
                    let endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                    endGlyphs.renderer = this.renderer;
                    let lastWhammyPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                    for (let note of this._beat.notes) {
                        if (!note.isTieOrigin) {
                            endGlyphs.addGlyph(this.getBendNoteValue(note, lastWhammyPoint), lastWhammyPoint.value % 2 !== 0);
                        }
                    }
                    endGlyphs.doLayout();
                    this.BendNoteHeads.push(endGlyphs);
                }
                break;
            case WhammyType.Dip:
                {
                    if (whammyMode === NotationMode.SongBook) {
                        let res = this.renderer.resources;
                        this.renderer.simpleWhammyOverflow =
                            res.tablatureFont.size * 1.5 +
                                ScoreWhammyBarGlyph.SimpleDipHeight * this.scale +
                                ScoreWhammyBarGlyph.SimpleDipPadding * this.scale;
                    }
                    else {
                        let middleGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                        middleGlyphs.renderer = this.renderer;
                        if (this.renderer.settings.notation.notationMode === NotationMode.GuitarPro) {
                            let middleBendPoint = this._beat.whammyBarPoints[1];
                            for (let note of this._beat.notes) {
                                middleGlyphs.addGlyph(this.getBendNoteValue(note, this._beat.whammyBarPoints[1]), middleBendPoint.value % 2 !== 0);
                            }
                        }
                        middleGlyphs.doLayout();
                        this.BendNoteHeads.push(middleGlyphs);
                        let endGlyphs = new BendNoteHeadGroupGlyph(this._beat, false);
                        endGlyphs.renderer = this.renderer;
                        if (this.renderer.settings.notation.notationMode === NotationMode.GuitarPro) {
                            let lastBendPoint = this._beat.whammyBarPoints[this._beat.whammyBarPoints.length - 1];
                            for (let note of this._beat.notes) {
                                endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                            }
                        }
                        endGlyphs.doLayout();
                        this.BendNoteHeads.push(endGlyphs);
                    }
                }
                break;
            case WhammyType.Predive:
                break;
        }
        super.doLayout();
    }
    paint(cx, cy, canvas) {
        let beat = this._beat;
        switch (beat.whammyBarType) {
            case WhammyType.None:
            case WhammyType.Custom:
                return;
        }
        let whammyMode = this.renderer.settings.notation.notationMode;
        let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, beat.voice.bar);
        let startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(beat, BeatXPosition.MiddleNotes);
        let beatDirection = this.getTieDirection(beat, startNoteRenderer);
        let direction = this._beat.notes.length === 1 ? beatDirection : BeamDirection.Up;
        let textalign = canvas.textAlign;
        for (let i = 0; i < beat.notes.length; i++) {
            let note = beat.notes[i];
            let startY = cy + startNoteRenderer.y;
            if (i > 0 && i >= ((this._beat.notes.length / 2) | 0)) {
                direction = BeamDirection.Down;
            }
            if (direction === BeamDirection.Down) {
                startY += startNoteRenderer.getNoteY(note, NoteYPosition.Bottom);
            }
            else {
                startY += startNoteRenderer.getNoteY(note, NoteYPosition.Top);
            }
            let endX = cx + startNoteRenderer.x;
            if (beat.isLastOfVoice) {
                endX += startNoteRenderer.width;
            }
            else {
                endX += startNoteRenderer.getBeatX(beat, BeatXPosition.EndBeat);
            }
            endX -= 8 * this.scale;
            let slurText = beat.whammyStyle === BendStyle.Gradual && i === 0 ? 'grad.' : '';
            let endNoteRenderer = null;
            if (note.isTieOrigin) {
                endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, note.tieDestination.beat.voice.bar);
                if (endNoteRenderer && endNoteRenderer.staff === startNoteRenderer.staff) {
                    endX =
                        cx +
                            endNoteRenderer.x +
                            endNoteRenderer.getBeatX(note.tieDestination.beat, BeatXPosition.MiddleNotes);
                }
                else {
                    endNoteRenderer = null;
                }
            }
            let heightOffset = NoteHeadGlyph.NoteHeadHeight * this.scale * NoteHeadGlyph.GraceScale * 0.5;
            if (direction === BeamDirection.Up) {
                heightOffset = -heightOffset;
            }
            let endValue = beat.whammyBarPoints.length > 0
                ? this.getBendNoteValue(note, beat.whammyBarPoints[beat.whammyBarPoints.length - 1])
                : 0;
            let endY = 0;
            let bendTie = false;
            if (this.BendNoteHeads.length > 0 && this.BendNoteHeads[0].containsNoteValue(endValue)) {
                endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                bendTie = true;
            }
            else if (endNoteRenderer &&
                ((note.isTieOrigin && note.tieDestination.beat.hasWhammyBar) || note.beat.isContinuedWhammy)) {
                endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, NoteYPosition.Top);
                bendTie = true;
                if (direction === BeamDirection.Down) {
                    endY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                }
            }
            else if (note.isTieOrigin) {
                if (!endNoteRenderer) {
                    endY = startY;
                }
                else {
                    endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(note.tieDestination, NoteYPosition.Top);
                }
                if (direction === BeamDirection.Down) {
                    endY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                }
            }
            switch (beat.whammyBarType) {
                case WhammyType.Hold:
                    if (note.isTieOrigin) {
                        TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                    }
                    break;
                case WhammyType.Dive:
                    if (i === 0) {
                        this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                        this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                        this.BendNoteHeads[0].paint(0, 0, canvas);
                        if (this.BendNoteHeads[0].containsNoteValue(endValue)) {
                            endY += this.BendNoteHeads[0].y;
                        }
                    }
                    if (bendTie) {
                        this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                    }
                    else if (note.isTieOrigin) {
                        TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                    }
                    break;
                case WhammyType.Dip:
                    if (whammyMode === NotationMode.SongBook) {
                        if (i === 0) {
                            let simpleStartX = cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._beat, BeatXPosition.OnNotes) -
                                2 * this.scale;
                            let simpleEndX = cx +
                                startNoteRenderer.x +
                                startNoteRenderer.getBeatX(this._beat, BeatXPosition.PostNotes) +
                                2 * this.scale;
                            let middleX = (simpleStartX + simpleEndX) / 2;
                            let text = (((this._beat.whammyBarPoints[1].value - this._beat.whammyBarPoints[0].value) / 4) |
                                0).toString();
                            canvas.font = this.renderer.resources.tablatureFont;
                            canvas.fillText(text, middleX, cy + this.y);
                            let simpleStartY = cy + this.y + canvas.font.size + 2 * this.scale;
                            let simpleEndY = simpleStartY + ScoreWhammyBarGlyph.SimpleDipHeight * this.scale;
                            if (this._beat.whammyBarPoints[1].value > this._beat.whammyBarPoints[0].value) {
                                canvas.moveTo(simpleStartX, simpleEndY);
                                canvas.lineTo(middleX, simpleStartY);
                                canvas.lineTo(simpleEndX, simpleEndY);
                            }
                            else {
                                canvas.moveTo(simpleStartX, simpleStartY);
                                canvas.lineTo(middleX, simpleEndY);
                                canvas.lineTo(simpleEndX, simpleStartY);
                            }
                            canvas.stroke();
                        }
                        if (note.isTieOrigin) {
                            TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, beatDirection === BeamDirection.Down, 22, 4);
                        }
                    }
                    else {
                        let middleX = (startX + endX) / 2;
                        this.BendNoteHeads[0].x = middleX - this.BendNoteHeads[0].noteHeadOffset;
                        this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                        this.BendNoteHeads[0].paint(0, 0, canvas);
                        let middleValue = this.getBendNoteValue(note, beat.whammyBarPoints[1]);
                        let middleY = this.BendNoteHeads[0].getNoteValueY(middleValue) + heightOffset;
                        this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, this.scale, slurText);
                        this.BendNoteHeads[1].x = endX - this.BendNoteHeads[1].noteHeadOffset;
                        this.BendNoteHeads[1].y = cy + startNoteRenderer.y;
                        this.BendNoteHeads[1].paint(0, 0, canvas);
                        endY = this.BendNoteHeads[1].getNoteValueY(endValue) + heightOffset;
                        this.drawBendSlur(canvas, middleX, middleY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                    }
                    break;
                case WhammyType.PrediveDive:
                case WhammyType.Predive:
                    let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                    preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                        .prebendNoteHeadOffset;
                    let preY = cy +
                        startNoteRenderer.y +
                        startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false)) +
                        heightOffset;
                    this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale, slurText);
                    if (this.BendNoteHeads.length > 0) {
                        this.BendNoteHeads[0].x = endX - this.BendNoteHeads[0].noteHeadOffset;
                        this.BendNoteHeads[0].y = cy + startNoteRenderer.y;
                        this.BendNoteHeads[0].paint(0, 0, canvas);
                        this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                    }
                    break;
            }
        }
        canvas.textAlign = textalign;
    }
    getBendNoteValue(note, bendPoint) {
        // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
        return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
    }
}
ScoreWhammyBarGlyph.SimpleDipHeight = TabWhammyBarGlyph.PerHalfSize * 2;
ScoreWhammyBarGlyph.SimpleDipPadding = 2;

/**
 * This simple glyph allows to put an empty region in to a BarRenderer.
 */
class SpacingGlyph extends Glyph {
    constructor(x, y, width) {
        super(x, y);
        this.width = width;
    }
}

class PercussionNoteHeadGlyph extends MusicFontGlyph {
    constructor(x, y, articulation, duration, isGrace) {
        super(x, y, isGrace ? NoteHeadGlyph.GraceScale : 1, articulation.getSymbol(duration));
        this._isGrace = isGrace;
        this._articulation = articulation;
    }
    paint(cx, cy, canvas) {
        let offset = this._isGrace ? this.scale : 0;
        canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale * this.scale, this.symbol, false);
        if (this._articulation.techniqueSymbol !== MusicFontSymbol.None && this._articulation.techniqueSymbolPlacement === TextBaseline.Middle) {
            canvas.fillMusicFontSymbol(cx + this.x, cy + this.y + offset, this.glyphScale * this.scale, this._articulation.techniqueSymbol, false);
        }
    }
    doLayout() {
        let scale = (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        switch (this.symbol) {
            case MusicFontSymbol.NoteheadWhole:
                this.width = 14;
                break;
            case MusicFontSymbol.NoteheadCircleX:
            case MusicFontSymbol.NoteheadDiamondWhite:
                this.width = 9;
                break;
            case MusicFontSymbol.NoteheadHeavyXHat:
            case MusicFontSymbol.NoteheadHeavyX:
                this.width = 13;
                break;
            default:
                this.width = 10;
                break;
        }
        this.width = this.width * (this._isGrace ? NoteHeadGlyph.GraceScale : 1) * this.scale;
        this.height = NoteHeadGlyph.NoteHeadHeight * scale;
    }
}

class ArticStaccatoAboveGlyph extends MusicFontGlyph {
    constructor(x, y) {
        super(x, y, NoteHeadGlyph.GraceScale, MusicFontSymbol.ArticStaccatoAbove);
    }
    doLayout() {
        this.width = NoteHeadGlyph.QuarterNoteHeadWidth * this.scale;
        this.height = 7 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx + 3 * this.scale, cy + 5 * this.scale, canvas);
    }
}

class PictEdgeOfCymbalGlyph extends MusicFontGlyph {
    constructor(x, y) {
        super(x, y, 0.5, MusicFontSymbol.PictEdgeOfCymbal);
    }
    doLayout() {
        this.width = 22 * this.scale;
        this.height = 15 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx - 3 * this.scale, cy + this.height, canvas);
    }
}

class GuitarGolpeGlyph extends MusicFontGlyph {
    constructor(x, y) {
        super(x, y, NoteHeadGlyph.GraceScale, MusicFontSymbol.GuitarGolpe);
    }
    doLayout() {
        this.width = 9 * this.scale;
        this.height = 10 * this.scale;
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy + this.height, canvas);
    }
}

class ScoreBeatGlyph extends BeatOnNoteGlyphBase {
    constructor() {
        super(...arguments);
        this._collisionOffset = -1000;
        this._skipPaint = false;
        this.noteHeads = null;
        this.restGlyph = null;
    }
    getNoteX(note, requestedPosition) {
        return this.noteHeads ? this.noteHeads.getNoteX(note, requestedPosition) : 0;
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        if (this.noteHeads) {
            this.noteHeads.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
        }
    }
    getNoteY(note, requestedPosition) {
        return this.noteHeads ? this.noteHeads.getNoteY(note, requestedPosition) : 0;
    }
    updateBeamingHelper() {
        if (this.noteHeads) {
            this.noteHeads.updateBeamingHelper(this.container.x + this.x);
        }
        else if (this.restGlyph) {
            this.restGlyph.updateBeamingHelper(this.container.x + this.x);
            if (this.renderer.bar.isMultiVoice && this._collisionOffset === -1000) {
                this._collisionOffset = this.renderer.helpers.collisionHelper.applyRestCollisionOffset(this.container.beat, this.restGlyph.y, this.renderer.getScoreHeight(1));
                this.y += this._collisionOffset;
                const existingRests = this.renderer.helpers.collisionHelper.restDurationsByDisplayTime;
                if (existingRests.has(this.container.beat.playbackStart) &&
                    existingRests.get(this.container.beat.playbackStart).has(this.container.beat.playbackDuration) &&
                    existingRests.get(this.container.beat.playbackStart).get(this.container.beat.playbackDuration) !== this.container.beat.id) {
                    this._skipPaint = true;
                }
            }
        }
    }
    paint(cx, cy, canvas) {
        if (!this._skipPaint) {
            super.paint(cx, cy, canvas);
        }
    }
    doLayout() {
        // create glyphs
        let sr = this.renderer;
        if (!this.container.beat.isEmpty) {
            if (!this.container.beat.isRest) {
                //
                // Note heads
                //
                const noteHeads = new ScoreNoteChordGlyph();
                this.noteHeads = noteHeads;
                noteHeads.beat = this.container.beat;
                noteHeads.beamingHelper = this.beamingHelper;
                let ghost = new GhostNoteContainerGlyph(false);
                ghost.renderer = this.renderer;
                for (let note of this.container.beat.notes) {
                    if (note.isVisible) {
                        this.createNoteGlyph(note);
                        ghost.addParenthesis(note);
                    }
                }
                this.addGlyph(noteHeads);
                if (!ghost.isEmpty) {
                    this.addGlyph(new SpacingGlyph(0, 0, 4 *
                        (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) *
                        this.scale));
                    this.addGlyph(ghost);
                }
                //
                // Whammy Bar
                if (this.container.beat.hasWhammyBar) {
                    let whammy = new ScoreWhammyBarGlyph(this.container.beat);
                    whammy.renderer = this.renderer;
                    whammy.doLayout();
                    this.container.ties.push(whammy);
                }
                //
                // Note dots
                //
                if (this.container.beat.dots > 0) {
                    this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        let group = new GlyphGroup(0, 0);
                        group.renderer = this.renderer;
                        for (let note of this.container.beat.notes) {
                            this.createBeatDot(sr.getNoteLine(note), group);
                        }
                        this.addGlyph(group);
                    }
                }
            }
            else {
                let line = Math.ceil((this.renderer.bar.staff.standardNotationLineCount - 1) / 2) * 2;
                // this positioning is quite strange, for most staff line counts
                // the whole/rest are aligned as half below the whole rest. 
                // but for staff line count 1 and 3 they are aligned centered on the same line. 
                if (this.container.beat.duration === Duration.Whole &&
                    this.renderer.bar.staff.standardNotationLineCount !== 1 &&
                    this.renderer.bar.staff.standardNotationLineCount !== 3) {
                    line -= 2;
                }
                const restGlyph = new ScoreRestGlyph(0, sr.getScoreY(line), this.container.beat.duration);
                this.restGlyph = restGlyph;
                restGlyph.beat = this.container.beat;
                restGlyph.beamingHelper = this.beamingHelper;
                this.addGlyph(restGlyph);
                if (this.renderer.bar.isMultiVoice) {
                    if (this.container.beat.voice.index === 0) {
                        const restSizes = BeamingHelper.computeLineHeightsForRest(this.container.beat.duration);
                        let restTop = restGlyph.y - sr.getScoreHeight(restSizes[0]);
                        let restBottom = restGlyph.y + sr.getScoreHeight(restSizes[1]);
                        this.renderer.helpers.collisionHelper.reserveBeatSlot(this.container.beat, restTop, restBottom);
                    }
                    else {
                        this.renderer.helpers.collisionHelper.registerRest(this.container.beat);
                    }
                }
                if (this.beamingHelper) {
                    this.beamingHelper.applyRest(this.container.beat, line);
                }
                //
                // Note dots
                //
                if (this.container.beat.dots > 0) {
                    this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                    for (let i = 0; i < this.container.beat.dots; i++) {
                        let group = new GlyphGroup(0, 0);
                        group.renderer = this.renderer;
                        this.createBeatDot(line, group);
                        this.addGlyph(group);
                    }
                }
            }
        }
        super.doLayout();
        if (this.container.beat.isEmpty) {
            this.centerX = this.width / 2;
        }
        else if (this.container.beat.isRest) {
            this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
        }
        else {
            this.centerX = this.noteHeads.x + this.noteHeads.width / 2;
        }
    }
    createBeatDot(line, group) {
        let sr = this.renderer;
        group.addGlyph(new CircleGlyph(0, sr.getScoreY(line), 1.5 * this.scale));
    }
    createNoteHeadGlyph(n) {
        let isGrace = this.container.beat.graceType !== GraceType.None;
        if (n.beat.voice.bar.staff.isPercussion) {
            const articulation = PercussionMapper.getArticulation(n);
            if (articulation) {
                return new PercussionNoteHeadGlyph(0, 0, articulation, n.beat.duration, isGrace);
            }
            else {
                Logger.warning('Rendering', `No articulation found for percussion instrument ${n.percussionArticulation}`);
            }
        }
        if (n.isDead) {
            return new DeadNoteHeadGlyph(0, 0, isGrace);
        }
        if (n.beat.graceType === GraceType.BendGrace) {
            return new NoteHeadGlyph(0, 0, Duration.Quarter, true);
        }
        if (n.harmonicType === HarmonicType.Natural) {
            return new DiamondNoteHeadGlyph(0, 0, n.beat.duration, isGrace);
        }
        return new NoteHeadGlyph(0, 0, n.beat.duration, isGrace);
    }
    createNoteGlyph(n) {
        if (n.beat.graceType === GraceType.BendGrace && !n.hasBend) {
            return;
        }
        let sr = this.renderer;
        let noteHeadGlyph = this.createNoteHeadGlyph(n);
        // calculate y position
        let line = sr.getNoteLine(n);
        noteHeadGlyph.y = sr.getScoreY(line);
        this.noteHeads.addNoteGlyph(noteHeadGlyph, n, line);
        if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
            // create harmonic note head.
            let harmonicFret = n.displayValue + n.harmonicPitch;
            noteHeadGlyph = new DiamondNoteHeadGlyph(0, 0, n.beat.duration, this.container.beat.graceType !== GraceType.None);
            line = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
            noteHeadGlyph.y = sr.getScoreY(line);
            this.noteHeads.addNoteGlyph(noteHeadGlyph, n, line);
        }
        if (n.isStaccato && !this.noteHeads.aboveBeatEffects.has('Staccato')) {
            this.noteHeads.belowBeatEffects.set('Staccato', new ArticStaccatoAboveGlyph(0, 0));
        }
        if (n.accentuated === AccentuationType.Normal && !this.noteHeads.aboveBeatEffects.has('Accent')) {
            this.noteHeads.belowBeatEffects.set('Accent', new AccentuationGlyph(0, 0, AccentuationType.Normal));
        }
        if (n.accentuated === AccentuationType.Heavy && !this.noteHeads.aboveBeatEffects.has('HAccent')) {
            this.noteHeads.belowBeatEffects.set('HAccent', new AccentuationGlyph(0, 0, AccentuationType.Heavy));
        }
        if (n.isPercussion) {
            const articulation = PercussionMapper.getArticulation(n);
            if (articulation && articulation.techniqueSymbolPlacement !== TextBaseline.Middle) {
                const effectContainer = articulation.techniqueSymbolPlacement === TextBaseline.Top
                    ? this.noteHeads.aboveBeatEffects
                    : this.noteHeads.belowBeatEffects;
                switch (articulation.techniqueSymbol) {
                    case MusicFontSymbol.PictEdgeOfCymbal:
                        effectContainer.set('PictEdgeOfCymbal', new PictEdgeOfCymbalGlyph(0, 0));
                        break;
                    case MusicFontSymbol.ArticStaccatoAbove:
                        effectContainer.set('ArticStaccatoAbove', new ArticStaccatoAboveGlyph(0, 0));
                        break;
                    case MusicFontSymbol.StringsUpBow:
                        effectContainer.set('StringsUpBow', new PickStrokeGlyph(0, 0, PickStroke.Up));
                        break;
                    case MusicFontSymbol.StringsDownBow:
                        effectContainer.set('StringsDownBow', new PickStrokeGlyph(0, 0, PickStroke.Down));
                        break;
                    case MusicFontSymbol.GuitarGolpe:
                        effectContainer.set('GuitarGolpe', new GuitarGolpeGlyph(0, 0));
                        break;
                }
            }
        }
    }
}

class ScoreBrushGlyph extends Glyph {
    constructor(beat) {
        super(0, 0);
        this._beat = beat;
    }
    doLayout() {
        this.width = 10 * this.scale;
    }
    paint(cx, cy, canvas) {
        let scoreBarRenderer = this.renderer;
        let lineSize = scoreBarRenderer.lineOffset;
        let startY = cy + this.y + (scoreBarRenderer.getNoteY(this._beat.maxNote, NoteYPosition.Bottom) - lineSize);
        let endY = cy + this.y + scoreBarRenderer.getNoteY(this._beat.minNote, NoteYPosition.Top) + lineSize;
        let arrowX = cx + this.x + this.width / 2;
        let arrowSize = 8 * this.scale;
        if (this._beat.brushType !== BrushType.None) {
            let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
            glyph.renderer = this.renderer;
            glyph.doLayout();
            let waveOffset = -glyph.height / 2;
            if (this._beat.brushType === BrushType.ArpeggioUp) {
                let lineStartY = startY + arrowSize;
                let lineEndY = endY - arrowSize;
                glyph.width = Math.abs(lineEndY - lineStartY);
                canvas.beginRotate(cx + this.x + 5 * this.scale, lineEndY, -90);
                glyph.paint(0, waveOffset, canvas);
                canvas.endRotate();
                canvas.beginPath();
                canvas.moveTo(arrowX, endY);
                canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                canvas.closePath();
                canvas.fill();
            }
            else if (this._beat.brushType === BrushType.ArpeggioDown) {
                let lineStartY = startY + arrowSize;
                let lineEndY = endY;
                glyph.width = Math.abs(lineEndY - lineStartY);
                canvas.beginRotate(cx + this.x + 5 * this.scale, lineStartY, 90);
                glyph.paint(0, waveOffset, canvas);
                canvas.endRotate();
                canvas.beginPath();
                canvas.moveTo(arrowX, startY);
                canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                canvas.closePath();
                canvas.fill();
            }
        }
    }
}

class ScoreBeatPreNotesGlyph extends BeatGlyphBase {
    constructor() {
        super();
        this._prebends = null;
        this.accidentals = null;
    }
    get prebendNoteHeadOffset() {
        return this._prebends ? this._prebends.x + this._prebends.noteHeadOffset : 0;
    }
    doLayout() {
        if (!this.container.beat.isRest) {
            let accidentals = new AccidentalGroupGlyph();
            accidentals.renderer = this.renderer;
            let ghost = new GhostNoteContainerGlyph(true);
            ghost.renderer = this.renderer;
            const preBends = new BendNoteHeadGroupGlyph(this.container.beat, true);
            this._prebends = preBends;
            preBends.renderer = this.renderer;
            for (let note of this.container.beat.notes) {
                if (note.isVisible) {
                    if (note.hasBend) {
                        switch (note.bendType) {
                            case BendType.PrebendBend:
                            case BendType.Prebend:
                            case BendType.PrebendRelease:
                                preBends.addGlyph(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false);
                                break;
                        }
                    }
                    else if (note.beat.hasWhammyBar) {
                        switch (note.beat.whammyBarType) {
                            case WhammyType.PrediveDive:
                            case WhammyType.Predive:
                                this._prebends.addGlyph(note.displayValue - ((note.beat.whammyBarPoints[0].value / 2) | 0), false);
                                break;
                        }
                    }
                    this.createAccidentalGlyph(note, accidentals);
                    ghost.addParenthesis(note);
                }
            }
            if (!preBends.isEmpty) {
                this.addGlyph(preBends);
                this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
            }
            if (this.container.beat.brushType !== BrushType.None) {
                this.addGlyph(new ScoreBrushGlyph(this.container.beat));
                this.addGlyph(new SpacingGlyph(0, 0, 4 * this.scale));
            }
            if (!ghost.isEmpty) {
                this.addGlyph(ghost);
                this.addGlyph(new SpacingGlyph(0, 0, 4 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
            }
            if (!accidentals.isEmpty) {
                this.accidentals = accidentals;
                this.addGlyph(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
                this.addGlyph(accidentals);
                this.addGlyph(new SpacingGlyph(0, 0, 2 * (this.container.beat.graceType !== GraceType.None ? NoteHeadGlyph.GraceScale : 1) * this.scale));
            }
        }
        super.doLayout();
    }
    createAccidentalGlyph(n, accidentals) {
        let sr = this.renderer;
        let accidental = sr.accidentalHelper.applyAccidental(n);
        let noteLine = sr.getNoteLine(n);
        let isGrace = this.container.beat.graceType !== GraceType.None;
        if (accidental !== AccidentalType.None) {
            let g = new AccidentalGlyph(0, sr.getScoreY(noteLine), accidental, isGrace);
            g.renderer = this.renderer;
            accidentals.addGlyph(g);
        }
        if (n.harmonicType !== HarmonicType.None && n.harmonicType !== HarmonicType.Natural) {
            let harmonicFret = n.displayValue + n.harmonicPitch;
            accidental = sr.accidentalHelper.applyAccidentalForValue(n.beat, harmonicFret, isGrace, false);
            noteLine = sr.accidentalHelper.getNoteLineForValue(harmonicFret, false);
            let g = new AccidentalGlyph(0, sr.getScoreY(noteLine), accidental, isGrace);
            g.renderer = this.renderer;
            accidentals.addGlyph(g);
        }
    }
}

class DigitGlyph extends MusicFontGlyph {
    constructor(x, y, digit, scale) {
        super(x, y, scale, DigitGlyph.getSymbol(digit));
        this._digit = 0;
        this._scale = 0;
        this._digit = digit;
        this._scale = scale;
    }
    doLayout() {
        this.width = this.getDigitWidth(this._digit) * this.scale * this._scale;
    }
    getDigitWidth(digit) {
        switch (digit) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                return 14;
            case 1:
                return 10;
            default:
                return 0;
        }
    }
    static getSymbol(digit) {
        switch (digit) {
            case 0:
                return MusicFontSymbol.TimeSig0;
            case 1:
                return MusicFontSymbol.TimeSig1;
            case 2:
                return MusicFontSymbol.TimeSig2;
            case 3:
                return MusicFontSymbol.TimeSig3;
            case 4:
                return MusicFontSymbol.TimeSig4;
            case 5:
                return MusicFontSymbol.TimeSig5;
            case 6:
                return MusicFontSymbol.TimeSig6;
            case 7:
                return MusicFontSymbol.TimeSig7;
            case 8:
                return MusicFontSymbol.TimeSig8;
            case 9:
                return MusicFontSymbol.TimeSig9;
            default:
                return MusicFontSymbol.None;
        }
    }
}

class NumberGlyph extends GlyphGroup {
    constructor(x, y, num, scale = 1.0) {
        super(x, y);
        this._number = 0;
        this._scale = 0;
        this._number = num;
        this._scale = scale;
    }
    doLayout() {
        let i = this._number;
        while (i > 0) {
            let num = i % 10;
            let gl = new DigitGlyph(0, 0, num, this._scale);
            this.addGlyph(gl);
            i = (i / 10) | 0;
        }
        if (this.glyphs) {
            this.glyphs.reverse();
            let cx = 0;
            for (let j = 0, k = this.glyphs.length; j < k; j++) {
                let g = this.glyphs[j];
                g.x = cx;
                g.y = 0;
                g.renderer = this.renderer;
                g.doLayout();
                cx += g.width;
            }
            this.width = cx;
        }
    }
}
NumberGlyph.numberHeight = 18;

class TimeSignatureGlyph extends GlyphGroup {
    constructor(x, y, numerator, denominator, isCommon) {
        super(x, y);
        this._numerator = 0;
        this._denominator = 0;
        this._numerator = numerator;
        this._denominator = denominator;
        this._isCommon = isCommon;
    }
    doLayout() {
        if (this._isCommon && this._numerator === 2 && this._denominator === 2) {
            let common = new MusicFontGlyph(0, 0, this.commonScale, MusicFontSymbol.TimeSigCutCommon);
            common.width = 14 * this.scale;
            this.addGlyph(common);
            super.doLayout();
        }
        else if (this._isCommon && this._numerator === 4 && this._denominator === 4) {
            let common = new MusicFontGlyph(0, 0, this.commonScale, MusicFontSymbol.TimeSigCommon);
            common.width = 14 * this.scale;
            this.addGlyph(common);
            super.doLayout();
        }
        else {
            const numberHeight = NumberGlyph.numberHeight * this.scale;
            let numerator = new NumberGlyph(0, -numberHeight / 2, this._numerator, this.numberScale);
            let denominator = new NumberGlyph(0, numberHeight / 2, this._denominator, this.numberScale);
            this.addGlyph(numerator);
            this.addGlyph(denominator);
            super.doLayout();
            for (let i = 0, j = this.glyphs.length; i < j; i++) {
                let g = this.glyphs[i];
                g.x = (this.width - g.width) / 2;
            }
        }
    }
}

class ScoreTimeSignatureGlyph extends TimeSignatureGlyph {
    get commonScale() {
        return 1;
    }
    get numberScale() {
        return 1;
    }
}

class ScoreBendGlyph extends ScoreHelperNotesBaseGlyph {
    constructor(beat) {
        super(0, 0);
        this._notes = [];
        this._endNoteGlyph = null;
        this._middleNoteGlyph = null;
        this._beat = beat;
    }
    addBends(note) {
        this._notes.push(note);
        if (note.isTieOrigin) {
            return;
        }
        switch (note.bendType) {
            case BendType.Bend:
            case BendType.PrebendRelease:
            case BendType.PrebendBend:
                {
                    let endGlyphs = this._endNoteGlyph;
                    if (!endGlyphs) {
                        endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                        endGlyphs.renderer = this.renderer;
                        this._endNoteGlyph = endGlyphs;
                        this.BendNoteHeads.push(endGlyphs);
                    }
                    let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                    endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                }
                break;
            case BendType.Release:
                {
                    if (!note.isTieOrigin) {
                        let endGlyphs = this._endNoteGlyph;
                        if (!endGlyphs) {
                            endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                            endGlyphs.renderer = this.renderer;
                            this._endNoteGlyph = endGlyphs;
                            this.BendNoteHeads.push(endGlyphs);
                        }
                        let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                        endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                    }
                }
                break;
            case BendType.BendRelease:
                {
                    let middleGlyphs = this._middleNoteGlyph;
                    if (!middleGlyphs) {
                        middleGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                        this._middleNoteGlyph = middleGlyphs;
                        middleGlyphs.renderer = this.renderer;
                        this.BendNoteHeads.push(middleGlyphs);
                    }
                    let middleBendPoint = note.bendPoints[1];
                    middleGlyphs.addGlyph(this.getBendNoteValue(note, note.bendPoints[1]), middleBendPoint.value % 2 !== 0);
                    let endGlyphs = this._endNoteGlyph;
                    if (!endGlyphs) {
                        endGlyphs = new BendNoteHeadGroupGlyph(note.beat, false);
                        endGlyphs.renderer = this.renderer;
                        this._endNoteGlyph = endGlyphs;
                        this.BendNoteHeads.push(endGlyphs);
                    }
                    let lastBendPoint = note.bendPoints[note.bendPoints.length - 1];
                    endGlyphs.addGlyph(this.getBendNoteValue(note, lastBendPoint), lastBendPoint.value % 2 !== 0);
                }
                break;
        }
    }
    paint(cx, cy, canvas) {
        // Draw note heads
        let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._beat.voice.bar);
        let startX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._beat, BeatXPosition.MiddleNotes);
        let endBeatX = cx + startNoteRenderer.x;
        if (this._beat.isLastOfVoice) {
            endBeatX += startNoteRenderer.postBeatGlyphsStart;
        }
        else {
            endBeatX += startNoteRenderer.getBeatX(this._beat.nextBeat, BeatXPosition.PreNotes);
        }
        endBeatX -= 8 * this.scale;
        let middleX = (startX + endBeatX) / 2;
        if (this._middleNoteGlyph) {
            this._middleNoteGlyph.x = middleX - this._middleNoteGlyph.noteHeadOffset;
            this._middleNoteGlyph.y = cy + startNoteRenderer.y;
            this._middleNoteGlyph.paint(0, 0, canvas);
        }
        if (this._endNoteGlyph) {
            this._endNoteGlyph.x = endBeatX - this._endNoteGlyph.noteHeadOffset;
            this._endNoteGlyph.y = cy + startNoteRenderer.y;
            this._endNoteGlyph.paint(0, 0, canvas);
        }
        this._notes.sort((a, b) => {
            return b.displayValue - a.displayValue;
        });
        let directionBeat = this._beat.graceType === GraceType.BendGrace ? this._beat.nextBeat : this._beat;
        let direction = this._notes.length === 1 ? this.getTieDirection(directionBeat, startNoteRenderer) : BeamDirection.Up;
        // draw slurs
        for (let i = 0; i < this._notes.length; i++) {
            let note = this._notes[i];
            if (i > 0 && i >= ((this._notes.length / 2) | 0)) {
                direction = BeamDirection.Down;
            }
            let startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(note, NoteYPosition.Top);
            let heightOffset = NoteHeadGlyph.NoteHeadHeight * this.scale * NoteHeadGlyph.GraceScale * 0.5;
            if (direction === BeamDirection.Down) {
                startY += NoteHeadGlyph.NoteHeadHeight * this.scale;
            }
            let slurText = note.bendStyle === BendStyle.Gradual ? 'grad.' : '';
            if (note.isTieOrigin) {
                let endNote = note.tieDestination;
                let endNoteRenderer = !endNote
                    ? null
                    : this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, endNote.beat.voice.bar);
                // if we have a line break we draw only a line until the end
                if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                    let endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                    let noteValueToDraw = note.tieDestination.realValue;
                    startNoteRenderer.accidentalHelper.applyAccidentalForValue(note.beat, noteValueToDraw, false, true);
                    let endY = cy +
                        startNoteRenderer.y +
                        startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(noteValueToDraw, false));
                    if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                        TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                    }
                    else {
                        this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                    }
                }
                else {
                    let endX = cx + endNoteRenderer.x + endNoteRenderer.getBeatX(endNote.beat, BeatXPosition.MiddleNotes);
                    let endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(endNote, NoteYPosition.Top);
                    if (direction === BeamDirection.Down) {
                        endY += NoteHeadGlyph.NoteHeadHeight * this.scale;
                    }
                    if (note.bendType === BendType.Hold || note.bendType === BendType.Prebend) {
                        TieGlyph.paintTie(canvas, this.scale, startX, startY, endX, endY, direction === BeamDirection.Down, 22, 4);
                    }
                    else {
                        this.drawBendSlur(canvas, startX, startY, endX, endY, direction === BeamDirection.Down, this.scale, slurText);
                    }
                }
                switch (note.bendType) {
                    case BendType.Prebend:
                    case BendType.PrebendBend:
                    case BendType.PrebendRelease:
                        let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                        preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                            .prebendNoteHeadOffset;
                        let preY = cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false)) +
                            heightOffset;
                        this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale);
                        break;
                }
            }
            else {
                if (direction === BeamDirection.Up) {
                    heightOffset = -heightOffset;
                }
                let endValue = 0;
                let endY = 0;
                switch (note.bendType) {
                    case BendType.Bend:
                        endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                        endY = this._endNoteGlyph.getNoteValueY(endValue) + heightOffset;
                        this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        break;
                    case BendType.BendRelease:
                        let middleValue = this.getBendNoteValue(note, note.bendPoints[1]);
                        let middleY = this._middleNoteGlyph.getNoteValueY(middleValue) + heightOffset;
                        this.drawBendSlur(canvas, startX, startY, middleX, middleY, direction === BeamDirection.Down, this.scale, slurText);
                        endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                        endY = this._endNoteGlyph.getNoteValueY(endValue) + heightOffset;
                        this.drawBendSlur(canvas, middleX, middleY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        break;
                    case BendType.Release:
                        if (this.BendNoteHeads.length > 0) {
                            endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                            endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        break;
                    case BendType.Prebend:
                    case BendType.PrebendBend:
                    case BendType.PrebendRelease:
                        let preX = cx + startNoteRenderer.x + startNoteRenderer.getBeatX(note.beat, BeatXPosition.PreNotes);
                        preX += startNoteRenderer.getPreNotesGlyphForBeat(note.beat)
                            .prebendNoteHeadOffset;
                        let preY = cy +
                            startNoteRenderer.y +
                            startNoteRenderer.getScoreY(startNoteRenderer.accidentalHelper.getNoteLineForValue(note.displayValue - ((note.bendPoints[0].value / 2) | 0), false)) +
                            heightOffset;
                        this.drawBendSlur(canvas, preX, preY, startX, startY, direction === BeamDirection.Down, this.scale);
                        if (this.BendNoteHeads.length > 0) {
                            endValue = this.getBendNoteValue(note, note.bendPoints[note.bendPoints.length - 1]);
                            endY = this.BendNoteHeads[0].getNoteValueY(endValue) + heightOffset;
                            this.drawBendSlur(canvas, startX, startY, endBeatX, endY, direction === BeamDirection.Down, this.scale, slurText);
                        }
                        break;
                }
            }
        }
    }
    getBendNoteValue(note, bendPoint) {
        // NOTE: bendpoints are in 1/4 tones, but the note values are in 1/2 notes.
        return note.displayValueWithoutBend + ((bendPoint.value / 2) | 0);
    }
}

class ScoreLegatoGlyph extends TieGlyph {
    constructor(startBeat, endBeat, forEnd = false) {
        super(startBeat, endBeat, forEnd);
    }
    doLayout() {
        super.doLayout();
    }
    getBeamDirection(beat, noteRenderer) {
        if (beat.isRest) {
            return BeamDirection.Up;
        }
        // invert direction (if stems go up, ties go down to not cross them)
        switch (noteRenderer.getBeatDirection(beat)) {
            case BeamDirection.Up:
                return BeamDirection.Down;
            default:
                return BeamDirection.Up;
        }
    }
    getStartY() {
        if (this.startBeat.isRest) {
            // below all lines
            return this.startNoteRenderer.getScoreY(9);
        }
        switch (this.tieDirection) {
            case BeamDirection.Up:
                // below lowest note
                return this.startNoteRenderer.getNoteY(this.startBeat.maxNote, NoteYPosition.Top);
            default:
                return this.startNoteRenderer.getNoteY(this.startBeat.minNote, NoteYPosition.Bottom);
        }
    }
    getEndY() {
        const endNoteScoreRenderer = this.endNoteRenderer;
        if (this.endBeat.isRest) {
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    return endNoteScoreRenderer.getScoreY(9);
                default:
                    return endNoteScoreRenderer.getScoreY(0);
            }
        }
        const startBeamDirection = this.startNoteRenderer.getBeatDirection(this.startBeat);
        const endBeamDirection = endNoteScoreRenderer.getBeatDirection(this.endBeat);
        if (startBeamDirection !== endBeamDirection && this.startBeat.graceType === GraceType.None) {
            if (endBeamDirection === this.tieDirection) {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        // stem upper end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.TopWithStem);
                    default:
                        // stem lower end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.BottomWithStem);
                }
            }
            else {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        // stem upper end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.BottomWithStem);
                    default:
                        // stem lower end
                        return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.TopWithStem);
                }
            }
        }
        switch (this.tieDirection) {
            case BeamDirection.Up:
                // below lowest note
                return endNoteScoreRenderer.getNoteY(this.endBeat.maxNote, NoteYPosition.Top);
            default:
                // above highest note
                return endNoteScoreRenderer.getNoteY(this.endBeat.minNote, NoteYPosition.Bottom);
        }
    }
    getStartX() {
        return this.startNoteRenderer.getBeatX(this.startBeat, BeatXPosition.MiddleNotes);
    }
    getEndX() {
        const endBeamDirection = this.endNoteRenderer.getBeatDirection(this.endBeat);
        return this.endNoteRenderer.getBeatX(this.endBeat, this.endBeat.duration > Duration.Whole &&
            endBeamDirection === this.tieDirection ? BeatXPosition.Stem : BeatXPosition.MiddleNotes);
    }
}

class ScoreSlideLineGlyph extends Glyph {
    constructor(inType, outType, startNote, parent) {
        super(0, 0);
        this._outType = outType;
        this._inType = inType;
        this._startNote = startNote;
        this._parent = parent;
    }
    doLayout() {
        this.width = 0;
    }
    paint(cx, cy, canvas) {
        this.paintSlideIn(cx, cy, canvas);
        this.drawSlideOut(cx, cy, canvas);
    }
    paintSlideIn(cx, cy, canvas) {
        let startNoteRenderer = this.renderer;
        let sizeX = 12 * this.scale;
        let endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left) - 2 * this.scale;
        let endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
        let startX = endX - sizeX;
        let startY = cy + startNoteRenderer.y;
        switch (this._inType) {
            case SlideInType.IntoFromBelow:
                startY += startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                break;
            case SlideInType.IntoFromAbove:
                startY += startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                break;
            default:
                return;
        }
        let accidentalsWidth = this.getAccidentalsWidth(startNoteRenderer, this._startNote.beat);
        startX -= accidentalsWidth;
        endX -= accidentalsWidth;
        this.paintSlideLine(canvas, false, startX, endX, startY, endY);
    }
    getAccidentalsWidth(renderer, beat) {
        let preNotes = renderer.getPreNotesGlyphForBeat(beat);
        if (preNotes && preNotes.accidentals) {
            return preNotes.accidentals.width;
        }
        return 0;
    }
    drawSlideOut(cx, cy, canvas) {
        let startNoteRenderer = this.renderer;
        let sizeX = 12 * this.scale;
        let startOffsetX = 3 * this.scale;
        let endOffsetX = 1 * this.scale;
        let offsetY = 2 * this.scale;
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;
        let waves = false;
        switch (this._outType) {
            case SlideOutType.Shift:
            case SlideOutType.Legato:
                startX =
                    cx +
                        startNoteRenderer.x +
                        startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes) +
                        startOffsetX;
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                if (this._startNote.slideTarget) {
                    let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._startNote.slideTarget.beat.voice.bar);
                    if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    else {
                        endX =
                            cx +
                                endNoteRenderer.x +
                                endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.PreNotes) -
                                endOffsetX;
                        endY = cy + endNoteRenderer.y + endNoteRenderer.getNoteY(this._startNote.slideTarget, NoteYPosition.Center);
                    }
                    if (this._startNote.slideTarget.realValue > this._startNote.realValue) {
                        startY += offsetY;
                        endY -= offsetY;
                    }
                    else {
                        startY -= offsetY;
                        endY += offsetY;
                    }
                }
                else {
                    endX = cx + startNoteRenderer.x + this._parent.x;
                    endY = startY;
                }
                break;
            case SlideOutType.OutUp:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX = startX + sizeX;
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                break;
            case SlideOutType.OutDown:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX = startX + sizeX;
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                break;
            case SlideOutType.PickSlideUp:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) + startOffsetX;
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                if (this._startNote.beat.nextBeat &&
                    this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                    endX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                }
                waves = true;
                break;
            case SlideOutType.PickSlideDown:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right) + startOffsetX;
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
                endX = cx + startNoteRenderer.x + startNoteRenderer.width;
                if (this._startNote.beat.nextBeat &&
                    this._startNote.beat.nextBeat.voice === this._startNote.beat.voice) {
                    endX =
                        cx +
                            startNoteRenderer.x +
                            startNoteRenderer.getBeatX(this._startNote.beat.nextBeat, BeatXPosition.PreNotes);
                }
                waves = true;
                break;
            default:
                return;
        }
        this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
    }
    paintSlideLine(canvas, waves, startX, endX, startY, endY) {
        if (waves) {
            let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
            glyph.renderer = this.renderer;
            glyph.doLayout();
            startY -= glyph.height / 2;
            endY -= glyph.height / 2;
            let b = endX - startX;
            let a = endY - startY;
            let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
            glyph.width = b;
            let angle = Math.asin(a / c) * (180 / Math.PI);
            canvas.beginRotate(startX, startY, angle);
            glyph.paint(0, 0, canvas);
            canvas.endRotate();
        }
        else {
            canvas.beginPath();
            canvas.moveTo(startX, startY);
            canvas.lineTo(endX, endY);
            canvas.stroke();
        }
    }
}

class ScoreSlurGlyph extends ScoreLegatoGlyph {
    constructor(startNote, endNote, forEnd = false) {
        super(startNote.beat, endNote.beat, forEnd);
        this._startNote = startNote;
        this._endNote = endNote;
    }
    getTieHeight(startX, startY, endX, endY) {
        return Math.log2(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
    }
    getStartY() {
        if (this.isStartCentered()) {
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    // below lowest note
                    return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Top);
                default:
                    return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Bottom);
            }
        }
        return this.startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
    }
    getEndY() {
        if (this.isEndCentered()) {
            if (this.isEndOnStem()) {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.TopWithStem);
                    default:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.BottomWithStem);
                }
            }
            else {
                switch (this.tieDirection) {
                    case BeamDirection.Up:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Top);
                    default:
                        return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Bottom);
                }
            }
        }
        else {
            return this.endNoteRenderer.getNoteY(this._endNote, NoteYPosition.Center);
        }
    }
    isStartCentered() {
        return ((this._startNote === this._startNote.beat.maxNote && this.tieDirection === BeamDirection.Up) ||
            (this._startNote === this._startNote.beat.minNote && this.tieDirection === BeamDirection.Down));
    }
    isEndCentered() {
        return this._startNote.beat.graceType === GraceType.None && ((this._endNote === this._endNote.beat.maxNote && this.tieDirection === BeamDirection.Up) ||
            (this._endNote === this._endNote.beat.minNote && this.tieDirection === BeamDirection.Down));
    }
    isEndOnStem() {
        const endNoteScoreRenderer = this.endNoteRenderer;
        const startBeamDirection = this.startNoteRenderer.getBeatDirection(this.startBeat);
        const endBeamDirection = endNoteScoreRenderer.getBeatDirection(this.endBeat);
        return startBeamDirection !== endBeamDirection && this.startBeat.graceType === GraceType.None;
    }
    getStartX() {
        return this.isStartCentered()
            ? this.startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.MiddleNotes)
            : this.startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
    }
    getEndX() {
        if (this.isEndCentered()) {
            if (this.isEndOnStem()) {
                return this.endNoteRenderer.getBeatX(this._endNote.beat, BeatXPosition.Stem);
            }
            else {
                return this.endNoteRenderer.getNoteX(this._endNote, NoteXPosition.Center);
            }
        }
        else {
            return this.endNoteRenderer.getBeatX(this._endNote.beat, BeatXPosition.PreNotes);
        }
    }
}

class ScoreTieGlyph extends TieGlyph {
    constructor(startNote, endNote, forEnd = false) {
        super(!startNote ? null : startNote.beat, !endNote ? null : endNote.beat, forEnd);
        this.startNote = startNote;
        this.endNote = endNote;
    }
    shouldDrawBendSlur() {
        return this.renderer.settings.notation.extendBendArrowsOnTiedNotes && !!this.startNote.bendOrigin && this.startNote.isTieOrigin;
    }
    doLayout() {
        super.doLayout();
    }
    getBeamDirection(beat, noteRenderer) {
        // invert direction (if stems go up, ties go down to not cross them)
        switch (noteRenderer.getBeatDirection(beat)) {
            case BeamDirection.Up:
                return BeamDirection.Down;
            default:
                return BeamDirection.Up;
        }
    }
    getStartY() {
        if (this.startBeat.isRest) {
            // below all lines
            return this.startNoteRenderer.getScoreY(9);
        }
        switch (this.tieDirection) {
            case BeamDirection.Up:
                // below lowest note
                return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Top);
            default:
                return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Bottom);
        }
    }
    getEndY() {
        const endNoteScoreRenderer = this.endNoteRenderer;
        if (this.endBeat.isRest) {
            switch (this.tieDirection) {
                case BeamDirection.Up:
                    return endNoteScoreRenderer.getScoreY(9);
                default:
                    return endNoteScoreRenderer.getScoreY(0);
            }
        }
        switch (this.tieDirection) {
            case BeamDirection.Up:
                return endNoteScoreRenderer.getNoteY(this.endNote, NoteYPosition.Top);
            default:
                return endNoteScoreRenderer.getNoteY(this.endNote, NoteYPosition.Bottom);
        }
    }
    getStartX() {
        return this.startNoteRenderer.getBeatX(this.startNote.beat, BeatXPosition.PostNotes);
    }
    getEndX() {
        return this.endNoteRenderer.getBeatX(this.endNote.beat, BeatXPosition.PreNotes);
    }
}

class ScoreBeatContainerGlyph extends BeatContainerGlyph {
    constructor(beat, voiceContainer) {
        super(beat, voiceContainer);
        this._bend = null;
        this._effectSlur = null;
        this._effectEndSlur = null;
    }
    doLayout() {
        this._effectSlur = null;
        this._effectEndSlur = null;
        super.doLayout();
        if (this.beat.isLegatoOrigin) {
            // only create slur for very first origin of "group"
            if (!this.beat.previousBeat || !this.beat.previousBeat.isLegatoOrigin) {
                // tie with end beat
                let destination = this.beat.nextBeat;
                while (destination.nextBeat && destination.nextBeat.isLegatoDestination) {
                    destination = destination.nextBeat;
                }
                this.addTie(new ScoreLegatoGlyph(this.beat, destination, false));
            }
        }
        else if (this.beat.isLegatoDestination) {
            // only create slur for last destination of "group"
            if (!this.beat.isLegatoOrigin) {
                let origin = this.beat.previousBeat;
                while (origin.previousBeat && origin.previousBeat.isLegatoOrigin) {
                    origin = origin.previousBeat;
                }
                this.addTie(new ScoreLegatoGlyph(origin, this.beat, true));
            }
        }
        if (this._bend) {
            this._bend.renderer = this.renderer;
            this._bend.doLayout();
            this.updateWidth();
        }
    }
    createTies(n) {
        // create a tie if any effect requires it
        if (!n.isVisible) {
            return;
        }
        // NOTE: we create 2 tie glyphs if we have a line break inbetween
        // the two notes
        if (n.isTieOrigin &&
            !n.hasBend &&
            !n.beat.hasWhammyBar &&
            n.beat.graceType !== GraceType.BendGrace &&
            n.tieDestination &&
            n.tieDestination.isVisible) {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let tie = new ScoreTieGlyph(n, n.tieDestination, false);
            this.addTie(tie);
        }
        if (n.isTieDestination && !n.tieOrigin.hasBend && !n.beat.hasWhammyBar) {
            let tie = new ScoreTieGlyph(n.tieOrigin, n, true);
            this.addTie(tie);
        }
        // TODO: depending on the type we have other positioning
        // we should place glyphs in the preNotesGlyph or postNotesGlyph if needed
        if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
            let l = new ScoreSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
            this.addTie(l);
        }
        if (n.isSlurOrigin && n.slurDestination && n.slurDestination.isVisible) {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            let tie = new ScoreSlurGlyph(n, n.slurDestination, false);
            this.addTie(tie);
        }
        if (n.isSlurDestination) {
            let tie = new ScoreSlurGlyph(n.slurOrigin, n, true);
            this.addTie(tie);
        }
        // start effect slur on first beat
        if (!this._effectSlur && n.isEffectSlurOrigin && n.effectSlurDestination) {
            const effectSlur = new ScoreSlurGlyph(n, n.effectSlurDestination, false);
            this._effectSlur = effectSlur;
            this.addTie(effectSlur);
        }
        // end effect slur on last beat
        if (!this._effectEndSlur && n.beat.isEffectSlurDestination && n.beat.effectSlurOrigin) {
            let direction = this.onNotes.beamingHelper.direction;
            let startNote = direction === BeamDirection.Up ? n.beat.effectSlurOrigin.minNote : n.beat.effectSlurOrigin.maxNote;
            let endNote = direction === BeamDirection.Up ? n.beat.minNote : n.beat.maxNote;
            const effectEndSlur = new ScoreSlurGlyph(startNote, endNote, true);
            this._effectEndSlur = effectEndSlur;
            this.addTie(effectEndSlur);
        }
        if (n.hasBend) {
            if (!this._bend) {
                const bend = new ScoreBendGlyph(n.beat);
                this._bend = bend;
                bend.renderer = this.renderer;
                this.addTie(bend);
            }
            // tslint:disable-next-line: no-unnecessary-type-assertion
            this._bend.addBends(n);
        }
    }
}

/**
 * This BarRenderer renders a bar using standard music notation.
 */
class ScoreBarRenderer extends BarRendererBase {
    constructor(renderer, bar) {
        super(renderer, bar);
        this.simpleWhammyOverflow = 0;
        this._firstLineY = 0;
        this._startSpacing = false;
        this.accidentalHelper = new AccidentalHelper(this);
    }
    getBeatDirection(beat) {
        return this.helpers.getBeamingHelperForBeat(beat).direction;
    }
    get lineOffset() {
        return (BarRendererBase.LineSpacing + 1) * this.scale;
    }
    updateSizes() {
        let res = this.resources;
        let glyphOverflow = res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2;
        this.topPadding = glyphOverflow * this.scale;
        this.bottomPadding = glyphOverflow * this.scale;
        this.height = this.lineOffset * 4 + this.topPadding + this.bottomPadding;
        this.updateFirstLineY();
        super.updateSizes();
    }
    updateFirstLineY() {
        let fullLineHeight = this.lineOffset * 4;
        let actualLineHeight = (this.bar.staff.standardNotationLineCount - 1) * this.lineOffset;
        this._firstLineY = (fullLineHeight - actualLineHeight) / 2;
    }
    doLayout() {
        this.updateFirstLineY();
        super.doLayout();
        if (!this.bar.isEmpty && this.accidentalHelper.maxLineBeat) {
            let top = this.getScoreY(-2);
            let bottom = this.getScoreY(6);
            let whammyOffset = this.simpleWhammyOverflow;
            this.registerOverflowTop(whammyOffset);
            let maxNoteY = this.getScoreY(this.accidentalHelper.maxLine);
            let maxNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.maxLineBeat);
            if (maxNoteHelper.direction === BeamDirection.Up) {
                maxNoteY -= this.getStemSize(maxNoteHelper);
                maxNoteY -= maxNoteHelper.fingeringCount * this.resources.graceFont.size;
                if (maxNoteHelper.hasTuplet) {
                    maxNoteY -= this.resources.effectFont.size * 2;
                }
            }
            if (maxNoteHelper.hasTuplet) {
                maxNoteY -= this.resources.effectFont.size * 1.5;
            }
            if (maxNoteY < top) {
                this.registerOverflowTop(Math.abs(maxNoteY) + whammyOffset);
            }
            let minNoteY = this.getScoreY(this.accidentalHelper.minLine);
            let minNoteHelper = this.helpers.getBeamingHelperForBeat(this.accidentalHelper.minLineBeat);
            if (minNoteHelper.direction === BeamDirection.Down) {
                minNoteY += this.getStemSize(minNoteHelper);
                minNoteY += minNoteHelper.fingeringCount * this.resources.graceFont.size;
            }
            if (minNoteY > bottom) {
                this.registerOverflowBottom(Math.abs(minNoteY) - bottom);
            }
        }
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        this.paintBeams(cx, cy, canvas);
        this.paintTuplets(cx, cy, canvas);
    }
    paintTuplets(cx, cy, canvas) {
        for (let voice of this.bar.voices) {
            if (this.hasVoiceContainer(voice)) {
                let container = this.getVoiceContainer(voice);
                for (let tupletGroup of container.tupletGroups) {
                    this.paintTupletHelper(cx + this.beatGlyphsStart, cy, canvas, tupletGroup);
                }
            }
        }
    }
    paintBeams(cx, cy, canvas) {
        for (let i = 0, j = this.helpers.beamHelpers.length; i < j; i++) {
            let v = this.helpers.beamHelpers[i];
            for (let k = 0, l = v.length; k < l; k++) {
                let h = v[k];
                this.paintBeamHelper(cx + this.beatGlyphsStart, cy, canvas, h);
            }
        }
    }
    paintBeamHelper(cx, cy, canvas, h) {
        canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
        // TODO: draw stem at least at the center of the score staff.
        // check if we need to paint simple footer
        if (!h.isRestBeamHelper) {
            if (h.beats.length === 1) {
                this.paintFlag(cx, cy, canvas, h);
            }
            else {
                this.paintBar(cx, cy, canvas, h);
            }
        }
    }
    paintTupletHelper(cx, cy, canvas, h) {
        let res = this.resources;
        let oldAlign = canvas.textAlign;
        let oldBaseLine = canvas.textBaseline;
        canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
        canvas.textAlign = TextAlign.Center;
        canvas.textBaseline = TextBaseline.Middle;
        let s;
        let num = h.beats[0].tupletNumerator;
        let den = h.beats[0].tupletDenominator;
        // list as in Guitar Pro 7. for certain tuplets only the numerator is shown
        if (num === 2 && den === 3) {
            s = '2';
        }
        else if (num === 3 && den === 2) {
            s = '3';
        }
        else if (num === 4 && den === 6) {
            s = '4';
        }
        else if (num === 5 && den === 4) {
            s = '5';
        }
        else if (num === 6 && den === 4) {
            s = '6';
        }
        else if (num === 7 && den === 4) {
            s = '7';
        }
        else if (num === 9 && den === 8) {
            s = '9';
        }
        else if (num === 10 && den === 8) {
            s = '10';
        }
        else if (num === 11 && den === 8) {
            s = '11';
        }
        else if (num === 12 && den === 8) {
            s = '12';
        }
        else if (num === 13 && den === 8) {
            s = '13';
        }
        else {
            s = num + ':' + den;
        }
        // check if we need to paint simple footer
        let offset = 10 * this.scale;
        let size = 5 * this.scale;
        if (h.beats.length === 1 || !h.isFull) {
            for (let i = 0, j = h.beats.length; i < j; i++) {
                let beat = h.beats[i];
                let beamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(beat.index);
                if (!beamingHelper) {
                    continue;
                }
                let direction = beamingHelper.direction;
                let tupletX = beamingHelper.getBeatLineX(beat);
                let tupletY = this.calculateBeamYWithDirection(beamingHelper, tupletX, direction);
                if (direction === BeamDirection.Down) {
                    offset *= -1;
                    size *= -1;
                }
                canvas.font = res.effectFont;
                canvas.fillText(s, cx + this.x + tupletX, cy + this.y + tupletY - offset - size);
            }
        }
        else {
            let firstBeat = h.beats[0];
            let lastBeat = h.beats[h.beats.length - 1];
            let firstNonRestBeat = null;
            let lastNonRestBeat = null;
            for (let i = 0; i < h.beats.length; i++) {
                if (!h.beats[i].isRest) {
                    firstNonRestBeat = h.beats[i];
                    break;
                }
            }
            for (let i = h.beats.length - 1; i >= 0; i--) {
                if (!h.beats[i].isRest) {
                    lastNonRestBeat = h.beats[i];
                    break;
                }
            }
            let isRestOnly = false;
            if (!firstNonRestBeat) {
                firstNonRestBeat = firstBeat;
                isRestOnly = true;
            }
            if (!lastNonRestBeat) {
                lastNonRestBeat = lastBeat;
            }
            //
            // Calculate the overall area of the tuplet bracket
            let firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstBeat.index);
            let lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastBeat.index);
            let startX = firstBeamingHelper.getBeatLineX(firstBeat);
            let endX = lastBeamingHelper.getBeatLineX(lastBeat);
            //
            // calculate the y positions for our bracket
            let firstNonRestBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstNonRestBeat.index);
            let lastNonRestBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastNonRestBeat.index);
            let direction = firstBeamingHelper.direction;
            let startY = this.calculateBeamYWithDirection(firstNonRestBeamingHelper, startX, direction);
            let endY = this.calculateBeamYWithDirection(lastNonRestBeamingHelper, endX, direction);
            if (isRestOnly) {
                startY = Math.max(startY, endY);
                endY = startY;
            }
            //
            // Calculate how many space the text will need
            canvas.font = res.effectFont;
            let sw = canvas.measureText(s);
            let sp = 3 * this.scale;
            //
            // Calculate the offsets where to break the bracket
            let middleX = (startX + endX) / 2;
            let offset1X = middleX - sw / 2 - sp;
            let offset2X = middleX + sw / 2 + sp;
            let k = (endY - startY) / (endX - startX);
            let d = startY - k * startX;
            let offset1Y = k * offset1X + d;
            let middleY = k * middleX + d;
            let offset2Y = k * offset2X + d;
            if (direction === BeamDirection.Down) {
                offset *= -1;
                size *= -1;
            }
            //
            // draw the bracket
            canvas.beginPath();
            canvas.moveTo(cx + this.x + startX, (cy + this.y + startY - offset) | 0);
            canvas.lineTo(cx + this.x + startX, (cy + this.y + startY - offset - size) | 0);
            canvas.lineTo(cx + this.x + offset1X, (cy + this.y + offset1Y - offset - size) | 0);
            canvas.stroke();
            canvas.beginPath();
            canvas.moveTo(cx + this.x + offset2X, (cy + this.y + offset2Y - offset - size) | 0);
            canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset - size) | 0);
            canvas.lineTo(cx + this.x + endX, (cy + this.y + endY - offset) | 0);
            canvas.stroke();
            //
            // Draw the string
            canvas.fillText(s, cx + this.x + middleX, cy + this.y + middleY - offset - size);
        }
        canvas.textAlign = oldAlign;
        canvas.textBaseline = oldBaseLine;
    }
    getStemSize(helper) {
        let size = helper.beats.length === 1
            ? this.getFlagStemSize(helper.shortestDuration)
            : this.getBarStemSize(helper.shortestDuration);
        if (helper.isGrace) {
            size = size * NoteHeadGlyph.GraceScale;
        }
        return size;
    }
    getBarStemSize(duration) {
        let size = 0;
        switch (duration) {
            case Duration.QuadrupleWhole:
            case Duration.Half:
            case Duration.Quarter:
            case Duration.Eighth:
            case Duration.Sixteenth:
                size = 6;
                break;
            case Duration.ThirtySecond:
                size = 8;
                break;
            case Duration.SixtyFourth:
                size = 9;
                break;
            case Duration.OneHundredTwentyEighth:
                size = 9;
                break;
            case Duration.TwoHundredFiftySixth:
                size = 10;
                break;
            default:
                size = 0;
                break;
        }
        return this.getScoreHeight(size);
    }
    getFlagStemSize(duration) {
        let size = 0;
        switch (duration) {
            case Duration.QuadrupleWhole:
            case Duration.Half:
            case Duration.Quarter:
            case Duration.Eighth:
            case Duration.Sixteenth:
            case Duration.ThirtySecond:
            case Duration.SixtyFourth:
            case Duration.OneHundredTwentyEighth:
            case Duration.TwoHundredFiftySixth:
                size = 6;
                break;
            default:
                size = 0;
                break;
        }
        return this.getScoreHeight(size);
    }
    get middleYPosition() {
        return this.getScoreY(this.bar.staff.standardNotationLineCount - 1);
    }
    getNoteY(note, requestedPosition) {
        let y = super.getNoteY(note, requestedPosition);
        if (isNaN(y)) {
            // NOTE: some might request the note position before the glyphs have been created
            // e.g. the beaming helper, for these we just need a rough
            // estimate on the position
            const line = AccidentalHelper.computeLineWithoutAccidentals(this.bar, note);
            y = this.getScoreY(line);
        }
        return y;
    }
    calculateBeamY(h, x) {
        return this.calculateBeamYWithDirection(h, x, h.direction);
    }
    applyLayoutingInfo() {
        const result = super.applyLayoutingInfo();
        if (result && this.bar.isMultiVoice) {
            // consider rest overflows
            let top = this.getScoreY(-2);
            let bottom = this.getScoreY(6);
            let minMax = this.helpers.collisionHelper.getBeatMinMaxY();
            if (minMax[0] < top) {
                this.registerOverflowTop(Math.abs(minMax[0]));
            }
            if (minMax[1] > bottom) {
                this.registerOverflowBottom(Math.abs(minMax[1]) - bottom);
            }
        }
        return result;
    }
    calculateBeamYWithDirection(h, x, direction) {
        let stemSize = this.getStemSize(h);
        if (!h.drawingInfos.has(direction)) {
            let drawingInfo = new BeamingHelperDrawInfo();
            h.drawingInfos.set(direction, drawingInfo);
            // the beaming logic works like this: 
            // 1. we take the first and last note, add the stem, and put a diagnal line between them. 
            // 2. the height of the diagonal line must not exceed a max height, 
            //    - if this is the case, the line on the more distant note just gets longer
            // 3. any middle elements (notes or rests) shift this diagonal line up/down to avoid overlaps
            const firstBeat = h.beats[0];
            const lastBeat = h.beats[h.beats.length - 1];
            let isRest = h.isRestBeamHelper;
            // 1. put direct diagonal line.
            drawingInfo.startBeat = firstBeat;
            drawingInfo.startX = h.getBeatLineX(firstBeat);
            if (isRest) {
                drawingInfo.startY = direction === BeamDirection.Up
                    ? this.getScoreY(h.minRestLine)
                    : this.getScoreY(h.maxRestLine);
            }
            else {
                drawingInfo.startY = direction === BeamDirection.Up
                    ? this.getScoreY(this.accidentalHelper.getMinLine(firstBeat)) - stemSize
                    : this.getScoreY(this.accidentalHelper.getMaxLine(firstBeat)) + stemSize;
            }
            drawingInfo.endBeat = lastBeat;
            drawingInfo.endX = h.getBeatLineX(lastBeat);
            if (isRest) {
                drawingInfo.endY = direction === BeamDirection.Up
                    ? this.getScoreY(h.minRestLine)
                    : this.getScoreY(h.maxRestLine);
            }
            else {
                drawingInfo.endY =
                    direction === BeamDirection.Up
                        ? this.getScoreY(this.accidentalHelper.getMinLine(lastBeat)) - stemSize
                        : this.getScoreY(this.accidentalHelper.getMaxLine(lastBeat)) + stemSize;
            }
            // 2. ensure max height
            // we use the min/max notes to place the beam along their real position
            // we only want a maximum of 10 offset for their gradient
            let maxDistance = 10 * this.scale;
            if (direction === BeamDirection.Down && drawingInfo.startY > drawingInfo.endY && drawingInfo.startY - drawingInfo.endY > maxDistance) {
                drawingInfo.endY = drawingInfo.startY - maxDistance;
            }
            if (direction === BeamDirection.Down && drawingInfo.endY > drawingInfo.startY && drawingInfo.endY - drawingInfo.startY > maxDistance) {
                drawingInfo.startY = drawingInfo.endY - maxDistance;
            }
            if (direction === BeamDirection.Up && drawingInfo.startY < drawingInfo.endY && drawingInfo.endY - drawingInfo.startY > maxDistance) {
                drawingInfo.endY = drawingInfo.startY + maxDistance;
            }
            if (direction === BeamDirection.Up && drawingInfo.endY < drawingInfo.startY && drawingInfo.startY - drawingInfo.endY > maxDistance) {
                drawingInfo.startY = drawingInfo.endY + maxDistance;
            }
            // 3. let middle elements shift up/down
            if (h.beats.length > 1) {
                // check if highest note shifts bar up or down
                if (direction === BeamDirection.Up) {
                    let yNeededForHighestNote = this.getScoreY(this.accidentalHelper.getMinLine(h.beatOfHighestNote)) - stemSize;
                    const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfHighestNote));
                    const diff = yGivenByCurrentValues - yNeededForHighestNote;
                    if (diff > 0) {
                        drawingInfo.startY -= diff;
                        drawingInfo.endY -= diff;
                    }
                }
                else {
                    let yNeededForLowestNote = this.getScoreY(this.accidentalHelper.getMaxLine(h.beatOfLowestNote)) + stemSize;
                    const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfLowestNote));
                    const diff = yNeededForLowestNote - yGivenByCurrentValues;
                    if (diff > 0) {
                        drawingInfo.startY += diff;
                        drawingInfo.endY += diff;
                    }
                }
                // check if rest shifts bar up or down
                if (h.minRestLine !== null || h.maxRestLine !== null) {
                    const barCount = ModelUtils.getIndex(h.shortestDuration) - 2;
                    let scaleMod = h.isGrace ? NoteHeadGlyph.GraceScale : 1;
                    let barSpacing = barCount *
                        (BarRendererBase.BeamSpacing + BarRendererBase.BeamThickness) * this.scale * scaleMod;
                    barSpacing += BarRendererBase.BeamSpacing;
                    if (direction === BeamDirection.Up && h.minRestLine !== null) {
                        let yNeededForRest = this.getScoreY(h.minRestLine) - barSpacing;
                        const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfMinRestLine));
                        const diff = yGivenByCurrentValues - yNeededForRest;
                        if (diff > 0) {
                            drawingInfo.startY -= diff;
                            drawingInfo.endY -= diff;
                        }
                    }
                    else if (direction === BeamDirection.Down && h.maxRestLine !== null) {
                        let yNeededForRest = this.getScoreY(h.maxRestLine) + barSpacing;
                        const yGivenByCurrentValues = drawingInfo.calcY(h.getBeatLineX(h.beatOfMaxRestLine));
                        const diff = yNeededForRest - yGivenByCurrentValues;
                        if (diff > 0) {
                            drawingInfo.startY += diff;
                            drawingInfo.endY += diff;
                        }
                    }
                }
            }
        }
        return h.drawingInfos.get(direction).calcY(x);
    }
    paintBar(cx, cy, canvas, h) {
        for (let i = 0, j = h.beats.length; i < j; i++) {
            let beat = h.beats[i];
            let isGrace = beat.graceType !== GraceType.None;
            let scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
            //
            // draw line
            //
            let beatLineX = h.getBeatLineX(beat);
            let direction = h.direction;
            let y1 = cy + this.y;
            y1 +=
                direction === BeamDirection.Up
                    ? this.getScoreY(this.accidentalHelper.getMaxLine(beat))
                    : this.getScoreY(this.accidentalHelper.getMinLine(beat));
            let y2 = cy + this.y;
            y2 += this.calculateBeamY(h, beatLineX);
            canvas.lineWidth = BarRendererBase.StemWidth * this.scale;
            canvas.beginPath();
            canvas.moveTo(cx + this.x + beatLineX, y1);
            canvas.lineTo(cx + this.x + beatLineX, y2);
            canvas.stroke();
            canvas.lineWidth = this.scale;
            let fingeringY = y2;
            if (direction === BeamDirection.Down) {
                fingeringY += canvas.font.size * 2;
            }
            else if (i !== 0) {
                fingeringY -= canvas.font.size * 1.5;
            }
            this.paintFingering(canvas, beat, cx + this.x + beatLineX, direction, fingeringY);
            let brokenBarOffset = 6 * this.scale * scaleMod;
            let barSpacing = (BarRendererBase.BeamSpacing + BarRendererBase.BeamThickness) * this.scale * scaleMod;
            let barSize = BarRendererBase.BeamThickness * this.scale * scaleMod;
            let barCount = ModelUtils.getIndex(beat.duration) - 2;
            let barStart = cy + this.y;
            if (direction === BeamDirection.Down) {
                barSpacing = -barSpacing;
                barSize = -barSize;
            }
            for (let barIndex = 0; barIndex < barCount; barIndex++) {
                let barStartX = 0;
                let barEndX = 0;
                let barStartY = 0;
                let barEndY = 0;
                let barY = barStart + barIndex * barSpacing;
                //
                // Bar to Next?
                //
                if (i < h.beats.length - 1) {
                    // full bar?
                    if (BeamingHelper.isFullBarJoin(beat, h.beats[i + 1], barIndex)) {
                        barStartX = beatLineX;
                        barEndX = h.getBeatLineX(h.beats[i + 1]);
                    }
                    else if (i === 0 || !BeamingHelper.isFullBarJoin(h.beats[i - 1], beat, barIndex)) {
                        barStartX = beatLineX;
                        barEndX = barStartX + brokenBarOffset;
                    }
                    else {
                        continue;
                    }
                    barStartY = barY + this.calculateBeamY(h, barStartX);
                    barEndY = barY + this.calculateBeamY(h, barEndX);
                    ScoreBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                }
                else if (i > 0 && !BeamingHelper.isFullBarJoin(beat, h.beats[i - 1], barIndex)) {
                    barStartX = beatLineX - brokenBarOffset;
                    barEndX = beatLineX;
                    barStartY = barY + this.calculateBeamY(h, barStartX);
                    barEndY = barY + this.calculateBeamY(h, barEndX);
                    ScoreBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                }
            }
        }
    }
    static paintSingleBar(canvas, x1, y1, x2, y2, size) {
        canvas.beginPath();
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
        canvas.lineTo(x2, y2 + size);
        canvas.lineTo(x1, y1 + size);
        canvas.closePath();
        canvas.fill();
    }
    paintFlag(cx, cy, canvas, h) {
        let beat = h.beats[0];
        if (beat.graceType === GraceType.BendGrace ||
            (beat.graceType !== GraceType.None && this.settings.notation.notationMode === NotationMode.SongBook)) {
            return;
        }
        let isGrace = beat.graceType !== GraceType.None;
        let scaleMod = isGrace ? NoteHeadGlyph.GraceScale : 1;
        //
        // draw line
        //
        let stemSize = this.getFlagStemSize(h.shortestDuration);
        let beatLineX = h.getBeatLineX(beat);
        let direction = h.direction;
        let topY = this.getScoreY(this.accidentalHelper.getMinLine(beat));
        let bottomY = this.getScoreY(this.accidentalHelper.getMaxLine(beat));
        let beamY = 0;
        let fingeringY = 0;
        if (direction === BeamDirection.Down) {
            bottomY += stemSize * scaleMod;
            beamY = bottomY;
            fingeringY = cy + this.y + bottomY;
        }
        else {
            topY -= stemSize * scaleMod;
            beamY = topY;
            fingeringY = cy + this.y + topY;
        }
        this.paintFingering(canvas, beat, cx + this.x + beatLineX, direction, fingeringY);
        if (!h.hasLine) {
            return;
        }
        canvas.lineWidth = BarRendererBase.StemWidth * this.scale;
        canvas.beginPath();
        canvas.moveTo(cx + this.x + beatLineX, cy + this.y + topY);
        canvas.lineTo(cx + this.x + beatLineX, cy + this.y + bottomY);
        canvas.stroke();
        canvas.lineWidth = this.scale;
        if (beat.graceType === GraceType.BeforeBeat) {
            let graceSizeY = 15 * this.scale;
            let graceSizeX = 12 * this.scale;
            canvas.beginPath();
            if (direction === BeamDirection.Down) {
                canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + bottomY - graceSizeY);
                canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + bottomY);
            }
            else {
                canvas.moveTo(cx + this.x + beatLineX - graceSizeX / 2, cy + this.y + topY + graceSizeY);
                canvas.lineTo(cx + this.x + beatLineX + graceSizeX / 2, cy + this.y + topY);
            }
            canvas.stroke();
        }
        //
        // Draw flag
        //
        if (h.hasFlag) {
            let glyph = new FlagGlyph(beatLineX - this.scale / 2, beamY, beat.duration, direction, isGrace);
            glyph.renderer = this;
            glyph.doLayout();
            glyph.paint(cx + this.x, cy + this.y, canvas);
        }
    }
    paintFingering(canvas, beat, beatLineX, direction, topY) {
        let settings = this.settings;
        if (settings.notation.fingeringMode !== FingeringMode.ScoreDefault &&
            settings.notation.fingeringMode !== FingeringMode.ScoreForcePiano) {
            return;
        }
        if (direction === BeamDirection.Up) {
            beatLineX -= 10 * this.scale;
        }
        else {
            beatLineX += 3 * this.scale;
        }
        // sort notes ascending in their value to ensure
        // we are drawing the numbers according to their order on the stave
        let noteList = beat.notes.slice(0);
        noteList.sort((a, b) => {
            return a.realValue - b.realValue;
        });
        for (let n = 0; n < noteList.length; n++) {
            let note = noteList[n];
            let text = null;
            if (note.leftHandFinger !== Fingers.Unknown) {
                text = ModelUtils.fingerToString(settings, beat, note.leftHandFinger, true);
            }
            else if (note.rightHandFinger !== Fingers.Unknown) {
                text = ModelUtils.fingerToString(settings, beat, note.rightHandFinger, false);
            }
            if (!text) {
                continue;
            }
            canvas.fillText(text, beatLineX, topY);
            topY -= canvas.font.size | 0;
        }
    }
    createPreBeatGlyphs() {
        super.createPreBeatGlyphs();
        if (this.bar.masterBar.isRepeatStart) {
            this.addPreBeatGlyph(new RepeatOpenGlyph(0, 0, 1.5, 3));
        }
        // Clef
        if (this.isFirstOfLine ||
            this.bar.clef !== this.bar.previousBar.clef ||
            this.bar.clefOttava !== this.bar.previousBar.clefOttava) {
            let offset = 0;
            switch (this.bar.clef) {
                case Clef.Neutral:
                    offset = this.bar.staff.standardNotationLineCount - 1;
                    break;
                case Clef.F4:
                    offset = 2;
                    break;
                case Clef.C3:
                    offset = 4;
                    break;
                case Clef.C4:
                    offset = 2;
                    break;
                case Clef.G2:
                    offset = 6;
                    break;
            }
            this.createStartSpacing();
            this.addPreBeatGlyph(new ClefGlyph(0, this.getScoreY(offset) + 0.5 * BarRendererBase.StaffLineThickness, this.bar.clef, this.bar.clefOttava));
        }
        // Key signature
        if ((this.index === 0 && this.bar.masterBar.keySignature !== KeySignature.C) ||
            (this.bar.previousBar && this.bar.masterBar.keySignature !== this.bar.previousBar.masterBar.keySignature)) {
            this.createStartSpacing();
            this.createKeySignatureGlyphs();
        }
        // Time Signature
        if (!this.bar.previousBar ||
            (this.bar.previousBar &&
                this.bar.masterBar.timeSignatureNumerator !== this.bar.previousBar.masterBar.timeSignatureNumerator) ||
            (this.bar.previousBar &&
                this.bar.masterBar.timeSignatureDenominator !== this.bar.previousBar.masterBar.timeSignatureDenominator)) {
            this.createStartSpacing();
            this.createTimeSignatureGlyphs();
        }
        this.addPreBeatGlyph(new BarNumberGlyph(0, this.getScoreHeight(-0.5), this.bar.index + 1));
    }
    createBeatGlyphs() {
        for (let v = 0; v < this.bar.voices.length; v++) {
            let voice = this.bar.voices[v];
            if (this.hasVoiceContainer(voice)) {
                this.createVoiceGlyphs(voice);
            }
        }
    }
    createPostBeatGlyphs() {
        super.createPostBeatGlyphs();
        if (this.bar.masterBar.isRepeatEnd) {
            this.addPostBeatGlyph(new RepeatCloseGlyph(this.x, 0));
            if (this.bar.masterBar.repeatCount > 2) {
                this.addPostBeatGlyph(new RepeatCountGlyph(0, this.getScoreHeight(-0.5), this.bar.masterBar.repeatCount));
            }
        }
        else {
            this.addPostBeatGlyph(new BarSeperatorGlyph(0, 0));
        }
    }
    createStartSpacing() {
        if (this._startSpacing) {
            return;
        }
        this.addPreBeatGlyph(new SpacingGlyph(0, 0, 2 * this.scale));
        this._startSpacing = true;
    }
    createKeySignatureGlyphs() {
        let offsetClef = 0;
        let currentKey = this.bar.masterBar.keySignature;
        let previousKey = !this.bar.previousBar ? 0 : this.bar.previousBar.masterBar.keySignature;
        switch (this.bar.clef) {
            case Clef.Neutral:
                offsetClef = 0;
                break;
            case Clef.G2:
                offsetClef = 1;
                break;
            case Clef.F4:
                offsetClef = 3;
                break;
            case Clef.C3:
                offsetClef = 2;
                break;
            case Clef.C4:
                offsetClef = 0;
                break;
        }
        let newLines = new Map();
        let newGlyphs = [];
        // how many symbols do we need to get from a C-keysignature
        // to the new one
        // var offsetSymbols = (currentKey <= 7) ? currentKey : currentKey - 7;
        // a sharp keysignature
        if (ModelUtils.keySignatureIsSharp(currentKey)) {
            for (let i = 0; i < Math.abs(currentKey); i++) {
                let step = ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
                newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step), AccidentalType.Sharp, false));
                newLines.set(step, true);
            }
        }
        else {
            for (let i = 0; i < Math.abs(currentKey); i++) {
                let step = ScoreBarRenderer.FlatKsSteps[i] + offsetClef;
                newGlyphs.push(new AccidentalGlyph(0, this.getScoreY(step), AccidentalType.Flat, false));
                newLines.set(step, true);
            }
        }
        // naturalize previous key
        let naturalizeSymbols = Math.abs(previousKey);
        let previousKeyPositions = ModelUtils.keySignatureIsSharp(previousKey)
            ? ScoreBarRenderer.SharpKsSteps
            : ScoreBarRenderer.FlatKsSteps;
        for (let i = 0; i < naturalizeSymbols; i++) {
            let step = previousKeyPositions[i] + offsetClef;
            if (!newLines.has(step)) {
                this.addPreBeatGlyph(new AccidentalGlyph(0, this.getScoreY(previousKeyPositions[i] + offsetClef), AccidentalType.Natural, false));
            }
        }
        for (let newGlyph of newGlyphs) {
            this.addPreBeatGlyph(newGlyph);
        }
    }
    createTimeSignatureGlyphs() {
        this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
        const lines = this.bar.staff.standardNotationLineCount - 1;
        this.addPreBeatGlyph(new ScoreTimeSignatureGlyph(0, this.getScoreY(lines), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon));
    }
    createVoiceGlyphs(v) {
        for (let i = 0, j = v.beats.length; i < j; i++) {
            let b = v.beats[i];
            let container = new ScoreBeatContainerGlyph(b, this.getVoiceContainer(v));
            container.preNotes = new ScoreBeatPreNotesGlyph();
            container.onNotes = new ScoreBeatGlyph();
            this.addBeatGlyph(container);
        }
    }
    getNoteLine(n) {
        return this.accidentalHelper.getNoteLine(n);
    }
    /**
     * Gets the relative y position of the given steps relative to first line.
     * @param steps the amount of steps while 2 steps are one line
     * @returns
     */
    getScoreY(steps) {
        return (this._firstLineY +
            this.lineOffset +
            this.getScoreHeight(steps));
    }
    /**
     * Gets the height of an element that spans the given amount of steps.
     * @param steps the amount of steps while 2 steps are one line
     * @param correction
     * @returns
     */
    getScoreHeight(steps) {
        return (this.lineOffset / 2) * steps;
    }
    // private static readonly Random Random = new Random();
    paintBackground(cx, cy, canvas) {
        super.paintBackground(cx, cy, canvas);
        let res = this.resources;
        // canvas.color = Color.random(100);
        // canvas.fillRect(cx + this.x, cy + this.y, this.width, this.height);
        //
        // draw string lines
        //
        canvas.color = res.staffLineColor;
        for (let i = 0; i < this.bar.staff.standardNotationLineCount; i++) {
            const lineY = cy + this.y + this.getScoreY(i * 2);
            canvas.fillRect(cx + this.x, lineY | 0, this.width, this.scale * BarRendererBase.StaffLineThickness);
        }
        canvas.color = res.mainGlyphColor;
        this.paintSimileMark(cx, cy, canvas);
    }
    completeBeamingHelper(helper) {
        // for multi-voice bars we need to register the positions 
        // for multi-voice rest displacement to avoid collisions
        if (this.bar.isMultiVoice && helper.highestNoteInHelper && helper.lowestNoteInHelper) {
            let highestNotePosition = this.getNoteY(helper.highestNoteInHelper, NoteYPosition.Center);
            let lowestNotePosition = this.getNoteY(helper.lowestNoteInHelper, NoteYPosition.Center);
            let offset = this.getStemSize(helper);
            if (helper.hasTuplet) {
                offset += this.resources.effectFont.size * 2;
            }
            if (helper.direction == BeamDirection.Up) {
                highestNotePosition -= offset;
            }
            else {
                lowestNotePosition += offset;
            }
            for (const beat of helper.beats) {
                this.helpers.collisionHelper.reserveBeatSlot(beat, highestNotePosition, lowestNotePosition);
            }
        }
    }
}
ScoreBarRenderer.StaffId = 'score';
ScoreBarRenderer.SharpKsSteps = [-1, 2, -2, 1, 4, 0, 3];
ScoreBarRenderer.FlatKsSteps = [3, 0, 4, 1, 5, 2, 6];

/**
 * This Factory procudes ScoreBarRenderer instances
 */
class ScoreBarRendererFactory extends BarRendererFactory {
    get staffId() {
        return ScoreBarRenderer.StaffId;
    }
    create(renderer, bar) {
        return new ScoreBarRenderer(renderer, bar);
    }
    constructor() {
        super();
    }
}

class TabSlideLineGlyph extends Glyph {
    constructor(inType, outType, startNote, parent) {
        super(0, 0);
        this._inType = inType;
        this._outType = outType;
        this._startNote = startNote;
        this._parent = parent;
    }
    doLayout() {
        this.width = 0;
    }
    paint(cx, cy, canvas) {
        this.paintSlideIn(cx, cy, canvas);
        this.paintSlideOut(cx, cy, canvas);
    }
    paintSlideIn(cx, cy, canvas) {
        let startNoteRenderer = this.renderer;
        let sizeX = 12 * this.scale;
        let sizeY = 3 * this.scale;
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;
        switch (this._inType) {
            case SlideInType.IntoFromBelow:
                endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left);
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                startX = endX - sizeX;
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) + sizeY;
                break;
            case SlideInType.IntoFromAbove:
                endX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Left);
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                startX = endX - sizeX;
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) - sizeY;
                break;
            default:
                return;
        }
        this.paintSlideLine(canvas, false, startX, endX, startY, endY);
    }
    paintSlideOut(cx, cy, canvas) {
        let startNoteRenderer = this.renderer;
        let sizeX = 12 * this.scale;
        let sizeY = 3 * this.scale;
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;
        let waves = false;
        const endXOffset = 2 * this.scale;
        switch (this._outType) {
            case SlideOutType.Shift:
            case SlideOutType.Legato:
                startX =
                    cx +
                        startNoteRenderer.x +
                        startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.PostNotes);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                if (this._startNote.slideTarget) {
                    let endNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this._startNote.slideTarget.beat.voice.bar);
                    if (!endNoteRenderer || endNoteRenderer.staff !== startNoteRenderer.staff) {
                        endX = cx + startNoteRenderer.x + this._parent.x;
                        endY = startY;
                    }
                    else {
                        endX =
                            cx +
                                endNoteRenderer.x +
                                endNoteRenderer.getBeatX(this._startNote.slideTarget.beat, BeatXPosition.OnNotes)
                                - endXOffset;
                        endY =
                            cy +
                                endNoteRenderer.y +
                                endNoteRenderer.getNoteY(this._startNote.slideTarget, NoteYPosition.Center);
                    }
                    if (this._startNote.slideTarget.fret > this._startNote.fret) {
                        startY += sizeY;
                        endY -= sizeY;
                    }
                    else {
                        startY -= sizeY;
                        endY += sizeY;
                    }
                }
                else {
                    endX = cx + startNoteRenderer.x + this._parent.x;
                    endY = startY;
                }
                break;
            case SlideOutType.OutUp:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX = startX + sizeX - endXOffset;
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) - sizeY;
                break;
            case SlideOutType.OutDown:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX = startX + sizeX - endXOffset;
                endY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center) + sizeY;
                break;
            case SlideOutType.PickSlideDown:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX =
                    cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.EndBeat);
                endY = startY + sizeY * 3;
                waves = true;
                break;
            case SlideOutType.PickSlideUp:
                startX = cx + startNoteRenderer.x + startNoteRenderer.getNoteX(this._startNote, NoteXPosition.Right);
                startY = cy + startNoteRenderer.y + startNoteRenderer.getNoteY(this._startNote, NoteYPosition.Center);
                endX =
                    cx + startNoteRenderer.x + startNoteRenderer.getBeatX(this._startNote.beat, BeatXPosition.EndBeat);
                endY = startY - sizeY * 3;
                waves = true;
                break;
            default:
                return;
        }
        this.paintSlideLine(canvas, waves, startX, endX, startY, endY);
    }
    paintSlideLine(canvas, waves, startX, endX, startY, endY) {
        if (waves) {
            let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2);
            glyph.renderer = this.renderer;
            glyph.doLayout();
            startY -= glyph.height / 2;
            endY -= glyph.height / 2;
            let b = endX - startX;
            let a = endY - startY;
            let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
            glyph.width = b;
            let angle = Math.asin(a / c) * (180 / Math.PI);
            canvas.beginRotate(startX, startY, angle);
            glyph.paint(0, 0, canvas);
            canvas.endRotate();
        }
        else {
            canvas.beginPath();
            canvas.moveTo(startX, startY);
            canvas.lineTo(endX, endY);
            canvas.stroke();
        }
    }
}

class TabTieGlyph extends TieGlyph {
    constructor(startNote, endNote, forEnd = false) {
        super(startNote.beat, endNote.beat, forEnd);
        this.startNote = startNote;
        this.endNote = endNote;
    }
    getTieHeight(startX, startY, endX, endY) {
        if (this.startNote === this.endNote) {
            return 15;
        }
        return super.getTieHeight(startX, startY, endX, endY);
    }
    getBeamDirection(beat, noteRenderer) {
        if (this.startNote === this.endNote) {
            return BeamDirection.Up;
        }
        return TabTieGlyph.getBeamDirectionForNote(this.startNote);
    }
    static getBeamDirectionForNote(note) {
        return note.string > 3 ? BeamDirection.Up : BeamDirection.Down;
    }
    getStartY() {
        if (this.startNote === this.endNote) {
            return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Center);
        }
        if (this.tieDirection === BeamDirection.Up) {
            return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Top);
        }
        return this.startNoteRenderer.getNoteY(this.startNote, NoteYPosition.Bottom);
    }
    getEndY() {
        return this.getStartY();
    }
    getStartX() {
        if (this.startNote === this.endNote) {
            return this.getEndX() - 20 * this.scale;
        }
        return this.startNoteRenderer.getNoteX(this.startNote, NoteXPosition.Center);
    }
    getEndX() {
        if (this.startNote === this.endNote) {
            return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Left);
        }
        return this.endNoteRenderer.getNoteX(this.endNote, NoteXPosition.Center);
    }
}

class TabSlurGlyph extends TabTieGlyph {
    constructor(startNote, endNote, forSlide, forEnd = false) {
        super(startNote, endNote, forEnd);
        this._direction = TabTieGlyph.getBeamDirectionForNote(startNote);
        this._forSlide = forSlide;
    }
    getTieHeight(startX, startY, endX, endY) {
        return Math.log(endX - startX + 1) * this.renderer.settings.notation.slurHeight;
    }
    tryExpand(startNote, endNote, forSlide, forEnd) {
        // same type required
        if (this._forSlide !== forSlide) {
            return false;
        }
        if (this.forEnd !== forEnd) {
            return false;
        }
        // same start and endbeat
        if (this.startNote.beat.id !== startNote.beat.id) {
            return false;
        }
        if (this.endNote.beat.id !== endNote.beat.id) {
            return false;
        }
        // same draw direction
        if (this._direction !== TabTieGlyph.getBeamDirectionForNote(startNote)) {
            return false;
        }
        // if we can expand, expand in correct direction
        switch (this._direction) {
            case BeamDirection.Up:
                if (startNote.realValue > this.startNote.realValue) {
                    this.startNote = startNote;
                    this.startBeat = startNote.beat;
                }
                if (endNote.realValue > this.endNote.realValue) {
                    this.endNote = endNote;
                    this.endBeat = endNote.beat;
                }
                break;
            case BeamDirection.Down:
                if (startNote.realValue < this.startNote.realValue) {
                    this.startNote = startNote;
                    this.startBeat = startNote.beat;
                }
                if (endNote.realValue < this.endNote.realValue) {
                    this.endNote = endNote;
                    this.endBeat = endNote.beat;
                }
                break;
        }
        return true;
    }
    paint(cx, cy, canvas) {
        let startNoteRenderer = this.renderer.scoreRenderer.layout.getRendererForBar(this.renderer.staff.staveId, this.startBeat.voice.bar);
        let direction = this.getBeamDirection(this.startBeat, startNoteRenderer);
        let slurId = 'tab.slur.' + this.startNote.beat.id + '.' + this.endNote.beat.id + '.' + direction;
        let renderer = this.renderer;
        let isSlurRendered = renderer.staff.getSharedLayoutData(slurId, false);
        if (!isSlurRendered) {
            renderer.staff.setSharedLayoutData(slurId, true);
            super.paint(cx, cy, canvas);
        }
    }
}

class TabBeatContainerGlyph extends BeatContainerGlyph {
    constructor(beat, voiceContainer) {
        super(beat, voiceContainer);
        this._bend = null;
        this._effectSlurs = [];
    }
    doLayout() {
        this._effectSlurs = [];
        super.doLayout();
        if (this._bend) {
            this._bend.renderer = this.renderer;
            this._bend.doLayout();
            this.updateWidth();
        }
    }
    createTies(n) {
        if (!n.isVisible) {
            return;
        }
        let renderer = this.renderer;
        if (n.isTieOrigin && renderer.showTiedNotes && n.tieDestination.isVisible) {
            let tie = new TabTieGlyph(n, n.tieDestination, false);
            this.addTie(tie);
        }
        if (n.isTieDestination && renderer.showTiedNotes) {
            let tie = new TabTieGlyph(n.tieOrigin, n, true);
            this.addTie(tie);
        }
        if (n.isLeftHandTapped && !n.isHammerPullDestination) {
            let tapSlur = new TabTieGlyph(n, n, false);
            this.addTie(tapSlur);
        }
        // start effect slur on first beat
        if (n.isEffectSlurOrigin && n.effectSlurDestination) {
            let expanded = false;
            for (let slur of this._effectSlurs) {
                if (slur.tryExpand(n, n.effectSlurDestination, false, false)) {
                    expanded = true;
                    break;
                }
            }
            if (!expanded) {
                let effectSlur = new TabSlurGlyph(n, n.effectSlurDestination, false, false);
                this._effectSlurs.push(effectSlur);
                this.addTie(effectSlur);
            }
        }
        // end effect slur on last beat
        if (n.isEffectSlurDestination && n.effectSlurOrigin) {
            let expanded = false;
            for (let slur of this._effectSlurs) {
                if (slur.tryExpand(n.effectSlurOrigin, n, false, true)) {
                    expanded = true;
                    break;
                }
            }
            if (!expanded) {
                let effectSlur = new TabSlurGlyph(n.effectSlurOrigin, n, false, true);
                this._effectSlurs.push(effectSlur);
                this.addTie(effectSlur);
            }
        }
        if (n.slideInType !== SlideInType.None || n.slideOutType !== SlideOutType.None) {
            let l = new TabSlideLineGlyph(n.slideInType, n.slideOutType, n, this);
            this.addTie(l);
        }
        if (n.hasBend) {
            if (!this._bend) {
                const bend = new TabBendGlyph();
                this._bend = bend;
                bend.renderer = this.renderer;
                this.addTie(bend);
            }
            this._bend.addBends(n);
        }
    }
}

class NoteNumberGlyph extends Glyph {
    constructor(x, y, note) {
        super(x, y);
        this._noteString = null;
        this._trillNoteString = null;
        this._trillNoteStringWidth = 0;
        this.isEmpty = false;
        this.noteStringWidth = 0;
        this._note = note;
    }
    doLayout() {
        let n = this._note;
        let fret = n.fret - n.beat.voice.bar.staff.transpositionPitch;
        if (n.harmonicType === HarmonicType.Natural && n.harmonicValue !== 0) {
            fret = n.harmonicValue - n.beat.voice.bar.staff.transpositionPitch;
        }
        if (!n.isTieDestination) {
            this._noteString = n.isDead ? 'x' : fret.toString();
            if (n.isGhost) {
                this._noteString = '(' + this._noteString + ')';
            }
            else if (n.harmonicType === HarmonicType.Natural) {
                // only first decimal char
                let i = this._noteString.indexOf(String.fromCharCode(46));
                if (i >= 0) {
                    this._noteString = this._noteString.substr(0, i + 2);
                }
                this._noteString = '<' + this._noteString + '>';
            }
        }
        else if ((n.beat.index === 0 && this.renderer.settings.notation.notationMode == NotationMode.GuitarPro) ||
            ((n.bendType === BendType.Bend || n.bendType === BendType.BendRelease) &&
                this.renderer.settings.notation.isNotationElementVisible(NotationElement.TabNotesOnTiedBends))) {
            this._noteString = '(' + (n.tieOrigin.fret - n.beat.voice.bar.staff.transpositionPitch).toString() + ')';
        }
        else {
            this._noteString = '';
        }
        if (n.isTrill) {
            this._trillNoteString = '(' + (n.trillFret - n.beat.voice.bar.staff.transpositionPitch).toString() + ')';
        }
        else if (!ModelUtils.isAlmostEqualTo(n.harmonicValue, 0)) {
            switch (n.harmonicType) {
                case HarmonicType.Artificial:
                case HarmonicType.Pinch:
                case HarmonicType.Tap:
                case HarmonicType.Semi:
                case HarmonicType.Feedback:
                    let s = (fret + n.harmonicValue).toString();
                    // only first decimal char
                    let i = s.indexOf(String.fromCharCode(46));
                    if (i >= 0) {
                        s = s.substr(0, i + 2);
                    }
                    this._trillNoteString = '<' + s + '>';
                    break;
                default:
                    this._trillNoteString = '';
                    break;
            }
        }
        else {
            this._trillNoteString = '';
        }
        this.isEmpty = !this._noteString;
        if (!this.isEmpty) {
            this.renderer.scoreRenderer.canvas.font = this.renderer.resources.tablatureFont;
            this.noteStringWidth = this.renderer.scoreRenderer.canvas.measureText(this._noteString) * this.scale;
            this.width = this.noteStringWidth;
            this.height = this.renderer.scoreRenderer.canvas.font.size;
            let hasTrill = !!this._trillNoteString;
            if (hasTrill) {
                this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
                this._trillNoteStringWidth =
                    3 * this.scale + this.renderer.scoreRenderer.canvas.measureText(this._trillNoteString);
                this.width += this._trillNoteStringWidth;
            }
        }
    }
    paint(cx, cy, canvas) {
        if (this.isEmpty) {
            return;
        }
        let textWidth = this.noteStringWidth + this._trillNoteStringWidth;
        let x = cx + this.x + (this.width - textWidth) / 2;
        let prevFont = this.renderer.scoreRenderer.canvas.font;
        this.renderer.scoreRenderer.canvas.font = this.renderer.resources.graceFont;
        canvas.fillText(this._trillNoteString, x + this.noteStringWidth + 3 * this.scale, cy + this.y);
        this.renderer.scoreRenderer.canvas.font = prevFont;
        canvas.fillText(this._noteString, x, cy + this.y);
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        let noteBounds = new NoteBounds();
        noteBounds.note = this._note;
        noteBounds.noteHeadBounds = new Bounds();
        noteBounds.noteHeadBounds.x = cx + this.x;
        noteBounds.noteHeadBounds.y = cy + this.y - this.height / 2;
        noteBounds.noteHeadBounds.w = this.width;
        noteBounds.noteHeadBounds.h = this.height;
        beatBounds.addNote(noteBounds);
    }
}

class TabNoteChordGlyph extends Glyph {
    constructor(x, y, isGrace) {
        super(x, y);
        this._notes = [];
        this.minStringNote = null;
        this.beatEffects = new Map();
        this.notesPerString = new Map();
        this.noteStringWidth = 0;
        this._isGrace = isGrace;
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        for (const note of this._notes) {
            note.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
        }
    }
    getNoteX(note, requestedPosition) {
        if (this.notesPerString.has(note.string)) {
            let n = this.notesPerString.get(note.string);
            let pos = this.x + n.x;
            switch (requestedPosition) {
                case NoteXPosition.Left:
                    break;
                case NoteXPosition.Center:
                    pos += n.noteStringWidth / 2;
                    break;
                case NoteXPosition.Right:
                    pos += n.width;
                    break;
            }
            return pos;
        }
        return 0;
    }
    getNoteY(note, requestedPosition) {
        if (this.notesPerString.has(note.string)) {
            const n = this.notesPerString.get(note.string);
            let pos = this.y + n.y;
            switch (requestedPosition) {
                case NoteYPosition.Top:
                case NoteYPosition.TopWithStem:
                    pos -= n.height / 2 + 2 * this.scale;
                    break;
                case NoteYPosition.Center:
                    break;
                case NoteYPosition.Bottom:
                case NoteYPosition.BottomWithStem:
                    pos += n.height / 2;
                    break;
            }
            return pos;
        }
        return 0;
    }
    doLayout() {
        let w = 0;
        let noteStringWidth = 0;
        for (let i = 0, j = this._notes.length; i < j; i++) {
            let g = this._notes[i];
            g.renderer = this.renderer;
            g.doLayout();
            if (g.width > w) {
                w = g.width;
            }
            if (g.noteStringWidth > noteStringWidth) {
                noteStringWidth = g.noteStringWidth;
            }
        }
        this.noteStringWidth = noteStringWidth;
        let tabHeight = this.renderer.resources.tablatureFont.size;
        let effectY = this.getNoteY(this.minStringNote, NoteYPosition.Center) + tabHeight / 2;
        // TODO: take care of actual glyph height
        let effectSpacing = 7 * this.scale;
        for (const g of this.beatEffects.values()) {
            g.y += effectY;
            g.x += this.width / 2;
            g.renderer = this.renderer;
            effectY += effectSpacing;
            g.doLayout();
        }
        this.width = w;
    }
    addNoteGlyph(noteGlyph, note) {
        this._notes.push(noteGlyph);
        this.notesPerString.set(note.string, noteGlyph);
        if (!this.minStringNote || note.string < this.minStringNote.string) {
            this.minStringNote = note;
        }
    }
    paint(cx, cy, canvas) {
        cx += this.x;
        cy += this.y;
        let res = this.renderer.resources;
        let oldBaseLine = canvas.textBaseline;
        canvas.textBaseline = TextBaseline.Middle;
        canvas.font = this._isGrace ? res.graceFont : res.tablatureFont;
        let notes = this._notes;
        let w = this.width;
        for (let g of notes) {
            g.renderer = this.renderer;
            g.width = w;
            g.paint(cx, cy, canvas);
        }
        canvas.textBaseline = oldBaseLine;
        for (const g of this.beatEffects.values()) {
            g.paint(cx, cy, canvas);
        }
    }
    updateBeamingHelper(cx) {
        if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
            this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
        }
    }
}

class TabRestGlyph extends MusicFontGlyph {
    constructor(x, y, isVisibleRest, duration) {
        super(x, y, 1, ScoreRestGlyph.getSymbol(duration));
        this._isVisibleRest = isVisibleRest;
        this._duration = duration;
    }
    doLayout() {
        if (this._isVisibleRest) {
            this.width = ScoreRestGlyph.getSize(this._duration) * this.scale;
        }
        else {
            this.width = 10 * this.scale;
        }
    }
    updateBeamingHelper(cx) {
        if (this.beamingHelper && this.beamingHelper.isPositionFrom('tab', this.beat)) {
            this.beamingHelper.registerBeatLineX('tab', this.beat, cx + this.x + this.width / 2, cx + this.x + this.width / 2);
        }
    }
    paint(cx, cy, canvas) {
        if (this._isVisibleRest) {
            super.paint(cx, cy, canvas);
        }
    }
}

class TabBeatGlyph extends BeatOnNoteGlyphBase {
    constructor() {
        super(...arguments);
        this.noteNumbers = null;
        this.restGlyph = null;
    }
    getNoteX(note, requestedPosition) {
        return this.noteNumbers ? this.noteNumbers.getNoteX(note, requestedPosition) : 0;
    }
    getNoteY(note, requestedPosition) {
        return this.noteNumbers ? this.noteNumbers.getNoteY(note, requestedPosition) : 0;
    }
    buildBoundingsLookup(beatBounds, cx, cy) {
        if (this.noteNumbers) {
            this.noteNumbers.buildBoundingsLookup(beatBounds, cx + this.x, cy + this.y);
        }
    }
    doLayout() {
        let tabRenderer = this.renderer;
        if (!this.container.beat.isRest) {
            //
            // Note numbers
            let isGrace = this.renderer.settings.notation.smallGraceTabNotes && this.container.beat.graceType !== GraceType.None;
            const noteNumbers = new TabNoteChordGlyph(0, 0, isGrace);
            this.noteNumbers = noteNumbers;
            noteNumbers.beat = this.container.beat;
            noteNumbers.beamingHelper = this.beamingHelper;
            for (let note of this.container.beat.notes) {
                if (note.isVisible) {
                    this.createNoteGlyph(note);
                }
            }
            this.addGlyph(noteNumbers);
            //
            // Whammy Bar
            if (this.container.beat.hasWhammyBar) {
                let whammy = new TabWhammyBarGlyph(this.container.beat);
                whammy.renderer = this.renderer;
                whammy.doLayout();
                this.container.ties.push(whammy);
            }
            //
            // Tremolo Picking
            if (this.container.beat.isTremolo && !this.noteNumbers.beatEffects.has('tremolo')) {
                let offset = 0;
                let speed = this.container.beat.tremoloSpeed;
                switch (speed) {
                    case Duration.ThirtySecond:
                        offset = 10;
                        break;
                    case Duration.Sixteenth:
                        offset = 5;
                        break;
                    case Duration.Eighth:
                        offset = 0;
                        break;
                }
                this.noteNumbers.beatEffects.set('tremolo', new TremoloPickingGlyph(5 * this.scale, offset * this.scale, speed));
            }
            //
            // Note dots
            //
            if (this.container.beat.dots > 0 && tabRenderer.settings.notation.rhythmMode !== TabRhythmMode.Hidden) {
                this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                for (let i = 0; i < this.container.beat.dots; i++) {
                    this.addGlyph(new CircleGlyph(0, tabRenderer.lineOffset * tabRenderer.bar.staff.tuning.length +
                        tabRenderer.settings.notation.rhythmHeight * tabRenderer.scale, 1.5 * this.scale));
                }
            }
        }
        else {
            let line = Math.floor((this.renderer.bar.staff.tuning.length - 1) / 2);
            let y = tabRenderer.getTabY(line);
            const restGlyph = new TabRestGlyph(0, y, tabRenderer.showRests, this.container.beat.duration);
            this.restGlyph = restGlyph;
            restGlyph.beat = this.container.beat;
            restGlyph.beamingHelper = this.beamingHelper;
            this.addGlyph(restGlyph);
            //
            // Note dots
            //
            if (this.container.beat.dots > 0 && tabRenderer.showRests) {
                this.addGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
                for (let i = 0; i < this.container.beat.dots; i++) {
                    this.addGlyph(new CircleGlyph(0, y, 1.5 * this.scale));
                }
            }
        }
        // left to right layout
        if (!this.glyphs) {
            return;
        }
        let w = 0;
        for (let i = 0, j = this.glyphs.length; i < j; i++) {
            let g = this.glyphs[i];
            g.x = w;
            g.renderer = this.renderer;
            g.doLayout();
            w += g.width;
        }
        this.width = w;
        this.computedWidth = w;
        if (this.container.beat.isEmpty) {
            this.centerX = this.width / 2;
        }
        else if (this.container.beat.isRest) {
            this.centerX = this.restGlyph.x + this.restGlyph.width / 2;
        }
        else {
            this.centerX = this.noteNumbers.x + this.noteNumbers.noteStringWidth / 2;
        }
    }
    updateBeamingHelper() {
        if (!this.container.beat.isRest) {
            this.noteNumbers.updateBeamingHelper(this.container.x + this.x);
        }
        else {
            this.restGlyph.updateBeamingHelper(this.container.x + this.x);
        }
    }
    createNoteGlyph(n) {
        let tr = this.renderer;
        let noteNumberGlyph = new NoteNumberGlyph(0, 0, n);
        let l = n.beat.voice.bar.staff.tuning.length - n.string;
        noteNumberGlyph.y = tr.getTabY(l);
        noteNumberGlyph.renderer = this.renderer;
        noteNumberGlyph.doLayout();
        this.noteNumbers.addNoteGlyph(noteNumberGlyph, n);
        let topY = noteNumberGlyph.y - noteNumberGlyph.height / 2;
        let bottomY = topY + noteNumberGlyph.height;
        this.renderer.helpers.collisionHelper.reserveBeatSlot(this.container.beat, topY, bottomY);
    }
}

class TabBrushGlyph extends Glyph {
    constructor(beat) {
        super(0, 0);
        this._beat = beat;
    }
    doLayout() {
        this.width = 10 * this.scale;
    }
    paint(cx, cy, canvas) {
        let tabBarRenderer = this.renderer;
        let startY = cy + this.x + (tabBarRenderer.getNoteY(this._beat.maxStringNote, NoteYPosition.Top));
        let endY = cy + this.y + tabBarRenderer.getNoteY(this._beat.minStringNote, NoteYPosition.Bottom);
        let arrowX = (cx + this.x + this.width / 2) | 0;
        let arrowSize = 8 * this.scale;
        if (this._beat.brushType !== BrushType.None) {
            if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.BrushDown) {
                canvas.beginPath();
                canvas.moveTo(arrowX, startY);
                canvas.lineTo(arrowX, endY);
                canvas.stroke();
            }
            else if (this._beat.brushType === BrushType.ArpeggioUp) {
                let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                let lineStartY = startY;
                let lineEndY = endY - arrowSize;
                glyph.width = Math.abs(lineEndY - lineStartY);
                canvas.beginRotate(cx + this.x + 4 * this.scale, lineEndY, -90);
                glyph.paint(0, -glyph.height / 2, canvas);
                canvas.endRotate();
            }
            else if (this._beat.brushType === BrushType.ArpeggioDown) {
                let glyph = new NoteVibratoGlyph(0, 0, VibratoType.Slight, 1.2, true);
                glyph.renderer = this.renderer;
                glyph.doLayout();
                let lineStartY = startY + arrowSize;
                let lineEndY = endY;
                glyph.width = Math.abs(lineEndY - lineStartY);
                canvas.beginRotate(cx + this.x + 4 * this.scale, lineStartY, 90);
                glyph.paint(0, -glyph.height / 2, canvas);
                canvas.endRotate();
            }
            if (this._beat.brushType === BrushType.BrushUp || this._beat.brushType === BrushType.ArpeggioUp) {
                canvas.beginPath();
                canvas.moveTo(arrowX, endY);
                canvas.lineTo(arrowX + arrowSize / 2, endY - arrowSize);
                canvas.lineTo(arrowX - arrowSize / 2, endY - arrowSize);
                canvas.closePath();
                canvas.fill();
            }
            else {
                canvas.beginPath();
                canvas.moveTo(arrowX, startY);
                canvas.lineTo(arrowX + arrowSize / 2, startY + arrowSize);
                canvas.lineTo(arrowX - arrowSize / 2, startY + arrowSize);
                canvas.closePath();
                canvas.fill();
            }
        }
    }
}

class TabBeatPreNotesGlyph extends BeatGlyphBase {
    doLayout() {
        if (this.container.beat.brushType !== BrushType.None && !this.container.beat.isRest) {
            this.addGlyph(new TabBrushGlyph(this.container.beat));
            this.addGlyph(new SpacingGlyph(0, 0, 4 * this.scale));
        }
        super.doLayout();
    }
    constructor() {
        super();
    }
}

class TabClefGlyph extends Glyph {
    constructor(x, y) {
        super(x, y);
    }
    doLayout() {
        this.width = 28 * this.scale;
    }
    paint(cx, cy, canvas) {
        let strings = this.renderer.bar.staff.tuning.length;
        let symbol = strings <= 4 ? MusicFontSymbol.FourStringTabClef : MusicFontSymbol.SixStringTabClef;
        let scale = strings <= 4 ? strings / 4.5 : strings / 6.5;
        canvas.fillMusicFontSymbol(cx + this.x + 5 * this.scale, cy + this.y, scale * this.scale, symbol, false);
    }
}

class TabTimeSignatureGlyph extends TimeSignatureGlyph {
    get commonScale() {
        return 1;
    }
    get numberScale() {
        let renderer = this.renderer;
        if (renderer.bar.staff.tuning.length <= 4) {
            return NoteHeadGlyph.GraceScale;
        }
        return 1;
    }
}

/**
 * This BarRenderer renders a bar using guitar tablature notation
 */
class TabBarRenderer extends BarRendererBase {
    constructor(renderer, bar) {
        super(renderer, bar);
        this._firstLineY = 0;
        this._tupletSize = 0;
        this.showTimeSignature = false;
        this.showRests = false;
        this.showTiedNotes = false;
        this._startSpacing = false;
    }
    get lineOffset() {
        return (TabBarRenderer.TabLineSpacing + 1) * this.scale;
    }
    updateSizes() {
        let res = this.resources;
        let numberOverflow = (res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2) * this.scale;
        this.topPadding = numberOverflow;
        this.bottomPadding = numberOverflow;
        this.height = this.lineOffset * (this.bar.staff.tuning.length - 1) + numberOverflow * 2;
        if (this.settings.notation.rhythmMode !== TabRhythmMode.Hidden) {
            this.height += this.settings.notation.rhythmHeight * this.settings.display.scale;
            this.bottomPadding += this.settings.notation.rhythmHeight * this.settings.display.scale;
        }
        this.updateFirstLineY();
        super.updateSizes();
    }
    updateFirstLineY() {
        let res = this.resources;
        this._firstLineY = (res.tablatureFont.size / 2 + res.tablatureFont.size * 0.2) * this.scale;
    }
    doLayout() {
        this.updateFirstLineY();
        super.doLayout();
        if (this.settings.notation.rhythmMode !== TabRhythmMode.Hidden) {
            let hasTuplets = false;
            for (let voice of this.bar.voices) {
                if (this.hasVoiceContainer(voice)) {
                    let c = this.getVoiceContainer(voice);
                    if (c.tupletGroups.length > 0) {
                        hasTuplets = true;
                        break;
                    }
                }
            }
            if (hasTuplets) {
                this._tupletSize = this.resources.effectFont.size * 0.8;
                this.registerOverflowBottom(this._tupletSize);
            }
        }
    }
    createPreBeatGlyphs() {
        super.createPreBeatGlyphs();
        if (this.bar.masterBar.isRepeatStart) {
            this.addPreBeatGlyph(new RepeatOpenGlyph(0, 0, 1.5, 3));
        }
        // Clef
        if (this.isFirstOfLine) {
            let center = (this.bar.staff.tuning.length - 1) / 2;
            this.addPreBeatGlyph(new TabClefGlyph(5 * this.scale, this.getTabY(center)));
        }
        // Time Signature
        if (this.showTimeSignature &&
            (!this.bar.previousBar ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureNumerator !==
                        this.bar.previousBar.masterBar.timeSignatureNumerator) ||
                (this.bar.previousBar &&
                    this.bar.masterBar.timeSignatureDenominator !==
                        this.bar.previousBar.masterBar.timeSignatureDenominator))) {
            this.createStartSpacing();
            this.createTimeSignatureGlyphs();
        }
        this.addPreBeatGlyph(new BarNumberGlyph(0, this.getTabHeight(-0.5), this.bar.index + 1));
    }
    createStartSpacing() {
        if (this._startSpacing) {
            return;
        }
        this.addPreBeatGlyph(new SpacingGlyph(0, 0, 2 * this.scale));
        this._startSpacing = true;
    }
    createTimeSignatureGlyphs() {
        this.addPreBeatGlyph(new SpacingGlyph(0, 0, 5 * this.scale));
        const lines = ((this.bar.staff.tuning.length + 1) / 2) - 1;
        this.addPreBeatGlyph(new TabTimeSignatureGlyph(0, this.getTabY(lines), this.bar.masterBar.timeSignatureNumerator, this.bar.masterBar.timeSignatureDenominator, this.bar.masterBar.timeSignatureCommon));
    }
    createVoiceGlyphs(v) {
        for (let i = 0, j = v.beats.length; i < j; i++) {
            let b = v.beats[i];
            let container = new TabBeatContainerGlyph(b, this.getVoiceContainer(v));
            container.preNotes = new TabBeatPreNotesGlyph();
            container.onNotes = new TabBeatGlyph();
            this.addBeatGlyph(container);
        }
    }
    createPostBeatGlyphs() {
        super.createPostBeatGlyphs();
        if (this.bar.masterBar.isRepeatEnd) {
            this.addPostBeatGlyph(new RepeatCloseGlyph(this.x, 0));
            if (this.bar.masterBar.repeatCount > 2) {
                this.addPostBeatGlyph(new RepeatCountGlyph(0, this.getTabY(-1), this.bar.masterBar.repeatCount));
            }
        }
        else {
            this.addPostBeatGlyph(new BarSeperatorGlyph(0, 0));
        }
    }
    /**
     * Gets the relative y position of the given steps relative to first line.
     * @param line the line of the particular string where 0 is the most top line
     * @param correction
     * @returns
     */
    getTabY(line) {
        return this._firstLineY + this.getTabHeight(line);
    }
    getTabHeight(line) {
        return this.lineOffset * line;
    }
    get middleYPosition() {
        return this.getTabY(this.bar.staff.tuning.length - 1);
    }
    paintBackground(cx, cy, canvas) {
        super.paintBackground(cx, cy, canvas);
        let res = this.resources;
        //
        // draw string lines
        //
        canvas.color = res.staffLineColor;
        let padding = this.scale;
        // collect tab note position for spaces
        let tabNotes = [];
        for (let i = 0, j = this.bar.staff.tuning.length; i < j; i++) {
            tabNotes.push([]);
        }
        for (let voice of this.bar.voices) {
            if (this.hasVoiceContainer(voice)) {
                let vc = this.getVoiceContainer(voice);
                for (let bg of vc.beatGlyphs) {
                    let notes = bg.onNotes;
                    let noteNumbers = notes.noteNumbers;
                    if (noteNumbers) {
                        for (const [str, noteNumber] of noteNumbers.notesPerString) {
                            if (!noteNumber.isEmpty) {
                                tabNotes[this.bar.staff.tuning.length - str].push(new Float32Array([
                                    vc.x + bg.x + notes.x + noteNumbers.x,
                                    noteNumbers.width + padding
                                ]));
                            }
                        }
                    }
                }
            }
        }
        // if we have multiple voices we need to sort by X-position, otherwise have a wild mix in the list
        // but painting relies on ascending X-position
        for (let line of tabNotes) {
            line.sort((a, b) => {
                return a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : 0;
            });
        }
        for (let i = 0, j = this.bar.staff.tuning.length; i < j; i++) {
            const lineY = this.getTabY(i);
            let lineX = 0;
            for (let line of tabNotes[i]) {
                canvas.fillRect(cx + this.x + lineX, cy + this.y + lineY | 0, line[0] - lineX, this.scale * BarRendererBase.StaffLineThickness);
                lineX = line[0] + line[1];
            }
            canvas.fillRect(cx + this.x + lineX, cy + this.y + lineY | 0, this.width - lineX, this.scale * BarRendererBase.StaffLineThickness);
        }
        canvas.color = res.mainGlyphColor;
        this.paintSimileMark(cx, cy, canvas);
    }
    paint(cx, cy, canvas) {
        super.paint(cx, cy, canvas);
        if (this.settings.notation.rhythmMode !== TabRhythmMode.Hidden) {
            this.paintBeams(cx, cy, canvas);
            this.paintTuplets(cx, cy, canvas);
        }
    }
    paintBeams(cx, cy, canvas) {
        for (let i = 0, j = this.helpers.beamHelpers.length; i < j; i++) {
            let v = this.helpers.beamHelpers[i];
            for (let k = 0, l = v.length; k < l; k++) {
                let h = v[k];
                this.paintBeamHelper(cx + this.beatGlyphsStart, cy, canvas, h);
            }
        }
    }
    paintTuplets(cx, cy, canvas) {
        for (let voice of this.bar.voices) {
            if (this.hasVoiceContainer(voice)) {
                let container = this.getVoiceContainer(voice);
                for (let tupletGroup of container.tupletGroups) {
                    this.paintTupletHelper(cx + this.beatGlyphsStart, cy, canvas, tupletGroup);
                }
            }
        }
    }
    paintBeamHelper(cx, cy, canvas, h) {
        canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
        // check if we need to paint simple footer
        if (!h.isRestBeamHelper) {
            if (h.beats.length === 1 || this.settings.notation.rhythmMode === TabRhythmMode.ShowWithBeams) {
                this.paintFooter(cx, cy, canvas, h);
            }
            else {
                this.paintBar(cx, cy, canvas, h);
            }
        }
    }
    paintBar(cx, cy, canvas, h) {
        for (let i = 0, j = h.beats.length; i < j; i++) {
            let beat = h.beats[i];
            if (h.hasBeatLineX(beat)) {
                //
                // draw line
                //
                let beatLineX = h.getBeatLineX(beat);
                let y1 = cy + this.y;
                let y2 = cy + this.y + this.height - this._tupletSize;
                let startGlyph = this.getOnNotesGlyphForBeat(beat);
                if (!startGlyph.noteNumbers || beat.duration === Duration.Half) {
                    y1 += this.height -
                        this.settings.notation.rhythmHeight * this.settings.display.scale -
                        this._tupletSize;
                }
                else {
                    y1 +=
                        startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, NoteYPosition.Bottom) +
                            this.lineOffset / 2;
                }
                this.paintBeamingStem(beat, cy + this.y, cx + this.x + beatLineX, y1, y2, canvas);
                let brokenBarOffset = 6 * this.scale;
                let barSpacing = -6 * this.scale;
                let barSize = 3 * this.scale;
                let barCount = ModelUtils.getIndex(beat.duration) - 2;
                let barStart = y2;
                for (let barIndex = 0; barIndex < barCount; barIndex++) {
                    let barStartX = 0;
                    let barEndX = 0;
                    let barStartY = 0;
                    let barEndY = 0;
                    let barY = barStart + barIndex * barSpacing;
                    //
                    // Broken Bar to Next
                    //
                    if (h.beats.length === 1) {
                        barStartX = beatLineX;
                        barEndX = beatLineX + brokenBarOffset;
                        barStartY = barY;
                        barEndY = barY;
                        TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                    }
                    else if (i < h.beats.length - 1) {
                        // full bar?
                        if (BeamingHelper.isFullBarJoin(beat, h.beats[i + 1], barIndex)) {
                            barStartX = beatLineX;
                            barEndX = h.getBeatLineX(h.beats[i + 1]);
                        }
                        else if (i === 0 || !BeamingHelper.isFullBarJoin(h.beats[i - 1], beat, barIndex)) {
                            barStartX = beatLineX;
                            barEndX = barStartX + brokenBarOffset;
                        }
                        else {
                            continue;
                        }
                        barStartY = barY;
                        barEndY = barY;
                        TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                    }
                    else if (i > 0 && !BeamingHelper.isFullBarJoin(beat, h.beats[i - 1], barIndex)) {
                        barStartX = beatLineX - brokenBarOffset;
                        barEndX = beatLineX;
                        barStartY = barY;
                        barEndY = barY;
                        TabBarRenderer.paintSingleBar(canvas, cx + this.x + barStartX, barStartY, cx + this.x + barEndX, barEndY, barSize);
                    }
                }
            }
        }
    }
    paintTupletHelper(cx, cy, canvas, h) {
        let res = this.resources;
        let oldAlign = canvas.textAlign;
        let oldBaseLine = canvas.textBaseline;
        canvas.color = h.voice.index === 0 ? this.resources.mainGlyphColor : this.resources.secondaryGlyphColor;
        canvas.textAlign = TextAlign.Center;
        canvas.textBaseline = TextBaseline.Middle;
        let s;
        let num = h.beats[0].tupletNumerator;
        let den = h.beats[0].tupletDenominator;
        // list as in Guitar Pro 7. for certain tuplets only the numerator is shown
        if (num === 2 && den === 3) {
            s = '2';
        }
        else if (num === 3 && den === 2) {
            s = '3';
        }
        else if (num === 4 && den === 6) {
            s = '4';
        }
        else if (num === 5 && den === 4) {
            s = '5';
        }
        else if (num === 6 && den === 4) {
            s = '6';
        }
        else if (num === 7 && den === 4) {
            s = '7';
        }
        else if (num === 9 && den === 8) {
            s = '9';
        }
        else if (num === 10 && den === 8) {
            s = '10';
        }
        else if (num === 11 && den === 8) {
            s = '11';
        }
        else if (num === 12 && den === 8) {
            s = '12';
        }
        else if (num === 13 && den === 8) {
            s = '13';
        }
        else {
            s = num + ':' + den;
        }
        // check if we need to paint simple footer
        if (h.beats.length === 1 || !h.isFull) {
            for (let i = 0, j = h.beats.length; i < j; i++) {
                let beat = h.beats[i];
                let beamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(beat.index);
                if (!beamingHelper) {
                    continue;
                }
                let tupletX = beamingHelper.getBeatLineX(beat);
                let tupletY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * 0.5;
                canvas.font = res.effectFont;
                canvas.fillText(s, cx + this.x + tupletX, tupletY);
            }
        }
        else {
            let firstBeat = h.beats[0];
            let lastBeat = h.beats[h.beats.length - 1];
            let firstBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(firstBeat.index);
            let lastBeamingHelper = this.helpers.beamHelperLookup[h.voice.index].get(lastBeat.index);
            if (firstBeamingHelper && lastBeamingHelper) {
                //
                // Calculate the overall area of the tuplet bracket
                let startX = firstBeamingHelper.getBeatLineX(firstBeat);
                let endX = lastBeamingHelper.getBeatLineX(lastBeat);
                //
                // Calculate how many space the text will need
                canvas.font = res.effectFont;
                let sw = canvas.measureText(s);
                let sp = 3 * this.scale;
                //
                // Calculate the offsets where to break the bracket
                let middleX = (startX + endX) / 2;
                let offset1X = middleX - sw / 2 - sp;
                let offset2X = middleX + sw / 2 + sp;
                //
                // calculate the y positions for our bracket
                let startY = cy + this.y + this.height - this._tupletSize + res.effectFont.size * 0.5;
                let offset = -res.effectFont.size * 0.25;
                let size = -5 * this.scale;
                //
                // draw the bracket
                canvas.beginPath();
                canvas.moveTo(cx + this.x + startX, (startY - offset) | 0);
                canvas.lineTo(cx + this.x + startX, (startY - offset - size) | 0);
                canvas.lineTo(cx + this.x + offset1X, (startY - offset - size) | 0);
                canvas.stroke();
                canvas.beginPath();
                canvas.moveTo(cx + this.x + offset2X, (startY - offset - size) | 0);
                canvas.lineTo(cx + this.x + endX, (startY - offset - size) | 0);
                canvas.lineTo(cx + this.x + endX, (startY - offset) | 0);
                canvas.stroke();
                //
                // Draw the string
                canvas.fillText(s, cx + this.x + middleX, startY - offset - size);
            }
        }
        canvas.textAlign = oldAlign;
        canvas.textBaseline = oldBaseLine;
    }
    static paintSingleBar(canvas, x1, y1, x2, y2, size) {
        canvas.beginPath();
        canvas.moveTo(x1, y1);
        canvas.lineTo(x2, y2);
        canvas.lineTo(x2, y2 - size);
        canvas.lineTo(x1, y1 - size);
        canvas.closePath();
        canvas.fill();
    }
    paintBeamingStem(beat, cy, x, topY, bottomY, canvas) {
        canvas.beginPath();
        let holes = [];
        if (this.helpers.collisionHelper.reservedLayoutAreasByDisplayTime.has(beat.displayStart)) {
            holes = this.helpers.collisionHelper.reservedLayoutAreasByDisplayTime.get(beat.displayStart).slots.slice();
            holes.sort((a, b) => a.topY - b.topY);
        }
        let y = bottomY;
        while (y > topY) {
            canvas.moveTo(x, y);
            let lineY = topY;
            // draw until next hole (if hole reaches into line)
            if (holes.length > 0 && holes[holes.length - 1].bottomY > lineY) {
                const bottomHole = holes.pop();
                lineY = cy + bottomHole.bottomY;
                canvas.lineTo(x, lineY);
                y = cy + bottomHole.topY;
            }
            else {
                canvas.lineTo(x, lineY);
                break;
            }
        }
        canvas.stroke();
    }
    paintFooter(cx, cy, canvas, h) {
        for (let beat of h.beats) {
            if (beat.graceType !== GraceType.None ||
                beat.duration === Duration.Whole ||
                beat.duration === Duration.DoubleWhole ||
                beat.duration === Duration.QuadrupleWhole) {
                return;
            }
            //
            // draw line
            //
            let beatLineX = h.getBeatLineX(beat);
            let y1 = cy + this.y;
            let y2 = cy + this.y + this.height - this._tupletSize;
            let startGlyph = this.getOnNotesGlyphForBeat(beat);
            if (!startGlyph.noteNumbers || beat.duration === Duration.Half) {
                y1 +=
                    this.height - this.settings.notation.rhythmHeight * this.settings.display.scale - this._tupletSize;
            }
            else {
                y1 +=
                    startGlyph.noteNumbers.getNoteY(startGlyph.noteNumbers.minStringNote, NoteYPosition.Bottom);
            }
            this.paintBeamingStem(beat, cy + this.y, cx + this.x + beatLineX, y1, y2, canvas);
            //
            // Draw Flag
            //
            if (beat.duration > Duration.Quarter) {
                let glyph = new FlagGlyph(0, 0, beat.duration, BeamDirection.Down, false);
                glyph.renderer = this;
                glyph.doLayout();
                glyph.paint(cx + this.x + beatLineX, y2, canvas);
            }
        }
    }
}
TabBarRenderer.StaffId = 'tab';
TabBarRenderer.TabLineSpacing = 10;

/**
 * This Factory produces TabBarRenderer instances
 */
class TabBarRendererFactory extends BarRendererFactory {
    constructor(showTimeSignature, showRests, showTiedNotes) {
        super();
        this._showTimeSignature = showTimeSignature;
        this._showRests = showRests;
        this._showTiedNotes = showTiedNotes;
        this.hideOnPercussionTrack = true;
    }
    get staffId() {
        return TabBarRenderer.StaffId;
    }
    canCreate(track, staff) {
        return staff.tuning.length > 0 && super.canCreate(track, staff);
    }
    create(renderer, bar) {
        let tabBarRenderer = new TabBarRenderer(renderer, bar);
        tabBarRenderer.showRests = this._showRests;
        tabBarRenderer.showTimeSignature = this._showTimeSignature;
        tabBarRenderer.showTiedNotes = this._showTiedNotes;
        return tabBarRenderer;
    }
}

class LeftHandTapGlyph extends EffectGlyph {
    constructor() {
        super(0, 0);
    }
    doLayout() {
        super.doLayout();
        const font = this.renderer.resources.effectFont;
        this.height = font.size + LeftHandTapGlyph.Padding * this.scale;
    }
    paint(cx, cy, canvas) {
        let res = this.renderer.resources;
        canvas.font = res.effectFont;
        let old = canvas.textAlign;
        canvas.textAlign = TextAlign.Center;
        canvas.fillText('T', cx + this.x, cy + this.y + canvas.font.size / 2);
        canvas.textAlign = old;
        canvas.strokeCircle(cx + this.x, cy + this.y + canvas.font.size / 2 + (LeftHandTapGlyph.Padding - 1) * this.scale, canvas.font.size / 1.6);
    }
}
LeftHandTapGlyph.Padding = 4;

class LeftHandTapEffectInfo extends NoteEffectInfoBase {
    get notationElement() {
        return NotationElement.EffectTap;
    }
    get sizingMode() {
        return EffectBarGlyphSizing.SingleOnBeat;
    }
    shouldCreateGlyphForNote(note) {
        return note.isLeftHandTapped;
    }
    createNewGlyph(renderer, beat) {
        return new LeftHandTapGlyph();
    }
}

class DrawObject {
    constructor() {
        this.noteRange = 1;
        this.x = 0;
        this.y = 0;
    }
}
var FrameType;
(function (FrameType) {
    FrameType[FrameType["None"] = 0] = "None";
    FrameType[FrameType["Rectangle"] = 1] = "Rectangle";
    FrameType[FrameType["Ellipse"] = 2] = "Ellipse";
    FrameType[FrameType["Circle"] = 3] = "Circle";
})(FrameType || (FrameType = {}));
class TextDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.align = TextAlign.Left;
        this.frame = FrameType.None;
        this.text = '';
        this.fontFace = '';
        this.weight = 0;
        this.height = 0;
    }
}
class GuitarDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.chord = new Chord();
    }
}
class SlurDrawObject extends DrawObject {
}
class WavyLineDrawObject extends DrawObject {
}
class TupletBracketDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.number = 0;
    }
}
class WedgeDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.decrescendo = false;
    }
}
class VoltaDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.allNumbers = false;
        this.firstNumber = 0;
        this.lastNumber = 0;
    }
}
class OctaveClefDrawObject extends DrawObject {
    constructor() {
        super(...arguments);
        this.octave = 1;
    }
}
class TrillDrawObject extends DrawObject {
}
class StaffLayout {
    constructor() {
        this.defaultClef = Clef.G2;
        this.description = '';
        this.percussion = false;
        this.instrument = 0;
        this.volume = 0;
        this.transpose = 0;
        this.index = 0;
    }
}
class Bracket {
    constructor() {
        this.from = 0;
        this.to = 0;
        this.curly = false;
    }
}
class CapellaVoiceState {
    constructor() {
        this.currentBarIndex = -1;
        this.currentBarComplete = true;
        this.currentBarDuration = 0;
        this.currentPosition = 0;
        this.voiceStemDir = null;
        this.repeatCount = 0;
        this.repeatEnd = null;
    }
}
class CapellaParser {
    constructor() {
        this._trackChannel = 0;
        this._beamingMode = BeatBeamingMode.Auto;
        this._isFirstSystem = true;
        this._staffLookup = new Map();
        this._brackets = [];
        this._staffLayoutLookup = new Map();
        this._staffLayouts = [];
        this._timeSignature = new MasterBar();
        this._voiceStates = new Map();
    }
    parseXml(xml, settings) {
        this._galleryObjects = new Map();
        this._tieStarts = [];
        this._tieStartIds = new Map();
        this._voiceCounts = new Map();
        this._slurs = new Map();
        this._crescendo = new Map();
        this._isFirstSystem = true;
        let dom = new XmlDocument();
        try {
            dom.parse(xml);
        }
        catch (e) {
            throw new UnsupportedFormatError('Could not parse XML', e);
        }
        this.parseDom(dom);
        this.consolidate();
        this.score.finish(settings);
    }
    consolidate() {
        // voice counts and contents might be inconsistent
        // we need to ensure we have an equal amount of voices across all bars
        // and voices must contain an empty beat at minimum
        let tempo = this.score.tempo;
        for (const track of this.score.tracks) {
            const trackVoiceCount = this._voiceCounts.get(track.index);
            for (const staff of track.staves) {
                while (staff.bars.length < this.score.masterBars.length) {
                    this.addNewBar(staff);
                }
                for (const bar of staff.bars) {
                    while (bar.voices.length < trackVoiceCount) {
                        bar.addVoice(new Voice$1());
                    }
                    for (const voice of bar.voices) {
                        if (voice.beats.length === 0) {
                            const emptyBeat = new Beat();
                            emptyBeat.isEmpty = true;
                            voice.addBeat(emptyBeat);
                        }
                    }
                    const mb = bar.masterBar;
                    if (mb.tempoAutomation) {
                        if (mb.tempoAutomation.value !== tempo) {
                            tempo = mb.tempoAutomation.value;
                        }
                        else {
                            mb.tempoAutomation = null;
                        }
                    }
                }
            }
        }
        CapellaParser.applyEffectRange(this._slurs, (_, beat) => {
            beat.isLegatoOrigin = true;
        });
        CapellaParser.applyEffectRange(this._crescendo, (cre, beat) => {
            beat.crescendo = cre.decrescendo ? CrescendoType.Decrescendo : CrescendoType.Crescendo;
        });
    }
    static applyEffectRange(effects, applyEffect) {
        for (const [startBeat, effect] of effects) {
            const noteRange = effect.noteRange;
            let endBeat = startBeat;
            for (let i = 0; i < noteRange; i++) {
                applyEffect(effect, endBeat);
                // advance to next
                if (endBeat.index + 1 < endBeat.voice.beats.length) {
                    endBeat = endBeat.voice.beats[endBeat.index + 1];
                }
                else if (endBeat.voice.bar.index + 1 < endBeat.voice.bar.staff.bars.length) {
                    const nextBar = endBeat.voice.bar.staff.bars[endBeat.voice.bar.index + 1];
                    endBeat = nextBar.voices[endBeat.voice.index].beats[0];
                }
                else {
                    break;
                }
            }
        }
    }
    parseDom(dom) {
        let root = dom.firstElement;
        if (!root) {
            throw new UnsupportedFormatError('No valid XML');
        }
        if (root.localName === 'score') {
            this.score = new Score();
            this.score.tempo = 120;
            // parse all children
            for (let n of root.childNodes) {
                if (n.nodeType === XmlNodeType.Element) {
                    switch (n.localName) {
                        case 'info':
                            this.parseInfo(n);
                            break;
                        case 'layout':
                            this.parseLayout(n);
                            break;
                        case 'gallery':
                            this.parseGallery(n);
                            break;
                        case 'pageObjects':
                            this.parsePageObjects(n);
                            break;
                        // barCount ignored
                        case 'systems':
                            this.parseSystems(n);
                            break;
                    }
                }
            }
        }
        else {
            throw new UnsupportedFormatError('Root node of XML was not "score"');
        }
    }
    parseLayout(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'staves':
                        this.parseLayoutStaves(c);
                        break;
                    case 'brackets':
                        this.parseBrackets(c);
                        break;
                }
            }
        }
        // after the layout is parsed we can build up the
        // track > staff structure for later use
        // curly brackets define which staves go together into a track
        const curlyBrackets = this._brackets.filter(b => !!b.curly);
        curlyBrackets.sort((a, b) => a.from - b.from);
        let currentBracketIndex = 0;
        let currentTrack = null;
        for (let i = 0; i < this._staffLayouts.length; i++) {
            const staffLayout = this._staffLayouts[i];
            // advance to next bracket according to the staff index
            while (currentBracketIndex < curlyBrackets.length && i > curlyBrackets[currentBracketIndex].to) {
                currentBracketIndex++;
            }
            if (currentTrack &&
                currentBracketIndex < curlyBrackets.length &&
                i > curlyBrackets[currentBracketIndex].from &&
                i <= curlyBrackets[currentBracketIndex].to) {
                // if we still fit into the current bracket, we just add another staff to the
                // track
                currentTrack.ensureStaveCount(currentTrack.staves.length + 1);
            }
            else {
                currentTrack = new Track();
                currentTrack.ensureStaveCount(1);
                currentTrack.name = staffLayout.description;
                currentTrack.playbackInfo.volume = Math.floor((staffLayout.volume / 128) * 16);
                currentTrack.playbackInfo.program = staffLayout.instrument;
                if (staffLayout.percussion) {
                    currentTrack.playbackInfo.primaryChannel = 9;
                    currentTrack.playbackInfo.secondaryChannel = 9;
                }
                else {
                    currentTrack.playbackInfo.primaryChannel = this._trackChannel++;
                    currentTrack.playbackInfo.secondaryChannel = this._trackChannel++;
                }
                this.score.addTrack(currentTrack);
            }
            const staff = currentTrack.staves[currentTrack.staves.length - 1];
            staff.isPercussion = staffLayout.percussion;
            staff.transpositionPitch = staffLayout.transpose;
            staff.displayTranspositionPitch = 0;
            staff.showTablature = false; // capella does not have tabs
            this._staffLookup.set(staffLayout.index, staff);
        }
    }
    parseBrackets(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'bracket':
                        this.parseBracket(c);
                        break;
                }
            }
        }
    }
    parseBracket(element) {
        const bracket = new Bracket();
        bracket.from = parseInt(element.getAttribute('from'));
        bracket.to = parseInt(element.getAttribute('to'));
        if (element.attributes.has('curly')) {
            bracket.curly = element.attributes.get('curly') === 'true';
        }
        this._brackets.push(bracket);
    }
    parseLayoutStaves(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'staffLayout':
                        this.parseStaffLayout(c);
                        break;
                }
            }
        }
    }
    parseStaffLayout(element) {
        const layout = new StaffLayout();
        layout.description = element.getAttribute('description');
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'notation':
                        if (c.attributes.has('defaultClef')) {
                            layout.defaultClef = this.parseClef(c.attributes.get('defaultClef'));
                        }
                        break;
                    case 'sound':
                        if (c.attributes.has('percussion')) {
                            layout.percussion = c.attributes.get('percussion') === 'true';
                        }
                        if (c.attributes.has('instr')) {
                            layout.instrument = parseInt(c.attributes.get('instr'));
                        }
                        if (c.attributes.has('volume')) {
                            layout.volume = parseInt(c.attributes.get('volume'));
                        }
                        if (c.attributes.has('transpose')) {
                            layout.transpose = parseInt(c.attributes.get('transpose'));
                        }
                        break;
                }
            }
        }
        this._staffLayoutLookup.set(layout.description, layout);
        layout.index = this._staffLayouts.length;
        this._staffLayouts.push(layout);
    }
    parseClef(v) {
        switch (v) {
            case 'treble':
                return Clef.G2;
            case 'bass':
                return Clef.F4;
            case 'alto':
                return Clef.C4;
            case 'tenor':
                return Clef.C4;
        }
        return Clef.G2;
    }
    parseClefOttava(v) {
        if (v.endsWith('-')) {
            return Ottavia._8vb;
        }
        else if (v.endsWith('+')) {
            return Ottavia._8va;
        }
        return Ottavia.Regular;
    }
    parseSystems(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'system':
                        this.parseSystem(c);
                        break;
                }
            }
        }
    }
    parseSystem(element) {
        if (element.attributes.has('tempo')) {
            if (this.score.masterBars.length === 0) {
                this.score.tempo = parseInt(element.attributes.get('tempo'));
            }
        }
        if (element.getAttribute('beamGrouping') === '0') {
            this._beamingMode = BeatBeamingMode.ForceSplitToNext;
        }
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'staves':
                        this.parseStaves(element, c);
                        break;
                }
            }
        }
        this._isFirstSystem = false;
    }
    parseStaves(systemElement, element) {
        let firstBarIndex = this.score.masterBars.length;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'staff':
                        this.parseStaff(systemElement, firstBarIndex, c);
                        break;
                }
            }
        }
    }
    parseStaff(systemElement, firstBarIndex, element) {
        const staffId = element.getAttribute('layout');
        this._currentStaffLayout = this._staffLayoutLookup.get(staffId);
        this._timeSignature.timeSignatureNumerator = 4;
        this._timeSignature.timeSignatureDenominator = 4;
        this._timeSignature.timeSignatureCommon = false;
        this.parseTime(element.getAttribute('defaultTime'));
        const staff = this._staffLookup.get(this._currentStaffLayout.index);
        // there might be systems where this staff is not contained
        // so we create bars until the current staff to ensure the right
        // alignment
        while (staff.bars.length < firstBarIndex) {
            this.addNewBar(staff);
        }
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'voices':
                        this.parseVoices(staffId, staff, systemElement, firstBarIndex, c);
                        break;
                }
            }
        }
    }
    parseTime(value) {
        switch (value) {
            case 'allaBreve':
            case 'C':
                this._timeSignature.timeSignatureNumerator = 2;
                this._timeSignature.timeSignatureDenominator = 2;
                this._timeSignature.timeSignatureCommon = true;
                break;
            case 'longAllaBreve':
                this._timeSignature.timeSignatureNumerator = 4;
                this._timeSignature.timeSignatureDenominator = 4;
                this._timeSignature.timeSignatureCommon = true;
                break;
            default:
                if (value.indexOf('/') > 0) {
                    const parts = value.split('/');
                    this._timeSignature.timeSignatureNumerator = parseInt(parts[0]);
                    this._timeSignature.timeSignatureDenominator = parseInt(parts[1]);
                    this._timeSignature.timeSignatureCommon = false;
                }
                break;
        }
    }
    parseVoices(staffId, staff, systemElement, firstBarIndex, element) {
        let voiceIndex = 0;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'voice':
                        this.parseVoice(staffId, staff, systemElement, voiceIndex, firstBarIndex, c);
                        voiceIndex++;
                        break;
                }
            }
        }
    }
    getOrCreateBar(staff, barIndex) {
        if (barIndex < staff.bars.length) {
            return staff.bars[barIndex];
        }
        return this.addNewBar(staff);
    }
    addNewBar(staff) {
        // voice tags always start a new bar
        let currentBar = new Bar();
        if (staff.bars.length > 0) {
            currentBar.clef = staff.bars[staff.bars.length - 1].clef;
            currentBar.clefOttava = staff.bars[staff.bars.length - 1].clefOttava;
        }
        else {
            currentBar.clef = this._currentStaffLayout.defaultClef;
        }
        staff.addBar(currentBar);
        // create masterbar if needed
        if (staff.bars.length > this.score.masterBars.length) {
            let master = new MasterBar();
            this.score.addMasterBar(master);
            if (master.index > 0) {
                master.keySignature = master.previousMasterBar.keySignature;
                master.keySignatureType = master.previousMasterBar.keySignatureType;
                master.tripletFeel = master.previousMasterBar.tripletFeel;
            }
            master.timeSignatureDenominator = this._timeSignature.timeSignatureDenominator;
            master.timeSignatureNumerator = this._timeSignature.timeSignatureNumerator;
            master.timeSignatureCommon = this._timeSignature.timeSignatureCommon;
        }
        return currentBar;
    }
    newBar(staff, voiceIndex) {
        this._currentVoiceState.currentBarIndex++;
        this._currentBar = this.getOrCreateBar(staff, this._currentVoiceState.currentBarIndex);
        this._currentVoiceState.currentBarDuration = this._currentBar.masterBar.calculateDuration(false);
        this._currentVoiceState.currentBarComplete = false;
        this._currentVoiceState.currentPosition = 0;
        this.ensureVoice(staff, voiceIndex);
    }
    parseVoice(staffId, staff, systemElement, voiceIndex, firstBarIndex, element) {
        const voiceStateKey = staffId + '_' + voiceIndex;
        if (this._currentVoiceState && !this._currentVoiceState.currentBarComplete) {
            this._currentBar.masterBar.isAnacrusis = true;
        }
        if (!this._voiceStates.has(voiceStateKey)) {
            this._currentVoiceState = new CapellaVoiceState();
            this._currentVoiceState.currentBarIndex = firstBarIndex - 1;
            this._voiceStates.set(voiceStateKey, this._currentVoiceState);
            this.newBar(staff, voiceIndex);
        }
        else {
            this._currentVoiceState = this._voiceStates.get(voiceStateKey);
            this._currentBar = this.getOrCreateBar(staff, this._currentVoiceState.currentBarIndex);
            this.ensureVoice(staff, voiceIndex);
        }
        // voice tags always start a new bar
        if (element.attributes.has('stemDir')) {
            switch (element.attributes.get('stemDir')) {
                case 'up':
                    this._currentVoiceState.voiceStemDir = BeamDirection.Up;
                    break;
                case 'down':
                    this._currentVoiceState.voiceStemDir = BeamDirection.Down;
                    break;
                default:
                    this._currentVoiceState.voiceStemDir = null;
                    break;
            }
        }
        else {
            this._currentVoiceState.voiceStemDir = null;
        }
        const noteObjects = element.findChildElement('noteObjects');
        if (systemElement.attributes.has('tempo')) {
            this._currentBar.masterBar.tempoAutomation = new Automation();
            this._currentBar.masterBar.tempoAutomation.isLinear = true;
            this._currentBar.masterBar.tempoAutomation.type = AutomationType.Tempo;
            this._currentBar.masterBar.tempoAutomation.value = parseInt(systemElement.attributes.get('tempo'));
        }
        if (noteObjects) {
            for (let c of noteObjects.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    if (this._currentVoiceState.currentBarComplete && c.localName !== 'barline') {
                        this.newBar(staff, voiceIndex);
                    }
                    switch (c.localName) {
                        case 'clefSign':
                            this._currentBar.clef = this.parseClef(c.getAttribute('clef'));
                            this._currentBar.clefOttava = this.parseClefOttava(c.getAttribute('clef'));
                            break;
                        case 'keySign':
                            this._currentBar.masterBar.keySignature = parseInt(c.getAttribute('fifths'));
                            break;
                        case 'timeSign':
                            this.parseTime(c.getAttribute('time'));
                            this._currentBar.masterBar.timeSignatureDenominator = this._timeSignature.timeSignatureDenominator;
                            this._currentBar.masterBar.timeSignatureNumerator = this._timeSignature.timeSignatureNumerator;
                            this._currentBar.masterBar.timeSignatureCommon = this._timeSignature.timeSignatureCommon;
                            // NOTE: capella resets the current bar position to 0 whenever a timeSign is placed
                            this._currentVoiceState.currentPosition = 0;
                            this._currentVoiceState.currentBarDuration = this._currentBar.masterBar.calculateDuration(false);
                            break;
                        case 'barline':
                            switch (c.getAttribute('type')) {
                                case 'double':
                                    this._currentBar.masterBar.isDoubleBar = true;
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                case 'end':
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    break;
                                case 'repEnd':
                                    this._currentVoiceState.repeatEnd = this._currentBar.masterBar;
                                    if (this._currentBar.masterBar.repeatCount < this._currentVoiceState.repeatCount) {
                                        this._currentBar.masterBar.repeatCount = this._currentVoiceState.repeatCount;
                                    }
                                    this.parseBarDrawObject(c);
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                case 'repBegin':
                                    this.newBar(staff, voiceIndex); // repeat-start requires instant new bar
                                    this._currentBar.masterBar.isRepeatStart = true;
                                    this._currentVoiceState.repeatEnd = null;
                                    this._currentVoiceState.repeatCount = 0;
                                    break;
                                case 'repEndBegin':
                                    this._currentVoiceState.repeatEnd = this._currentBar.masterBar;
                                    if (this._currentBar.masterBar.repeatCount < this._currentVoiceState.repeatCount) {
                                        this._currentBar.masterBar.repeatCount = this._currentVoiceState.repeatCount;
                                    }
                                    this.parseBarDrawObject(c);
                                    this.newBar(staff, voiceIndex); // end-begin requires instant new bar
                                    this._currentBar.masterBar.isRepeatStart = true;
                                    break;
                                case 'dashed':
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                                // case 'single':
                                default:
                                    if (!this._currentVoiceState.currentBarComplete) {
                                        this._currentBar.masterBar.isAnacrusis = true;
                                    }
                                    this._currentVoiceState.currentBarComplete = true;
                                    break;
                            }
                            break;
                        case 'chord':
                            let chordBeat = new Beat();
                            this.initFromPreviousBeat(chordBeat, this._currentVoice);
                            chordBeat.beamingMode = this._beamingMode;
                            if (this._currentVoiceState.voiceStemDir) {
                                chordBeat.preferredBeamDirection = this._currentVoiceState.voiceStemDir;
                            }
                            this.parseDuration(this._currentBar, chordBeat, c.findChildElement('duration'));
                            chordBeat.updateDurations();
                            this._currentVoiceState.currentPosition += chordBeat.playbackDuration;
                            this._currentVoice.addBeat(chordBeat);
                            this.parseChord(chordBeat, c);
                            if (this._currentVoiceState.currentPosition >= this._currentVoiceState.currentBarDuration) {
                                this._currentVoiceState.currentBarComplete = true;
                            }
                            break;
                        case 'rest':
                            const restBeat = this.parseRestDurations(this._currentBar, c.findChildElement('duration'));
                            if (restBeat) {
                                this.initFromPreviousBeat(restBeat, this._currentVoice);
                                restBeat.updateDurations();
                                this._currentVoiceState.currentPosition += restBeat.playbackDuration;
                                this._currentVoice.addBeat(restBeat);
                                if (this._currentVoiceState.currentPosition >=
                                    this._currentVoiceState.currentBarDuration) {
                                    this._currentVoiceState.currentBarComplete = true;
                                }
                            }
                            break;
                    }
                }
            }
        }
    }
    initFromPreviousBeat(chordBeat, currentVoice) {
        let previousBeat = this.getLastBeat(currentVoice);
        if (previousBeat) {
            chordBeat.dynamics = previousBeat.dynamics;
        }
    }
    getLastBeat(voice) {
        if (voice.beats.length > 0) {
            return voice.beats[voice.beats.length - 1];
        }
        else if (voice.bar.index > 0) {
            const previousBar = voice.bar.staff.bars[voice.bar.index - 1];
            if (voice.index < previousBar.voices.length) {
                const previousVoice = previousBar.voices[voice.index];
                return this.getLastBeat(previousVoice);
            }
        }
        return null;
    }
    ensureVoice(staff, voiceIndex) {
        while (this._currentBar.voices.length < voiceIndex + 1) {
            this._currentBar.addVoice(new Voice$1());
        }
        if (!this._voiceCounts.has(staff.track.index) ||
            this._voiceCounts.get(staff.track.index) < this._currentBar.voices.length) {
            this._voiceCounts.set(staff.track.index, this._currentBar.voices.length);
        }
        this._currentVoice = this._currentBar.voices[voiceIndex];
    }
    parseChord(beat, element) {
        const articulation = new Note();
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'stem':
                        switch (c.getAttribute('dir')) {
                            case 'up':
                                beat.preferredBeamDirection = BeamDirection.Up;
                                break;
                            case 'down':
                                beat.preferredBeamDirection = BeamDirection.Down;
                                break;
                        }
                        break;
                    case 'articulation':
                        switch (c.getAttribute('type')) {
                            case 'staccato':
                                articulation.isStaccato = true;
                                break;
                            case 'normalAccent':
                                articulation.accentuated = AccentuationType.Normal;
                                break;
                            case 'strongAccent':
                                articulation.accentuated = AccentuationType.Heavy;
                                break;
                        }
                        break;
                    case 'lyric':
                        this.parseLyric(beat, c);
                        break;
                    case 'drawObjects':
                        this.parseBeatDrawObject(beat, c);
                        break;
                    case 'heads':
                        this.parseHeads(beat, articulation, c);
                        break;
                    case 'beam':
                        switch (c.getAttribute('group')) {
                            case 'force':
                                beat.beamingMode = BeatBeamingMode.ForceMergeWithNext;
                                break;
                            case 'divide':
                                beat.beamingMode = BeatBeamingMode.ForceSplitToNext;
                                break;
                        }
                        break;
                }
            }
        }
    }
    parseHeads(beat, articulation, element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'head':
                        this.parseHead(beat, articulation, c);
                        break;
                }
            }
        }
    }
    parseHead(beat, articulation, element) {
        const note = new Note();
        const pitch = ModelUtils.parseTuning(element.getAttribute('pitch'));
        note.octave = pitch.octave - 1;
        note.tone = pitch.noteValue;
        note.isStaccato = articulation.isStaccato;
        note.accentuated = articulation.accentuated;
        beat.addNote(note);
        // TODO: based on the shape attribute apply effects or
        // right percussion value
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'alter':
                        if (c.attributes.has('step')) {
                            note.tone += parseInt(c.attributes.get('step'));
                        }
                        break;
                    case 'tie':
                        if (c.attributes.has('begin')) {
                            if (!this._tieStartIds.has(note.id)) {
                                this._tieStartIds.set(note.id, true);
                                this._tieStarts.push(note);
                            }
                        }
                        else if (c.attributes.has('end') && this._tieStarts.length > 0 && !note.isTieDestination) {
                            note.isTieDestination = true;
                            note.tieOrigin = this._tieStarts[0];
                            this._tieStarts.splice(0, 1);
                            this._tieStartIds.delete(note.id);
                        }
                        break;
                }
            }
        }
    }
    parseBeatDrawObject(beat, element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof TextDrawObject) {
                                if (obj.fontFace.startsWith('capella')) {
                                    if (obj.text === 'u') {
                                        beat.fermata = new Fermata();
                                        beat.fermata.type = FermataType.Medium;
                                    }
                                    else if (obj.text === 'f') {
                                        beat.dynamics = DynamicValue.F;
                                    }
                                    else if (obj.text === 'j') {
                                        beat.dynamics = DynamicValue.MF;
                                    }
                                }
                                else if (this._isFirstSystem &&
                                    this.score.title === '' &&
                                    obj.align === TextAlign.Center &&
                                    obj.height > 16 &&
                                    obj.weight > 400) {
                                    // bold large centered text is very likely the title
                                    this.score.title = obj.text;
                                }
                                else if (this._isFirstSystem &&
                                    this.score.artist === '' &&
                                    obj.align === TextAlign.Center &&
                                    obj.y < 0) {
                                    this.score.artist = obj.text;
                                }
                                else if (this._isFirstSystem &&
                                    this.score.music === '' &&
                                    obj.align === TextAlign.Right &&
                                    obj.y < 0) {
                                    this.score.music = obj.text;
                                }
                                else if (!obj.text.startsWith('by capella')) {
                                    beat.text = obj.text;
                                }
                            }
                            else if (obj instanceof GuitarDrawObject) ;
                            else if (obj instanceof WavyLineDrawObject) {
                                beat.vibrato = VibratoType.Slight;
                            }
                            else if (obj instanceof WedgeDrawObject) {
                                beat.crescendo = obj.decrescendo ? CrescendoType.Decrescendo : CrescendoType.Crescendo;
                                obj.noteRange++;
                                this._crescendo.set(beat, obj);
                            }
                            else if (obj instanceof SlurDrawObject) {
                                // NOTE: casting needed for C#
                                const slur = obj;
                                this._slurs.set(beat, slur);
                            }
                            else if (obj instanceof VoltaDrawObject) {
                                this.applyVolta(obj);
                            }
                        }
                        break;
                }
            }
        }
    }
    parseBarDrawObject(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof VoltaDrawObject) {
                                this.applyVolta(obj);
                            }
                        }
                        break;
                }
            }
        }
    }
    applyVolta(obj) {
        if (obj.lastNumber > 0) {
            this._currentVoiceState.repeatCount = obj.lastNumber;
            if (this._currentVoiceState.repeatEnd &&
                this._currentVoiceState.repeatEnd.repeatCount < this._currentVoiceState.repeatCount) {
                this._currentVoiceState.repeatEnd.repeatCount = this._currentVoiceState.repeatCount;
            }
        }
        else if (obj.firstNumber > 0) {
            this._currentVoiceState.repeatCount = obj.firstNumber;
            if (this._currentVoiceState.repeatEnd &&
                this._currentVoiceState.repeatEnd.repeatCount < this._currentVoiceState.repeatCount) {
                this._currentVoiceState.repeatEnd.repeatCount = this._currentVoiceState.repeatCount;
            }
        }
        if (obj.lastNumber > 0 && obj.firstNumber > 0) {
            let alternateEndings = 0;
            for (let i = obj.firstNumber; i <= obj.lastNumber; i++) {
                alternateEndings = alternateEndings | (0x01 << (i - 1));
            }
            this._currentBar.masterBar.alternateEndings = alternateEndings;
        }
        else if (obj.lastNumber > 0) {
            this._currentBar.masterBar.alternateEndings = 0x01 << (obj.lastNumber - 1);
        }
        else if (obj.firstNumber > 0) {
            this._currentBar.masterBar.alternateEndings = 0x01 << (obj.firstNumber - 1);
        }
    }
    parseLyric(beat, element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'verse':
                        if (!beat.lyrics) {
                            beat.lyrics = [];
                        }
                        let text = c.innerText;
                        if (c.getAttribute('hyphen') === 'true') {
                            text += '-';
                        }
                        beat.lyrics.push(text);
                        break;
                }
            }
        }
    }
    parseRestDurations(bar, element) {
        const durationBase = element.getAttribute('base');
        if (durationBase.indexOf('/') !== -1) {
            let restBeat = new Beat();
            restBeat.beamingMode = this._beamingMode;
            this.parseDuration(bar, restBeat, element);
            return restBeat;
        }
        // for
        const fullBars = parseInt(durationBase);
        if (fullBars === 1) {
            let restBeat = new Beat();
            restBeat.beamingMode = this._beamingMode;
            restBeat.duration = Duration.Whole;
            return restBeat;
        }
        else {
            // TODO: multibar rests
            Logger.warning('Importer', `Multi-Bar rests are not supported`);
            return null;
        }
    }
    parseDurationValue(s) {
        switch (s) {
            case '2/1':
                return Duration.DoubleWhole;
            case '1/1':
                return Duration.Whole;
            case '1/2':
                return Duration.Half;
            case '1/4':
                return Duration.Quarter;
            case '1/8':
                return Duration.Eighth;
            case '1/16':
                return Duration.Sixteenth;
            case '1/32':
                return Duration.ThirtySecond;
            case '1/64':
                return Duration.SixtyFourth;
            case '1/128':
                return Duration.OneHundredTwentyEighth;
            default:
                Logger.warning('Importer', 'Unsupported duration');
                return Duration.Quarter;
        }
    }
    parseDuration(bar, beat, element) {
        const durationBase = element.getAttribute('base');
        beat.duration = this.parseDurationValue(durationBase);
        if (element.attributes.has('dots')) {
            beat.dots = parseInt(element.attributes.get('dots'));
        }
        const tuplet = element.findChildElement('tuplet');
        if (tuplet) {
            beat.tupletNumerator = parseInt(tuplet.getAttribute('count'));
            const tripartiteMultiplicator = tuplet.getAttribute('tripartite') === 'true' ? 3 : 1;
            const prolongDiff = tuplet.getAttribute('prolong') === 'true' ? 0 : 1;
            let power = 0;
            while (tripartiteMultiplicator * Math.pow(2, power + prolongDiff) < beat.tupletNumerator) {
                power++;
            }
            beat.tupletDenominator = tripartiteMultiplicator * Math.pow(2, power);
        }
    }
    parsePageObjects(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            if (obj instanceof TextDrawObject) {
                                switch (obj.align) {
                                    case TextAlign.Center:
                                        if (!this.score.title) {
                                            this.score.title = c.innerText;
                                        }
                                        else if (!this.score.subTitle) {
                                            this.score.subTitle = c.innerText;
                                        }
                                        break;
                                    case TextAlign.Right:
                                        if (!this.score.artist) {
                                            this.score.artist = c.innerText;
                                        }
                                        break;
                                }
                            }
                        }
                        break;
                }
            }
        }
    }
    parseGallery(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'drawObj':
                        const obj = this.parseDrawObj(c);
                        if (obj) {
                            this._galleryObjects.set(c.getAttribute('name'), obj);
                        }
                        break;
                }
            }
        }
    }
    parseDrawObj(element) {
        let obj = null;
        let noteRange = 1;
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    case 'text':
                        obj = this.parseText(c);
                        break;
                    case 'guitar':
                        obj = this.parseGuitar(c);
                        break;
                    case 'slur':
                        obj = this.parseSlur(c);
                        break;
                    case 'wavyLine':
                        obj = this.parseWavyLine(c);
                        break;
                    case 'bracket':
                        obj = this.parseTupletBracket(c);
                        break;
                    case 'wedge':
                        obj = this.parseWedge(c);
                        break;
                    case 'volta':
                        obj = this.parseVolta(c);
                        break;
                    case 'octaveClef':
                        obj = this.parseOctaveClef(c);
                        break;
                    case 'trill':
                        obj = this.parseTrill(c);
                        break;
                    case 'basic':
                        if (c.attributes.has('noteRange')) {
                            noteRange = parseInt(c.attributes.get('noteRange'));
                        }
                        break;
                }
            }
        }
        if (obj) {
            obj.noteRange = noteRange;
        }
        return obj;
    }
    parseTrill(_unused) {
        const obj = new TrillDrawObject();
        return obj;
    }
    parseOctaveClef(element) {
        const obj = new OctaveClefDrawObject();
        if (element.attributes.has('octave')) {
            obj.octave = parseInt(element.attributes.get('octave'));
        }
        return obj;
    }
    parseVolta(element) {
        const obj = new VoltaDrawObject();
        obj.allNumbers = element.attributes.get('allNumbers') === 'true';
        if (element.attributes.has('firstNumber')) {
            obj.firstNumber = parseInt(element.attributes.get('firstNumber'));
        }
        if (element.attributes.has('lastNumber')) {
            obj.lastNumber = parseInt(element.attributes.get('lastNumber'));
        }
        return obj;
    }
    parseWedge(element) {
        const obj = new WedgeDrawObject();
        obj.decrescendo = element.attributes.get('decrescendo') === 'true';
        return obj;
    }
    parseTupletBracket(element) {
        const obj = new TupletBracketDrawObject();
        if (element.attributes.has('number')) {
            obj.number = parseInt(element.attributes.get('number'));
        }
        return obj;
    }
    parseWavyLine(_unused) {
        const obj = new WavyLineDrawObject();
        return obj;
    }
    parseSlur(_unused) {
        const obj = new SlurDrawObject();
        return obj;
    }
    parseGuitar(element) {
        const obj = new GuitarDrawObject();
        const strings = element.innerText.trim();
        for (let i = 0; i < strings.length; i++) {
            if (strings.charAt(i) === '/') {
                obj.chord.strings.push(0);
            }
            else {
                obj.chord.strings.push(parseInt(strings.charAt(i)));
            }
        }
        return obj;
    }
    parseText(element) {
        const obj = new TextDrawObject();
        if (element.attributes.has('x')) {
            obj.x = parseFloat(element.attributes.get('x'));
        }
        if (element.attributes.has('x')) {
            obj.y = parseFloat(element.attributes.get('y'));
        }
        switch (element.getAttribute('align')) {
            case 'left':
                obj.align = TextAlign.Left;
                break;
            case 'center':
                obj.align = TextAlign.Center;
                break;
            case 'right':
                obj.align = TextAlign.Right;
                break;
        }
        switch (element.getAttribute('frame')) {
            case 'rectangle':
                obj.frame = FrameType.Rectangle;
                break;
            case 'ellipse':
                obj.frame = FrameType.Ellipse;
                break;
            case 'circle':
                obj.frame = FrameType.Circle;
                break;
            case 'none':
                obj.frame = FrameType.None;
                break;
        }
        if (element.firstElement) {
            for (let c of element.childNodes) {
                if (c.nodeType === XmlNodeType.Element) {
                    switch (c.localName) {
                        case 'font':
                            obj.fontFace = c.getAttribute('face');
                            if (c.attributes.has('weight')) {
                                obj.weight = parseInt(c.attributes.get('weight'));
                            }
                            if (c.attributes.has('height')) {
                                obj.height = parseInt(c.attributes.get('height'));
                            }
                            break;
                        case 'content':
                            obj.text = c.innerText;
                            break;
                    }
                }
            }
        }
        else {
            obj.text = element.innerText;
        }
        return obj;
    }
    parseInfo(element) {
        for (let c of element.childNodes) {
            if (c.nodeType === XmlNodeType.Element) {
                switch (c.localName) {
                    // encodingSoftware ignored
                    case 'author':
                        this.score.tab = c.firstChild.innerText;
                        break;
                    // keywords ignored
                    case 'comment':
                        this.score.notices = c.firstChild.innerText;
                        break;
                }
            }
        }
    }
}

/**
 * This ScoreImporter can read Capella (cap/capx) files.
 */
class CapellaImporter extends ScoreImporter {
    get name() {
        return 'Capella';
    }
    constructor() {
        super();
    }
    readScore() {
        Logger.debug(this.name, 'Loading ZIP entries');
        let fileSystem = new ZipReader(this.data);
        let entries;
        let xml = null;
        entries = fileSystem.read();
        Logger.debug(this.name, 'Zip entries loaded');
        if (entries.length > 0) {
            for (let entry of entries) {
                switch (entry.fileName) {
                    case 'score.xml':
                        xml = IOHelper.toString(entry.data, this.settings.importer.encoding);
                        break;
                }
            }
        }
        else {
            this.data.reset();
            xml = IOHelper.toString(this.data.readAll(), this.settings.importer.encoding);
        }
        if (!xml) {
            throw new UnsupportedFormatError('No valid capella file');
        }
        Logger.debug(this.name, 'Start Parsing score.xml');
        try {
            let capellaParser = new CapellaParser();
            capellaParser.parseXml(xml, this.settings);
            Logger.debug(this.name, 'score.xml parsed');
            let score = capellaParser.score;
            return score;
        }
        catch (e) {
            throw new UnsupportedFormatError('Failed to parse CapXML', e);
        }
    }
}

/**
 * A very basic polyfill of the ResizeObserver which triggers
 * a the callback on window resize for all registered targets.
 * @target web
 */
class ResizeObserverPolyfill {
    constructor(callback) {
        this._targets = new Set();
        this._callback = callback;
        window.addEventListener('resize', this.onWindowResize.bind(this), false);
    }
    observe(target) {
        this._targets.add(target);
    }
    unobserve(target) {
        this._targets.delete(target);
    }
    disconnect() {
        this._targets.clear();
    }
    onWindowResize() {
        const entries = [];
        for (const t of this._targets) {
            entries.push({
                target: t,
                // not used by alphaTab
                contentRect: undefined,
                borderBoxSize: undefined,
                contentBoxSize: [],
                devicePixelContentBoxSize: []
            });
        }
        this._callback(entries, this);
    }
}

/**
 * A polyfill of the InsersectionObserver
 * @target web
 */
class IntersectionObserverPolyfill {
    constructor(callback) {
        this._elements = [];
        let timer = null;
        const oldCheck = this._check.bind(this);
        this._check = () => {
            if (!timer) {
                timer = setTimeout(() => {
                    oldCheck();
                    timer = null;
                }, 100);
            }
        };
        this._callback = callback;
        window.addEventListener('resize', this._check, true);
        document.addEventListener('scroll', this._check, true);
    }
    observe(target) {
        if (this._elements.indexOf(target) >= 0) {
            return;
        }
        this._elements.push(target);
        this._check();
    }
    unobserve(target) {
        this._elements = this._elements.filter(item => {
            return item != target;
        });
    }
    ;
    _check() {
        const entries = [];
        this._elements.forEach(element => {
            const rect = element.getBoundingClientRect();
            const isVisible = (rect.top + rect.height >= 0 &&
                rect.top <= window.innerHeight &&
                rect.left + rect.width >= 0 &&
                rect.left <= window.innerWidth);
            if (isVisible) {
                entries.push({
                    target: element,
                    isIntersecting: true
                });
            }
        });
        if (entries.length) {
            this._callback(entries, this);
        }
    }
}

class LayoutEngineFactory {
    constructor(vertical, createLayout) {
        this.vertical = vertical;
        this.createLayout = createLayout;
    }
}
class RenderEngineFactory {
    constructor(supportsWorkers, canvas) {
        this.supportsWorkers = supportsWorkers;
        this.createCanvas = canvas;
    }
}
/**
 * This public class represents the global alphaTab environment where
 * alphaTab looks for information like available layout engines
 * staves etc.
 * This public class represents the global alphaTab environment where
 * alphaTab looks for information like available layout engines
 * staves etc.
 * @partial
 */
class Environment {
    /**
     * @target web
     */
    static createStyleElement(elementDocument, fontDirectory) {
        let styleElement = elementDocument.getElementById('alphaTabStyle');
        if (!styleElement) {
            if (!fontDirectory) {
                Logger.error('AlphaTab', 'Font directory could not be detected, cannot create style element');
                return;
            }
            styleElement = elementDocument.createElement('style');
            styleElement.id = 'alphaTabStyle';
            let css = `
            @font-face {
                font-family: 'alphaTab';
                 src: url('${fontDirectory}Bravura.eot');
                 src: url('${fontDirectory}Bravura.eot?#iefix') format('embedded-opentype')
                      , url('${fontDirectory}Bravura.woff') format('woff')
                      , url('${fontDirectory}Bravura.otf') format('opentype')
                      , url('${fontDirectory}Bravura.svg#Bravura') format('svg');
                 font-weight: normal;
                 font-style: normal;
            }
            .at-surface * {
                cursor: default;
                vertical-align: top;
                overflow: visible;
            }
            .at-surface-svg text {
                dominant-baseline: central;
            }             
            .at {
                 font-family: 'alphaTab';
                 speak: none;
                 font-style: normal;
                 font-weight: normal;
                 font-variant: normal;
                 text-transform: none;
                 line-height: 1;
                 line-height: 1;
                 -webkit-font-smoothing: antialiased;
                 -moz-osx-font-smoothing: grayscale;
                 font-size: ${Environment.MusicFontSize}px;
                 overflow: visible !important;
            }`;
            styleElement.innerHTML = css;
            elementDocument.getElementsByTagName('head').item(0).appendChild(styleElement);
            Environment.bravuraFontChecker.checkForFontAvailability();
        }
    }
    /**
     * @target web
     */
    static get globalThis() {
        if (Environment._globalThis === undefined) {
            try {
                Environment._globalThis = globalThis;
            }
            catch (e) {
                // globalThis not available
            }
            if (typeof Environment._globalThis === 'undefined') {
                Environment._globalThis = self;
            }
            if (typeof Environment._globalThis === 'undefined') {
                Environment._globalThis = global;
            }
            if (typeof Environment._globalThis === 'undefined') {
                Environment._globalThis = window;
            }
            if (typeof Environment._globalThis === 'undefined') {
                Environment._globalThis = Function('return this')();
            }
        }
        return this._globalThis;
    }
    /**
     * @target web
     */
    static get isRunningInWorker() {
        return 'WorkerGlobalScope' in Environment.globalThis;
    }
    /**
     * @target web
     */
    static get isRunningInAudioWorklet() {
        return 'AudioWorkletGlobalScope' in Environment.globalThis;
    }
    /**
     * @target web
     */
    static createAlphaTabWorker(scriptFile) {
        if (Environment.isWebPackBundled) {
            // WebPack currently requires this exact syntax: new Worker(new URL(..., import.meta.url)))
            // The module `@coderline/alphatab` will be resolved by WebPack to alphaTab consumed as library
            // this will not work with CDNs because worker start scripts need to have the same origin like
            // the current browser. 
            // https://github.com/webpack/webpack/discussions/14066
            return new Worker(
            // @ts-ignore
            /* webpackChunkName: "alphatab.worker" */ new URL('@coderline/alphatab', import.meta.url));
        }
        if (!scriptFile) {
            throw new AlphaTabError(AlphaTabErrorType.General, "Could not detect alphaTab script file, cannot initialize renderer");
        }
        try {
            if (Environment.webPlatform === WebPlatform.BrowserModule) {
                const script = `import * as alphaTab from '${scriptFile}'`;
                const blob = new Blob([script], { type: 'text/javascript' });
                return new Worker(URL.createObjectURL(blob), { type: 'module' });
            }
            else {
                const script = `importScripts('${scriptFile}')`;
                const blob = new Blob([script]);
                return new Worker(URL.createObjectURL(blob));
            }
        }
        catch (e) {
            Logger.warning('Rendering', 'Could not create inline worker, fallback to normal worker');
            return new Worker(scriptFile);
        }
    }
    /**
     * @target web
     * @partial
     */
    static throttle(action, delay) {
        let timeoutId = 0;
        return () => {
            Environment.globalThis.clearTimeout(timeoutId);
            timeoutId = Environment.globalThis.setTimeout(action, delay);
        };
    }
    /**
     * @target web
     */
    static detectScriptFile() {
        // browser include as ES6 import
        // <script type="module">
        // import * as alphaTab from 'dist/alphaTab.js';
        try {
            // @ts-ignore
            const importUrl = import.meta.url;
            // avoid using file:// urls in case of
            // bundlers like webpack
            if (importUrl && importUrl.indexOf('file://') === -1) {
                return importUrl;
            }
        }
        catch (e) {
            // ignore potential errors
        }
        // normal browser include as <script>
        if ('document' in Environment.globalThis && document.currentScript) {
            return document.currentScript.src;
        }
        return null;
    }
    /**
     * @target web
     */
    static registerJQueryPlugin() {
        if (!Environment.isRunningInWorker && Environment.globalThis && 'jQuery' in Environment.globalThis) {
            let jquery = Environment.globalThis['jQuery'];
            let api = new JQueryAlphaTab();
            jquery.fn.alphaTab = function (method) {
                const args = Array.prototype.slice.call(arguments, 1);
                // if only a single element is affected, we use this
                if (this.length === 1) {
                    return api.exec(this[0], method, args);
                }
                // if multiple elements are affected we provide chaining
                return this.each((_i, e) => {
                    api.exec(e, method, args);
                });
            };
            jquery.alphaTab = {
                restore: JQueryAlphaTab.restore
            };
            jquery.fn.alphaTab.fn = api;
        }
    }
    static getRenderEngineFactory(engine) {
        if (!engine || !Environment.renderEngines.has(engine)) {
            return Environment.renderEngines.get('default');
        }
        return Environment.renderEngines.get(engine);
    }
    static getLayoutEngineFactory(layoutMode) {
        if (!layoutMode || !Environment.layoutEngines.has(layoutMode)) {
            return Environment.layoutEngines.get(LayoutMode.Page);
        }
        return Environment.layoutEngines.get(layoutMode);
    }
    /**
     * Gets all default ScoreImporters
     * @returns
     */
    static buildImporters() {
        return [
            new Gp3To5Importer(),
            new GpxImporter(),
            new Gp7Importer(),
            new MusicXmlImporter(),
            new CapellaImporter(),
            new AlphaTexImporter()
        ];
    }
    static createDefaultRenderEngines() {
        const renderEngines = new Map();
        renderEngines.set('svg', new RenderEngineFactory(true, () => {
            return new CssFontSvgCanvas();
        }));
        renderEngines.set('default', renderEngines.get('svg'));
        Environment.createPlatformSpecificRenderEngines(renderEngines);
        return renderEngines;
    }
    /**
     * @target web
     * @partial
     */
    static createPlatformSpecificRenderEngines(renderEngines) {
        renderEngines.set('html5', new RenderEngineFactory(false, () => {
            return new Html5Canvas();
        }));
    }
    static createDefaultStaveProfiles() {
        const staveProfiles = new Map();
        // default combinations of stave textprofiles
        staveProfiles.set(StaveProfile.ScoreTab, [
            new EffectBarRendererFactory('score-effects', [
                new TempoEffectInfo(),
                new TripletFeelEffectInfo(),
                new MarkerEffectInfo(),
                new TextEffectInfo(),
                new ChordsEffectInfo(),
                new FermataEffectInfo(),
                new WhammyBarEffectInfo(),
                new TrillEffectInfo(),
                new OttaviaEffectInfo(true),
                new WideBeatVibratoEffectInfo(),
                new SlightBeatVibratoEffectInfo(),
                new WideNoteVibratoEffectInfo(),
                new SlightNoteVibratoEffectInfo(),
                new LeftHandTapEffectInfo(),
                new AlternateEndingsEffectInfo()
            ]),
            new ScoreBarRendererFactory(),
            new EffectBarRendererFactory('tab-effects', [
                new CrescendoEffectInfo(),
                new OttaviaEffectInfo(false),
                new DynamicsEffectInfo(),
                new LyricsEffectInfo(),
                new TrillEffectInfo(),
                new WideBeatVibratoEffectInfo(),
                new SlightBeatVibratoEffectInfo(),
                new WideNoteVibratoEffectInfo(),
                new SlightNoteVibratoEffectInfo(),
                new TapEffectInfo(),
                new FadeInEffectInfo(),
                new HarmonicsEffectInfo(HarmonicType.Natural),
                new HarmonicsEffectInfo(HarmonicType.Artificial),
                new HarmonicsEffectInfo(HarmonicType.Pinch),
                new HarmonicsEffectInfo(HarmonicType.Tap),
                new HarmonicsEffectInfo(HarmonicType.Semi),
                new HarmonicsEffectInfo(HarmonicType.Feedback),
                new LetRingEffectInfo(),
                new CapoEffectInfo(),
                new FingeringEffectInfo(),
                new PalmMuteEffectInfo(),
                new PickStrokeEffectInfo(),
                new PickSlideEffectInfo(),
                new LeftHandTapEffectInfo()
            ]),
            new TabBarRendererFactory(false, false, false)
        ]);
        staveProfiles.set(StaveProfile.Score, [
            new EffectBarRendererFactory('score-effects', [
                new TempoEffectInfo(),
                new TripletFeelEffectInfo(),
                new MarkerEffectInfo(),
                new TextEffectInfo(),
                new ChordsEffectInfo(),
                new FermataEffectInfo(),
                new WhammyBarEffectInfo(),
                new TrillEffectInfo(),
                new OttaviaEffectInfo(true),
                new WideBeatVibratoEffectInfo(),
                new SlightBeatVibratoEffectInfo(),
                new WideNoteVibratoEffectInfo(),
                new SlightNoteVibratoEffectInfo(),
                new FadeInEffectInfo(),
                new LetRingEffectInfo(),
                new PalmMuteEffectInfo(),
                new PickStrokeEffectInfo(),
                new PickSlideEffectInfo(),
                new LeftHandTapEffectInfo(),
                new AlternateEndingsEffectInfo()
            ]),
            new ScoreBarRendererFactory(),
            new EffectBarRendererFactory('score-bottom-effects', [
                new CrescendoEffectInfo(),
                new OttaviaEffectInfo(false),
                new DynamicsEffectInfo(),
                new LyricsEffectInfo()
            ])
        ]);
        let tabEffectInfos = [
            new TempoEffectInfo(),
            new TripletFeelEffectInfo(),
            new MarkerEffectInfo(),
            new TextEffectInfo(),
            new ChordsEffectInfo(),
            new FermataEffectInfo(),
            new TrillEffectInfo(),
            new WideBeatVibratoEffectInfo(),
            new SlightBeatVibratoEffectInfo(),
            new WideNoteVibratoEffectInfo(),
            new SlightNoteVibratoEffectInfo(),
            new TapEffectInfo(),
            new FadeInEffectInfo(),
            new HarmonicsEffectInfo(HarmonicType.Artificial),
            new HarmonicsEffectInfo(HarmonicType.Pinch),
            new HarmonicsEffectInfo(HarmonicType.Tap),
            new HarmonicsEffectInfo(HarmonicType.Semi),
            new HarmonicsEffectInfo(HarmonicType.Feedback),
            new LetRingEffectInfo(),
            new CapoEffectInfo(),
            new FingeringEffectInfo(),
            new PalmMuteEffectInfo(),
            new PickStrokeEffectInfo(),
            new PickSlideEffectInfo(),
            new LeftHandTapEffectInfo(),
            new AlternateEndingsEffectInfo()
        ];
        staveProfiles.set(StaveProfile.Tab, [
            new EffectBarRendererFactory('tab-effects', tabEffectInfos),
            new TabBarRendererFactory(true, true, true),
            new EffectBarRendererFactory('tab-bottom-effects', [new LyricsEffectInfo()])
        ]);
        staveProfiles.set(StaveProfile.TabMixed, [
            new EffectBarRendererFactory('tab-effects', tabEffectInfos),
            new TabBarRendererFactory(false, false, false),
            new EffectBarRendererFactory('tab-bottom-effects', [new LyricsEffectInfo()])
        ]);
        return staveProfiles;
    }
    static createDefaultLayoutEngines() {
        const engines = new Map();
        // default layout engines
        engines.set(LayoutMode.Page, new LayoutEngineFactory(true, r => {
            return new PageViewLayout(r);
        }));
        engines.set(LayoutMode.Horizontal, new LayoutEngineFactory(false, r => {
            return new HorizontalScreenLayout(r);
        }));
        return engines;
    }
    /**
     * @target web
     * @partial
     */
    static platformInit() {
        if (Environment.isRunningInAudioWorklet) {
            AlphaSynthWebWorklet.init();
        }
        else if (Environment.isRunningInWorker) {
            AlphaTabWebWorker.init();
            AlphaSynthWebWorker.init();
        }
        else if (Environment.webPlatform === WebPlatform.Browser ||
            Environment.webPlatform === WebPlatform.BrowserModule) {
            Environment.registerJQueryPlugin();
            Environment.HighDpiFactor = window.devicePixelRatio;
            // ResizeObserver API does not yet exist so long on Safari (only start 2020 with iOS Safari 13.7 and Desktop 13.1)
            // so we better add a polyfill for it
            if (!('ResizeObserver' in Environment.globalThis)) {
                Environment.globalThis.ResizeObserver = ResizeObserverPolyfill;
            }
            // IntersectionObserver API does not on older iOS versions
            // so we better add a polyfill for it
            if (!('IntersectionObserver' in Environment.globalThis)) {
                Environment.globalThis.IntersectionObserver = IntersectionObserverPolyfill;
            }
            if (!('replaceChildren' in Element.prototype)) {
                Element.prototype.replaceChildren = function (...nodes) {
                    this.innerHTML = '';
                    this.append(...nodes);
                };
                Document.prototype.replaceChildren = Element.prototype.replaceChildren;
                DocumentFragment.prototype.replaceChildren = Element.prototype.replaceChildren;
            }
            if (!('replaceAll' in String.prototype)) {
                String.prototype.replaceAll = function (str, newStr) {
                    return this.replace(new RegExp(str, 'g'), newStr);
                };
            }
        }
    }
    /**
     * @target web
     */
    static detectWebPack() {
        try {
            // @ts-ignore
            if (typeof __webpack_require__ === 'function') {
                return true;
            }
        }
        catch (e) {
            // ignore any errors
        }
        return false;
    }
    /**
     * @target web
     */
    static detectWebPlatform() {
        try {
            // Credit of the node.js detection goes to
            // https://github.com/iliakan/detect-node
            // MIT License
            // Copyright (c) 2017 Ilya Kantor
            // tslint:disable-next-line: strict-type-predicates
            if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {
                return WebPlatform.NodeJs;
            }
        }
        catch (e) {
            // no node.js
        }
        try {
            // @ts-ignore
            const url = import.meta.url;
            if (url && typeof url === 'string' && !url.startsWith('file://')) {
                return WebPlatform.BrowserModule;
            }
        }
        catch (e) {
            // no browser module
        }
        return WebPlatform.Browser;
    }
}
/**
 * The font size of the music font in pixel.
 */
Environment.MusicFontSize = 34;
/**
 * The scaling factor to use when rending raster graphics for sharper rendering on high-dpi displays.
 */
Environment.HighDpiFactor = 1;
/**
 * @target web
 */
Environment._globalThis = undefined;
/**
 * @target web
 */
Environment.webPlatform = Environment.detectWebPlatform();
/**
 * @target web
 */
Environment.isWebPackBundled = Environment.detectWebPack();
/**
 * @target web
 */
Environment.scriptFile = Environment.detectScriptFile();
/**
 * @target web
 */
Environment.bravuraFontChecker = new FontLoadingChecker(['alphaTab']);
Environment.renderEngines = Environment.createDefaultRenderEngines();
Environment.layoutEngines = Environment.createDefaultLayoutEngines();
Environment.staveProfiles = Environment.createDefaultStaveProfiles();
Environment.platformInit();

/**
 * @json
 */
class CoreSettings {
    /**
     * @target web
     */
    constructor() {
        /**
         * Gets or sets the script file url that will be used to spawn the workers.
         * @target web
         */
        this.scriptFile = null;
        /**
         * Gets or sets the url to the fonts that will be used to generate the alphaTab font style.
         * @target web
         */
        this.fontDirectory = null;
        /**
         * Gets or sets the file to load directly after initializing alphaTab.
         * @target web
         */
        this.file = null;
        /**
         * Gets or sets whether the UI element contains alphaTex code that should be
         * used to initialize alphaTab.
         * @target web
         */
        this.tex = false;
        /**
         * Gets or sets the initial tracks that should be loaded for the score.
         * @target web
         */
        this.tracks = null;
        /**
         * Gets or sets whether lazy loading for displayed elements is enabled.
         */
        this.enableLazyLoading = true;
        /**
         * The engine which should be used to render the the tablature.
         *
         * - **default**- Platform specific default engine
         * - **html5**- HTML5 Canvas
         * - **svg**- SVG
         */
        this.engine = 'default';
        /**
         * The log level to use within alphaTab
         */
        this.logLevel = LogLevel.Info;
        /**
         * Gets or sets whether the rendering should be done in a worker if possible.
         */
        this.useWorkers = true;
        /**
         * Gets or sets whether in the {@link BoundsLookup} also the
         * position and area of each individual note is provided.
         */
        this.includeNoteBounds = false;
        if (!Environment.isRunningInWorker && Environment.globalThis.ALPHATAB_ROOT) {
            this.scriptFile = Environment.globalThis.ALPHATAB_ROOT;
            this.scriptFile = CoreSettings.ensureFullUrl(this.scriptFile);
            this.scriptFile = CoreSettings.appendScriptName(this.scriptFile);
        }
        else {
            this.scriptFile = Environment.scriptFile;
        }
        if (!Environment.isRunningInWorker && Environment.globalThis.ALPHATAB_FONT) {
            this.fontDirectory = Environment.globalThis['ALPHATAB_FONT'];
            this.fontDirectory = CoreSettings.ensureFullUrl(this.fontDirectory);
        }
        else {
            this.fontDirectory = this.scriptFile;
            if (this.fontDirectory) {
                let lastSlash = this.fontDirectory.lastIndexOf(String.fromCharCode(47));
                if (lastSlash >= 0) {
                    this.fontDirectory = this.fontDirectory.substr(0, lastSlash) + '/font/';
                }
            }
        }
    }
    /**
     * @target web
     */
    static ensureFullUrl(relativeUrl) {
        var _a, _b, _c;
        if (!relativeUrl) {
            return '';
        }
        if (!relativeUrl.startsWith('http') && !relativeUrl.startsWith('https') && !relativeUrl.startsWith('file')) {
            let root = '';
            let location = Environment.globalThis['location'];
            root += (_a = location.protocol) === null || _a === void 0 ? void 0 : _a.toString();
            root += '//'.toString();
            if (location.hostname) {
                root += (_b = location.hostname) === null || _b === void 0 ? void 0 : _b.toString();
            }
            if (location.port) {
                root += ':'.toString();
                root += (_c = location.port) === null || _c === void 0 ? void 0 : _c.toString();
            }
            // as it is not clearly defined how slashes are treated in the location object
            // better be safe than sorry here
            if (!relativeUrl.startsWith('/')) {
                let directory = location.pathname.split('/').slice(0, -1).join('/');
                if (directory.length > 0) {
                    if (!directory.startsWith('/')) {
                        root += '/'.toString();
                    }
                    root += directory === null || directory === void 0 ? void 0 : directory.toString();
                }
            }
            if (!relativeUrl.startsWith('/')) {
                root += '/'.toString();
            }
            root += relativeUrl === null || relativeUrl === void 0 ? void 0 : relativeUrl.toString();
            return root;
        }
        return relativeUrl;
    }
    static appendScriptName(url) {
        // append script name
        if (url && !url.endsWith('.js')) {
            if (!url.endsWith('/')) {
                url += '/';
            }
            url += 'alphaTab.js';
        }
        return url;
    }
}

// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
class VersionInfo {
}
VersionInfo.version = '1.2.3';
VersionInfo.date = '2022-10-16T13:33:07.436Z';

var index$5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ScoreImporter: ScoreImporter,
    ScoreLoader: ScoreLoader,
    UnsupportedFormatError: UnsupportedFormatError
});

/**
 * This is the base class for creating new song exporters which
 * enable writing scores to a binary datasink.
 */
class ScoreExporter {
    /**
     * Initializes the importer with the given data and settings.
     */
    init(data, settings) {
        this.data = data;
        this.settings = settings;
    }
    /**
     * Exports the given score to a binary buffer.
     * @param score The score to serialize
     * @param settings  The settings to use during serialization
     * @returns A byte buffer with the serialized score.
     */
    export(score, settings = null) {
        const writable = ByteBuffer.withCapacity(1024);
        this.init(writable, settings !== null && settings !== void 0 ? settings : new Settings());
        this.writeScore(score);
        return writable.toArray();
    }
}

// Grabbed via Icon Picker beside track name in GP7
var GpifIconIds;
(function (GpifIconIds) {
    // Guitar & Basses
    GpifIconIds[GpifIconIds["SteelGuitar"] = 1] = "SteelGuitar";
    GpifIconIds[GpifIconIds["AcousticGuitar"] = 2] = "AcousticGuitar";
    GpifIconIds[GpifIconIds["TwelveStringGuitar"] = 3] = "TwelveStringGuitar";
    GpifIconIds[GpifIconIds["ElectricGuitar"] = 4] = "ElectricGuitar";
    GpifIconIds[GpifIconIds["Bass"] = 5] = "Bass";
    GpifIconIds[GpifIconIds["ClassicalGuitar"] = 23] = "ClassicalGuitar";
    GpifIconIds[GpifIconIds["UprightBass"] = 6] = "UprightBass";
    GpifIconIds[GpifIconIds["Ukulele"] = 7] = "Ukulele";
    GpifIconIds[GpifIconIds["Banjo"] = 8] = "Banjo";
    GpifIconIds[GpifIconIds["Mandolin"] = 9] = "Mandolin";
    // Orchestral
    GpifIconIds[GpifIconIds["Piano"] = 10] = "Piano";
    GpifIconIds[GpifIconIds["Synth"] = 12] = "Synth";
    GpifIconIds[GpifIconIds["Strings"] = 11] = "Strings";
    GpifIconIds[GpifIconIds["Brass"] = 13] = "Brass";
    GpifIconIds[GpifIconIds["Reed"] = 14] = "Reed";
    GpifIconIds[GpifIconIds["Woodwind"] = 15] = "Woodwind";
    GpifIconIds[GpifIconIds["Vocal"] = 16] = "Vocal";
    GpifIconIds[GpifIconIds["PitchedIdiophone"] = 17] = "PitchedIdiophone";
    GpifIconIds[GpifIconIds["Fx"] = 21] = "Fx";
    // Percussions
    GpifIconIds[GpifIconIds["PercussionKit"] = 18] = "PercussionKit";
    GpifIconIds[GpifIconIds["Idiophone"] = 19] = "Idiophone";
    GpifIconIds[GpifIconIds["Membraphone"] = 20] = "Membraphone";
})(GpifIconIds || (GpifIconIds = {}));
class GpifMidiProgramInfo {
    constructor(icon, instrumentSetName, instrumentSetType = null) {
        this.icon = GpifIconIds.Piano;
        this.icon = icon;
        this.instrumentSetName = instrumentSetName;
        if (!instrumentSetType) {
            const parts = instrumentSetName.split(' ');
            parts[0] = parts[0].substr(0, 1).toLowerCase() + parts[0].substr(1);
            this.instrumentSetType = parts.join('');
        }
        else {
            this.instrumentSetType = instrumentSetType;
        }
    }
}
/**
 * This class can write a score.gpif XML from a given score model.
 */
class GpifWriter {
    constructor() {
        this._rhythmIdLookup = new Map();
    }
    writeXml(score) {
        const xmlDocument = new XmlDocument();
        this._rhythmIdLookup = new Map();
        this.writeDom(xmlDocument, score);
        return xmlDocument.toFormattedString('', true);
    }
    writeDom(parent, score) {
        const gpif = parent.addElement('GPIF');
        // just some values at the time this was implemented,
        gpif.addElement('GPVersion').innerText = '7';
        const gpRevision = gpif.addElement('GPRevision');
        gpRevision.innerText = '7';
        gpRevision.attributes.set('required', '12021');
        gpRevision.attributes.set('recommended', '12023');
        gpRevision.innerText = '12025';
        gpif.addElement('Encoding').addElement('EncodingDescription').innerText = 'GP7';
        this.writeScoreNode(gpif, score);
        this.writeMasterTrackNode(gpif, score);
        this.writeAudioTracksNode(gpif, score);
        this.writeTracksNode(gpif, score);
        this.writeMasterBarsNode(gpif, score);
        const bars = gpif.addElement('Bars');
        const voices = gpif.addElement('Voices');
        const beats = gpif.addElement('Beats');
        const notes = gpif.addElement('Notes');
        const rhythms = gpif.addElement('Rhythms');
        for (const tracks of score.tracks) {
            for (const staff of tracks.staves) {
                for (const bar of staff.bars) {
                    this.writeBarNode(bars, bar);
                    for (const voice of bar.voices) {
                        this.writeVoiceNode(voices, voice);
                        for (const beat of voice.beats) {
                            this.writeBeatNode(beats, beat, rhythms);
                            for (const note of beat.notes) {
                                this.writeNoteNode(notes, note);
                            }
                        }
                    }
                }
            }
        }
    }
    writeNoteNode(parent, note) {
        const noteNode = parent.addElement('Note');
        noteNode.attributes.set('id', note.id.toString());
        this.writeNoteProperties(noteNode, note);
        if (note.isGhost) {
            noteNode.addElement('AntiAccent').innerText = 'normal';
        }
        if (note.isLetRing) {
            noteNode.addElement('LetRing');
        }
        if (note.isTrill) {
            noteNode.addElement('Trill').innerText = note.trillValue.toString();
        }
        let accentFlags = 0;
        if (note.isStaccato) {
            accentFlags |= 1;
        }
        switch (note.accentuated) {
            case AccentuationType.Normal:
                accentFlags |= 0x08;
                break;
            case AccentuationType.Heavy:
                accentFlags |= 0x04;
                break;
        }
        if (accentFlags > 0) {
            noteNode.addElement('Accent').innerText = accentFlags.toString();
        }
        if (note.isTieOrigin || note.isTieDestination) {
            const tie = noteNode.addElement('Tie');
            tie.attributes.set('origin', note.isTieOrigin ? 'true' : 'false');
            tie.attributes.set('destination', note.isTieDestination ? 'true' : 'false');
        }
        switch (note.vibrato) {
            case VibratoType.Slight:
                noteNode.addElement('Vibrato').innerText = 'Slight';
                break;
            case VibratoType.Wide:
                noteNode.addElement('Vibrato').innerText = 'Wide';
                break;
        }
        if (note.isFingering) {
            switch (note.leftHandFinger) {
                case Fingers.Thumb:
                    noteNode.addElement('LeftFingering').innerText = 'P';
                    break;
                case Fingers.IndexFinger:
                    noteNode.addElement('LeftFingering').innerText = 'I';
                    break;
                case Fingers.MiddleFinger:
                    noteNode.addElement('LeftFingering').innerText = 'M';
                    break;
                case Fingers.AnnularFinger:
                    noteNode.addElement('LeftFingering').innerText = 'A';
                    break;
                case Fingers.LittleFinger:
                    noteNode.addElement('LeftFingering').innerText = 'C';
                    break;
            }
            switch (note.rightHandFinger) {
                case Fingers.Thumb:
                    noteNode.addElement('RightFingering').innerText = 'P';
                    break;
                case Fingers.IndexFinger:
                    noteNode.addElement('RightFingering').innerText = 'I';
                    break;
                case Fingers.MiddleFinger:
                    noteNode.addElement('RightFingering').innerText = 'M';
                    break;
                case Fingers.AnnularFinger:
                    noteNode.addElement('RightFingering').innerText = 'A';
                    break;
                case Fingers.LittleFinger:
                    noteNode.addElement('RightFingering').innerText = 'C';
                    break;
            }
        }
        if (note.percussionArticulation >= 0) {
            noteNode.addElement('InstrumentArticulation').innerText = note.percussionArticulation.toString();
        }
        else {
            noteNode.addElement('InstrumentArticulation').innerText = '0';
        }
    }
    writeNoteProperties(parent, note) {
        const properties = parent.addElement('Properties');
        this.writeConcertPitch(properties, note);
        this.writeTransposedPitch(properties, note);
        if (note.isStringed) {
            this.writeSimplePropertyNode(properties, 'String', 'String', (note.string - 1).toString());
            this.writeSimplePropertyNode(properties, 'Fret', 'Fret', note.fret.toString());
            this.writeSimplePropertyNode(properties, 'Midi', 'Number', note.realValue.toString());
        }
        if (note.isPiano) {
            this.writeSimplePropertyNode(properties, 'Octave', 'Number', note.octave.toString());
            this.writeSimplePropertyNode(properties, 'Tone', 'Step', note.tone.toString());
            this.writeSimplePropertyNode(properties, 'Midi', 'Number', note.realValue.toString());
        }
        if (note.beat.tap) {
            this.writeSimplePropertyNode(properties, 'Tapped', 'Enable', null);
        }
        if (note.harmonicType !== HarmonicType.None) {
            switch (note.harmonicType) {
                case HarmonicType.Natural:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Natural');
                    break;
                case HarmonicType.Artificial:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Artificial');
                    break;
                case HarmonicType.Pinch:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Pinch');
                    break;
                case HarmonicType.Tap:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Tap');
                    break;
                case HarmonicType.Semi:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Semi');
                    break;
                case HarmonicType.Feedback:
                    this.writeSimplePropertyNode(properties, 'HarmonicType', 'HType', 'Feedback');
                    break;
            }
            if (note.harmonicValue !== 0) {
                this.writeSimplePropertyNode(properties, 'HarmonicFret', 'HFret', note.harmonicValue.toString());
            }
        }
        if (note.isDead) {
            this.writeSimplePropertyNode(properties, 'Muted', 'Enable', null);
        }
        if (note.isPalmMute) {
            this.writeSimplePropertyNode(properties, 'PalmMuted', 'Enable', null);
        }
        if (note.hasBend) {
            this.writeBend(properties, note);
        }
        if (note.isHammerPullOrigin) {
            this.writeSimplePropertyNode(properties, 'HopoOrigin', 'Enable', null);
        }
        if (note.isHammerPullDestination) {
            this.writeSimplePropertyNode(properties, 'HopoDestination', 'Enable', null);
        }
        if (note.isLeftHandTapped) {
            this.writeSimplePropertyNode(properties, 'LeftHandTapped', 'Enable', null);
        }
        let slideFlags = 0;
        switch (note.slideInType) {
            case SlideInType.IntoFromAbove:
                slideFlags |= 32;
                break;
            case SlideInType.IntoFromBelow:
                slideFlags |= 16;
                break;
        }
        switch (note.slideOutType) {
            case SlideOutType.Shift:
                slideFlags |= 1;
                break;
            case SlideOutType.Legato:
                slideFlags |= 2;
                break;
            case SlideOutType.OutDown:
                slideFlags |= 4;
                break;
            case SlideOutType.OutUp:
                slideFlags |= 8;
                break;
            case SlideOutType.PickSlideDown:
                slideFlags |= 64;
                break;
            case SlideOutType.PickSlideUp:
                slideFlags |= 128;
                break;
        }
        if (slideFlags > 0) {
            this.writeSimplePropertyNode(properties, 'Slide', 'Flags', slideFlags.toString());
        }
    }
    writeTransposedPitch(properties, note) {
        if (note.isPercussion) {
            this.writePitch(properties, 'ConcertPitch', 'C', '-1', '');
        }
        else {
            this.writePitchForValue(properties, 'TransposedPitch', note.displayValueWithoutBend, note.accidentalMode);
        }
    }
    writeConcertPitch(properties, note) {
        if (note.isPercussion) {
            this.writePitch(properties, 'ConcertPitch', 'C', '-1', '');
        }
        else {
            this.writePitchForValue(properties, 'ConcertPitch', note.realValueWithoutHarmonic, note.accidentalMode);
        }
    }
    writePitchForValue(properties, propertyName, value, accidentalMode) {
        let index = 0;
        let octave = 0;
        let step = '';
        let accidental = '';
        const updateParts = () => {
            index = value % 12;
            octave = (value / 12) | 0;
            step = Tuning.defaultSteps[index];
            accidental = Tuning.defaultAccidentals[index];
        };
        updateParts();
        switch (accidentalMode) {
            case NoteAccidentalMode.Default:
                break;
            case NoteAccidentalMode.ForceNone:
                accidental = '';
                break;
            case NoteAccidentalMode.ForceNatural:
                accidental = '';
                break;
            case NoteAccidentalMode.ForceSharp:
                accidental = '#';
                break;
            case NoteAccidentalMode.ForceDoubleSharp:
                if (accidental === '#') {
                    value -= 2;
                    updateParts();
                }
                accidental = 'x';
                break;
            case NoteAccidentalMode.ForceFlat:
                if (accidental === '#') {
                    value += 1;
                    updateParts();
                }
                accidental = 'b';
                break;
            case NoteAccidentalMode.ForceDoubleFlat:
                if (accidental === '#') {
                    value += 2;
                    updateParts();
                }
                accidental = 'bb';
                break;
        }
        this.writePitch(properties, propertyName, step, octave.toString(), accidental);
    }
    writePitch(properties, propertyName, step, octave, accidental) {
        const property = properties.addElement('Property');
        property.attributes.set('name', propertyName);
        const pitch = property.addElement('Pitch');
        pitch.addElement('Step').innerText = step;
        pitch.addElement('Accidental').innerText = accidental;
        pitch.addElement('Octave').innerText = octave;
    }
    writeBend(properties, note) {
        if (note.hasBend && note.bendPoints.length <= 4) {
            this.writeStandardBend(properties, note.bendPoints);
        }
    }
    writeStandardBend(properties, bendPoints) {
        this.writeSimplePropertyNode(properties, 'Bended', 'Enable', null);
        var bendOrigin = bendPoints[0];
        var bendDestination = bendPoints[bendPoints.length - 1];
        var bendMiddle1;
        var bendMiddle2;
        switch (bendPoints.length) {
            case 4:
                bendMiddle1 = bendPoints[1];
                bendMiddle2 = bendPoints[2];
                break;
            case 3:
                bendMiddle1 = bendPoints[1];
                bendMiddle2 = bendPoints[1];
                break;
            // case 2:
            default:
                bendMiddle1 = new BendPoint((bendOrigin.offset + bendDestination.offset) / 2, (bendOrigin.value + bendDestination.value) / 2);
                bendMiddle2 = bendMiddle1;
                break;
        }
        this.writeSimplePropertyNode(properties, 'BendDestinationOffset', 'Float', this.toBendOffset(bendDestination.offset).toString());
        this.writeSimplePropertyNode(properties, 'BendDestinationValue', 'Float', this.toBendValue(bendDestination.value).toString());
        this.writeSimplePropertyNode(properties, 'BendMiddleOffset1', 'Float', this.toBendOffset(bendMiddle1.offset).toString());
        this.writeSimplePropertyNode(properties, 'BendMiddleOffset2', 'Float', this.toBendOffset(bendMiddle2.offset).toString());
        this.writeSimplePropertyNode(properties, 'BendMiddleValue', 'Float', this.toBendValue(bendMiddle1.value).toString());
        this.writeSimplePropertyNode(properties, 'BendOriginOffset', 'Float', this.toBendOffset(bendOrigin.offset).toString());
        this.writeSimplePropertyNode(properties, 'BendOriginValue', 'Float', this.toBendValue(bendOrigin.value).toString());
    }
    toBendValue(value) {
        // GPIF: 25 per quarternote
        return value * 25;
    }
    toBendOffset(value) {
        // GPIF range: 0-100
        return (value / BendPoint.MaxPosition) * 100.0;
    }
    writeBeatNode(parent, beat, rhythms) {
        const beatNode = parent.addElement('Beat');
        beatNode.attributes.set('id', beat.id.toString());
        beatNode.addElement('Dynamic').innerText = DynamicValue[beat.dynamics];
        if (beat.fadeIn) {
            beatNode.addElement('Fadding').innerText = 'FadeIn';
        }
        if (beat.isTremolo) {
            switch (beat.tremoloSpeed) {
                case Duration.Eighth:
                    beatNode.addElement('Tremolo').innerText = '1/2';
                    break;
                case Duration.Sixteenth:
                    beatNode.addElement('Tremolo').innerText = '1/4';
                    break;
                case Duration.ThirtySecond:
                    beatNode.addElement('Tremolo').innerText = '1/8';
                    break;
            }
        }
        if (beat.hasChord) {
            beatNode.addElement('Chord').setCData(beat.chordId);
        }
        if (beat.crescendo !== CrescendoType.None) {
            beatNode.addElement('Hairpin').innerText = CrescendoType[beat.crescendo];
        }
        switch (beat.brushType) {
            case BrushType.ArpeggioUp:
                beatNode.addElement('Arpeggio').innerText = 'Up';
                break;
            case BrushType.ArpeggioDown:
                beatNode.addElement('Arpeggio').innerText = 'Down';
                break;
        }
        if (beat.text) {
            beatNode.addElement('FreeText').setCData(beat.text);
        }
        switch (beat.graceType) {
            case GraceType.OnBeat:
            case GraceType.BeforeBeat:
                beatNode.addElement('GraceNotes').innerText = GraceType[beat.graceType];
                break;
        }
        if (beat.ottava !== Ottavia.Regular) {
            beatNode.addElement('Ottavia').innerText = Ottavia[beat.ottava].substr(1);
        }
        if (beat.hasWhammyBar) {
            this.writeWhammyNode(beatNode, beat);
        }
        if (beat.isLegatoOrigin || beat.isLegatoDestination) {
            const legato = beatNode.addElement('Legato');
            legato.attributes.set('origin', beat.isLegatoOrigin ? 'true' : 'false');
            legato.attributes.set('destination', beat.isLegatoDestination ? 'true' : 'false');
        }
        this.writeRhythm(beatNode, beat, rhythms);
        if (beat.preferredBeamDirection !== null) {
            switch (beat.preferredBeamDirection) {
                case BeamDirection.Up:
                    beatNode.addElement('TransposedPitchStemOrientation').innerText = 'Upward';
                    break;
                case BeamDirection.Down:
                    beatNode.addElement('TransposedPitchStemOrientation').innerText = 'Downward';
                    break;
            }
        }
        beatNode.addElement('ConcertPitchStemOrientation').innerText = 'Undefined';
        if (!beat.isRest) {
            beatNode.addElement('Notes').innerText = beat.notes.map(n => n.id).join(' ');
        }
        this.writeBeatProperties(beatNode, beat);
        this.writeBeatXProperties(beatNode, beat);
        if (beat.lyrics && beat.lyrics.length > 0) {
            this.writeBeatLyrics(beatNode, beat.lyrics);
        }
    }
    writeBeatLyrics(beatNode, lyrics) {
        const lyricsNode = beatNode.addElement('Lyrics');
        for (const l of lyrics) {
            const line = lyricsNode.addElement('Line');
            line.setCData(l);
        }
    }
    writeBeatXProperties(beatNode, beat) {
        const beatProperties = beatNode.addElement('XProperties');
        if (beat.brushDuration > 0) {
            this.writeSimpleXPropertyNode(beatProperties, '687935489', 'Int', beat.brushDuration.toString());
        }
    }
    writeBeatProperties(beatNode, beat) {
        const beatProperties = beatNode.addElement('Properties');
        switch (beat.brushType) {
            case BrushType.BrushUp:
                this.writeSimplePropertyNode(beatProperties, 'Brush', 'Direction', 'Up');
                break;
            case BrushType.BrushDown:
                this.writeSimplePropertyNode(beatProperties, 'Brush', 'Direction', 'Down');
                break;
        }
        switch (beat.pickStroke) {
            case PickStroke.Up:
                this.writeSimplePropertyNode(beatProperties, 'PickStroke', 'Direction', 'Up');
                break;
            case PickStroke.Down:
                this.writeSimplePropertyNode(beatProperties, 'PickStroke', 'Direction', 'Down');
                break;
        }
        if (beat.slap) {
            this.writeSimplePropertyNode(beatProperties, 'Slapped', 'Enable', null);
        }
        if (beat.pop) {
            this.writeSimplePropertyNode(beatProperties, 'Popped', 'Enable', null);
        }
        switch (beat.vibrato) {
            case VibratoType.Wide:
                this.writeSimplePropertyNode(beatProperties, 'VibratoWTremBar', 'Strength', 'Wide');
                break;
            case VibratoType.Slight:
                this.writeSimplePropertyNode(beatProperties, 'VibratoWTremBar', 'Strength', 'Slight');
                break;
        }
    }
    writeRhythm(parent, beat, rhythms) {
        const rhythmId = `${beat.duration}_${beat.dots}_${beat.tupletNumerator}_${beat.tupletDenominator}';`;
        let rhythm;
        if (!this._rhythmIdLookup.has(rhythmId)) {
            rhythm = this._rhythmIdLookup.size.toString();
            this._rhythmIdLookup.set(rhythmId, rhythm);
            const rhythmNode = rhythms.addElement('Rhythm');
            rhythmNode.attributes.set('id', rhythm);
            if (beat.hasTuplet) {
                const tupletNode = rhythmNode.addElement('PrimaryTuplet');
                tupletNode.attributes.set('num', beat.tupletNumerator.toString());
                tupletNode.attributes.set('den', beat.tupletDenominator.toString());
            }
            if (beat.dots > 0) {
                rhythmNode.addElement('AugmentationDot').attributes.set('count', beat.dots.toString());
            }
            let noteValue = 'Quarter';
            switch (beat.duration) {
                case Duration.QuadrupleWhole:
                    noteValue = 'Long';
                    break;
                case Duration.DoubleWhole:
                    noteValue = 'DoubleWhole';
                    break;
                case Duration.Whole:
                    noteValue = 'Whole';
                    break;
                case Duration.Half:
                    noteValue = 'Half';
                    break;
                case Duration.Quarter:
                    noteValue = 'Quarter';
                    break;
                case Duration.Eighth:
                    noteValue = 'Eighth';
                    break;
                case Duration.Sixteenth:
                    noteValue = '16th';
                    break;
                case Duration.ThirtySecond:
                    noteValue = '32nd';
                    break;
                case Duration.SixtyFourth:
                    noteValue = '64th';
                    break;
                case Duration.OneHundredTwentyEighth:
                    noteValue = '128th';
                    break;
                case Duration.TwoHundredFiftySixth:
                    noteValue = '256th';
                    break;
            }
            rhythmNode.addElement('NoteValue').innerText = noteValue;
        }
        else {
            rhythm = this._rhythmIdLookup.get(rhythmId);
        }
        parent.addElement('Rhythm').attributes.set('ref', rhythm);
    }
    writeWhammyNode(parent, beat) {
        if (beat.hasWhammyBar && beat.whammyBarPoints.length <= 4) {
            this.writeStandardWhammy(parent, beat.whammyBarPoints);
        }
    }
    writeStandardWhammy(parent, whammyBarPoints) {
        const whammyNode = parent.addElement('Whammy');
        var whammyOrigin = whammyBarPoints[0];
        var whammyDestination = whammyBarPoints[whammyBarPoints.length - 1];
        var whammyMiddle1;
        var whammyMiddle2;
        switch (whammyBarPoints.length) {
            case 4:
                whammyMiddle1 = whammyBarPoints[1];
                whammyMiddle2 = whammyBarPoints[2];
                break;
            case 3:
                whammyMiddle1 = whammyBarPoints[1];
                whammyMiddle2 = whammyBarPoints[1];
                break;
            // case 2:
            default:
                whammyMiddle1 = new BendPoint((whammyOrigin.offset + whammyDestination.offset) / 2, (whammyOrigin.value + whammyDestination.value) / 2);
                whammyMiddle2 = whammyMiddle1;
                break;
        }
        whammyNode.attributes.set('destinationOffset', this.toBendOffset(whammyDestination.offset).toString());
        whammyNode.attributes.set('destinationValue', this.toBendValue(whammyDestination.value).toString());
        whammyNode.attributes.set('middleOffset1', this.toBendOffset(whammyMiddle1.offset).toString());
        whammyNode.attributes.set('middleOffset2', this.toBendOffset(whammyMiddle2.offset).toString());
        whammyNode.attributes.set('middleValue', this.toBendValue(whammyMiddle1.value).toString());
        whammyNode.attributes.set('originOffset', this.toBendOffset(whammyOrigin.offset).toString());
        whammyNode.attributes.set('originValue', this.toBendValue(whammyOrigin.value).toString());
    }
    writeScoreNode(parent, score) {
        const scoreNode = parent.addElement('Score');
        scoreNode.addElement('Title').setCData(score.title);
        scoreNode.addElement('SubTitle').setCData(score.subTitle);
        scoreNode.addElement('Artist').setCData(score.artist);
        scoreNode.addElement('Album').setCData(score.album);
        scoreNode.addElement('Words').setCData(score.words);
        scoreNode.addElement('Music').setCData(score.music);
        scoreNode.addElement('WordsAndMusic').setCData(score.words === score.music ? score.words : '');
        scoreNode.addElement('Copyright').setCData(score.copyright);
        scoreNode.addElement('Tabber').setCData(score.tab);
        scoreNode.addElement('Instructions').setCData(score.instructions);
        scoreNode.addElement('Notices').setCData(score.notices);
        scoreNode.addElement('FirstPageHeader').setCData('');
        scoreNode.addElement('FirstPageFooter').setCData('');
        scoreNode.addElement('PageHeader').setCData('');
        scoreNode.addElement('PageFooter').setCData('');
        scoreNode.addElement('ScoreSystemsDefaultLayout').setCData('4');
        scoreNode.addElement('ScoreSystemsLayout').setCData('4');
        scoreNode.addElement('ScoreZoomPolicy').innerText = 'Value';
        scoreNode.addElement('ScoreZoom').innerText = '1';
        // not fully clear at this point so we rather activate it
        scoreNode.addElement('MultiVoice').innerText = '1>';
    }
    writeMasterTrackNode(parent, score) {
        const masterTrackNode = parent.addElement('MasterTrack');
        masterTrackNode.addElement('Tracks').innerText = score.tracks.map(t => t.index).join(' ');
        const automations = masterTrackNode.addElement('Automations');
        if (score.masterBars.length > 0 && score.masterBars[0].isAnacrusis) {
            masterTrackNode.addElement('Anacrusis');
        }
        const initialTempoAutomation = automations.addElement('Automation');
        initialTempoAutomation.addElement('Type').innerText = 'Tempo';
        initialTempoAutomation.addElement('Linear').innerText = 'false';
        initialTempoAutomation.addElement('Bar').innerText = '0';
        initialTempoAutomation.addElement('Position').innerText = '0';
        initialTempoAutomation.addElement('Visible').innerText = 'true';
        initialTempoAutomation.addElement('Value').innerText = `${score.tempo} 2`;
        if (score.tempoLabel) {
            initialTempoAutomation.addElement('Text').innerText = score.tempoLabel;
        }
        for (const mb of score.masterBars) {
            if (mb.index > 0 && mb.tempoAutomation) {
                const tempoAutomation = automations.addElement('Automation');
                tempoAutomation.addElement('Type').innerText = 'Tempo';
                tempoAutomation.addElement('Linear').innerText = mb.tempoAutomation.isLinear ? 'true' : 'false';
                tempoAutomation.addElement('Bar').innerText = mb.index.toString();
                tempoAutomation.addElement('Position').innerText = mb.tempoAutomation.ratioPosition.toString();
                tempoAutomation.addElement('Visible').innerText = 'true';
                tempoAutomation.addElement('Value').innerText = `${mb.tempoAutomation.value} 2`;
                if (mb.tempoAutomation.text) {
                    tempoAutomation.addElement('Text').innerText = mb.tempoAutomation.text;
                }
            }
        }
    }
    writeAudioTracksNode(parent, score) {
        parent.addElement('AudioTracks');
    }
    writeTracksNode(parent, score) {
        const tracksNode = parent.addElement('Tracks');
        for (const track of score.tracks) {
            this.writeTrackNode(tracksNode, track);
        }
    }
    writeTrackNode(parent, track) {
        const trackNode = parent.addElement('Track');
        trackNode.attributes.set('id', track.index.toString());
        trackNode.addElement('Name').setCData(track.name);
        trackNode.addElement('ShortName').setCData(track.shortName);
        trackNode.addElement('Color').innerText = `${track.color.r} ${track.color.g} ${track.color.b}`;
        // Note: unclear what these values mean, various combinations in GP7 lead to these values
        trackNode.addElement('SystemsDefautLayout').innerText = '3';
        trackNode.addElement('SystemsLayout').innerText = '1';
        trackNode.addElement('AutoBrush');
        trackNode.addElement('PalmMute').innerText = '0';
        trackNode.addElement('PlayingStyle').innerText = GeneralMidi.isGuitar(track.playbackInfo.program)
            ? 'StringedPick'
            : 'Default';
        trackNode.addElement('UseOneChannelPerString');
        trackNode.addElement('IconId').innerText = GpifWriter.getIconId(track.playbackInfo).toString();
        this.writeInstrumentSetNode(trackNode, track);
        this.writeTransposeNode(trackNode, track);
        this.writeRseNode(trackNode, track);
        trackNode.addElement('ForcedSound').innerText = '-1';
        this.writeMidiConnectionNode(trackNode, track);
        if (track.playbackInfo.isSolo) {
            trackNode.addElement('PlaybackState').innerText = 'Solo';
        }
        else if (track.playbackInfo.isMute) {
            trackNode.addElement('PlaybackState').innerText = 'Mute';
        }
        else {
            trackNode.addElement('PlaybackState').innerText = 'Default';
        }
        trackNode.addElement('AudioEngineState').innerText = 'MIDI';
        this.writeLyricsNode(trackNode, track);
        this.writeStavesNode(trackNode, track);
        this.writeSoundsAndAutomations(trackNode, track);
    }
    static getIconId(playbackInfo) {
        if (playbackInfo.primaryChannel === 9) {
            return GpifWriter.DrumKitProgramInfo.icon;
        }
        if (GpifWriter.MidiProgramInfoLookup.has(playbackInfo.program)) {
            return GpifWriter.MidiProgramInfoLookup.get(playbackInfo.program).icon;
        }
        return GpifIconIds.SteelGuitar;
    }
    writeSoundAndAutomation(soundsNode, automationsNode, name, path, role, barIndex, program, ratioPosition = 0) {
        const soundNode = soundsNode.addElement('Sound');
        soundNode.addElement('Name').setCData(name);
        soundNode.addElement('Label').setCData(name);
        soundNode.addElement('Path').setCData(path);
        soundNode.addElement('Role').setCData(role);
        const midi = soundNode.addElement('MIDI');
        midi.addElement('LSB').innerText = '0';
        midi.addElement('MSB').innerText = '0';
        midi.addElement('Program').innerText = program.toString();
        const automationNode = automationsNode.addElement('Automation');
        automationNode.addElement('Type').innerText = 'Sound';
        automationNode.addElement('Linear').innerText = 'false';
        automationNode.addElement('Bar').innerText = barIndex.toString();
        automationNode.addElement('Position').innerText = ratioPosition.toString();
        automationNode.addElement('Visible').innerText = 'true';
        automationNode.addElement('Value').setCData(`${path};${name};${role}`);
    }
    writeSoundsAndAutomations(trackNode, track) {
        const soundsNode = trackNode.addElement('Sounds');
        const automationsNode = trackNode.addElement('Automations');
        if (track.staves.length > 0 && track.staves[0].bars.length > 0) {
            const trackSoundName = `Track_${track.index}_Initial`;
            const trackSoundPath = `Midi/${track.playbackInfo.program}`;
            const trackSoundRole = 'Factory';
            let trackSoundWritten = false;
            for (const staff of track.staves) {
                for (const bar of staff.bars) {
                    for (const voice of bar.voices) {
                        for (const beat of voice.beats) {
                            const soundAutomation = beat.getAutomation(AutomationType.Instrument);
                            const isTrackSound = bar.index === 0 && beat.index === 0;
                            if (soundAutomation) {
                                const name = isTrackSound ? trackSoundName : `ProgramChange_${beat.id}`;
                                const path = isTrackSound ? trackSoundPath : `Midi/${soundAutomation.value}`;
                                const role = isTrackSound ? trackSoundRole : 'User';
                                if (!isTrackSound && !trackSoundWritten) {
                                    this.writeSoundAndAutomation(soundsNode, automationsNode, trackSoundName, trackSoundPath, trackSoundRole, track.staves[0].bars[0].index, track.playbackInfo.program);
                                    trackSoundWritten = true;
                                }
                                this.writeSoundAndAutomation(soundsNode, automationsNode, name, path, role, bar.index, soundAutomation.value, soundAutomation.ratioPosition);
                                if (isTrackSound) {
                                    trackSoundWritten = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    writeMidiConnectionNode(trackNode, track) {
        const midiConnection = trackNode.addElement('MidiConnection');
        midiConnection.addElement('Port').innerText = track.playbackInfo.port.toString();
        midiConnection.addElement('PrimaryChannel').innerText = track.playbackInfo.primaryChannel.toString();
        midiConnection.addElement('SecondaryChannel').innerText = track.playbackInfo.secondaryChannel.toString();
        midiConnection.addElement('ForeOneChannelPerString').innerText = 'false';
    }
    writeRseNode(trackNode, track) {
        const rse = trackNode.addElement('RSE');
        const channelStrip = rse.addElement('ChannelStrip');
        channelStrip.attributes.set('version', 'E56');
        const channelStripParameters = channelStrip.addElement('Parameters');
        channelStripParameters.innerText = `0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1 0.5 ${track.playbackInfo.balance / 16} ${track.playbackInfo.volume / 16} 0.5 0.5 0.5`;
    }
    writeStavesNode(trackNode, track) {
        const staves = trackNode.addElement('Staves');
        for (const staff of track.staves) {
            this.writeStaffNode(staves, staff);
        }
    }
    writeStaffNode(parent, staff) {
        const staffNode = parent.addElement('Staff');
        const properties = staffNode.addElement('Properties');
        this.writeSimplePropertyNode(properties, 'CapoFret', 'Fret', staff.capo.toString());
        this.writeSimplePropertyNode(properties, 'FretCount', 'Fret', '24');
        if (staff.tuning.length > 0) {
            const tuningProperty = properties.addElement('Property');
            tuningProperty.attributes.set('name', 'Tuning');
            tuningProperty.addElement('Pitches').innerText = staff.tuning.slice().reverse().join(' ');
            tuningProperty.addElement('Label').setCData(staff.tuningName);
            tuningProperty.addElement('LabelVisible').innerText = staff.tuningName ? 'true' : 'false';
            tuningProperty.addElement('Flat');
            switch (staff.tuning.length) {
                case 3:
                    tuningProperty.addElement('Instrument').innerText = 'Shamisen';
                    break;
                case 4:
                    if (staff.track.playbackInfo.program === 105) {
                        tuningProperty.addElement('Instrument').innerText = 'Banjo';
                    }
                    else if (staff.track.playbackInfo.program == 42) {
                        tuningProperty.addElement('Instrument').innerText = 'Cello';
                    }
                    else if (staff.track.playbackInfo.program == 43) {
                        tuningProperty.addElement('Instrument').innerText = 'Contrabass';
                    }
                    else if (staff.track.playbackInfo.program == 40) {
                        tuningProperty.addElement('Instrument').innerText = 'Violin';
                    }
                    else if (staff.track.playbackInfo.program == 41) {
                        tuningProperty.addElement('Instrument').innerText = 'Viola';
                    }
                    else {
                        tuningProperty.addElement('Instrument').innerText = 'Bass';
                    }
                    break;
                case 5:
                    if (staff.track.playbackInfo.program === 105) {
                        tuningProperty.addElement('Instrument').innerText = 'Banjo';
                    }
                    else {
                        tuningProperty.addElement('Instrument').innerText = 'Bass';
                    }
                    break;
                case 6:
                    if (staff.track.playbackInfo.program === 105) {
                        tuningProperty.addElement('Instrument').innerText = 'Banjo';
                    }
                    else if (staff.track.playbackInfo.program <= 39) {
                        tuningProperty.addElement('Instrument').innerText = 'Bass';
                    }
                    else {
                        tuningProperty.addElement('Instrument').innerText = 'Guitar';
                    }
                    break;
                case 7:
                    if (staff.track.playbackInfo.program <= 39) {
                        tuningProperty.addElement('Instrument').innerText = 'Bass';
                    }
                    else {
                        tuningProperty.addElement('Instrument').innerText = 'Guitar';
                    }
                    break;
                default:
                    tuningProperty.addElement('Instrument').innerText = 'Guitar';
                    break;
            }
        }
        this.writeSimplePropertyNode(properties, 'PartialCapoFret', 'Fret', '0');
        this.writeSimplePropertyNode(properties, 'PartialCapoStringFlags', 'Bitset', staff.tuning.map(_ => '0').join(''));
        this.writeSimplePropertyNode(properties, 'TuningFlat', 'Enable', null);
        this.writeDiagramCollection(properties, staff, 'DiagramCollection');
        this.writeDiagramCollection(properties, staff, 'DiagramWorkingSet');
    }
    writeDiagramCollection(properties, staff, name) {
        const diagramCollectionProperty = properties.addElement('Property');
        diagramCollectionProperty.attributes.set('name', name);
        const diagramCollectionItems = diagramCollectionProperty.addElement('Items');
        const sc = staff.chords;
        for (const [id, chord] of sc) {
            const diagramCollectionItem = diagramCollectionItems.addElement('Item');
            diagramCollectionItem.attributes.set('id', id);
            diagramCollectionItem.attributes.set('name', chord.name);
            const diagram = diagramCollectionItem.addElement('Diagram');
            diagram.attributes.set('stringCount', chord.strings.length.toString());
            diagram.attributes.set('fretCount', '5');
            diagram.attributes.set('baseFret', (chord.firstFret - 1).toString());
            diagram.attributes.set('barStates', chord.strings.map(_ => '1').join(' '));
            const frets = [];
            const fretToStrings = new Map();
            for (let i = 0; i < chord.strings.length; i++) {
                let chordFret = chord.strings[i];
                if (chordFret !== -1) {
                    const fretNode = diagram.addElement('Fret');
                    const chordString = chord.strings.length - 1 - i;
                    fretNode.attributes.set('string', chordString.toString());
                    fretNode.attributes.set('fret', (chordFret - chord.firstFret + 1).toString());
                    if (!fretToStrings.has(chordFret)) {
                        fretToStrings.set(chordFret, []);
                        frets.push(chordFret);
                    }
                    fretToStrings.get(chordFret).push(chordString);
                }
            }
            frets.sort();
            // try to rebuild the barre frets
            const fingering = diagram.addElement('Fingering');
            if (chord.barreFrets.length > 0) {
                const fingers = [
                    Fingers.LittleFinger,
                    Fingers.AnnularFinger,
                    Fingers.MiddleFinger,
                    Fingers.IndexFinger
                ];
                for (const fret of frets) {
                    const fretStrings = fretToStrings.get(fret);
                    if (fretStrings.length > 1 && chord.barreFrets.indexOf(fret) >= 0) {
                        const finger = fingers.length > 0 ? fingers.pop() : Fingers.IndexFinger;
                        for (const fretString of fretStrings) {
                            const position = fingering.addElement('Position');
                            switch (finger) {
                                case Fingers.LittleFinger:
                                    position.attributes.set('finger', 'Pinky');
                                    break;
                                case Fingers.AnnularFinger:
                                    position.attributes.set('finger', 'Ring');
                                    break;
                                case Fingers.MiddleFinger:
                                    position.attributes.set('finger', 'Middle');
                                    break;
                                case Fingers.IndexFinger:
                                    position.attributes.set('finger', 'Index');
                                    break;
                            }
                            position.attributes.set('fret', (fret - chord.firstFret + 1).toString());
                            position.attributes.set('string', fretString.toString());
                        }
                    }
                }
            }
            const showName = diagram.addElement('Property');
            showName.attributes.set('name', 'ShowName');
            showName.attributes.set('type', 'bool');
            showName.attributes.set('value', chord.showName ? 'true' : 'false');
            const showDiagram = diagram.addElement('Property');
            showDiagram.attributes.set('name', 'ShowDiagram');
            showDiagram.attributes.set('type', 'bool');
            showDiagram.attributes.set('value', chord.showDiagram ? 'true' : 'false');
            const showFingering = diagram.addElement('Property');
            showFingering.attributes.set('name', 'ShowFingering');
            showFingering.attributes.set('type', 'bool');
            showFingering.attributes.set('value', chord.showFingering ? 'true' : 'false');
            // TODO Chord details
            const chordNode = diagram.addElement('Chord');
            const keyNoteNode = chordNode.addElement('KeyNote');
            keyNoteNode.attributes.set('step', 'C');
            keyNoteNode.attributes.set('accidental', 'Natural');
            const bassNoteNode = chordNode.addElement('BassNote');
            bassNoteNode.attributes.set('step', 'C');
            bassNoteNode.attributes.set('accidental', 'Natural');
            const degree1Node = chordNode.addElement('Degree');
            degree1Node.attributes.set('interval', 'Third');
            degree1Node.attributes.set('alteration', 'Major');
            degree1Node.attributes.set('omitted', 'false');
            const degree2Node = chordNode.addElement('Degree');
            degree2Node.attributes.set('interval', 'Fifth');
            degree2Node.attributes.set('alteration', 'Perfect');
            degree2Node.attributes.set('omitted', 'false');
        }
    }
    writeSimplePropertyNode(parent, propertyName, propertyValueTagName, propertyValue) {
        const prop = parent.addElement('Property');
        prop.attributes.set('name', propertyName);
        const propertyValueTag = prop.addElement(propertyValueTagName);
        if (propertyValue !== null) {
            propertyValueTag.innerText = propertyValue;
        }
        return prop;
    }
    writeSimpleXPropertyNode(parent, propertyId, propertyValueTagName, propertyValue) {
        const prop = parent.addElement('XProperty');
        prop.attributes.set('id', propertyId);
        const propertyValueTag = prop.addElement(propertyValueTagName);
        if (propertyValue !== null) {
            propertyValueTag.innerText = propertyValue;
        }
        return prop;
    }
    writeLyricsNode(trackNode, track) {
        const lyrics = trackNode.addElement('Lyrics');
        lyrics.attributes.set('dispatched', 'true');
        let lines = [];
        for (const bar of track.staves[0].bars) {
            for (const voice of bar.voices) {
                if (!voice.isEmpty) {
                    for (const beat of voice.beats) {
                        if (beat.lyrics) {
                            for (let l = 0; l < beat.lyrics.length; l++) {
                                // initial create of the lines
                                while (l >= lines.length) {
                                    const newLyrics = new Lyrics();
                                    newLyrics.startBar = bar.index;
                                    newLyrics.text = '[Empty]';
                                    lines.push(newLyrics);
                                }
                                const line = lines[l];
                                line.text =
                                    line.text == '[Empty]'
                                        ? beat.lyrics[l]
                                        : line.text + ' ' + beat.lyrics[l].split(' ').join('+');
                            }
                        }
                    }
                }
            }
        }
        for (let i = 0; i < lines.length; i++) {
            const line = lyrics.addElement('Line');
            line.addElement('Text').setCData(lines[i].text);
            line.addElement('Offset').innerText = lines[i].startBar.toString();
        }
    }
    writeTransposeNode(trackNode, track) {
        const transpose = trackNode.addElement('Transpose');
        const octaveTranspose = Math.floor(track.staves[0].displayTranspositionPitch / 12);
        const chromaticTranspose = track.staves[0].displayTranspositionPitch - octaveTranspose * 12;
        transpose.addElement('Chromatic').innerText = chromaticTranspose.toString();
        transpose.addElement('Octave').innerText = octaveTranspose.toString();
    }
    writeInstrumentSetNode(trackNode, track) {
        const instrumentSet = trackNode.addElement('InstrumentSet');
        const firstStaff = track.staves[0];
        instrumentSet.addElement('LineCount').innerText = firstStaff.standardNotationLineCount.toString();
        if (track.percussionArticulations.length > 0 || firstStaff.isPercussion) {
            const articulations = track.percussionArticulations.length > 0
                ? track.percussionArticulations
                : Array.from(PercussionMapper.instrumentArticulations.values());
            instrumentSet.addElement('Name').innerText = GpifWriter.DrumKitProgramInfo.instrumentSetName;
            instrumentSet.addElement('Type').innerText = GpifWriter.DrumKitProgramInfo.instrumentSetType;
            let currentElementName = '';
            let currentArticulations = new XmlNode();
            let counterPerType = new Map();
            const elements = instrumentSet.addElement('Elements');
            for (const articulation of articulations) {
                {
                    var currentElement = elements.addElement('Element');
                    let name = articulation.elementType;
                    if (counterPerType.has(name)) {
                        const counter = counterPerType.get(name);
                        name += ' ' + counter;
                        counterPerType.set(name, counter + 1);
                    }
                    else {
                        counterPerType.set(name, 1);
                    }
                    currentElementName = name;
                    currentElement.addElement('Name').innerText = name;
                    currentElement.addElement('Type').innerText = articulation.elementType;
                    currentArticulations = currentElement.addElement('Articulations');
                }
                const articulationNode = currentArticulations.addElement('Articulation');
                articulationNode.addElement('Name').innerText =
                    currentElementName + ' ' + currentArticulations.childNodes.length;
                articulationNode.addElement('StaffLine').innerText = articulation.staffLine.toString();
                articulationNode.addElement('Noteheads').innerText = [
                    this.mapMusicSymbol(articulation.noteHeadDefault),
                    this.mapMusicSymbol(articulation.noteHeadHalf),
                    this.mapMusicSymbol(articulation.noteHeadWhole)
                ].join(' ');
                switch (articulation.techniqueSymbolPlacement) {
                    case TextBaseline.Top:
                        articulationNode.addElement('TechniquePlacement').innerText = 'below';
                        break;
                    case TextBaseline.Middle:
                        articulationNode.addElement('TechniquePlacement').innerText = 'inside';
                        break;
                    case TextBaseline.Bottom:
                        articulationNode.addElement('TechniquePlacement').innerText = 'above';
                        break;
                }
                articulationNode.addElement('TechniqueSymbol').innerText = this.mapMusicSymbol(articulation.techniqueSymbol);
                articulationNode.addElement('InputMidiNumbers').innerText = '';
                articulationNode.addElement('OutputMidiNumber').innerText = articulation.outputMidiNumber.toString();
            }
        }
        else {
            const programInfo = GpifWriter.MidiProgramInfoLookup.has(track.playbackInfo.program)
                ? GpifWriter.MidiProgramInfoLookup.get(track.playbackInfo.program)
                : GpifWriter.MidiProgramInfoLookup.get(0);
            instrumentSet.addElement('Name').innerText = programInfo.instrumentSetName;
            instrumentSet.addElement('Type').innerText = programInfo.instrumentSetType;
            // Only the simple pitched element for normal instruments
            const elements = instrumentSet.addElement('Elements');
            const element = elements.addElement('Element');
            element.addElement('Pitched').innerText = 'Pitched';
            element.addElement('Type').innerText = 'pitched';
            element.addElement('SoundbankName').innerText = '';
            const articulations = element.addElement('Articulations');
            const articulation = articulations.addElement('Articulation');
            articulation.addElement('Name').innerText = '';
            articulation.addElement('StaffLine').innerText = '0';
            articulation.addElement('Noteheads').innerText = 'noteheadBlack noteheadHalf noteheadWhole';
            articulation.addElement('TechniquePlacement').innerText = 'outside';
            articulation.addElement('TechniqueSymbol').innerText = '';
            articulation.addElement('InputMidiNumbers').innerText = '';
            articulation.addElement('OutputRSESound').innerText = '';
            articulation.addElement('OutputMidiNumber').innerText = '0';
        }
    }
    mapMusicSymbol(symbol) {
        if (symbol === MusicFontSymbol.None) {
            return '';
        }
        let s = MusicFontSymbol[symbol];
        return s.substring(0, 1).toLowerCase() + s.substring(1);
    }
    writeMasterBarsNode(parent, score) {
        const masterBars = parent.addElement('MasterBars');
        for (const masterBar of score.masterBars) {
            this.writeMasterBarNode(masterBars, masterBar);
        }
    }
    writeMasterBarNode(parent, masterBar) {
        const masterBarNode = parent.addElement('MasterBar');
        const key = masterBarNode.addElement('Key');
        key.addElement('AccidentalCount').innerText = masterBar.keySignature.toString();
        key.addElement('Mode').innerText = KeySignatureType[masterBar.keySignatureType];
        key.addElement('Sharps').innerText = 'Sharps';
        masterBarNode.addElement('Time').innerText = `${masterBar.timeSignatureNumerator}/${masterBar.timeSignatureDenominator}`;
        let bars = [];
        for (const tracks of masterBar.score.tracks) {
            for (const staves of tracks.staves) {
                bars.push(staves.bars[masterBar.index].id.toString());
            }
        }
        masterBarNode.addElement('Bars').innerText = bars.join(' ');
        if (masterBar.isDoubleBar) {
            masterBarNode.addElement('DoubleBar');
        }
        if (masterBar.isSectionStart) {
            const section = masterBarNode.addElement('Section');
            section.addElement('Letter').setCData(masterBar.section.marker);
            section.addElement('Text').setCData(masterBar.section.text);
        }
        if (masterBar.isRepeatStart || masterBar.isRepeatEnd) {
            const repeat = masterBarNode.addElement('Repeat');
            repeat.attributes.set('start', masterBar.isRepeatStart ? 'true' : 'false');
            repeat.attributes.set('end', masterBar.isRepeatEnd ? 'true' : 'false');
            if (masterBar.isRepeatEnd) {
                repeat.attributes.set('count', masterBar.repeatCount.toString());
            }
        }
        if (masterBar.alternateEndings > 0) {
            let remainingBits = masterBar.alternateEndings;
            const alternateEndings = [];
            let bit = 0;
            while (remainingBits > 0) {
                if (((remainingBits >> bit) & 0x01) == 0x01) {
                    alternateEndings.push(bit + 1);
                    // clear bit
                    remainingBits &= ~(1 << bit);
                }
                bit++;
            }
            masterBarNode.addElement('AlternateEndings').innerText = alternateEndings.join(' ');
        }
        if (masterBar.tripletFeel !== TripletFeel.NoTripletFeel) {
            masterBarNode.addElement('TripletFeel').innerText = TripletFeel[masterBar.tripletFeel];
        }
        this.writeFermatas(masterBarNode, masterBar);
    }
    writeFermatas(parent, masterBar) {
        const fermataCount = masterBar.fermata.size;
        if (fermataCount === 0) {
            return;
        }
        if (fermataCount > 0) {
            const fermatas = parent.addElement('Fermatas');
            for (const [offset, fermata] of masterBar.fermata) {
                this.writeFermata(fermatas, offset, fermata);
            }
        }
    }
    writeFermata(parent, offset, fermata) {
        let numerator = -1;
        let denominator = 1;
        if (offset > 0) {
            while (denominator < 10) {
                // Offset = (numerator / denominator) * QuarterTime
                // (Offset / QuarterTime) * denominator = numerator
                numerator = (offset / MidiUtils.QuarterTime) * denominator;
                // found a full digit match
                if (numerator === Math.floor(numerator)) {
                    break;
                }
                numerator = -1;
                denominator++;
            }
        }
        else {
            numerator = 0;
            denominator = 1;
        }
        if (numerator === -1) {
            // No split found
            return;
        }
        const fermataNode = parent.addElement('Fermata');
        fermataNode.addElement('Type').innerText = FermataType[fermata.type];
        fermataNode.addElement('Length').innerText = fermata.length.toString();
        fermataNode.addElement('Offset').innerText = `${numerator}/${denominator}`;
    }
    writeBarNode(parent, bar) {
        const barNode = parent.addElement('Bar');
        barNode.attributes.set('id', bar.id.toString());
        barNode.addElement('Voices').innerText = bar.voices.map(v => (v.isEmpty ? '-1' : v.id.toString())).join(' ');
        barNode.addElement('Clef').innerText = Clef[bar.clef];
        if (bar.clefOttava !== Ottavia.Regular) {
            barNode.addElement('Ottavia').innerText = Ottavia[bar.clefOttava].substr(1);
        }
        if (bar.simileMark !== SimileMark.None) {
            barNode.addElement('SimileMark').innerText = SimileMark[bar.simileMark];
        }
    }
    writeVoiceNode(parent, voice) {
        if (voice.isEmpty) {
            return;
        }
        const voiceNode = parent.addElement('Voice');
        voiceNode.attributes.set('id', voice.id.toString());
        voiceNode.addElement('Beats').innerText = voice.beats.map(v => v.id).join(' ');
    }
}
GpifWriter.MidiProgramInfoLookup = new Map([
    [0, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
    [1, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
    [2, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
    [3, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Acoustic Piano')],
    [4, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
    [5, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Piano')],
    [6, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harpsichord')],
    [7, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harpsichord')],
    [8, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Celesta')],
    [9, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
    [10, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
    [11, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
    [12, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
    [13, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
    [14, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
    [15, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
    [16, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [17, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [18, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [19, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [20, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [21, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [22, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
    [23, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Electric Organ')],
    [24, new GpifMidiProgramInfo(GpifIconIds.ClassicalGuitar, 'Nylon Guitar')],
    [25, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Steel Guitar')],
    [26, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
    [27, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
    [28, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
    [29, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Electric Guitar')],
    [30, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
    [31, new GpifMidiProgramInfo(GpifIconIds.SteelGuitar, 'Electric Guitar')],
    [32, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Acoustic Bass')],
    [33, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
    [34, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
    [35, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Acoustic Bass')],
    [36, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
    [37, new GpifMidiProgramInfo(GpifIconIds.Bass, 'Electric Bass')],
    [38, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Synth Bass')],
    [39, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Synth Bass')],
    [40, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [41, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Viola')],
    [42, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Cello')],
    [43, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Contrabass')],
    [44, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [45, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [46, new GpifMidiProgramInfo(GpifIconIds.Piano, 'Harp')],
    [47, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Timpani')],
    [48, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [49, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [50, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [51, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [52, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
    [53, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
    [54, new GpifMidiProgramInfo(GpifIconIds.Vocal, 'Voice')],
    [55, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [56, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
    [57, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trombone')],
    [58, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Tuba')],
    [59, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
    [60, new GpifMidiProgramInfo(GpifIconIds.Brass, 'French Horn')],
    [61, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
    [62, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
    [63, new GpifMidiProgramInfo(GpifIconIds.Brass, 'Trumpet')],
    [64, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
    [65, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
    [66, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
    [67, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Saxophone')],
    [68, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Oboe')],
    [69, new GpifMidiProgramInfo(GpifIconIds.Reed, 'English Horn')],
    [70, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Bassoon')],
    [71, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Clarinet')],
    [72, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Piccolo')],
    [73, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
    [74, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
    [75, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
    [76, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
    [77, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
    [78, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Recorder')],
    [79, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
    [80, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [81, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [82, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [83, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [84, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [85, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [86, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [87, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Lead Synthesizer')],
    [88, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [89, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [90, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [91, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [92, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [93, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [94, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [95, new GpifMidiProgramInfo(GpifIconIds.Synth, 'Pad Synthesizer')],
    [96, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
    [97, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
    [98, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
    [99, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Pad Synthesizer')],
    [100, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
    [101, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
    [102, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Lead Synthesizer')],
    [103, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Trumpet')],
    [104, new GpifMidiProgramInfo(GpifIconIds.ElectricGuitar, 'Banjo')],
    [105, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
    [106, new GpifMidiProgramInfo(GpifIconIds.Ukulele, 'Ukulele')],
    [107, new GpifMidiProgramInfo(GpifIconIds.Banjo, 'Banjo')],
    [108, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
    [109, new GpifMidiProgramInfo(GpifIconIds.Reed, 'Bassoon')],
    [110, new GpifMidiProgramInfo(GpifIconIds.Strings, 'Violin')],
    [111, new GpifMidiProgramInfo(GpifIconIds.Woodwind, 'Flute')],
    [112, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Xylophone')],
    [113, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Celesta')],
    [114, new GpifMidiProgramInfo(GpifIconIds.PitchedIdiophone, 'Vibraphone')],
    [115, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Xylophone')],
    [116, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
    [117, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
    [118, new GpifMidiProgramInfo(GpifIconIds.Membraphone, 'Xylophone')],
    [119, new GpifMidiProgramInfo(GpifIconIds.Idiophone, 'Celesta')],
    [120, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Steel Guitar')],
    [121, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [122, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [123, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [124, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [125, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [126, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Recorder')],
    [127, new GpifMidiProgramInfo(GpifIconIds.Fx, 'Timpani')]
]);
GpifWriter.DrumKitProgramInfo = new GpifMidiProgramInfo(GpifIconIds.PercussionKit, 'Drums', 'drumKit');

/**
 * CRC-32 with reversed data and unreversed output
 */
class Crc32 {
    /**
     * Initialise a default instance of Crc32.
     */
    constructor() {
        /**
         * The CRC data checksum so far.
         */
        this._checkValue = Crc32.CrcInit;
        this.reset();
    }
    static buildCrc32Lookup() {
        const poly = 0xedb88320;
        const lookup = new Uint32Array(256);
        for (let i = 0; i < lookup.length; i++) {
            let crc = i;
            for (let bit = 0; bit < 8; bit++) {
                crc = (crc & 1) === 1 ? (crc >>> 1) ^ poly : crc >>> 1;
            }
            lookup[i] = crc;
        }
        return lookup;
    }
    /**
     * Returns the CRC data checksum computed so far.
     */
    get value() {
        return ~this._checkValue;
    }
    /**
     * Update CRC data checksum based on a portion of a block of data
     * @param data The array containing the data to add
     * @param offset Range start for data (inclusive)
     * @param count The number of bytes to checksum starting from offset
     */
    update(data, offset, count) {
        for (let i = 0; i < count; i++) {
            this._checkValue = Crc32.Crc32Lookup[(this._checkValue ^ data[offset + i]) & 0xff] ^ (this._checkValue >>> 8);
        }
    }
    /**
     * Resets the CRC data checksum as if no update was ever called.
     */
    reset() {
        this._checkValue = Crc32.CrcInit;
    }
}
Crc32.Crc32Lookup = Crc32.buildCrc32Lookup();
Crc32.CrcInit = 0xFFFFFFFF;

// This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
// https://github.com/icsharpcode/SharpZipLib
/*
 * Copyright Â© 2000-2018 SharpZipLib Contributors
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
/**
 * This class contains constants used for deflation.
 */
class DeflaterConstants {
}
DeflaterConstants.MAX_WBITS = 15;
DeflaterConstants.WSIZE = 1 << DeflaterConstants.MAX_WBITS;
DeflaterConstants.WMASK = DeflaterConstants.WSIZE - 1;
DeflaterConstants.MIN_MATCH = 3;
DeflaterConstants.MAX_MATCH = 258;
DeflaterConstants.DEFAULT_MEM_LEVEL = 8;
DeflaterConstants.PENDING_BUF_SIZE = 1 << (DeflaterConstants.DEFAULT_MEM_LEVEL + 8);
DeflaterConstants.HASH_BITS = DeflaterConstants.DEFAULT_MEM_LEVEL + 7;
DeflaterConstants.HASH_SIZE = 1 << DeflaterConstants.HASH_BITS;
DeflaterConstants.HASH_SHIFT = (DeflaterConstants.HASH_BITS + DeflaterConstants.MIN_MATCH - 1) / DeflaterConstants.MIN_MATCH;
DeflaterConstants.HASH_MASK = DeflaterConstants.HASH_SIZE - 1;
DeflaterConstants.MIN_LOOKAHEAD = DeflaterConstants.MAX_MATCH + DeflaterConstants.MIN_MATCH + 1;
DeflaterConstants.MAX_DIST = DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD;

// This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
class Tree {
    constructor(dh, elems, minCodes, maxLength) {
        this.length = null;
        this.numCodes = 0;
        this.codes = null;
        this.huffman = dh;
        this.minNumCodes = minCodes;
        this.maxLength = maxLength;
        this.freqs = new Int16Array(elems);
        this.bitLengthCounts = new Int32Array(maxLength);
    }
    /**
     * Resets the internal state of the tree
     */
    reset() {
        for (let i = 0; i < this.freqs.length; i++) {
            this.freqs[i] = 0;
        }
        this.codes = null;
        this.length = null;
    }
    buildTree() {
        let numSymbols = this.freqs.length;
        /* heap is a priority queue, sorted by frequency, least frequent
         * nodes first.  The heap is a binary tree, with the property, that
         * the parent node is smaller than both child nodes.  This assures
         * that the smallest node is the first parent.
         *
         * The binary tree is encoded in an array:  0 is root node and
         * the nodes 2*n+1, 2*n+2 are the child nodes of node n.
         */
        let heap = new Int32Array(numSymbols);
        let heapLen = 0;
        let maxCode = 0;
        for (let n = 0; n < numSymbols; n++) {
            let freq = this.freqs[n];
            if (freq !== 0) {
                // Insert n into heap
                let pos = heapLen++;
                while (true) {
                    if (pos > 0) {
                        let ppos = Math.floor((pos - 1) / 2);
                        if (this.freqs[heap[ppos]] > freq) {
                            heap[pos] = heap[ppos];
                            pos = ppos;
                        }
                        else {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
                heap[pos] = n;
                maxCode = n;
            }
        }
        /* We could encode a single literal with 0 bits but then we
         * don't see the literals.  Therefore we force at least two
         * literals to avoid this case.  We don't care about order in
         * this case, both literals get a 1 bit code.
         */
        while (heapLen < 2) {
            let node = maxCode < 2 ? ++maxCode : 0;
            heap[heapLen++] = node;
        }
        this.numCodes = Math.max(maxCode + 1, this.minNumCodes);
        let numLeafs = heapLen;
        let childs = new Int32Array(4 * heapLen - 2);
        let values = new Int32Array(2 * heapLen - 1);
        let numNodes = numLeafs;
        for (let i = 0; i < heapLen; i++) {
            let node = heap[i];
            childs[2 * i] = node;
            childs[2 * i + 1] = -1;
            values[i] = this.freqs[node] << 8;
            heap[i] = i;
        }
        /* Construct the Huffman tree by repeatedly combining the least two
         * frequent nodes.
         */
        do {
            let first = heap[0];
            let last = heap[--heapLen];
            // Propagate the hole to the leafs of the heap
            let ppos = 0;
            let path = 1;
            while (path < heapLen) {
                if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]]) {
                    path++;
                }
                heap[ppos] = heap[path];
                ppos = path;
                path = path * 2 + 1;
            }
            /* Now propagate the last element down along path.  Normally
             * it shouldn't go too deep.
             */
            let lastVal = values[last];
            while (true) {
                path = ppos;
                if (ppos > 0) {
                    ppos = Math.floor((path - 1) / 2);
                    if (values[heap[ppos]] > lastVal) {
                        heap[path] = heap[ppos];
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            heap[path] = last;
            let second = heap[0];
            // Create a new node father of first and second
            last = numNodes++;
            childs[2 * last] = first;
            childs[2 * last + 1] = second;
            let mindepth = Math.min(values[first] & 0xff, values[second] & 0xff);
            lastVal = values[first] + values[second] - mindepth + 1;
            values[last] = lastVal;
            // Again, propagate the hole to the leafs
            ppos = 0;
            path = 1;
            while (path < heapLen) {
                if (path + 1 < heapLen && values[heap[path]] > values[heap[path + 1]]) {
                    path++;
                }
                heap[ppos] = heap[path];
                ppos = path;
                path = ppos * 2 + 1;
            }
            // Now propagate the new element down along path
            while (true) {
                path = ppos;
                if (path > 0) {
                    ppos = Math.floor((path - 1) / 2);
                    if (values[heap[ppos]] > lastVal) {
                        heap[path] = heap[ppos];
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            heap[path] = last;
        } while (heapLen > 1);
        this.buildLength(childs);
    }
    buildLength(childs) {
        this.length = new Uint8Array(this.freqs.length);
        let numNodes = Math.floor(childs.length / 2);
        let numLeafs = Math.floor((numNodes + 1) / 2);
        let overflow = 0;
        for (let i = 0; i < this.maxLength; i++) {
            this.bitLengthCounts[i] = 0;
        }
        // First calculate optimal bit lengths
        let lengths = new Int32Array(numNodes);
        lengths[numNodes - 1] = 0;
        for (let i = numNodes - 1; i >= 0; i--) {
            if (childs[2 * i + 1] != -1) {
                let bitLength = lengths[i] + 1;
                if (bitLength > this.maxLength) {
                    bitLength = this.maxLength;
                    overflow++;
                }
                lengths[childs[2 * i]] = bitLength;
                lengths[childs[2 * i + 1]] = bitLength;
            }
            else {
                // A leaf node
                let bitLength = lengths[i];
                this.bitLengthCounts[bitLength - 1]++;
                this.length[childs[2 * i]] = lengths[i];
            }
        }
        if (overflow == 0) {
            return;
        }
        let incrBitLen = this.maxLength - 1;
        do {
            // Find the first bit length which could increase:
            while (this.bitLengthCounts[--incrBitLen] == 0) { }
            // Move this node one down and remove a corresponding
            // number of overflow nodes.
            do {
                this.bitLengthCounts[incrBitLen]--;
                this.bitLengthCounts[++incrBitLen]++;
                overflow -= 1 << (this.maxLength - 1 - incrBitLen);
            } while (overflow > 0 && incrBitLen < this.maxLength - 1);
        } while (overflow > 0);
        /* We may have overshot above.  Move some nodes from maxLength to
         * maxLength-1 in that case.
         */
        this.bitLengthCounts[this.maxLength - 1] += overflow;
        this.bitLengthCounts[this.maxLength - 2] -= overflow;
        /* Now recompute all bit lengths, scanning in increasing
         * frequency.  It is simpler to reconstruct all lengths instead of
         * fixing only the wrong ones. This idea is taken from 'ar'
         * written by Haruhiko Okumura.
         *
         * The nodes were inserted with decreasing frequency into the childs
         * array.
         */
        let nodePtr = 2 * numLeafs;
        for (let bits = this.maxLength; bits != 0; bits--) {
            let n = this.bitLengthCounts[bits - 1];
            while (n > 0) {
                let childPtr = 2 * childs[nodePtr++];
                if (childs[childPtr + 1] == -1) {
                    // We found another leaf
                    this.length[childs[childPtr]] = bits;
                    n--;
                }
            }
        }
    }
    /**
     * Get encoded length
     * @returns Encoded length, the sum of frequencies * lengths
     */
    getEncodedLength() {
        let len = 0;
        for (let i = 0; i < this.freqs.length; i++) {
            len += this.freqs[i] * this.length[i];
        }
        return len;
    }
    /**
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     * @param blTree
     */
    calcBLFreq(blTree) {
        let max_count; /* max repeat count */
        let min_count; /* min repeat count */
        let count; /* repeat count of the current code */
        let curlen = -1; /* length of current code */
        let i = 0;
        while (i < this.numCodes) {
            count = 1;
            let nextlen = this.length[i];
            if (nextlen == 0) {
                max_count = 138;
                min_count = 3;
            }
            else {
                max_count = 6;
                min_count = 3;
                if (curlen != nextlen) {
                    blTree.freqs[nextlen]++;
                    count = 0;
                }
            }
            curlen = nextlen;
            i++;
            while (i < this.numCodes && curlen == this.length[i]) {
                i++;
                if (++count >= max_count) {
                    break;
                }
            }
            if (count < min_count) {
                blTree.freqs[curlen] += count;
            }
            else if (curlen != 0) {
                blTree.freqs[Tree.Repeat3To6]++;
            }
            else if (count <= 10) {
                blTree.freqs[Tree.Repeat3To10]++;
            }
            else {
                blTree.freqs[Tree.Repeat11To138]++;
            }
        }
    }
    /**
     * Set static codes and length
     * @param staticCodes new codes
     * @param staticLengths length for new codes
     */
    setStaticCodes(staticCodes, staticLengths) {
        this.codes = staticCodes;
        this.length = staticLengths;
    }
    /**
     * Build dynamic codes and lengths
     */
    buildCodes() {
        let nextCode = new Int32Array(this.maxLength);
        let code = 0;
        this.codes = new Int16Array(this.freqs.length);
        for (let bits = 0; bits < this.maxLength; bits++) {
            nextCode[bits] = code;
            code += this.bitLengthCounts[bits] << (15 - bits);
        }
        for (let i = 0; i < this.numCodes; i++) {
            let bits = this.length[i];
            if (bits > 0) {
                this.codes[i] = DeflaterHuffman.bitReverse(nextCode[bits - 1]);
                nextCode[bits - 1] += 1 << (16 - bits);
            }
        }
    }
    /**
     * Write tree values
     * @param blTree Tree to write
     */
    writeTree(blTree) {
        let maxCount; // max repeat count
        let minCount; // min repeat count
        let count; // repeat count of the current code
        let curlen = -1; // length of current code
        let i = 0;
        while (i < this.numCodes) {
            count = 1;
            let nextlen = this.length[i];
            if (nextlen == 0) {
                maxCount = 138;
                minCount = 3;
            }
            else {
                maxCount = 6;
                minCount = 3;
                if (curlen != nextlen) {
                    blTree.writeSymbol(nextlen);
                    count = 0;
                }
            }
            curlen = nextlen;
            i++;
            while (i < this.numCodes && curlen == this.length[i]) {
                i++;
                if (++count >= maxCount) {
                    break;
                }
            }
            if (count < minCount) {
                while (count-- > 0) {
                    blTree.writeSymbol(curlen);
                }
            }
            else if (curlen != 0) {
                blTree.writeSymbol(Tree.Repeat3To6);
                this.huffman.pending.writeBits(count - 3, 2);
            }
            else if (count <= 10) {
                blTree.writeSymbol(Tree.Repeat3To10);
                this.huffman.pending.writeBits(count - 3, 3);
            }
            else {
                blTree.writeSymbol(Tree.Repeat11To138);
                this.huffman.pending.writeBits(count - 11, 7);
            }
        }
    }
    writeSymbol(code) {
        this.huffman.pending.writeBits(this.codes[code] & 0xffff, this.length[code]);
    }
}
// repeat previous bit length 3-6 times (2 bits of repeat count)
Tree.Repeat3To6 = 16;
// repeat a zero length 3-10 times  (3 bits of repeat count)
Tree.Repeat3To10 = 17;
// repeat a zero length 11-138 times  (7 bits of repeat count)
Tree.Repeat11To138 = 18;
class DeflaterHuffman {
    constructor(pending) {
        this.last_lit = 0;
        this.extra_bits = 0;
        this.pending = pending;
        this.literalTree = new Tree(this, DeflaterHuffman.LITERAL_NUM, 257, 15);
        this.distTree = new Tree(this, DeflaterHuffman.DIST_NUM, 1, 15);
        this.blTree = new Tree(this, DeflaterHuffman.BITLEN_NUM, 4, 7);
        this.d_buf = new Int16Array(DeflaterHuffman.BUFSIZE);
        this.l_buf = new Uint8Array(DeflaterHuffman.BUFSIZE);
    }
    static staticInit() {
        // See RFC 1951 3.2.6
        // Literal codes
        let i = 0;
        while (i < 144) {
            DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x030 + i) << 8);
            DeflaterHuffman.staticLLength[i++] = 8;
        }
        while (i < 256) {
            DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x190 - 144 + i) << 7);
            DeflaterHuffman.staticLLength[i++] = 9;
        }
        while (i < 280) {
            DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x000 - 256 + i) << 9);
            DeflaterHuffman.staticLLength[i++] = 7;
        }
        while (i < DeflaterHuffman.LITERAL_NUM) {
            DeflaterHuffman.staticLCodes[i] = DeflaterHuffman.bitReverse((0x0c0 - 280 + i) << 8);
            DeflaterHuffman.staticLLength[i++] = 8;
        }
        // Distance codes
        for (i = 0; i < DeflaterHuffman.DIST_NUM; i++) {
            DeflaterHuffman.staticDCodes[i] = DeflaterHuffman.bitReverse(i << 11);
            DeflaterHuffman.staticDLength[i] = 5;
        }
    }
    /**
     * Reverse the bits of a 16 bit value.
     * @param toReverse Value to reverse bits
     * @returns Value with bits reversed
     */
    static bitReverse(toReverse) {
        return ((DeflaterHuffman.bit4Reverse[toReverse & 0xf] << 12) |
            (DeflaterHuffman.bit4Reverse[(toReverse >> 4) & 0xf] << 8) |
            (DeflaterHuffman.bit4Reverse[(toReverse >> 8) & 0xf] << 4) |
            DeflaterHuffman.bit4Reverse[toReverse >> 12]);
    }
    isFull() {
        return this.last_lit >= DeflaterHuffman.BUFSIZE;
    }
    reset() {
        this.last_lit = 0;
        this.extra_bits = 0;
        this.literalTree.reset();
        this.distTree.reset();
        this.blTree.reset();
    }
    flushStoredBlock(stored, storedOffset, storedLength, lastBlock) {
        this.pending.writeBits((DeflaterHuffman.STORED_BLOCK << 1) + (lastBlock ? 1 : 0), 3);
        this.pending.alignToByte();
        this.pending.writeShort(storedLength);
        this.pending.writeShort(~storedLength);
        this.pending.writeBlock(stored, storedOffset, storedLength);
        this.reset();
    }
    flushBlock(stored, storedOffset, storedLength, lastBlock) {
        this.literalTree.freqs[DeflaterHuffman.EOF_SYMBOL]++;
        // Build trees
        this.literalTree.buildTree();
        this.distTree.buildTree();
        // Calculate bitlen frequency
        this.literalTree.calcBLFreq(this.blTree);
        this.distTree.calcBLFreq(this.blTree);
        // Build bitlen tree
        this.blTree.buildTree();
        let blTreeCodes = 4;
        for (let i = 18; i > blTreeCodes; i--) {
            if (this.blTree.length[DeflaterHuffman.BL_ORDER[i]] > 0) {
                blTreeCodes = i + 1;
            }
        }
        let opt_len = 14 +
            blTreeCodes * 3 +
            this.blTree.getEncodedLength() +
            this.literalTree.getEncodedLength() +
            this.distTree.getEncodedLength() +
            this.extra_bits;
        let static_len = this.extra_bits;
        for (let i = 0; i < DeflaterHuffman.LITERAL_NUM; i++) {
            static_len += this.literalTree.freqs[i] * DeflaterHuffman.staticLLength[i];
        }
        for (let i = 0; i < DeflaterHuffman.DIST_NUM; i++) {
            static_len += this.distTree.freqs[i] * DeflaterHuffman.staticDLength[i];
        }
        if (opt_len >= static_len) {
            // Force static trees
            opt_len = static_len;
        }
        if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {
            // Store Block
            this.flushStoredBlock(stored, storedOffset, storedLength, lastBlock);
        }
        else if (opt_len == static_len) {
            // Encode with static tree
            this.pending.writeBits((DeflaterHuffman.STATIC_TREES << 1) + (lastBlock ? 1 : 0), 3);
            this.literalTree.setStaticCodes(DeflaterHuffman.staticLCodes, DeflaterHuffman.staticLLength);
            this.distTree.setStaticCodes(DeflaterHuffman.staticDCodes, DeflaterHuffman.staticDLength);
            this.compressBlock();
            this.reset();
        }
        else {
            // Encode with dynamic tree
            this.pending.writeBits((DeflaterHuffman.DYN_TREES << 1) + (lastBlock ? 1 : 0), 3);
            this.sendAllTrees(blTreeCodes);
            this.compressBlock();
            this.reset();
        }
    }
    /**
     * Write all trees to pending buffer
     * @param blTreeCodes The number/rank of treecodes to send.
     */
    sendAllTrees(blTreeCodes) {
        this.blTree.buildCodes();
        this.literalTree.buildCodes();
        this.distTree.buildCodes();
        this.pending.writeBits(this.literalTree.numCodes - 257, 5);
        this.pending.writeBits(this.distTree.numCodes - 1, 5);
        this.pending.writeBits(blTreeCodes - 4, 4);
        for (let rank = 0; rank < blTreeCodes; rank++) {
            this.pending.writeBits(this.blTree.length[DeflaterHuffman.BL_ORDER[rank]], 3);
        }
        this.literalTree.writeTree(this.blTree);
        this.distTree.writeTree(this.blTree);
    }
    /**
     * Compress current buffer writing data to pending buffer
     */
    compressBlock() {
        for (let i = 0; i < this.last_lit; i++) {
            let litlen = this.l_buf[i] & 0xff;
            let dist = this.d_buf[i];
            if (dist-- != 0) {
                let lc = DeflaterHuffman.Lcode(litlen);
                this.literalTree.writeSymbol(lc);
                let bits = Math.floor((lc - 261) / 4);
                if (bits > 0 && bits <= 5) {
                    this.pending.writeBits(litlen & ((1 << bits) - 1), bits);
                }
                let dc = DeflaterHuffman.Dcode(dist);
                this.distTree.writeSymbol(dc);
                bits = Math.floor(dc / 2) - 1;
                if (bits > 0) {
                    this.pending.writeBits(dist & ((1 << bits) - 1), bits);
                }
            }
            else {
                this.literalTree.writeSymbol(litlen);
            }
        }
        this.literalTree.writeSymbol(DeflaterHuffman.EOF_SYMBOL);
    }
    /**
     * Add distance code and length to literal and distance trees
     * @param distance Distance code
     * @param length Length
     * @returns Value indicating if internal buffer is full
     */
    tallyDist(distance, length) {
        this.d_buf[this.last_lit] = distance;
        this.l_buf[this.last_lit++] = length - 3;
        let lc = DeflaterHuffman.Lcode(length - 3);
        this.literalTree.freqs[lc]++;
        if (lc >= 265 && lc < 285) {
            this.extra_bits += Math.floor((lc - 261) / 4);
        }
        let dc = DeflaterHuffman.Dcode(distance - 1);
        this.distTree.freqs[dc]++;
        if (dc >= 4) {
            this.extra_bits += Math.floor(dc / 2) - 1;
        }
        return this.isFull();
    }
    /**
     * Add literal to buffer
     * @param literal Literal value to add to buffer
     * @returns Value indicating internal buffer is full
     */
    tallyLit(literal) {
        this.d_buf[this.last_lit] = 0;
        this.l_buf[this.last_lit++] = literal;
        this.literalTree.freqs[literal]++;
        return this.isFull();
    }
    static Lcode(length) {
        if (length == 255) {
            return 285;
        }
        let code = 257;
        while (length >= 8) {
            code += 4;
            length = length >> 1;
        }
        return code + length;
    }
    static Dcode(distance) {
        let code = 0;
        while (distance >= 4) {
            code += 2;
            distance = distance >> 1;
        }
        return code + distance;
    }
}
DeflaterHuffman.BUFSIZE = 1 << (DeflaterConstants.DEFAULT_MEM_LEVEL + 6);
DeflaterHuffman.LITERAL_NUM = 286;
/**
 * Written to Zip file to identify a stored block
 */
DeflaterHuffman.STORED_BLOCK = 0;
/**
 * Identifies static tree in Zip file
 */
DeflaterHuffman.STATIC_TREES = 1;
/**
 * Identifies dynamic tree in Zip file
 */
DeflaterHuffman.DYN_TREES = 2;
// Number of distance codes
DeflaterHuffman.DIST_NUM = 30;
DeflaterHuffman.staticLCodes = new Int16Array(DeflaterHuffman.LITERAL_NUM);
DeflaterHuffman.staticLLength = new Uint8Array(DeflaterHuffman.LITERAL_NUM);
DeflaterHuffman.staticDCodes = new Int16Array(DeflaterHuffman.DIST_NUM);
DeflaterHuffman.staticDLength = new Uint8Array(DeflaterHuffman.DIST_NUM);
// The lengths of the bit length codes are sent in order of decreasing
// probability, to avoid transmitting the lengths for unused bit length codes.
DeflaterHuffman.BL_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
DeflaterHuffman.bit4Reverse = new Uint8Array([
    0,
    8,
    4,
    12,
    2,
    10,
    6,
    14,
    1,
    9,
    5,
    13,
    3,
    11,
    7,
    15
]);
// Number of codes used to transfer bit lengths
DeflaterHuffman.BITLEN_NUM = 19;
DeflaterHuffman.EOF_SYMBOL = 256;
DeflaterHuffman.staticInit();

// This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
/**
 * Low level compression engine for deflate algorithm which uses a 32K sliding window
 * with secondary compression from Huffman/Shannon-Fano codes.
 */
class DeflaterEngine {
    /**
     * Construct instance with pending buffer
     * @param pending Pending buffer to use
     * @param noAdlerCalculation Pending buffer to use
     */
    constructor(pending) {
        this.maxChain = 128;
        this.niceLength = 128;
        this.goodLength = 8;
        /**
         * Hash index of string to be inserted
         */
        this.insertHashIndex = 0;
        /**
         * lookahead is the number of characters starting at strstart in
         * window that are valid.
         * So window[strstart] until window[strstart+lookahead-1] are valid
         * characters.
         */
        this.lookahead = 0;
        /**
         * The input data for compression.
         */
        this.inputBuf = null;
        /**
         * The offset into inputBuf, where input data starts.
         */
        this.inputOff = 0;
        /**
         * The end offset of the input data.
         */
        this.inputEnd = 0;
        /**
         * Set if previous match exists
         */
        this.prevAvailable = false;
        this.matchStart = 0;
        /**
         * Length of best match
         */
        this.matchLen = 0;
        this.pending = pending;
        this.huffman = new DeflaterHuffman(pending);
        this.inputCrc = new Crc32();
        this.window = new Uint8Array(2 * DeflaterConstants.WSIZE);
        this.head = new Int16Array(DeflaterConstants.HASH_SIZE);
        this.prev = new Int16Array(DeflaterConstants.WSIZE);
        // We start at index 1, to avoid an implementation deficiency, that
        // we cannot build a repeat pattern at index 0.
        this.blockStart = 1;
        this.strstart = 1;
    }
    /**
     * Reset internal state
     */
    reset() {
        this.huffman.reset();
        this.inputCrc.reset();
        this.blockStart = 1;
        this.strstart = 1;
        this.lookahead = 0;
        this.prevAvailable = false;
        this.matchLen = DeflaterConstants.MIN_MATCH - 1;
        for (let i = 0; i < DeflaterConstants.HASH_SIZE; i++) {
            this.head[i] = 0;
        }
        for (let i = 0; i < DeflaterConstants.WSIZE; i++) {
            this.prev[i] = 0;
        }
    }
    updateHash() {
        this.insertHashIndex = (this.window[this.strstart] << DeflaterConstants.HASH_SHIFT) ^ this.window[this.strstart + 1];
    }
    /**
     * Determines if more input is needed.
     * @returns Return true if input is needed via setInput
     */
    needsInput() {
        return (this.inputEnd == this.inputOff);
    }
    /**
     * Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
     * returns true
     * @param buffer The buffer containing input data.
     * @param offset The offset of the first byte of data.
     * @param count The number of bytes of data to use as input.
     */
    setInput(buffer, offset, count) {
        let end = offset + count;
        this.inputBuf = buffer;
        this.inputOff = offset;
        this.inputEnd = end;
    }
    /**
     * Deflate drives actual compression of data
     * @param flush True to flush input buffers
     * @param finish Finish deflation with the current input.
     * @returns Returns true if progress has been made.
     */
    deflate(flush, finish) {
        let progress;
        do {
            this.fillWindow();
            let canFlush = flush && (this.inputOff == this.inputEnd);
            progress = this.deflateSlow(canFlush, finish);
        } while (this.pending.isFlushed && progress); // repeat while we have no pending output and progress was made
        return progress;
    }
    deflateSlow(flush, finish) {
        if (this.lookahead < DeflaterConstants.MIN_LOOKAHEAD && !flush) {
            return false;
        }
        while (this.lookahead >= DeflaterConstants.MIN_LOOKAHEAD || flush) {
            if (this.lookahead == 0) {
                if (this.prevAvailable) {
                    this.huffman.tallyLit(this.window[this.strstart - 1] & 0xff);
                }
                this.prevAvailable = false;
                // We are flushing everything
                this.huffman.flushBlock(this.window, this.blockStart, this.strstart - this.blockStart, finish);
                this.blockStart = this.strstart;
                return false;
            }
            if (this.strstart >= 2 * DeflaterConstants.WSIZE - DeflaterConstants.MIN_LOOKAHEAD) {
                /* slide window, as FindLongestMatch needs this.
                 * This should only happen when flushing and the window
                 * is almost full.
                 */
                this.slideWindow();
            }
            let prevMatch = this.matchStart;
            let prevLen = this.matchLen;
            if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
                let hashHead = this.insertString();
                if (hashHead != 0 &&
                    this.strstart - hashHead <= DeflaterConstants.MAX_DIST &&
                    this.findLongestMatch(hashHead)) {
                    // longestMatch sets matchStart and matchLen
                    // Discard match if too small and too far away
                    if (this.matchLen == DeflaterConstants.MIN_MATCH && this.strstart - this.matchStart > DeflaterEngine.TooFar) {
                        this.matchLen = DeflaterConstants.MIN_MATCH - 1;
                    }
                }
            }
            // previous match was better
            if ((prevLen >= DeflaterConstants.MIN_MATCH) && (this.matchLen <= prevLen)) {
                this.huffman.tallyDist(this.strstart - 1 - prevMatch, prevLen);
                prevLen -= 2;
                do {
                    this.strstart++;
                    this.lookahead--;
                    if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
                        this.insertString();
                    }
                } while (--prevLen > 0);
                this.strstart++;
                this.lookahead--;
                this.prevAvailable = false;
                this.matchLen = DeflaterConstants.MIN_MATCH - 1;
            }
            else {
                if (this.prevAvailable) {
                    this.huffman.tallyLit(this.window[this.strstart - 1] & 0xff);
                }
                this.prevAvailable = true;
                this.strstart++;
                this.lookahead--;
            }
            if (this.huffman.isFull()) {
                let len = this.strstart - this.blockStart;
                if (this.prevAvailable) {
                    len--;
                }
                let lastBlock = (finish && (this.lookahead == 0) && !this.prevAvailable);
                this.huffman.flushBlock(this.window, this.blockStart, len, lastBlock);
                this.blockStart += len;
                return !lastBlock;
            }
        }
        return true;
    }
    /**
     * Find the best (longest) string in the window matching the
     * string starting at strstart.
     * @param curMatch
     * @returns True if a match greater than the minimum length is found
     */
    findLongestMatch(curMatch) {
        let match;
        let scan = this.strstart;
        // scanMax is the highest position that we can look at
        let scanMax = scan + Math.min(DeflaterConstants.MAX_MATCH, this.lookahead) - 1;
        let limit = Math.max(scan - DeflaterConstants.MAX_DIST, 0);
        let window = this.window;
        let prev = this.prev;
        let chainLength = this.maxChain;
        let niceLength = Math.min(this.niceLength, this.lookahead);
        this.matchLen = Math.max(this.matchLen, DeflaterConstants.MIN_MATCH - 1);
        if (scan + this.matchLen > scanMax) {
            return false;
        }
        let scan_end1 = window[scan + this.matchLen - 1];
        let scan_end = window[scan + this.matchLen];
        // Do not waste too much time if we already have a good match:
        if (this.matchLen >= this.goodLength) {
            chainLength >>= 2;
        }
        do {
            match = curMatch;
            scan = this.strstart;
            if (window[match + this.matchLen] != scan_end
                || window[match + this.matchLen - 1] != scan_end1
                || window[match] != window[scan]
                || window[++match] != window[++scan]) {
                continue;
            }
            // scan is set to strstart+1 and the comparison passed, so
            // scanMax - scan is the maximum number of bytes we can compare.
            // below we compare 8 bytes at a time, so first we compare
            // (scanMax - scan) % 8 bytes, so the remainder is a multiple of 8
            switch ((scanMax - scan) % 8) {
                case 1:
                    if (window[++scan] == window[++match])
                        break;
                    break;
                case 2:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
                case 3:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
                case 4:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
                case 5:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
                case 6:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
                case 7:
                    if (window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match]
                        && window[++scan] == window[++match])
                        break;
                    break;
            }
            if (window[scan] == window[match]) {
                /* We check for insufficient lookahead only every 8th comparison;
                 * the 256th check will be made at strstart + 258 unless lookahead is
                 * exhausted first.
                 */
                do {
                    if (scan == scanMax) {
                        ++scan; // advance to first position not matched
                        ++match;
                        break;
                    }
                } while (window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]
                    && window[++scan] == window[++match]);
            }
            if (scan - this.strstart > this.matchLen) {
                this.matchStart = curMatch;
                this.matchLen = scan - this.strstart;
                if (this.matchLen >= niceLength) {
                    break;
                }
                scan_end1 = window[scan - 1];
                scan_end = window[scan];
            }
            curMatch = (prev[curMatch & DeflaterConstants.WMASK] & 0xffff);
        } while (curMatch > limit && 0 !== --chainLength);
        return this.matchLen >= DeflaterConstants.MIN_MATCH;
    }
    /**
     * Inserts the current string in the head hash and returns the previous
     * value for this hash.
     * @returns The previous hash value
     */
    insertString() {
        let match;
        let hash = ((this.insertHashIndex << DeflaterConstants.HASH_SHIFT) ^ this.window[this.strstart + (DeflaterConstants.MIN_MATCH - 1)]) & DeflaterConstants.HASH_MASK;
        match = this.head[hash];
        this.prev[this.strstart & DeflaterConstants.WMASK] = match;
        this.head[hash] = this.strstart;
        this.insertHashIndex = hash;
        return match & 0xffff;
    }
    /**
     * Fill the window
     */
    fillWindow() {
        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (this.strstart >= DeflaterConstants.WSIZE + DeflaterConstants.MAX_DIST) {
            this.slideWindow();
        }
        /* If there is not enough lookahead, but still some input left,
         * read in the input
         */
        if (this.lookahead < DeflaterConstants.MIN_LOOKAHEAD && this.inputOff < this.inputEnd) {
            let more = 2 * DeflaterConstants.WSIZE - this.lookahead - this.strstart;
            if (more > this.inputEnd - this.inputOff) {
                more = this.inputEnd - this.inputOff;
            }
            this.window.set(this.inputBuf.subarray(this.inputOff, this.inputOff + more), this.strstart + this.lookahead);
            this.inputCrc.update(this.inputBuf, this.inputOff, more);
            this.inputOff += more;
            // this.totalIn += more;
            this.lookahead += more;
        }
        if (this.lookahead >= DeflaterConstants.MIN_MATCH) {
            this.updateHash();
        }
    }
    slideWindow() {
        this.window.set(this.window.subarray(DeflaterConstants.WSIZE, DeflaterConstants.WSIZE + DeflaterConstants.WSIZE), 0);
        this.matchStart -= DeflaterConstants.WSIZE;
        this.strstart -= DeflaterConstants.WSIZE;
        this.blockStart -= DeflaterConstants.WSIZE;
        // Slide the hash table (could be avoided with 32 bit values
        // at the expense of memory usage).
        for (let i = 0; i < DeflaterConstants.HASH_SIZE; ++i) {
            let m = this.head[i] & 0xffff;
            this.head[i] = (m >= DeflaterConstants.WSIZE ? (m - DeflaterConstants.WSIZE) : 0);
        }
        // Slide the prev table.
        for (let i = 0; i < DeflaterConstants.WSIZE; i++) {
            let m = this.prev[i] & 0xffff;
            this.prev[i] = (m >= DeflaterConstants.WSIZE ? (m - DeflaterConstants.WSIZE) : 0);
        }
    }
}
DeflaterEngine.TooFar = 4096;

// This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
// https://github.com/icsharpcode/SharpZipLib
/*
 * Copyright Â© 2000-2018 SharpZipLib Contributors
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
/**
 * This class is general purpose class for writing data to a buffer.
 * It allows you to write bits as well as bytes
 * Based on DeflaterPending.java
 */
class PendingBuffer {
    /**
     * construct instance using specified buffer size
     * @param bufferSize size to use for internal buffer
     */
    constructor(bufferSize) {
        this._start = 0;
        this._end = 0;
        this._bits = 0;
        /**
         * The number of bits written to the buffer
         */
        this.bitCount = 0;
        this._buffer = new Uint8Array(bufferSize);
    }
    /**
     * Indicates if buffer has been flushed
     */
    get isFlushed() {
        return this._end === 0;
    }
    /**
     * Clear internal state/buffers
     */
    reset() {
        this._start = 0;
        this._end = 0;
        this.bitCount = 0;
    }
    /**
     * Write a short value to internal buffer most significant byte first
     * @param s value to write
     */
    writeShortMSB(s) {
        this._buffer[this._end++] = (s >> 8) & 0xFF;
        this._buffer[this._end++] = s & 0xFF;
    }
    /**
     * Write a short value to buffer LSB first
     * @param value The value to write.
     */
    writeShort(value) {
        this._buffer[this._end++] = value;
        this._buffer[this._end++] = (value >> 8);
    }
    /**
     * Write a block of data to buffer
     * @param block data to write
     * @param offset offset of first byte to write
     * @param length number of bytes to write
     */
    writeBlock(block, offset, length) {
        this._buffer.set(block.subarray(offset, offset + length), this._end);
        this._end += length;
    }
    /**
     * Flushes the pending buffer into the given output array.  If the
     * output array is to small, only a partial flush is done.
     * @param output The output array.
     * @param offset The offset into output array.
     * @param length The maximum number of bytes to store.
     * @returns The number of bytes flushed.
     */
    flush(output, offset, length) {
        if (this.bitCount >= 8) {
            this._buffer[this._end++] = this._bits & 0xFF;
            this._bits >>= 8;
            this.bitCount -= 8;
        }
        if (length > this._end - this._start) {
            length = this._end - this._start;
            output.set(this._buffer.subarray(this._start, this._start + length), offset);
            this._start = 0;
            this._end = 0;
        }
        else {
            output.set(this._buffer.subarray(this._start, this._start + length), offset);
            this._start += length;
        }
        return length;
    }
    /**
     * Write bits to internal buffer
     * @param b source of bits
     * @param count number of bits to write
     */
    writeBits(b, count) {
        this._bits |= b << this.bitCount;
        this.bitCount += count;
        if (this.bitCount >= 16) {
            this._buffer[this._end++] = this._bits & 0xFF;
            this._buffer[this._end++] = (this._bits >> 8) & 0xFF;
            this._bits >>= 16;
            this.bitCount -= 16;
        }
    }
    /**
     * Align internal buffer on a byte boundary
     */
    alignToByte() {
        if (this.bitCount > 0) {
            this._buffer[this._end++] = this._bits & 0xFF;
            if (this.bitCount > 8) {
                this._buffer[this._end++] = (this._bits >> 8) & 0xFF;
            }
        }
        this._bits = 0;
        this.bitCount = 0;
    }
}

// This Deflate algorithm is based on the Deflater class of the SharpZipLib (MIT)
/**
 * This is the Deflater class.  The deflater class compresses input
 * with the deflate algorithm described in RFC 1951.  It has several
 * compression levels and three different strategies described below.
 *
 * This class is <i>not</i> thread safe.  This is inherent in the API, due
 * to the split of deflate and setInput.
 *
 * author of the original java version : Jochen Hoenicke
 */
class Deflater {
    /**
     * Creates a new deflater with given compression level
     * @param level the compression level, a value between NO_COMPRESSION and BEST_COMPRESSION.
     * beginning and the adler checksum at the end of the output.  This is
     * useful for the GZIP/PKZIP formats.
     */
    constructor() {
        this._state = 0;
        this._pending = new PendingBuffer(DeflaterConstants.PENDING_BUF_SIZE);
        this._engine = new DeflaterEngine(this._pending);
        this.reset();
    }
    get inputCrc() {
        return this._engine.inputCrc.value;
    }
    /**
     * Returns true, if the input buffer is empty.
     * You should then call setInput().
     * NOTE: This method can also return true when the stream
     * was finished.
     */
    get isNeedingInput() {
        return this._engine.needsInput();
    }
    /**
     * Returns true if the stream was finished and no more output bytes
     * are available.
     */
    get isFinished() {
        return (this._state == Deflater.FinishedState) && this._pending.isFlushed;
    }
    /**
     * Resets the deflater. The deflater acts afterwards as if it was
     * just created with the same compression level and strategy as it
     * had before.
     */
    reset() {
        this._state = Deflater.BusyState;
        this._pending.reset();
        this._engine.reset();
    }
    /**
     * Sets the data which should be compressed next.  This should be
     * only called when needsInput indicates that more input is needed.
     * The given byte array should not be changed, before needsInput() returns
     * true again.
     * @param input the buffer containing the input data.
     * @param offset the start of the data.
     * @param count the number of data bytes of input.
     */
    setInput(input, offset, count) {
        this._engine.setInput(input, offset, count);
    }
    /**
     * Deflates the current input block to the given array.
     * @param output Buffer to store the compressed data.
     * @param offset Offset into the output array.
     * @param length The maximum number of bytes that may be stored.
     * @returns The number of compressed bytes added to the output, or 0 if either
     * needsInput() or finished() returns true or length is zero.
     */
    deflate(output, offset, length) {
        let origLength = length;
        while (true) {
            let count = this._pending.flush(output, offset, length);
            offset += count;
            length -= count;
            if (length == 0 || this._state == Deflater.FinishedState) {
                break;
            }
            if (!this._engine.deflate((this._state & Deflater.IsFlushing) != 0, (this._state & Deflater.IsFinishing) != 0)) {
                switch (this._state) {
                    case Deflater.BusyState:
                        // We need more input now
                        return origLength - length;
                    case Deflater.FlushingState:
                        /* We have to supply some lookahead.  8 bit lookahead
                            * is needed by the zlib inflater, and we must fill
                            * the next byte, so that all bits are flushed.
                            */
                        let neededbits = 8 + ((-this._pending.bitCount) & 7);
                        while (neededbits > 0) {
                            /* write a static tree block consisting solely of
                                * an EOF:
                                */
                            this._pending.writeBits(2, 10);
                            neededbits -= 10;
                        }
                        this._state = Deflater.BusyState;
                        break;
                    case Deflater.FinishingState:
                        this._pending.alignToByte();
                        this._state = Deflater.FinishedState;
                        break;
                }
            }
        }
        return origLength - length;
    }
    /**
     * Finishes the deflater with the current input block.  It is an error
     * to give more input after this method was called.  This method must
     * be called to force all bytes to be flushed.
     */
    finish() {
        this._state |= (Deflater.IsFlushing | Deflater.IsFinishing);
    }
}
/*
 * The Deflater can do the following state transitions:
 *
 * (1) -> INIT_STATE   ----> INIT_FINISHING_STATE ---.
 *        /  | (2)      (5)                          |
 *       /   v          (5)                          |
 *   (3)| SETDICT_STATE ---> SETDICT_FINISHING_STATE |(3)
 *       \   | (3)                 |        ,--------'
 *        |  |                     | (3)   /
 *        v  v          (5)        v      v
 * (1) -> BUSY_STATE   ----> FINISHING_STATE
 *                                | (6)
 *                                v
 *                           FINISHED_STATE
 *    \_____________________________________/
 *                    | (7)
 *                    v
 *               CLOSED_STATE
 *
 * (1) If we should produce a header we start in INIT_STATE, otherwise
 *     we start in BUSY_STATE.
 * (2) A dictionary may be set only when we are in INIT_STATE, then
 *     we change the state as indicated.
 * (3) Whether a dictionary is set or not, on the first call of deflate
 *     we change to BUSY_STATE.
 * (4) -- intentionally left blank -- :)
 * (5) FINISHING_STATE is entered, when flush() is called to indicate that
 *     there is no more INPUT.  There are also states indicating, that
 *     the header wasn't written yet.
 * (6) FINISHED_STATE is entered, when everything has been flushed to the
 *     internal pending output buffer.
 * (7) At any time (7)
 *
 */
Deflater.IsFlushing = 0x04;
Deflater.IsFinishing = 0x08;
Deflater.BusyState = 0x10;
Deflater.FlushingState = 0x14;
Deflater.FinishingState = 0x1c;
Deflater.FinishedState = 0x1e;

class ZipCentralDirectoryHeader {
    constructor(entry, crc32, localHeaderOffset, compressionMode, compressedSize) {
        this.entry = entry;
        this.crc32 = crc32;
        this.localHeaderOffset = localHeaderOffset;
        this.compressionMode = compressionMode;
        this.compressedSize = compressedSize;
    }
}
class ZipWriter {
    constructor(data) {
        this._centralDirectoryHeaders = [];
        this._deflater = new Deflater();
        this._data = data;
    }
    writeEntry(entry) {
        // 4.3.7 local file header
        const compressionMode = ZipEntry.CompressionMethodDeflate;
        const compressedData = ByteBuffer.empty();
        const crc32 = this.compress(compressedData, entry.data, compressionMode);
        const compressedDataArray = compressedData.toArray();
        const directoryHeader = new ZipCentralDirectoryHeader(entry, crc32, this._data.bytesWritten, compressionMode, compressedData.length);
        this._centralDirectoryHeaders.push(directoryHeader);
        // Signature
        IOHelper.writeInt32LE(this._data, ZipEntry.LocalFileHeaderSignature);
        // Version
        IOHelper.writeUInt16LE(this._data, 10);
        // Flags
        IOHelper.writeUInt16LE(this._data, 0x0800);
        // Compression
        IOHelper.writeUInt16LE(this._data, compressionMode);
        // last mod file time
        IOHelper.writeInt16LE(this._data, 0);
        // last mod file date
        IOHelper.writeInt16LE(this._data, 0);
        // crc-32
        IOHelper.writeInt32LE(this._data, crc32);
        // compressed size
        IOHelper.writeInt32LE(this._data, compressedDataArray.length);
        // uncompressed size
        IOHelper.writeInt32LE(this._data, entry.data.length);
        // file name length
        IOHelper.writeInt16LE(this._data, entry.fullName.length);
        // extra field length
        IOHelper.writeInt16LE(this._data, 0);
        // file name (variable size)
        const fileNameBuffer = IOHelper.stringToBytes(entry.fullName);
        this._data.write(fileNameBuffer, 0, fileNameBuffer.length);
        // extra field (variable size)
        // <empty>
        // 4.3.8 File Data
        this._data.write(compressedDataArray, 0, compressedDataArray.length);
    }
    compress(output, data, compressionMode) {
        if (compressionMode != ZipEntry.CompressionMethodDeflate) {
            const crc = new Crc32();
            crc.update(data, 0, data.length);
            output.write(data, 0, data.length);
            return crc.value;
        }
        else {
            let buffer = new Uint8Array(512);
            // init deflater
            this._deflater.reset();
            // write data
            this._deflater.setInput(data, 0, data.length);
            while (!this._deflater.isNeedingInput) {
                const len = this._deflater.deflate(buffer, 0, buffer.length);
                if (len <= 0) {
                    break;
                }
                output.write(buffer, 0, len);
            }
            // let deflater finish up
            this._deflater.finish();
            while (!this._deflater.isFinished) {
                const len = this._deflater.deflate(buffer, 0, buffer.length);
                if (len <= 0) {
                    break;
                }
                output.write(buffer, 0, len);
            }
            return this._deflater.inputCrc;
        }
    }
    end() {
        const startOfCentralDirectory = this._data.bytesWritten;
        for (const header of this._centralDirectoryHeaders) {
            this.writeCentralDirectoryHeader(header);
        }
        const endOfCentralDirectory = this._data.bytesWritten;
        this.writeEndOfCentralDirectoryRecord(startOfCentralDirectory, endOfCentralDirectory);
    }
    writeEndOfCentralDirectoryRecord(startOfCentralDirectory, endOfCentralDirectory) {
        // Signature
        IOHelper.writeInt32LE(this._data, ZipEntry.EndOfCentralDirSignature);
        // number of this disk             2 bytes
        IOHelper.writeInt16LE(this._data, 0);
        // number of the disk with the
        // start of the central directory  2 bytes
        IOHelper.writeInt16LE(this._data, 0);
        // total number of entries in the
        // central directory on this disk  2 bytes
        IOHelper.writeInt16LE(this._data, this._centralDirectoryHeaders.length);
        // total number of entries in
        // the central directory           2 bytes
        IOHelper.writeInt16LE(this._data, this._centralDirectoryHeaders.length);
        // size of the central directory   4 bytes
        IOHelper.writeInt32LE(this._data, endOfCentralDirectory - startOfCentralDirectory);
        // offset of start of central
        // directory with respect to
        // the starting disk number        4 bytes
        IOHelper.writeInt32LE(this._data, startOfCentralDirectory);
        // .ZIP file comment length        2 bytes
        IOHelper.writeInt16LE(this._data, 0);
        // .ZIP file comment       (variable size)
        // <empty>
    }
    writeCentralDirectoryHeader(header) {
        // Signature
        IOHelper.writeInt32LE(this._data, ZipEntry.CentralFileHeaderSignature);
        // version made by
        IOHelper.writeUInt16LE(this._data, 10);
        // version needed to extract
        IOHelper.writeUInt16LE(this._data, 10);
        // Flags
        IOHelper.writeUInt16LE(this._data, 0x0800);
        // Compression
        IOHelper.writeUInt16LE(this._data, header.compressionMode);
        // last mod file time
        IOHelper.writeInt16LE(this._data, 0);
        // last mod file date
        IOHelper.writeInt16LE(this._data, 0);
        // crc-32
        IOHelper.writeInt32LE(this._data, header.crc32);
        // compressed size
        IOHelper.writeInt32LE(this._data, header.compressedSize);
        // uncompressed size
        IOHelper.writeInt32LE(this._data, header.entry.data.length);
        // file name length
        IOHelper.writeInt16LE(this._data, header.entry.fullName.length);
        // extra field length
        IOHelper.writeInt16LE(this._data, 0);
        // file comment length
        IOHelper.writeInt16LE(this._data, 0);
        // disk number start
        IOHelper.writeInt16LE(this._data, 0);
        // internal file attributes
        IOHelper.writeInt16LE(this._data, 0);
        // external file attributes
        IOHelper.writeInt32LE(this._data, 0);
        // relative offset of local header
        IOHelper.writeInt32LE(this._data, header.localHeaderOffset);
        // file name (variable size)
        const fileNameBuffer = IOHelper.stringToBytes(header.entry.fullName);
        this._data.write(fileNameBuffer, 0, fileNameBuffer.length);
        // extra field (variable size)
        // <empty>
        // file comment (variable size)
        // <empty>
    }
}

/**
 * This ScoreExporter can write Guitar Pro 7 (gp) files.
 */
class Gp7Exporter extends ScoreExporter {
    get name() {
        return 'Guitar Pro 7';
    }
    constructor() {
        super();
    }
    writeScore(score) {
        Logger.debug(this.name, 'Writing data entries');
        const gpifWriter = new GpifWriter();
        const gpifXml = gpifWriter.writeXml(score);
        const binaryStylesheet = BinaryStylesheet.writeForScore(score);
        const partConfiguration = PartConfiguration.writeForScore(score);
        Logger.debug(this.name, 'Writing ZIP entries');
        let fileSystem = new ZipWriter(this.data);
        fileSystem.writeEntry(new ZipEntry('VERSION', IOHelper.stringToBytes('7.0')));
        fileSystem.writeEntry(new ZipEntry('Content/', new Uint8Array(0)));
        fileSystem.writeEntry(new ZipEntry('Content/BinaryStylesheet', binaryStylesheet));
        fileSystem.writeEntry(new ZipEntry('Content/PartConfiguration', partConfiguration));
        fileSystem.writeEntry(new ZipEntry('Content/score.gpif', IOHelper.stringToBytes(gpifXml)));
        fileSystem.end();
    }
}

var index$4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ScoreExporter: ScoreExporter,
    Gp7Exporter: Gp7Exporter
});

var index$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BeatTickLookup: BeatTickLookup,
    MasterBarTickLookup: MasterBarTickLookup,
    MidiTickLookup: MidiTickLookup,
    MidiTickLookupFindBeatResult: MidiTickLookupFindBeatResult,
    MidiFile: MidiFile,
    get ControllerType () { return ControllerType; },
    MetaDataEvent: MetaDataEvent,
    MetaEvent: MetaEvent,
    get MetaEventType () { return MetaEventType; },
    MetaNumberEvent: MetaNumberEvent,
    MidiEvent: MidiEvent,
    get MidiEventType () { return MidiEventType; },
    Midi20PerNotePitchBendEvent: Midi20PerNotePitchBendEvent,
    SystemCommonEvent: SystemCommonEvent,
    get SystemCommonType () { return SystemCommonType; },
    SystemExclusiveEvent: SystemExclusiveEvent,
    MidiFileGenerator: MidiFileGenerator,
    AlphaSynthMidiFileHandler: AlphaSynthMidiFileHandler
});

var index$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get AccentuationType () { return AccentuationType; },
    get AccidentalType () { return AccidentalType; },
    get AutomationType () { return AutomationType; },
    Automation: Automation,
    Bar: Bar,
    Beat: Beat,
    BendPoint: BendPoint,
    get BendStyle () { return BendStyle; },
    get BendType () { return BendType; },
    get BrushType () { return BrushType; },
    Chord: Chord,
    get Clef () { return Clef; },
    Color: Color,
    get CrescendoType () { return CrescendoType; },
    get Duration () { return Duration; },
    get DynamicValue () { return DynamicValue; },
    get FermataType () { return FermataType; },
    Fermata: Fermata,
    get Fingers () { return Fingers; },
    get FontStyle () { return FontStyle; },
    Font: Font,
    get GraceType () { return GraceType; },
    get HarmonicType () { return HarmonicType; },
    InstrumentArticulation: InstrumentArticulation,
    JsonConverter: JsonConverter,
    get KeySignature () { return KeySignature; },
    get KeySignatureType () { return KeySignatureType; },
    Lyrics: Lyrics,
    MasterBar: MasterBar,
    get MusicFontSymbol () { return MusicFontSymbol; },
    Note: Note,
    get NoteAccidentalMode () { return NoteAccidentalMode; },
    get Ottavia () { return Ottavia; },
    get PickStroke () { return PickStroke; },
    PlaybackInformation: PlaybackInformation,
    RenderStylesheet: RenderStylesheet,
    RepeatGroup: RepeatGroup,
    Score: Score,
    Section: Section,
    get SimileMark () { return SimileMark; },
    get SlideInType () { return SlideInType; },
    get SlideOutType () { return SlideOutType; },
    Staff: Staff,
    Track: Track,
    get TripletFeel () { return TripletFeel; },
    Tuning: Tuning,
    TupletGroup: TupletGroup,
    get VibratoType () { return VibratoType; },
    Voice: Voice$1,
    get WhammyType () { return WhammyType; }
});

var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RenderFinishedEventArgs: RenderFinishedEventArgs,
    ScoreRenderer: ScoreRenderer,
    BarBounds: BarBounds,
    BeatBounds: BeatBounds,
    Bounds: Bounds,
    BoundsLookup: BoundsLookup,
    MasterBarBounds: MasterBarBounds,
    NoteBounds: NoteBounds,
    StaveGroupBounds: StaveGroupBounds
});

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AlphaSynth: AlphaSynth,
    CircularSampleBuffer: CircularSampleBuffer,
    PlaybackRange: PlaybackRange,
    get PlayerState () { return PlayerState; },
    PlayerStateChangedEventArgs: PlayerStateChangedEventArgs,
    PlaybackRangeChangedEventArgs: PlaybackRangeChangedEventArgs,
    PositionChangedEventArgs: PositionChangedEventArgs,
    MidiEventsPlayedEventArgs: MidiEventsPlayedEventArgs,
    ActiveBeatsChangedEventArgs: ActiveBeatsChangedEventArgs,
    AlphaSynthWebWorkerApi: AlphaSynthWebWorkerApi,
    AlphaSynthWebAudioOutputBase: AlphaSynthWebAudioOutputBase,
    AlphaSynthScriptProcessorOutput: AlphaSynthScriptProcessorOutput,
    AlphaSynthAudioWorkletOutput: AlphaSynthAudioWorkletOutput
});

export { AlphaTabApi, AlphaTabError, AlphaTabErrorType, CoreSettings, DisplaySettings, FileLoadError, FingeringMode, FormatError, ImporterSettings, LayoutMode, LogLevel, Logger, NotationMode, NotationSettings, PlayerSettings, ProgressEventArgs, RenderingResources, ResizeEventArgs, ScrollMode, Settings, StaveProfile, TabRhythmMode, VibratoPlaybackSettings, index$4 as exporter, index$5 as importer, VersionInfo as meta, index$3 as midi, index$2 as model, index$1 as rendering, index as synth };
